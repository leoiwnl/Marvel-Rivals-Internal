#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BattleStatisticsManager

#include "Basic.hpp"

#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"


namespace SDK
{

// PythonClass BattleStatisticsManager.PyBattleStatisticsManager
// 0x0000 (0x03E8 - 0x03E8)
class UPyBattleStatisticsManager : public UBattleStatisticsManager
{
public:
	void ReceiveTick(float DeltaTime);
	void OnInitialize();
	void OnShutdown();
	void K2_AbilityNormalLog(int32 PlayerUID, int32 HeroID, int32 AbilityID, const TMap<class FString, float>& KeyValue);
	void K2_AbilityHitRateLog(int32 PlayerUID, int32 HeroID, int32 AbilityID, const class FString& Key, float LanuchCnt, float HitCnt, float CritCnt);
	void K2_HeroSpecialLog(int32 PlayerUID, int32 HeroID, int32 LogID, float Value);
	void K2_ClearStatistics();
	TMap<class FString, float> GetHeroStatisticsInfo(int32 UID, int32 HeroID, const TArray<class FString>& FieldList);
	struct FMarvelPlayerStatisticsUnit K2_GetPlayerStatisticsUnit(int32 UID);
	struct FMarvelHeroStatisticsUnit K2_GetHeroStatisticsUnit(int32 UID, int32 HeroID);
	struct FMarvelBuffStatisticsUnit K2_GetBuffStatisticsUnit(int32 UID, int32 HeroID, int32 BuffID);
	struct FMarvelAbilityStatisticsUnit K2_GetAbilityStatisticsUnit(int32 UID, int32 HeroID, int32 AbilityID);
	void PyOnActorTakeDamage(class AActor* InInstigator, class AActor* InTarget, const struct FAttributeModifierParameter& ModifierParameter, const struct FGlobalEventExtraData& ExtraData);
	void PyOnActorTakeHealth(class AActor* InInstigator, class AActor* InTarget, const struct FAttributeModifierParameter& InModifierParameter, const struct FGlobalEventExtraData& ExtraData);
	void OnActorDefendDamage(class AActor* Instigator, class AActor* Target, const struct FAttributeModifierHandle& ParameterHandle, const struct FGlobalEventExtraData& ExtraData, int32 AbilityShieldID, int32 ShieldSessionID, int32 AbilitySourceID, int32 SourceSeesionID);
	void PyOnActorDeathForLevel(int32 KillerTeam, int32 VictimTeam, int32 KillReason);
	void OnActorUseHealPack(class AActor* Source, const class FString& HealPackName, int32 HealPackType, float ChargeTime, float HealPackTreat, float HealthBeforUse);
	void OnBattlePend();
	void OnBattleLoad();
	void OnBattlePrepare();
	void OnBattleFight();
	void OnBattleQuit();
	void OnBattleEnd();
	void UploadBattle();
	void OnRoundStart();
	void OnRoundPrepare();
	void OnRoundFight();
	void OnTransitionStart();
	void OnTransitionEnd();
	void OnPlayerKill(int32 KillerUID, int32 TargetUID);
	void OnMatchStateChanged(EMatchState MatchState);
	void PyOnAddPlayerState(class AMarvelPlayerState* PlayerState);
	void PyOnDelPlayerState(class AMarvelPlayerState* PlayerState);
	void OnHealRefreshed(const class FString& heal_name);
	void TracePosition();
	void LogPosition(bool Force);
	void PyOnDestructionTakeDamage(const struct FDestructionDamageInfoContext& Context, const struct FAttributeModifierParameter& ModifierParameter, const struct FDestructionExtraInfo& ExtraInfo);
	void PyOnPresetDestructionLevelChanged(class UPresetDestructionStatisticsUnit* StatisticsUnit, float AchieveTime, bool bRootLevel);
	void OnLevelObjectTrigger(const struct FLevelObjectEventExtraData& ExtraData);
	void PyOnRecordHeroDeathInfo(struct FHeroDeathInfoLog* DeathInfo);
	void PyOnRecordFirstEnterBattle(struct FFirstEnterBattleInfo* BattleInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyBattleStatisticsManager">();
	}
	static class UPyBattleStatisticsManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyBattleStatisticsManager>();
	}
};

}

