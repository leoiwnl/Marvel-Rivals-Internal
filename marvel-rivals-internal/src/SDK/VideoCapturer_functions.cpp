#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: VideoCapturer

#include "Basic.hpp"

#include "VideoCapturer_classes.hpp"
#include "VideoCapturer_parameters.hpp"


namespace SDK
{

// Function VideoCapturer.VideoCapturerFunctionLibrary.CaptureVideoAndSave
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// int32                                   Milliseconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UVideoCapturerFunctionLibrary::CaptureVideoAndSave(int32 Milliseconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VideoCapturerFunctionLibrary", "CaptureVideoAndSave");

	Params::VideoCapturerFunctionLibrary_CaptureVideoAndSave Parms{};

	Parms.Milliseconds = Milliseconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function VideoCapturer.VideoCapturerFunctionLibrary.LaunchCapturer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           TargetDirectory                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           SourceDirectory                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UVideoCapturerFunctionLibrary::LaunchCapturer(const class FString& Filename, const class FString& TargetDirectory, const class FString& SourceDirectory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VideoCapturerFunctionLibrary", "LaunchCapturer");

	Params::VideoCapturerFunctionLibrary_LaunchCapturer Parms{};

	Parms.Filename = std::move(Filename);
	Parms.TargetDirectory = std::move(TargetDirectory);
	Parms.SourceDirectory = std::move(SourceDirectory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function VideoCapturer.VideoCapturerFunctionLibrary.StopCapturer
// (Final, Native, Static, Public, BlueprintCallable)

void UVideoCapturerFunctionLibrary::StopCapturer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("VideoCapturerFunctionLibrary", "StopCapturer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

