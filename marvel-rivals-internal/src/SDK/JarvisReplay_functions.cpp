#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: JarvisReplay

#include "Basic.hpp"

#include "JarvisReplay_classes.hpp"
#include "JarvisReplay_parameters.hpp"


namespace SDK
{

// Function JarvisReplay.JarvisReplayComponent.PlayRecord
// (Final, Native, Public, BlueprintCallable)

void UJarvisReplayComponent::PlayRecord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JarvisReplayComponent", "PlayRecord");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function JarvisReplay.JarvisReplayComponent.StartRecord
// (Final, Native, Public, BlueprintCallable)

void UJarvisReplayComponent::StartRecord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JarvisReplayComponent", "StartRecord");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function JarvisReplay.JarvisReplayComponent.StopRecord
// (Final, Native, Public, BlueprintCallable)

void UJarvisReplayComponent::StopRecord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JarvisReplayComponent", "StopRecord");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function JarvisReplay.JarvisReplaySubsystem.LocalRecordJarvisReplay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           FriendlyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJarvisReplaySubsystem::LocalRecordJarvisReplay(const class FString& Name_0, const class FString& FriendlyName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JarvisReplaySubsystem", "LocalRecordJarvisReplay");

	Params::JarvisReplaySubsystem_LocalRecordJarvisReplay Parms{};

	Parms.Name_0 = std::move(Name_0);
	Parms.FriendlyName = std::move(FriendlyName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JarvisReplay.JarvisReplaySubsystem.PlayJarvisReplay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           DemoURL                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIsNetFile                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJarvisReplaySubsystem::PlayJarvisReplay(const class FString& DemoURL, bool bIsNetFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JarvisReplaySubsystem", "PlayJarvisReplay");

	Params::JarvisReplaySubsystem_PlayJarvisReplay Parms{};

	Parms.DemoURL = std::move(DemoURL);
	Parms.bIsNetFile = bIsNetFile;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JarvisReplay.JarvisReplaySubsystem.PlayJarvisReplaySequence
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FString>                   ReplayIDSequence                                       (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   InLoopTimes                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   InReplayInterval                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInQuitAppOnEnd                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UJarvisReplaySubsystem::PlayJarvisReplaySequence(const TArray<class FString>& ReplayIDSequence, int32 InLoopTimes, float InReplayInterval, bool bInQuitAppOnEnd)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JarvisReplaySubsystem", "PlayJarvisReplaySequence");

	Params::JarvisReplaySubsystem_PlayJarvisReplaySequence Parms{};

	Parms.ReplayIDSequence = std::move(ReplayIDSequence);
	Parms.InLoopTimes = InLoopTimes;
	Parms.InReplayInterval = InReplayInterval;
	Parms.bInQuitAppOnEnd = bInQuitAppOnEnd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function JarvisReplay.JarvisReplaySubsystem.RecordJarvisReplay
// (Final, Native, Public, BlueprintCallable)

void UJarvisReplaySubsystem::RecordJarvisReplay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JarvisReplaySubsystem", "RecordJarvisReplay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function JarvisReplay.JarvisReplaySubsystem.CopyReplayIDToClipboard
// (Final, Exec, Native, Public, Const)

void UJarvisReplaySubsystem::CopyReplayIDToClipboard() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JarvisReplaySubsystem", "CopyReplayIDToClipboard");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function JarvisReplay.JarvisReplaySubsystem.GetRecordingDemoCurrentTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UJarvisReplaySubsystem::GetRecordingDemoCurrentTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JarvisReplaySubsystem", "GetRecordingDemoCurrentTime");

	Params::JarvisReplaySubsystem_GetRecordingDemoCurrentTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JarvisReplay.JarvisReplaySubsystem.GetRecordingReplayID
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UJarvisReplaySubsystem::GetRecordingReplayID() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JarvisReplaySubsystem", "GetRecordingReplayID");

	Params::JarvisReplaySubsystem_GetRecordingReplayID Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JarvisReplay.JarvisReplaySubsystem.IsJarvisRecording
// (Final, Native, Public, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UJarvisReplaySubsystem::IsJarvisRecording() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JarvisReplaySubsystem", "IsJarvisRecording");

	Params::JarvisReplaySubsystem_IsJarvisRecording Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function JarvisReplay.JarvisReplaySubsystem.UploadReplayFile
// (Final, Native, Public, BlueprintCallable, Const)

void UJarvisReplaySubsystem::UploadReplayFile() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("JarvisReplaySubsystem", "UploadReplayFile");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

