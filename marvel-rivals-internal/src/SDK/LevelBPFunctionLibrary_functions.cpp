#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LevelBPFunctionLibrary

#include "Basic.hpp"

#include "LevelBPFunctionLibrary_classes.hpp"
#include "LevelBPFunctionLibrary_parameters.hpp"


namespace SDK
{

// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.AssaultHint
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           UINAME                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           RedSideHit                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           BlueSideHit                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::AssaultHint(const class FString& UINAME, const class FString& RedSideHit, const class FString& BlueSideHit, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "AssaultHint");

	Params::LevelBPFunctionLibrary_C_AssaultHint Parms{};

	Parms.UINAME = std::move(UINAME);
	Parms.RedSideHit = std::move(RedSideHit);
	Parms.BlueSideHit = std::move(BlueSideHit);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.AssaultObjectiveClose
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           CampName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           UINAME                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::AssaultObjectiveClose(const class FString& CampName, const class FString& UINAME, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "AssaultObjectiveClose");

	Params::LevelBPFunctionLibrary_C_AssaultObjectiveClose Parms{};

	Parms.CampName = std::move(CampName);
	Parms.UINAME = std::move(UINAME);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.AssaultObjectiveUnlock
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           CampName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           UINAME                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::AssaultObjectiveUnlock(const class FString& CampName, const class FString& UINAME, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "AssaultObjectiveUnlock");

	Params::LevelBPFunctionLibrary_C_AssaultObjectiveUnlock Parms{};

	Parms.CampName = std::move(CampName);
	Parms.UINAME = std::move(UINAME);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.ChangeControlColor
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           UINAME                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// EOwnershipType                          OwnerSide                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::ChangeControlColor(const class FString& UINAME, EOwnershipType OwnerSide, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "ChangeControlColor");

	Params::LevelBPFunctionLibrary_C_ChangeControlColor Parms{};

	Parms.UINAME = std::move(UINAME);
	Parms.OwnerSide = OwnerSide;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.GetHeroComponent
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPyHeroComponent*                 HeroComponent                                          (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::GetHeroComponent(class UObject* __WorldContext, class UPyHeroComponent** HeroComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "GetHeroComponent");

	Params::LevelBPFunctionLibrary_C_GetHeroComponent Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (HeroComponent != nullptr)
		*HeroComponent = Parms.HeroComponent;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.GetMarvelGameState
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AMarvelGameStateBP_C*             MarvelGameStateBP                                      (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::GetMarvelGameState(class UObject* __WorldContext, class AMarvelGameStateBP_C** MarvelGameStateBP)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "GetMarvelGameState");

	Params::LevelBPFunctionLibrary_C_GetMarvelGameState Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (MarvelGameStateBP != nullptr)
		*MarvelGameStateBP = Parms.MarvelGameStateBP;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.GetMarvelPlayerStateByUID
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   UID                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AMarvelPlayerStateBP_C*           NewParam                                               (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::GetMarvelPlayerStateByUID(int32 UID, class UObject* __WorldContext, class AMarvelPlayerStateBP_C** NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "GetMarvelPlayerStateByUID");

	Params::LevelBPFunctionLibrary_C_GetMarvelPlayerStateByUID Parms{};

	Parms.UID = UID;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.GetMarvelPlayerStateList
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class AMarvelPlayerStateBP_C*>   MarvelPlayerStateList                                  (Parm, OutParm)

void ULevelBPFunctionLibrary_C::GetMarvelPlayerStateList(class UObject* __WorldContext, TArray<class AMarvelPlayerStateBP_C*>* MarvelPlayerStateList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "GetMarvelPlayerStateList");

	Params::LevelBPFunctionLibrary_C_GetMarvelPlayerStateList Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (MarvelPlayerStateList != nullptr)
		*MarvelPlayerStateList = std::move(Parms.MarvelPlayerStateList);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.GetModularRuleComponent
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPyModularRuleComponent*          ModularRuleComponent                                   (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::GetModularRuleComponent(class UObject* __WorldContext, class UPyModularRuleComponent** ModularRuleComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "GetModularRuleComponent");

	Params::LevelBPFunctionLibrary_C_GetModularRuleComponent Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ModularRuleComponent != nullptr)
		*ModularRuleComponent = Parms.ModularRuleComponent;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.GetModularRuleControlComponent
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPyModularRuleControlComponent*   ModularRuleComponent                                   (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::GetModularRuleControlComponent(class UObject* __WorldContext, class UPyModularRuleControlComponent** ModularRuleComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "GetModularRuleControlComponent");

	Params::LevelBPFunctionLibrary_C_GetModularRuleControlComponent Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ModularRuleComponent != nullptr)
		*ModularRuleComponent = Parms.ModularRuleComponent;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.GetModuleUIComponent
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UPyModuleUIComponent*             ModuleUIComponent                                      (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::GetModuleUIComponent(class UObject* __WorldContext, class UPyModuleUIComponent** ModuleUIComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "GetModuleUIComponent");

	Params::LevelBPFunctionLibrary_C_GetModuleUIComponent Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (ModuleUIComponent != nullptr)
		*ModuleUIComponent = Parms.ModuleUIComponent;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.SetRoute
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<double>                          RouteLength                                            (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::SetRoute(TArray<double>& RouteLength, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "SetRoute");

	Params::LevelBPFunctionLibrary_C_SetRoute Parms{};

	Parms.RouteLength = std::move(RouteLength);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	RouteLength = std::move(Parms.RouteLength);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.UpdateAssaultBarProcess
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  CurrentProgress                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<double>                          OccupyProgressStage                                    (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class FString                           UINAME                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::UpdateAssaultBarProcess(double CurrentProgress, TArray<double>& OccupyProgressStage, const class FString& UINAME, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "UpdateAssaultBarProcess");

	Params::LevelBPFunctionLibrary_C_UpdateAssaultBarProcess Parms{};

	Parms.CurrentProgress = CurrentProgress;
	Parms.OccupyProgressStage = std::move(OccupyProgressStage);
	Parms.UINAME = std::move(UINAME);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	OccupyProgressStage = std::move(Parms.OccupyProgressStage);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.UpdateAssaultPieOccupy
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  CurrentProgress                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  TotalProgress                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CampName                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           UINAME                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::UpdateAssaultPieOccupy(double CurrentProgress, double TotalProgress, const class FString& CampName, const class FString& UINAME, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "UpdateAssaultPieOccupy");

	Params::LevelBPFunctionLibrary_C_UpdateAssaultPieOccupy Parms{};

	Parms.CurrentProgress = CurrentProgress;
	Parms.TotalProgress = TotalProgress;
	Parms.CampName = std::move(CampName);
	Parms.UINAME = std::move(UINAME);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.UpdateVictoryProgressText
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Percent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           UINAME                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::UpdateVictoryProgressText(double Percent, const class FString& UINAME, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "UpdateVictoryProgressText");

	Params::LevelBPFunctionLibrary_C_UpdateVictoryProgressText Parms{};

	Parms.Percent = Percent;
	Parms.UINAME = std::move(UINAME);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.修改条带颜色
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UMarvelSplineComponent*           MarvelSpline                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Color                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::修改条带颜色(class UMarvelSplineComponent* MarvelSpline, const struct FVector& Color, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "修改条带颜色");

	Params::LevelBPFunctionLibrary_C_修改条带颜色 Parms{};

	Parms.MarvelSpline = MarvelSpline;
	Parms.Color = std::move(Color);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.切换上个重生室
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::切换上个重生室(class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "切换上个重生室");

	Params::LevelBPFunctionLibrary_C_切换上个重生室 Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.切换下个重生室
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::切换下个重生室(class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "切换下个重生室");

	Params::LevelBPFunctionLibrary_C_切换下个重生室 Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.占点结束
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::占点结束(const class FString& 实例名, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "占点结束");

	Params::LevelBPFunctionLibrary_C_占点结束 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.对指定角色施加BUFF
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BuffID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           ActorList                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::对指定角色施加BUFF(int32 BuffID, TArray<int32>& ActorList, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "对指定角色施加BUFF");

	Params::LevelBPFunctionLibrary_C_对指定角色施加BUFF Parms{};

	Parms.BuffID = BuffID;
	Parms.ActorList = std::move(ActorList);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	ActorList = std::move(Parms.ActorList);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.对指定角色移除BUFF
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   BuffID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           ActorList                                              (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::对指定角色移除BUFF(int32 BuffID, TArray<int32>& ActorList, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "对指定角色移除BUFF");

	Params::LevelBPFunctionLibrary_C_对指定角色移除BUFF Parms{};

	Parms.BuffID = BuffID;
	Parms.ActorList = std::move(ActorList);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	ActorList = std::move(Parms.ActorList);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.广播关卡机关触发
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Trigger                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::广播关卡机关触发(class AActor* Trigger, class AActor* Target, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "广播关卡机关触发");

	Params::LevelBPFunctionLibrary_C_广播关卡机关触发 Parms{};

	Parms.Trigger = Trigger;
	Parms.Target = Target;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.开关克拉克门
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    开关                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::开关克拉克门(const class FString& 实例名, bool 开关, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "开关克拉克门");

	Params::LevelBPFunctionLibrary_C_开关克拉克门 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.开关 = 开关;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.快速充能玩家大招
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarvelBaseCharacter*             Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::快速充能玩家大招(class AMarvelBaseCharacter* Character, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "快速充能玩家大招");

	Params::LevelBPFunctionLibrary_C_快速充能玩家大招 Parms{};

	Parms.Character = Character;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.播放环境音效(实例组件)
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           组件名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// TSoftObjectPtr<class UAkAudioEvent>     AudioEvent                                             (BlueprintVisible, BlueprintReadOnly, Parm, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::播放环境音效_实例组件_(const class FString& 实例名, const class FString& 组件名, TSoftObjectPtr<class UAkAudioEvent> AudioEvent, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "播放环境音效(实例组件)");

	Params::LevelBPFunctionLibrary_C_播放环境音效_实例组件_ Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.组件名 = std::move(组件名);
	Parms.AudioEvent = AudioEvent;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.改变据点状态 UI
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   Index_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           UI_NAME                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::改变据点状态_UI(int32 Index_0, const class FString& UI_NAME, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "改变据点状态 UI");

	Params::LevelBPFunctionLibrary_C_改变据点状态_UI Parms{};

	Parms.Index_0 = Index_0;
	Parms.UI_NAME = std::move(UI_NAME);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.攻防点结束
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// EBattleSide                             胜利方                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::攻防点结束(const class FString& 实例名, EBattleSide 胜利方, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "攻防点结束");

	Params::LevelBPFunctionLibrary_C_攻防点结束 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.胜利方 = 胜利方;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.是否进攻方(客户端)
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    NewParam                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::是否进攻方_客户端_(class UObject* __WorldContext, bool* NewParam)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "是否进攻方(客户端)");

	Params::LevelBPFunctionLibrary_C_是否进攻方_客户端_ Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (NewParam != nullptr)
		*NewParam = Parms.NewParam;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.显示 UI
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           UI_NAME                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// double                                  Duration_Time                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   Player_UID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::显示_UI(const class FString& UI_NAME, double Duration_Time, int32 Player_UID, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "显示 UI");

	Params::LevelBPFunctionLibrary_C_显示_UI Parms{};

	Parms.UI_NAME = std::move(UI_NAME);
	Parms.Duration_Time = Duration_Time;
	Parms.Player_UID = Player_UID;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.隐藏浮标
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           ActorName                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Hidden                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::隐藏浮标(const class FString& ActorName, bool Hidden, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "隐藏浮标");

	Params::LevelBPFunctionLibrary_C_隐藏浮标 Parms{};

	Parms.ActorName = std::move(ActorName);
	Parms.Hidden = Hidden;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.显示通用文本UI
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           Input                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           UI_NAME                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// double                                  DurationTime                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::显示通用文本UI(const class FString& Input, const class FString& UI_NAME, double DurationTime, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "显示通用文本UI");

	Params::LevelBPFunctionLibrary_C_显示通用文本UI Parms{};

	Parms.Input = std::move(Input);
	Parms.UI_NAME = std::move(UI_NAME);
	Parms.DurationTime = DurationTime;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.更新进度条 UI
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Percent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           UI_NAME                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::更新进度条_UI(double Percent, const class FString& UI_NAME, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "更新进度条 UI");

	Params::LevelBPFunctionLibrary_C_更新进度条_UI Parms{};

	Parms.Percent = Percent;
	Parms.UI_NAME = std::move(UI_NAME);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.更新饼状UI
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  Percent                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           UI_NAME                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::更新饼状UI(double Percent, const class FString& UI_NAME, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "更新饼状UI");

	Params::LevelBPFunctionLibrary_C_更新饼状UI Parms{};

	Parms.Percent = Percent;
	Parms.UI_NAME = std::move(UI_NAME);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.最近是否有攻击方在车边
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    存在                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::最近是否有攻击方在车边(class UObject* __WorldContext, bool* 存在)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "最近是否有攻击方在车边");

	Params::LevelBPFunctionLibrary_C_最近是否有攻击方在车边 Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (存在 != nullptr)
		*存在 = Parms.存在;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.最近是否有防守方在车边
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    存在                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::最近是否有防守方在车边(class UObject* __WorldContext, bool* 存在)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "最近是否有防守方在车边");

	Params::LevelBPFunctionLibrary_C_最近是否有防守方在车边 Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (存在 != nullptr)
		*存在 = Parms.存在;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.根据人数设置占点占领速度
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::根据人数设置占点占领速度(const class FString& 实例名, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "根据人数设置占点占领速度");

	Params::LevelBPFunctionLibrary_C_根据人数设置占点占领速度 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.根据人数设置占点占领速度_MineControl
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::根据人数设置占点占领速度_MineControl(const class FString& 实例名, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "根据人数设置占点占领速度_MineControl");

	Params::LevelBPFunctionLibrary_C_根据人数设置占点占领速度_MineControl Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.根据攻方人数设置攻防点速度
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::根据攻方人数设置攻防点速度(const class FString& 实例名, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "根据攻方人数设置攻防点速度");

	Params::LevelBPFunctionLibrary_C_根据攻方人数设置攻防点速度 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.模块化创建 AI玩家
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   HeroID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// EBattleSide                             BattleSide                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          position                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FRotator                         Rotation                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor)
// class FString                           Name_0                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           TreePath                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FVector                          RelivePosition                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  ReliveTime                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsScore                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Actor                                                  (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::模块化创建_AI玩家(int32 HeroID, EBattleSide BattleSide, const struct FVector& position, const struct FRotator& Rotation, const class FString& Name_0, const class FString& TreePath, const struct FVector& RelivePosition, double ReliveTime, bool IsScore, class UObject* __WorldContext, class AActor** Actor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "模块化创建 AI玩家");

	Params::LevelBPFunctionLibrary_C_模块化创建_AI玩家 Parms{};

	Parms.HeroID = HeroID;
	Parms.BattleSide = BattleSide;
	Parms.position = std::move(position);
	Parms.Rotation = std::move(Rotation);
	Parms.Name_0 = std::move(Name_0);
	Parms.TreePath = std::move(TreePath);
	Parms.RelivePosition = std::move(RelivePosition);
	Parms.ReliveTime = ReliveTime;
	Parms.IsScore = IsScore;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Actor != nullptr)
		*Actor = Parms.Actor;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.模块化选择英雄界面
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   UID                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::模块化选择英雄界面(int32 UID, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "模块化选择英雄界面");

	Params::LevelBPFunctionLibrary_C_模块化选择英雄界面 Parms{};

	Parms.UID = UID;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.消除玩家所有技能 CD一次
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AMarvelBaseCharacter*             Character                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::消除玩家所有技能_CD一次(class AMarvelBaseCharacter* Character, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "消除玩家所有技能 CD一次");

	Params::LevelBPFunctionLibrary_C_消除玩家所有技能_CD一次 Parms{};

	Parms.Character = Character;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.激活控制组件
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::激活控制组件(const class FString& 实例名, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "激活控制组件");

	Params::LevelBPFunctionLibrary_C_激活控制组件 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.激活推车组件
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::激活推车组件(class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "激活推车组件");

	Params::LevelBPFunctionLibrary_C_激活推车组件 Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.激活攻防组件
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::激活攻防组件(const class FString& 实例名, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "激活攻防组件");

	Params::LevelBPFunctionLibrary_C_激活攻防组件 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取全部玩家
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           OutputList                                             (Parm, OutParm)

void ULevelBPFunctionLibrary_C::获取全部玩家(class UObject* __WorldContext, TArray<int32>* OutputList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取全部玩家");

	Params::LevelBPFunctionLibrary_C_获取全部玩家 Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OutputList != nullptr)
		*OutputList = std::move(Parms.OutputList);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取关卡定时器剩余时间
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           定时器名                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  剩余时间                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::获取关卡定时器剩余时间(const class FString& 定时器名, class UObject* __WorldContext, double* 剩余时间)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取关卡定时器剩余时间");

	Params::LevelBPFunctionLibrary_C_获取关卡定时器剩余时间 Parms{};

	Parms.定时器名 = std::move(定时器名);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (剩余时间 != nullptr)
		*剩余时间 = Parms.剩余时间;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取关卡定时器过去时间
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           定时器名                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  过去时间                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::获取关卡定时器过去时间(const class FString& 定时器名, class UObject* __WorldContext, double* 过去时间)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取关卡定时器过去时间");

	Params::LevelBPFunctionLibrary_C_获取关卡定时器过去时间 Parms{};

	Parms.定时器名 = std::move(定时器名);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (过去时间 != nullptr)
		*过去时间 = Parms.过去时间;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取加时状态
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   加时状态                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::获取加时状态(class UObject* __WorldContext, int32* 加时状态)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取加时状态");

	Params::LevelBPFunctionLibrary_C_获取加时状态 Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (加时状态 != nullptr)
		*加时状态 = Parms.加时状态;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取占点人数
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// EBattleSide                             阵营                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   人数                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::获取占点人数(const class FString& 实例名, EBattleSide 阵营, class UObject* __WorldContext, int32* 人数)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取占点人数");

	Params::LevelBPFunctionLibrary_C_获取占点人数 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.阵营 = 阵营;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (人数 != nullptr)
		*人数 = Parms.人数;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取占点占领进度
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  进度                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::获取占点占领进度(const class FString& 实例名, class UObject* __WorldContext, double* 进度)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取占点占领进度");

	Params::LevelBPFunctionLibrary_C_获取占点占领进度 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (进度 != nullptr)
		*进度 = Parms.进度;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取占点占领阵营
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EOwnershipType                          当前阵营                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::获取占点占领阵营(const class FString& 实例名, class UObject* __WorldContext, EOwnershipType* 当前阵营)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取占点占领阵营");

	Params::LevelBPFunctionLibrary_C_获取占点占领阵营 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (当前阵营 != nullptr)
		*当前阵营 = Parms.当前阵营;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取占点胜利进度
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  进度                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::获取占点胜利进度(const class FString& 实例名, class UObject* __WorldContext, double* 进度)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取占点胜利进度");

	Params::LevelBPFunctionLibrary_C_获取占点胜利进度 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (进度 != nullptr)
		*进度 = Parms.进度;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取实例
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Result                                                 (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::获取实例(const class FString& 实例名, class UObject* __WorldContext, class AActor** Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取实例");

	Params::LevelBPFunctionLibrary_C_获取实例 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取当前游戏阶段
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EMatchState                             MatchState                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::获取当前游戏阶段(class UObject* __WorldContext, EMatchState* MatchState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取当前游戏阶段");

	Params::LevelBPFunctionLibrary_C_获取当前游戏阶段 Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (MatchState != nullptr)
		*MatchState = Parms.MatchState;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取指定存活状态玩家
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EPlayerLivingState                      PlayerLivingState                                      (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           PlayerUIDList                                          (Parm, OutParm)

void ULevelBPFunctionLibrary_C::获取指定存活状态玩家(EPlayerLivingState PlayerLivingState, class UObject* __WorldContext, TArray<int32>* PlayerUIDList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取指定存活状态玩家");

	Params::LevelBPFunctionLibrary_C_获取指定存活状态玩家 Parms{};

	Parms.PlayerLivingState = PlayerLivingState;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (PlayerUIDList != nullptr)
		*PlayerUIDList = std::move(Parms.PlayerUIDList);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取指定阵营玩家
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// EBattleSide                             BattleSide                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int32>                           PlayerUIDList                                          (Parm, OutParm)

void ULevelBPFunctionLibrary_C::获取指定阵营玩家(EBattleSide BattleSide, class UObject* __WorldContext, TArray<int32>* PlayerUIDList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取指定阵营玩家");

	Params::LevelBPFunctionLibrary_C_获取指定阵营玩家 Parms{};

	Parms.BattleSide = BattleSide;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (PlayerUIDList != nullptr)
		*PlayerUIDList = std::move(Parms.PlayerUIDList);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取推车
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APyPayload*                       Payload                                                (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::获取推车(class UObject* __WorldContext, class APyPayload** Payload)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取推车");

	Params::LevelBPFunctionLibrary_C_获取推车 Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Payload != nullptr)
		*Payload = Parms.Payload;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取攻防点
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APyObjective*                     Objective                                              (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::获取攻防点(const class FString& 实例名, class UObject* __WorldContext, class APyObjective** Objective)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取攻防点");

	Params::LevelBPFunctionLibrary_C_获取攻防点 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Objective != nullptr)
		*Objective = Parms.Objective;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取攻防点速度
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  速度                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::获取攻防点速度(const class FString& 实例名, class UObject* __WorldContext, double* 速度)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取攻防点速度");

	Params::LevelBPFunctionLibrary_C_获取攻防点速度 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (速度 != nullptr)
		*速度 = Parms.速度;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取玩家存活状态
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   UID                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EPlayerLivingState                      PlayerLivingState                                      (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::获取玩家存活状态(int32 UID, class UObject* __WorldContext, EPlayerLivingState* PlayerLivingState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取玩家存活状态");

	Params::LevelBPFunctionLibrary_C_获取玩家存活状态 Parms{};

	Parms.UID = UID;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (PlayerLivingState != nullptr)
		*PlayerLivingState = Parms.PlayerLivingState;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取玩家战斗信息
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   UID                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   击杀次数                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   连杀                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   助攻次数                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   死亡次数                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  主武器命中率                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  总伤害                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  总治疗                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  总承伤                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::获取玩家战斗信息(int32 UID, class UObject* __WorldContext, int32* 击杀次数, int32* 连杀, int32* 助攻次数, int32* 死亡次数, double* 主武器命中率, double* 总伤害, double* 总治疗, double* 总承伤)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取玩家战斗信息");

	Params::LevelBPFunctionLibrary_C_获取玩家战斗信息 Parms{};

	Parms.UID = UID;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (击杀次数 != nullptr)
		*击杀次数 = Parms.击杀次数;

	if (连杀 != nullptr)
		*连杀 = Parms.连杀;

	if (助攻次数 != nullptr)
		*助攻次数 = Parms.助攻次数;

	if (死亡次数 != nullptr)
		*死亡次数 = Parms.死亡次数;

	if (主武器命中率 != nullptr)
		*主武器命中率 = Parms.主武器命中率;

	if (总伤害 != nullptr)
		*总伤害 = Parms.总伤害;

	if (总治疗 != nullptr)
		*总治疗 = Parms.总治疗;

	if (总承伤 != nullptr)
		*总承伤 = Parms.总承伤;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取玩家所选择英雄
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   UID                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int32                                   HeroID                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::获取玩家所选择英雄(int32 UID, class UObject* __WorldContext, int32* HeroID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取玩家所选择英雄");

	Params::LevelBPFunctionLibrary_C_获取玩家所选择英雄 Parms{};

	Parms.UID = UID;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (HeroID != nullptr)
		*HeroID = Parms.HeroID;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取玩家阵营
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   UID                                                    (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EBattleSide                             BattleSide                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::获取玩家阵营(int32 UID, class UObject* __WorldContext, EBattleSide* BattleSide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取玩家阵营");

	Params::LevelBPFunctionLibrary_C_获取玩家阵营 Parms{};

	Parms.UID = UID;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (BattleSide != nullptr)
		*BattleSide = Parms.BattleSide;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取移动Actor倒数剩余时间
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  进度                                                   (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::获取移动Actor倒数剩余时间(const class FString& 实例名, class UObject* __WorldContext, double* 进度)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取移动Actor倒数剩余时间");

	Params::LevelBPFunctionLibrary_C_获取移动Actor倒数剩余时间 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (进度 != nullptr)
		*进度 = Parms.进度;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取规则组件（旧）
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UClass*                           Class_0                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UActorComponent*                  Component                                              (Parm, OutParm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::获取规则组件_旧_(class UClass* Class_0, class UObject* __WorldContext, class UActorComponent** Component)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取规则组件（旧）");

	Params::LevelBPFunctionLibrary_C_获取规则组件_旧_ Parms{};

	Parms.Class_0 = Class_0;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Component != nullptr)
		*Component = Parms.Component;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取路线
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class APyPayloadTrace*                  PayloadTrace                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::获取路线(const class FString& 实例名, class UObject* __WorldContext, class APyPayloadTrace** PayloadTrace)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取路线");

	Params::LevelBPFunctionLibrary_C_获取路线 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (PayloadTrace != nullptr)
		*PayloadTrace = Parms.PayloadTrace;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取载具占领方
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// EOwnershipType                          OwnerSide                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::获取载具占领方(class UObject* __WorldContext, EOwnershipType* OwnerSide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取载具占领方");

	Params::LevelBPFunctionLibrary_C_获取载具占领方 Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (OwnerSide != nullptr)
		*OwnerSide = Parms.OwnerSide;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.获取选择指定英雄玩家
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// int32                                   HeroID                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<int64>                           PlayerUIDList                                          (Parm, OutParm)

void ULevelBPFunctionLibrary_C::获取选择指定英雄玩家(int32 HeroID, class UObject* __WorldContext, TArray<int64>* PlayerUIDList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "获取选择指定英雄玩家");

	Params::LevelBPFunctionLibrary_C_获取选择指定英雄玩家 Parms{};

	Parms.HeroID = HeroID;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (PlayerUIDList != nullptr)
		*PlayerUIDList = std::move(Parms.PlayerUIDList);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.蜘蛛零下落
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::蜘蛛零下落(const class FString& 实例名, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "蜘蛛零下落");

	Params::LevelBPFunctionLibrary_C_蜘蛛零下落 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.蜘蛛零禁锢弱化
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::蜘蛛零禁锢弱化(const class FString& 实例名, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "蜘蛛零禁锢弱化");

	Params::LevelBPFunctionLibrary_C_蜘蛛零禁锢弱化 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.蜘蛛零随机idle动画
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::蜘蛛零随机idle动画(const class FString& 实例名, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "蜘蛛零随机idle动画");

	Params::LevelBPFunctionLibrary_C_蜘蛛零随机idle动画 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.视频面板播放
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::视频面板播放(const class FString& 实例名, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "视频面板播放");

	Params::LevelBPFunctionLibrary_C_视频面板播放 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.触发 Actor组移动根据时间
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// double                                  移动时间                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  回复时间                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  延迟回复时间                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  角度偏移                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    是否初始位置旋转                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::触发_Actor组移动根据时间(const class FString& 实例名, double 移动时间, double 回复时间, double 延迟回复时间, double 角度偏移, bool 是否初始位置旋转, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "触发 Actor组移动根据时间");

	Params::LevelBPFunctionLibrary_C_触发_Actor组移动根据时间 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.移动时间 = 移动时间;
	Parms.回复时间 = 回复时间;
	Parms.延迟回复时间 = 延迟回复时间;
	Parms.角度偏移 = 角度偏移;
	Parms.是否初始位置旋转 = 是否初始位置旋转;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.触发Actor组移动
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// double                                  移动速度                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  回复速度                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  延迟回复时间                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  旋转角度                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    是否初始位置旋转                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::触发Actor组移动(const class FString& 实例名, double 移动速度, double 回复速度, double 延迟回复时间, double 旋转角度, bool 是否初始位置旋转, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "触发Actor组移动");

	Params::LevelBPFunctionLibrary_C_触发Actor组移动 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.移动速度 = 移动速度;
	Parms.回复速度 = 回复速度;
	Parms.延迟回复时间 = 延迟回复时间;
	Parms.旋转角度 = 旋转角度;
	Parms.是否初始位置旋转 = 是否初始位置旋转;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.触发多Actor组联动根据时间
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<struct FGroupMoveActorsContainner>实例组                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::触发多Actor组联动根据时间(TArray<struct FGroupMoveActorsContainner>& 实例组, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "触发多Actor组联动根据时间");

	Params::LevelBPFunctionLibrary_C_触发多Actor组联动根据时间 Parms{};

	Parms.实例组 = std::move(实例组);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	实例组 = std::move(Parms.实例组);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.设置加时状态
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EOvertimeState                          EOvertimeState                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::设置加时状态(EOvertimeState EOvertimeState, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "设置加时状态");

	Params::LevelBPFunctionLibrary_C_设置加时状态 Parms{};

	Parms.EOvertimeState = EOvertimeState;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.设置占点占领速度
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// double                                  速度                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::设置占点占领速度(const class FString& 实例名, double 速度, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "设置占点占领速度");

	Params::LevelBPFunctionLibrary_C_设置占点占领速度 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.速度 = 速度;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.设置攻防点速度
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// double                                  速度                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::设置攻防点速度(const class FString& 实例名, double 速度, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "设置攻防点速度");

	Params::LevelBPFunctionLibrary_C_设置攻防点速度 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.速度 = 速度;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.设置载具速度
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  速度                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::设置载具速度(double 速度, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "设置载具速度");

	Params::LevelBPFunctionLibrary_C_设置载具速度 Parms{};

	Parms.速度 = 速度;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.设置重生室复活点
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           重生室名                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           重生点名                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::设置重生室复活点(const class FString& 重生室名, const class FString& 重生点名, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "设置重生室复活点");

	Params::LevelBPFunctionLibrary_C_设置重生室复活点 Parms{};

	Parms.重生室名 = std::move(重生室名);
	Parms.重生点名 = std::move(重生点名);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.设置重生室状态
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FString, bool>               BirthbaseState                                         (BlueprintVisible, BlueprintReadOnly, Parm)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::设置重生室状态(const TMap<class FString, bool>& BirthbaseState, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "设置重生室状态");

	Params::LevelBPFunctionLibrary_C_设置重生室状态 Parms{};

	Parms.BirthbaseState = std::move(BirthbaseState);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.载具开始回退
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::载具开始回退(class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "载具开始回退");

	Params::LevelBPFunctionLibrary_C_载具开始回退 Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.载具当前路线名
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           路线名                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::载具当前路线名(const class FString& 实例名, class UObject* __WorldContext, class FString* 路线名)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "载具当前路线名");

	Params::LevelBPFunctionLibrary_C_载具当前路线名 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (路线名 != nullptr)
		*路线名 = std::move(Parms.路线名);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.载具当前进度
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent, BlueprintPure)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  进度_百分比为整数_                                     (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::载具当前进度(class UObject* __WorldContext, double* 进度_百分比为整数_)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "载具当前进度");

	Params::LevelBPFunctionLibrary_C_载具当前进度 Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (进度_百分比为整数_ != nullptr)
		*进度_百分比为整数_ = Parms.进度_百分比为整数_;
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.载具根据攻方人数前进
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::载具根据攻方人数前进(class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "载具根据攻方人数前进");

	Params::LevelBPFunctionLibrary_C_载具根据攻方人数前进 Parms{};

	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.载具结束
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// EBattleSide                             胜利方                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::载具结束(const class FString& 实例名, EBattleSide 胜利方, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "载具结束");

	Params::LevelBPFunctionLibrary_C_载具结束 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.胜利方 = 胜利方;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.通过 ID播放音频(可带字幕)
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   语音ID1                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   语音ID2                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   语音ID3                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::通过_ID播放音频_可带字幕_(const class FString& 实例名, int32 语音ID1, int32 语音ID2, int32 语音ID3, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "通过 ID播放音频(可带字幕)");

	Params::LevelBPFunctionLibrary_C_通过_ID播放音频_可带字幕_ Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.语音ID1 = 语音ID1;
	Parms.语音ID2 = 语音ID2;
	Parms.语音ID3 = 语音ID3;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.重生室开门
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// EBattleSide                             阵营                                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::重生室开门(EBattleSide 阵营, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "重生室开门");

	Params::LevelBPFunctionLibrary_C_重生室开门 Parms{};

	Parms.阵营 = 阵营;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.重设占点参数
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// double                                  衰退速度                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  衰退延时                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  占领速度仅1人                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  占领速度仅2人                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  占领速度仅3人                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  占领速度仅4人                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  占领速度仅5人                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  占领速度仅6人                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::重设占点参数(const class FString& 实例名, double 衰退速度, double 衰退延时, double 占领速度仅1人, double 占领速度仅2人, double 占领速度仅3人, double 占领速度仅4人, double 占领速度仅5人, double 占领速度仅6人, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "重设占点参数");

	Params::LevelBPFunctionLibrary_C_重设占点参数 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.衰退速度 = 衰退速度;
	Parms.衰退延时 = 衰退延时;
	Parms.占领速度仅1人 = 占领速度仅1人;
	Parms.占领速度仅2人 = 占领速度仅2人;
	Parms.占领速度仅3人 = 占领速度仅3人;
	Parms.占领速度仅4人 = 占领速度仅4人;
	Parms.占领速度仅5人 = 占领速度仅5人;
	Parms.占领速度仅6人 = 占领速度仅6人;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.重设攻防点参数
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// double                                  衰退延迟                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  衰退速度                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  仅攻方1人                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  仅攻方2人                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  仅攻方3人                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  仅攻方4人                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  仅攻方5人                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  仅攻方6人                                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::重设攻防点参数(const class FString& 实例名, double 衰退延迟, double 衰退速度, double 仅攻方1人, double 仅攻方2人, double 仅攻方3人, double 仅攻方4人, double 仅攻方5人, double 仅攻方6人, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "重设攻防点参数");

	Params::LevelBPFunctionLibrary_C_重设攻防点参数 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.衰退延迟 = 衰退延迟;
	Parms.衰退速度 = 衰退速度;
	Parms.仅攻方1人 = 仅攻方1人;
	Parms.仅攻方2人 = 仅攻方2人;
	Parms.仅攻方3人 = 仅攻方3人;
	Parms.仅攻方4人 = 仅攻方4人;
	Parms.仅攻方5人 = 仅攻方5人;
	Parms.仅攻方6人 = 仅攻方6人;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.重设载具参数
// (Static, Public, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           实例名                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// double                                  回退速度                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  前进延迟                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  后退延迟                                               (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   车边BuffID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  仅攻方1人速度                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  仅攻方2人速度                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  仅攻方3人速度                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  仅攻方4人速度                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  仅攻方5人速度                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  仅攻方6人速度                                          (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::重设载具参数(const class FString& 实例名, double 回退速度, double 前进延迟, double 后退延迟, int32 车边BuffID, double 仅攻方1人速度, double 仅攻方2人速度, double 仅攻方3人速度, double 仅攻方4人速度, double 仅攻方5人速度, double 仅攻方6人速度, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "重设载具参数");

	Params::LevelBPFunctionLibrary_C_重设载具参数 Parms{};

	Parms.实例名 = std::move(实例名);
	Parms.回退速度 = 回退速度;
	Parms.前进延迟 = 前进延迟;
	Parms.后退延迟 = 后退延迟;
	Parms.车边BuffID = 车边BuffID;
	Parms.仅攻方1人速度 = 仅攻方1人速度;
	Parms.仅攻方2人速度 = 仅攻方2人速度;
	Parms.仅攻方3人速度 = 仅攻方3人速度;
	Parms.仅攻方4人速度 = 仅攻方4人速度;
	Parms.仅攻方5人速度 = 仅攻方5人速度;
	Parms.仅攻方6人速度 = 仅攻方6人速度;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}


// Function LevelBPFunctionLibrary.LevelBPFunctionLibrary_C.隐藏UI
// (Static, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           UI_NAME                                                (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   Player_UID                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void ULevelBPFunctionLibrary_C::隐藏UI(const class FString& UI_NAME, int32 Player_UID, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("LevelBPFunctionLibrary_C", "隐藏UI");

	Params::LevelBPFunctionLibrary_C_隐藏UI Parms{};

	Parms.UI_NAME = std::move(UI_NAME);
	Parms.Player_UID = Player_UID;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);
}

}

