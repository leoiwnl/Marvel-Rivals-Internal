#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyMarvelUserSetting

#include "Basic.hpp"

#include "PyMarvelUserSetting_classes.hpp"
#include "PyMarvelUserSetting_parameters.hpp"


namespace SDK
{

// PythonFunction PyMarvelUserSetting.PyMarvelUserSetting.TryLoadCtrlSettingFromConfig
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   HeroSculptID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bUpdateApplyData                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPyMarvelUserSetting::TryLoadCtrlSettingFromConfig(int32 HeroSculptID, bool bUpdateApplyData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyMarvelUserSetting", "TryLoadCtrlSettingFromConfig");

	Params::PyMarvelUserSetting_TryLoadCtrlSettingFromConfig Parms{};

	Parms.HeroSculptID = HeroSculptID;
	Parms.bUpdateApplyData = bUpdateApplyData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyMarvelUserSetting.PyMarvelUserSetting.TrySaveCtrlSettingToConfig
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   HeroID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bUpdateApplyData                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPyMarvelUserSetting::TrySaveCtrlSettingToConfig(int32 HeroID, bool bUpdateApplyData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyMarvelUserSetting", "TrySaveCtrlSettingToConfig");

	Params::PyMarvelUserSetting_TrySaveCtrlSettingToConfig Parms{};

	Parms.HeroID = HeroID;
	Parms.bUpdateApplyData = bUpdateApplyData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyMarvelUserSetting.PyMarvelUserSetting.TryChangeControllerProperty
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           PropName                                               (Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   HeroID                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bUpdateApplyData                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPyMarvelUserSetting::TryChangeControllerProperty(float Value, const class FString& PropName, int32 HeroID, bool bUpdateApplyData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyMarvelUserSetting", "TryChangeControllerProperty");

	Params::PyMarvelUserSetting_TryChangeControllerProperty Parms{};

	Parms.Value = Value;
	Parms.PropName = std::move(PropName);
	Parms.HeroID = HeroID;
	Parms.bUpdateApplyData = bUpdateApplyData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyMarvelUserSetting.PyMarvelUserSetting.TryLoadOtherHeroSettingFromConfig
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   HeroSculptID                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           SettingName                                            (Parm, ZeroConstructor, HasGetValueTypeHash)

void UPyMarvelUserSetting::TryLoadOtherHeroSettingFromConfig(int32 HeroSculptID, const class FString& SettingName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyMarvelUserSetting", "TryLoadOtherHeroSettingFromConfig");

	Params::PyMarvelUserSetting_TryLoadOtherHeroSettingFromConfig Parms{};

	Parms.HeroSculptID = HeroSculptID;
	Parms.SettingName = std::move(SettingName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyMarvelUserSetting.PyMarvelUserSetting.TrySetHpBarVisibleRule
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// int32                                   HpBarVisibleRule                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    bUpdateApplyData                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPyMarvelUserSetting::TrySetHpBarVisibleRule(int32 HpBarVisibleRule, bool bUpdateApplyData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyMarvelUserSetting", "TrySetHpBarVisibleRule");

	Params::PyMarvelUserSetting_TrySetHpBarVisibleRule Parms{};

	Parms.HpBarVisibleRule = HpBarVisibleRule;
	Parms.bUpdateApplyData = bUpdateApplyData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

