#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: KawaiiPhysics

#include "Basic.hpp"

#include "KawaiiPhysics_classes.hpp"
#include "KawaiiPhysics_parameters.hpp"


namespace SDK
{

// Function KawaiiPhysics.KawaiiPhysicsLibrary.ConvertToKawaiiPhysics
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FAnimNodeReference               Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// EAnimNodeReferenceConversionResult      Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::ConvertToKawaiiPhysics(const struct FAnimNodeReference& Node, EAnimNodeReferenceConversionResult* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "ConvertToKawaiiPhysics");

	Params::KawaiiPhysicsLibrary_ConvertToKawaiiPhysics Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (Result != nullptr)
		*Result = Parms.Result;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.ConvertToKawaiiPhysicsPure
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FAnimNodeReference               Node                                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    Result                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UKawaiiPhysicsLibrary::ConvertToKawaiiPhysicsPure(const struct FAnimNodeReference& Node, struct FKawaiiPhysicsReference* KawaiiPhysics, bool* Result)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "ConvertToKawaiiPhysicsPure");

	Params::KawaiiPhysicsLibrary_ConvertToKawaiiPhysicsPure Parms{};

	Parms.Node = std::move(Node);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (KawaiiPhysics != nullptr)
		*KawaiiPhysics = std::move(Parms.KawaiiPhysics);

	if (Result != nullptr)
		*Result = Parms.Result;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetAllowWorldCollision
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKawaiiPhysicsLibrary::GetAllowWorldCollision(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetAllowWorldCollision");

	Params::KawaiiPhysicsLibrary_GetAllowWorldCollision Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetDummyBoneLength
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UKawaiiPhysicsLibrary::GetDummyBoneLength(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetDummyBoneLength");

	Params::KawaiiPhysicsLibrary_GetDummyBoneLength Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetEnableWind
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKawaiiPhysicsLibrary::GetEnableWind(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetEnableWind");

	Params::KawaiiPhysicsLibrary_GetEnableWind Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetGravity
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UKawaiiPhysicsLibrary::GetGravity(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetGravity");

	Params::KawaiiPhysicsLibrary_GetGravity Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetNeedWarmUp
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UKawaiiPhysicsLibrary::GetNeedWarmUp(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetNeedWarmUp");

	Params::KawaiiPhysicsLibrary_GetNeedWarmUp Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetPhysicsSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsSettings           ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsSettings UKawaiiPhysicsLibrary::GetPhysicsSettings(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetPhysicsSettings");

	Params::KawaiiPhysicsLibrary_GetPhysicsSettings Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetTeleportDistanceThreshold
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UKawaiiPhysicsLibrary::GetTeleportDistanceThreshold(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetTeleportDistanceThreshold");

	Params::KawaiiPhysicsLibrary_GetTeleportDistanceThreshold Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetTeleportRotationThreshold
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UKawaiiPhysicsLibrary::GetTeleportRotationThreshold(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetTeleportRotationThreshold");

	Params::KawaiiPhysicsLibrary_GetTeleportRotationThreshold Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.GetWindScale
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UKawaiiPhysicsLibrary::GetWindScale(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "GetWindScale");

	Params::KawaiiPhysicsLibrary_GetWindScale Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.ResetDynamics
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::ResetDynamics(const struct FKawaiiPhysicsReference& KawaiiPhysics)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "ResetDynamics");

	Params::KawaiiPhysicsLibrary_ResetDynamics Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetAllowWorldCollision
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    AllowWorldCollision                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetAllowWorldCollision(const struct FKawaiiPhysicsReference& KawaiiPhysics, bool AllowWorldCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetAllowWorldCollision");

	Params::KawaiiPhysicsLibrary_SetAllowWorldCollision Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.AllowWorldCollision = AllowWorldCollision;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetDummyBoneLength
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   DummyBoneLength                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetDummyBoneLength(const struct FKawaiiPhysicsReference& KawaiiPhysics, float DummyBoneLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetDummyBoneLength");

	Params::KawaiiPhysicsLibrary_SetDummyBoneLength Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.DummyBoneLength = DummyBoneLength;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetEnableWind
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    EnableWind                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetEnableWind(const struct FKawaiiPhysicsReference& KawaiiPhysics, bool EnableWind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetEnableWind");

	Params::KawaiiPhysicsLibrary_SetEnableWind Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.EnableWind = EnableWind;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetGravity
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          Gravity                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetGravity(const struct FKawaiiPhysicsReference& KawaiiPhysics, const struct FVector& Gravity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetGravity");

	Params::KawaiiPhysicsLibrary_SetGravity Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.Gravity = std::move(Gravity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetNeedWarmUp
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    NeedWarmUp                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetNeedWarmUp(const struct FKawaiiPhysicsReference& KawaiiPhysics, bool NeedWarmUp)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetNeedWarmUp");

	Params::KawaiiPhysicsLibrary_SetNeedWarmUp Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.NeedWarmUp = NeedWarmUp;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetPhysicsSettings
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsSettings           PhysicsSettings                                        (Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetPhysicsSettings(const struct FKawaiiPhysicsReference& KawaiiPhysics, struct FKawaiiPhysicsSettings& PhysicsSettings)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetPhysicsSettings");

	Params::KawaiiPhysicsLibrary_SetPhysicsSettings Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.PhysicsSettings = std::move(PhysicsSettings);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	PhysicsSettings = std::move(Parms.PhysicsSettings);

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetTeleportDistanceThreshold
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TeleportDistanceThreshold                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetTeleportDistanceThreshold(const struct FKawaiiPhysicsReference& KawaiiPhysics, float TeleportDistanceThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetTeleportDistanceThreshold");

	Params::KawaiiPhysicsLibrary_SetTeleportDistanceThreshold Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.TeleportDistanceThreshold = TeleportDistanceThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetTeleportRotationThreshold
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   TeleportRotationThreshold                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetTeleportRotationThreshold(const struct FKawaiiPhysicsReference& KawaiiPhysics, float TeleportRotationThreshold)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetTeleportRotationThreshold");

	Params::KawaiiPhysicsLibrary_SetTeleportRotationThreshold Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.TeleportRotationThreshold = TeleportRotationThreshold;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function KawaiiPhysics.KawaiiPhysicsLibrary.SetWindScale
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FKawaiiPhysicsReference          KawaiiPhysics                                          (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// float                                   WindScale                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FKawaiiPhysicsReference          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FKawaiiPhysicsReference UKawaiiPhysicsLibrary::SetWindScale(const struct FKawaiiPhysicsReference& KawaiiPhysics, float WindScale)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("KawaiiPhysicsLibrary", "SetWindScale");

	Params::KawaiiPhysicsLibrary_SetWindScale Parms{};

	Parms.KawaiiPhysics = std::move(KawaiiPhysics);
	Parms.WindScale = WindScale;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

