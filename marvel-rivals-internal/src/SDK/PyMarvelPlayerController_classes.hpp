#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyMarvelPlayerController

#include "Basic.hpp"

#include "python_enums_structs.hpp"
#include "Marvel_structs.hpp"
#include "Marvel_classes.hpp"
#include "InputRecord_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// PythonClass PyMarvelPlayerController.PyMarvelPlayerController
// 0x0038 (0x11A0 - 0x1168)
class APyMarvelPlayerController : public AMarvelPlayerController
{
public:
	class APyMarvelAIController*                  ClientAIController;                                // 0x1168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputMappingContext*                   AbilityActionMappingContextBP;                     // 0x1170(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputMappingContext*                   OneSubmitActionMappingContextBP;                   // 0x1178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Key, const class FString& json_str)> OnClientReceiveJson;                               // 0x1180(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* npc_actor)> OnLevelNPCVoice;                                   // 0x1190(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void ReceiveBeginPlay();
	void OnCrashKeyPressed(const struct FKey& Key);
	void OnCrashKeyReleased(const struct FKey& Key);
	void OnTriggerCrashKeyPressed(const struct FKey& Key);
	void ReceiveEndPlay(EEndPlayReason EndPlayReason);
	void C_ChangeHeroInHeroTest();
	void C_ReportClientInactiveExit();
	void C_NotifyServerMapLoadFinish();
	void C_NotifySelectingResourceLoaded();
	void C_NotifyServerTryEnterSelect();
	void C_ChangeHero(int32 HeroID, int32 SkinID);
	void C_ChangeHeroIgnoreLimit(int32 HeroID);
	void C_ChangeAudioAi(int32 HeroID);
	void C_ThrowIC();
	void C_BuyShopItem(int32 ItemId);
	void C_SellShopItem(int32 ItemId);
	void C_UndoShop();
	void C_ChangeDelegateCmd(int32 Cmd);
	void C_VoteSelection(int32 idx);
	void ReqServerBuildSettings(const class FString& client_changelist);
	void RespServerBuildSettings(const class FString& Changelist, const class FString& BuildDate, const class FString& BranchName);
	void ClientFrameTick();
	void C_ReportFrameRate(int32 FrameCount);
	void ClientReceiveJson(const class FString& Key, const class FString& json_str);
	void S2CFrameRateResponse(int32 FrameCount);
	void OnCheckTag(const TArray<int32>& ServerTagNum, const TArray<int32>& ClientTagNum);
	void ServerDebugInput(const class FString& Cmd);
	void ClientReplyDebugInput(const class FString& msg);
	void ServerSetDebugIndex(int32 Index_0);
	void S2CPopSelectHeroPanel();
	void ResetDelayRespawnSelf();
	void RequestTrainComputerTrain(int32 train_no, int32 UID);
	void RequestTrainComputerAssist(int32 train_no, int32 UID);
	void RequestTrainComputerSpawnTrainHero(int32 train_no, int32 UID, int32 hero_id);
	void RequestTrainComputerSpawnCooperateHero(int32 train_no, int32 UID, int32 hero_id, const TArray<int32>& limit_hero_list, bool Clear, bool Reset);
	void teleport_post_process(class ATrainComputer* train_computer);
	void teleport_post_process_delay_finished(class ATrainComputer* train_computer);
	void close_enable_cameralag();
	void recover_enable_cameralag();
	void activate_interactable_actor(class AActor* Actor, bool Active);
	void on_destruction_post_process(class AActor* level_check_point);
	void ServerInteractingWithNPC(class AActor* npc_actor);
	void ServerInteractingWithNPCTags(const TArray<class FString>& Tags_0);
	void ServerHearingLevelVoice(EMarvelVoiceType voice_type, class AActor* Char, int32 voice_id, const class FText& voice_line, class AActor* to_char);
	void on_voice_end(class AActor* level_check_point, int32 voice_id);
	void on_controller_rotation_over(class AActor* level_check_point);
	void spawn_input_record_ai(const struct FAISpawnParam& ai_spawn_param, const class FString& record_name, EInputRecordPath record_path, bool discard_location_correction, bool loop_play);
	void stop_input_record_ai();
	void active_common_action_tip_cache_actor(class AActor* Actor);
	void show_portal_cooldown(class AActor* Portal, int32 Cooldown);
	void ServerWizardChangeTeamLeaderID(int32 UID);
	void ServerPlayerLaunchSurrenderVoted();
	void ServerPlayerSurrenderVoted(bool bAgree);
	void ClientPlayerSurrenderFailed(ESurrenderFailedReason SurrenderFailedReason);
	class FString GetStatsSavePath(int32 DataLength, bool bHistory);
	void ClientPlayerSurrenderSuccess();
	void ClientShowTutorialTips(int32 TipsID);

	void SendMessageToChatPanel(const class FString& Name_0, const class FString& Message, int32 MessageSide, int32 Timestamp, int32 ChannelType, int32 SpecialType) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyMarvelPlayerController">();
	}
	static class APyMarvelPlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<APyMarvelPlayerController>();
	}
};

}

