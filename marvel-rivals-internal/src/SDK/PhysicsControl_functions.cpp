#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PhysicsControl

#include "Basic.hpp"

#include "PhysicsControl_classes.hpp"
#include "PhysicsControl_parameters.hpp"


namespace SDK
{

// Function PhysicsControl.PhysicsControlComponent.AddBodyModifiersToSet
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPhysicsControlNames             NewSet                                                 (Parm, OutParm, NativeAccessSpecifierPublic)
// TArray<class FName>                     BodyModifiers                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::AddBodyModifiersToSet(struct FPhysicsControlNames* NewSet, const TArray<class FName>& BodyModifiers, const class FName Set)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "AddBodyModifiersToSet");

	Params::PhysicsControlComponent_AddBodyModifiersToSet Parms{};

	Parms.BodyModifiers = std::move(BodyModifiers);
	Parms.Set = Set;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NewSet != nullptr)
		*NewSet = std::move(Parms.NewSet);
}


// Function PhysicsControl.PhysicsControlComponent.AddBodyModifierToSet
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPhysicsControlNames             NewSet                                                 (Parm, OutParm, NativeAccessSpecifierPublic)
// class FName                             BodyModifier                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::AddBodyModifierToSet(struct FPhysicsControlNames* NewSet, const class FName BodyModifier, const class FName Set)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "AddBodyModifierToSet");

	Params::PhysicsControlComponent_AddBodyModifierToSet Parms{};

	Parms.BodyModifier = BodyModifier;
	Parms.Set = Set;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NewSet != nullptr)
		*NewSet = std::move(Parms.NewSet);
}


// Function PhysicsControl.PhysicsControlComponent.AddControlsToSet
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPhysicsControlNames             NewSet                                                 (Parm, OutParm, NativeAccessSpecifierPublic)
// TArray<class FName>                     Controls                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::AddControlsToSet(struct FPhysicsControlNames* NewSet, const TArray<class FName>& Controls, const class FName Set)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "AddControlsToSet");

	Params::PhysicsControlComponent_AddControlsToSet Parms{};

	Parms.Controls = std::move(Controls);
	Parms.Set = Set;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NewSet != nullptr)
		*NewSet = std::move(Parms.NewSet);
}


// Function PhysicsControl.PhysicsControlComponent.AddControlToSet
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPhysicsControlNames             NewSet                                                 (Parm, OutParm, NativeAccessSpecifierPublic)
// class FName                             Control                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::AddControlToSet(struct FPhysicsControlNames* NewSet, const class FName Control, const class FName Set)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "AddControlToSet");

	Params::PhysicsControlComponent_AddControlToSet Parms{};

	Parms.Control = Control;
	Parms.Set = Set;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (NewSet != nullptr)
		*NewSet = std::move(Parms.NewSet);
}


// Function PhysicsControl.PhysicsControlComponent.CreateBodyModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMeshComponent*                   MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicsMovementType                    MovementType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionEnabled                       CollisionType                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GravityMultiplier                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PhysicsBlendWeight                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseSkeletalAnimation                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateKinematicFromSimulation                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UPhysicsControlComponent::CreateBodyModifier(class UMeshComponent* MeshComponent, const class FName BoneName, const class FName Set, const EPhysicsMovementType MovementType, const ECollisionEnabled CollisionType, const float GravityMultiplier, const float PhysicsBlendWeight, const bool bUseSkeletalAnimation, const bool bUpdateKinematicFromSimulation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "CreateBodyModifier");

	Params::PhysicsControlComponent_CreateBodyModifier Parms{};

	Parms.MeshComponent = MeshComponent;
	Parms.BoneName = BoneName;
	Parms.Set = Set;
	Parms.MovementType = MovementType;
	Parms.CollisionType = CollisionType;
	Parms.GravityMultiplier = GravityMultiplier;
	Parms.PhysicsBlendWeight = PhysicsBlendWeight;
	Parms.bUseSkeletalAnimation = bUseSkeletalAnimation;
	Parms.bUpdateKinematicFromSimulation = bUpdateKinematicFromSimulation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.CreateBodyModifiersFromLimbBones
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPhysicsControlNames             AllBodyModifiers                                       (Parm, OutParm, NativeAccessSpecifierPublic)
// TMap<class FName, struct FPhysicsControlLimbBones>LimbBones                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EPhysicsMovementType                    MovementType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionEnabled                       CollisionType                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GravityMultiplier                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PhysicsBlendWeight                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseSkeletalAnimation                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateKinematicFromSimulation                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FName, struct FPhysicsControlNames>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FName, struct FPhysicsControlNames> UPhysicsControlComponent::CreateBodyModifiersFromLimbBones(struct FPhysicsControlNames* AllBodyModifiers, const TMap<class FName, struct FPhysicsControlLimbBones>& LimbBones, const EPhysicsMovementType MovementType, const ECollisionEnabled CollisionType, const float GravityMultiplier, const float PhysicsBlendWeight, const bool bUseSkeletalAnimation, const bool bUpdateKinematicFromSimulation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "CreateBodyModifiersFromLimbBones");

	Params::PhysicsControlComponent_CreateBodyModifiersFromLimbBones Parms{};

	Parms.LimbBones = std::move(LimbBones);
	Parms.MovementType = MovementType;
	Parms.CollisionType = CollisionType;
	Parms.GravityMultiplier = GravityMultiplier;
	Parms.PhysicsBlendWeight = PhysicsBlendWeight;
	Parms.bUseSkeletalAnimation = bUseSkeletalAnimation;
	Parms.bUpdateKinematicFromSimulation = bUpdateKinematicFromSimulation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AllBodyModifiers != nullptr)
		*AllBodyModifiers = std::move(Parms.AllBodyModifiers);

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.CreateBodyModifiersFromSkeletalMeshBelow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeSelf                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicsMovementType                    MovementType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionEnabled                       CollisionType                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GravityMultiplier                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PhysicsBlendWeight                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseSkeletalAnimation                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateKinematicFromSimulation                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UPhysicsControlComponent::CreateBodyModifiersFromSkeletalMeshBelow(class USkeletalMeshComponent* SkeletalMeshComponent, const class FName BoneName, const bool bIncludeSelf, const class FName Set, const EPhysicsMovementType MovementType, const ECollisionEnabled CollisionType, const float GravityMultiplier, const float PhysicsBlendWeight, const bool bUseSkeletalAnimation, const bool bUpdateKinematicFromSimulation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "CreateBodyModifiersFromSkeletalMeshBelow");

	Params::PhysicsControlComponent_CreateBodyModifiersFromSkeletalMeshBelow Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.BoneName = BoneName;
	Parms.bIncludeSelf = bIncludeSelf;
	Parms.Set = Set;
	Parms.MovementType = MovementType;
	Parms.CollisionType = CollisionType;
	Parms.GravityMultiplier = GravityMultiplier;
	Parms.PhysicsBlendWeight = PhysicsBlendWeight;
	Parms.bUseSkeletalAnimation = bUseSkeletalAnimation;
	Parms.bUpdateKinematicFromSimulation = bUpdateKinematicFromSimulation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.CreateControl
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UMeshComponent*                   ParentMeshComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParentBoneName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMeshComponent*                   ChildMeshComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ChildBoneName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPhysicsControlData              ControlData                                            (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FPhysicsControlTarget            ControlTarget                                          (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FPhysicsControlSettings          ControlSettings                                        (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             Set                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UPhysicsControlComponent::CreateControl(class UMeshComponent* ParentMeshComponent, class FName ParentBoneName, class UMeshComponent* ChildMeshComponent, const class FName ChildBoneName, const struct FPhysicsControlData& ControlData, const struct FPhysicsControlTarget& ControlTarget, const struct FPhysicsControlSettings& ControlSettings, class FName Set, const bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "CreateControl");

	Params::PhysicsControlComponent_CreateControl Parms{};

	Parms.ParentMeshComponent = ParentMeshComponent;
	Parms.ParentBoneName = ParentBoneName;
	Parms.ChildMeshComponent = ChildMeshComponent;
	Parms.ChildBoneName = ChildBoneName;
	Parms.ControlData = std::move(ControlData);
	Parms.ControlTarget = std::move(ControlTarget);
	Parms.ControlSettings = std::move(ControlSettings);
	Parms.Set = Set;
	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.CreateControlsAndBodyModifiersFromLimbBones
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPhysicsControlNames             AllWorldSpaceControls                                  (Parm, OutParm, NativeAccessSpecifierPublic)
// TMap<class FName, struct FPhysicsControlNames>LimbWorldSpaceControls                                 (Parm, OutParm, NativeAccessSpecifierPublic)
// struct FPhysicsControlNames             AllParentSpaceControls                                 (Parm, OutParm, NativeAccessSpecifierPublic)
// TMap<class FName, struct FPhysicsControlNames>LimbParentSpaceControls                                (Parm, OutParm, NativeAccessSpecifierPublic)
// struct FPhysicsControlNames             AllBodyModifiers                                       (Parm, OutParm, NativeAccessSpecifierPublic)
// TMap<class FName, struct FPhysicsControlNames>LimbBodyModifiers                                      (Parm, OutParm, NativeAccessSpecifierPublic)
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPhysicsControlLimbSetupData>LimbSetupData                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FPhysicsControlData              WorldSpaceControlData                                  (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FPhysicsControlSettings          WorldSpaceControlSettings                              (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bEnableWorldSpaceControls                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPhysicsControlData              ParentSpaceControlData                                 (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FPhysicsControlSettings          ParentSpaceControlSettings                             (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bEnableParentSpaceControls                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicsMovementType                    PhysicsMovementType                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GravityMultiplier                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PhysicsBlendWeight                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::CreateControlsAndBodyModifiersFromLimbBones(struct FPhysicsControlNames* AllWorldSpaceControls, TMap<class FName, struct FPhysicsControlNames>* LimbWorldSpaceControls, struct FPhysicsControlNames* AllParentSpaceControls, TMap<class FName, struct FPhysicsControlNames>* LimbParentSpaceControls, struct FPhysicsControlNames* AllBodyModifiers, TMap<class FName, struct FPhysicsControlNames>* LimbBodyModifiers, class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<struct FPhysicsControlLimbSetupData>& LimbSetupData, const struct FPhysicsControlData& WorldSpaceControlData, const struct FPhysicsControlSettings& WorldSpaceControlSettings, const bool bEnableWorldSpaceControls, const struct FPhysicsControlData& ParentSpaceControlData, const struct FPhysicsControlSettings& ParentSpaceControlSettings, const bool bEnableParentSpaceControls, const EPhysicsMovementType PhysicsMovementType, const float GravityMultiplier, const float PhysicsBlendWeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "CreateControlsAndBodyModifiersFromLimbBones");

	Params::PhysicsControlComponent_CreateControlsAndBodyModifiersFromLimbBones Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.LimbSetupData = std::move(LimbSetupData);
	Parms.WorldSpaceControlData = std::move(WorldSpaceControlData);
	Parms.WorldSpaceControlSettings = std::move(WorldSpaceControlSettings);
	Parms.bEnableWorldSpaceControls = bEnableWorldSpaceControls;
	Parms.ParentSpaceControlData = std::move(ParentSpaceControlData);
	Parms.ParentSpaceControlSettings = std::move(ParentSpaceControlSettings);
	Parms.bEnableParentSpaceControls = bEnableParentSpaceControls;
	Parms.PhysicsMovementType = PhysicsMovementType;
	Parms.GravityMultiplier = GravityMultiplier;
	Parms.PhysicsBlendWeight = PhysicsBlendWeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AllWorldSpaceControls != nullptr)
		*AllWorldSpaceControls = std::move(Parms.AllWorldSpaceControls);

	if (LimbWorldSpaceControls != nullptr)
		*LimbWorldSpaceControls = std::move(Parms.LimbWorldSpaceControls);

	if (AllParentSpaceControls != nullptr)
		*AllParentSpaceControls = std::move(Parms.AllParentSpaceControls);

	if (LimbParentSpaceControls != nullptr)
		*LimbParentSpaceControls = std::move(Parms.LimbParentSpaceControls);

	if (AllBodyModifiers != nullptr)
		*AllBodyModifiers = std::move(Parms.AllBodyModifiers);

	if (LimbBodyModifiers != nullptr)
		*LimbBodyModifiers = std::move(Parms.LimbBodyModifiers);
}


// Function PhysicsControl.PhysicsControlComponent.CreateControlsFromLimbBones
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPhysicsControlNames             AllControls                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// TMap<class FName, struct FPhysicsControlLimbBones>LimbBones                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// EPhysicsControlType                     ControlType                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPhysicsControlData              ControlData                                            (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FPhysicsControlSettings          ControlSettings                                        (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FName, struct FPhysicsControlNames>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FName, struct FPhysicsControlNames> UPhysicsControlComponent::CreateControlsFromLimbBones(struct FPhysicsControlNames* AllControls, const TMap<class FName, struct FPhysicsControlLimbBones>& LimbBones, const EPhysicsControlType ControlType, const struct FPhysicsControlData& ControlData, const struct FPhysicsControlSettings& ControlSettings, const bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "CreateControlsFromLimbBones");

	Params::PhysicsControlComponent_CreateControlsFromLimbBones Parms{};

	Parms.LimbBones = std::move(LimbBones);
	Parms.ControlType = ControlType;
	Parms.ControlData = std::move(ControlData);
	Parms.ControlSettings = std::move(ControlSettings);
	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AllControls != nullptr)
		*AllControls = std::move(Parms.AllControls);

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.CreateControlsFromLimbBonesAndConstraintProfile
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FPhysicsControlNames             AllControls                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// TMap<class FName, struct FPhysicsControlLimbBones>LimbBones                                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             ConstraintProfile                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FName, struct FPhysicsControlNames>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FName, struct FPhysicsControlNames> UPhysicsControlComponent::CreateControlsFromLimbBonesAndConstraintProfile(struct FPhysicsControlNames* AllControls, const TMap<class FName, struct FPhysicsControlLimbBones>& LimbBones, const class FName ConstraintProfile, const bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "CreateControlsFromLimbBonesAndConstraintProfile");

	Params::PhysicsControlComponent_CreateControlsFromLimbBonesAndConstraintProfile Parms{};

	Parms.LimbBones = std::move(LimbBones);
	Parms.ConstraintProfile = ConstraintProfile;
	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (AllControls != nullptr)
		*AllControls = std::move(Parms.AllControls);

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.CreateControlsFromSkeletalMesh
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     BoneNames                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EPhysicsControlType                     ControlType                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPhysicsControlData              ControlData                                            (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FPhysicsControlSettings          ControlSettings                                        (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UPhysicsControlComponent::CreateControlsFromSkeletalMesh(class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<class FName>& BoneNames, const EPhysicsControlType ControlType, const struct FPhysicsControlData& ControlData, const struct FPhysicsControlSettings& ControlSettings, const class FName Set, const bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "CreateControlsFromSkeletalMesh");

	Params::PhysicsControlComponent_CreateControlsFromSkeletalMesh Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.BoneNames = std::move(BoneNames);
	Parms.ControlType = ControlType;
	Parms.ControlData = std::move(ControlData);
	Parms.ControlSettings = std::move(ControlSettings);
	Parms.Set = Set;
	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.CreateControlsFromSkeletalMeshAndConstraintProfile
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     BoneNames                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             ConstraintProfile                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UPhysicsControlComponent::CreateControlsFromSkeletalMeshAndConstraintProfile(class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<class FName>& BoneNames, const class FName ConstraintProfile, const class FName Set, const bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "CreateControlsFromSkeletalMeshAndConstraintProfile");

	Params::PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfile Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.BoneNames = std::move(BoneNames);
	Parms.ConstraintProfile = ConstraintProfile;
	Parms.Set = Set;
	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.CreateControlsFromSkeletalMeshAndConstraintProfileBelow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeSelf                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ConstraintProfile                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UPhysicsControlComponent::CreateControlsFromSkeletalMeshAndConstraintProfileBelow(class USkeletalMeshComponent* SkeletalMeshComponent, const class FName BoneName, const bool bIncludeSelf, const class FName ConstraintProfile, const class FName Set, const bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "CreateControlsFromSkeletalMeshAndConstraintProfileBelow");

	Params::PhysicsControlComponent_CreateControlsFromSkeletalMeshAndConstraintProfileBelow Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.BoneName = BoneName;
	Parms.bIncludeSelf = bIncludeSelf;
	Parms.ConstraintProfile = ConstraintProfile;
	Parms.Set = Set;
	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.CreateControlsFromSkeletalMeshBelow
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bIncludeSelf                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicsControlType                     ControlType                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPhysicsControlData              ControlData                                            (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FPhysicsControlSettings          ControlSettings                                        (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UPhysicsControlComponent::CreateControlsFromSkeletalMeshBelow(class USkeletalMeshComponent* SkeletalMeshComponent, const class FName BoneName, const bool bIncludeSelf, const EPhysicsControlType ControlType, const struct FPhysicsControlData& ControlData, const struct FPhysicsControlSettings& ControlSettings, const class FName Set, const bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "CreateControlsFromSkeletalMeshBelow");

	Params::PhysicsControlComponent_CreateControlsFromSkeletalMeshBelow Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.BoneName = BoneName;
	Parms.bIncludeSelf = bIncludeSelf;
	Parms.ControlType = ControlType;
	Parms.ControlData = std::move(ControlData);
	Parms.ControlSettings = std::move(ControlSettings);
	Parms.Set = Set;
	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.CreateNamedBodyModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMeshComponent*                   MeshComponent                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicsMovementType                    MovementType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionEnabled                       CollisionType                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GravityMultiplier                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PhysicsBlendWeight                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseSkeletalAnimation                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateKinematicFromSimulation                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::CreateNamedBodyModifier(const class FName Name_0, class UMeshComponent* MeshComponent, const class FName BoneName, const class FName Set, const EPhysicsMovementType MovementType, const ECollisionEnabled CollisionType, const float GravityMultiplier, const float PhysicsBlendWeight, const bool bUseSkeletalAnimation, const bool bUpdateKinematicFromSimulation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "CreateNamedBodyModifier");

	Params::PhysicsControlComponent_CreateNamedBodyModifier Parms{};

	Parms.Name_0 = Name_0;
	Parms.MeshComponent = MeshComponent;
	Parms.BoneName = BoneName;
	Parms.Set = Set;
	Parms.MovementType = MovementType;
	Parms.CollisionType = CollisionType;
	Parms.GravityMultiplier = GravityMultiplier;
	Parms.PhysicsBlendWeight = PhysicsBlendWeight;
	Parms.bUseSkeletalAnimation = bUseSkeletalAnimation;
	Parms.bUpdateKinematicFromSimulation = bUpdateKinematicFromSimulation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.CreateNamedControl
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMeshComponent*                   ParentMeshComponent                                    (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParentBoneName                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMeshComponent*                   ChildMeshComponent                                     (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ChildBoneName                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPhysicsControlData              ControlData                                            (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FPhysicsControlTarget            ControlTarget                                          (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// struct FPhysicsControlSettings          ControlSettings                                        (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnabled                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::CreateNamedControl(class FName Name_0, class UMeshComponent* ParentMeshComponent, const class FName ParentBoneName, class UMeshComponent* ChildMeshComponent, const class FName ChildBoneName, const struct FPhysicsControlData& ControlData, const struct FPhysicsControlTarget& ControlTarget, const struct FPhysicsControlSettings& ControlSettings, const class FName Set, const bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "CreateNamedControl");

	Params::PhysicsControlComponent_CreateNamedControl Parms{};

	Parms.Name_0 = Name_0;
	Parms.ParentMeshComponent = ParentMeshComponent;
	Parms.ParentBoneName = ParentBoneName;
	Parms.ChildMeshComponent = ChildMeshComponent;
	Parms.ChildBoneName = ChildBoneName;
	Parms.ControlData = std::move(ControlData);
	Parms.ControlTarget = std::move(ControlTarget);
	Parms.ControlSettings = std::move(ControlSettings);
	Parms.Set = Set;
	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.DestroyBodyModifier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::DestroyBodyModifier(const class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "DestroyBodyModifier");

	Params::PhysicsControlComponent_DestroyBodyModifier Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.DestroyBodyModifiers
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::DestroyBodyModifiers(const TArray<class FName>& Names)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "DestroyBodyModifiers");

	Params::PhysicsControlComponent_DestroyBodyModifiers Parms{};

	Parms.Names = std::move(Names);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.DestroyBodyModifiersInSet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::DestroyBodyModifiersInSet(const class FName Set)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "DestroyBodyModifiersInSet");

	Params::PhysicsControlComponent_DestroyBodyModifiersInSet Parms{};

	Parms.Set = Set;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.DestroyControl
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::DestroyControl(const class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "DestroyControl");

	Params::PhysicsControlComponent_DestroyControl Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.DestroyControls
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::DestroyControls(const TArray<class FName>& Names)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "DestroyControls");

	Params::PhysicsControlComponent_DestroyControls Parms{};

	Parms.Names = std::move(Names);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.DestroyControlsInSet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::DestroyControlsInSet(const class FName Set)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "DestroyControlsInSet");

	Params::PhysicsControlComponent_DestroyControlsInSet Parms{};

	Parms.Set = Set;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.GetCachedBoneAngularVelocities
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     BoneNames                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector> UPhysicsControlComponent::GetCachedBoneAngularVelocities(const class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<class FName>& BoneNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "GetCachedBoneAngularVelocities");

	Params::PhysicsControlComponent_GetCachedBoneAngularVelocities Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.BoneNames = std::move(BoneNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.GetCachedBoneAngularVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UPhysicsControlComponent::GetCachedBoneAngularVelocity(const class USkeletalMeshComponent* SkeletalMeshComponent, const class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "GetCachedBoneAngularVelocity");

	Params::PhysicsControlComponent_GetCachedBoneAngularVelocity Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.GetCachedBoneOrientation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UPhysicsControlComponent::GetCachedBoneOrientation(const class USkeletalMeshComponent* SkeletalMeshComponent, const class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "GetCachedBoneOrientation");

	Params::PhysicsControlComponent_GetCachedBoneOrientation Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.GetCachedBoneOrientations
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     BoneNames                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FRotator>                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FRotator> UPhysicsControlComponent::GetCachedBoneOrientations(const class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<class FName>& BoneNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "GetCachedBoneOrientations");

	Params::PhysicsControlComponent_GetCachedBoneOrientations Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.BoneNames = std::move(BoneNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.GetCachedBonePosition
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UPhysicsControlComponent::GetCachedBonePosition(const class USkeletalMeshComponent* SkeletalMeshComponent, const class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "GetCachedBonePosition");

	Params::PhysicsControlComponent_GetCachedBonePosition Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.GetCachedBonePositions
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     BoneNames                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector> UPhysicsControlComponent::GetCachedBonePositions(const class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<class FName>& BoneNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "GetCachedBonePositions");

	Params::PhysicsControlComponent_GetCachedBonePositions Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.BoneNames = std::move(BoneNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.GetCachedBoneTransform
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTransform UPhysicsControlComponent::GetCachedBoneTransform(const class USkeletalMeshComponent* SkeletalMeshComponent, const class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "GetCachedBoneTransform");

	Params::PhysicsControlComponent_GetCachedBoneTransform Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.GetCachedBoneTransforms
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     BoneNames                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FTransform>               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FTransform> UPhysicsControlComponent::GetCachedBoneTransforms(const class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<class FName>& BoneNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "GetCachedBoneTransforms");

	Params::PhysicsControlComponent_GetCachedBoneTransforms Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.BoneNames = std::move(BoneNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.GetCachedBoneVelocities
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     BoneNames                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FVector> UPhysicsControlComponent::GetCachedBoneVelocities(const class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<class FName>& BoneNames)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "GetCachedBoneVelocities");

	Params::PhysicsControlComponent_GetCachedBoneVelocities Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.BoneNames = std::move(BoneNames);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.GetCachedBoneVelocity
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UPhysicsControlComponent::GetCachedBoneVelocity(const class USkeletalMeshComponent* SkeletalMeshComponent, const class FName BoneName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "GetCachedBoneVelocity");

	Params::PhysicsControlComponent_GetCachedBoneVelocity Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.BoneName = BoneName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.ResetBodyModifiersInSetToCachedBoneTransforms
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             SetName                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EResetToCachedTargetBehavior            Behavior                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::ResetBodyModifiersInSetToCachedBoneTransforms(const class FName SetName, const EResetToCachedTargetBehavior Behavior)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "ResetBodyModifiersInSetToCachedBoneTransforms");

	Params::PhysicsControlComponent_ResetBodyModifiersInSetToCachedBoneTransforms Parms{};

	Parms.SetName = SetName;
	Parms.Behavior = Behavior;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.ResetBodyModifiersToCachedBoneTransforms
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EResetToCachedTargetBehavior            Behavior                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::ResetBodyModifiersToCachedBoneTransforms(const TArray<class FName>& Names, const EResetToCachedTargetBehavior Behavior)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "ResetBodyModifiersToCachedBoneTransforms");

	Params::PhysicsControlComponent_ResetBodyModifiersToCachedBoneTransforms Parms{};

	Parms.Names = std::move(Names);
	Parms.Behavior = Behavior;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.ResetBodyModifierToCachedBoneTransform
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EResetToCachedTargetBehavior            Behavior                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::ResetBodyModifierToCachedBoneTransform(const class FName Name_0, const EResetToCachedTargetBehavior Behavior)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "ResetBodyModifierToCachedBoneTransform");

	Params::PhysicsControlComponent_ResetBodyModifierToCachedBoneTransform Parms{};

	Parms.Name_0 = Name_0;
	Parms.Behavior = Behavior;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.ResetControlPoint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::ResetControlPoint(const class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "ResetControlPoint");

	Params::PhysicsControlComponent_ResetControlPoint Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetBodyModifierCollisionType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionEnabled                       CollisionType                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetBodyModifierCollisionType(const class FName Name_0, const ECollisionEnabled CollisionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetBodyModifierCollisionType");

	Params::PhysicsControlComponent_SetBodyModifierCollisionType Parms{};

	Parms.Name_0 = Name_0;
	Parms.CollisionType = CollisionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetBodyModifierGravityMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GravityMultiplier                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetBodyModifierGravityMultiplier(const class FName Name_0, const float GravityMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetBodyModifierGravityMultiplier");

	Params::PhysicsControlComponent_SetBodyModifierGravityMultiplier Parms{};

	Parms.Name_0 = Name_0;
	Parms.GravityMultiplier = GravityMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetBodyModifierKinematicTarget
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          KinematicTargetPosition                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         KinematicTargetOrienation                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bMakeKinematic                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetBodyModifierKinematicTarget(const class FName Name_0, const struct FVector& KinematicTargetPosition, const struct FRotator& KinematicTargetOrienation, const bool bMakeKinematic)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetBodyModifierKinematicTarget");

	Params::PhysicsControlComponent_SetBodyModifierKinematicTarget Parms{};

	Parms.Name_0 = Name_0;
	Parms.KinematicTargetPosition = std::move(KinematicTargetPosition);
	Parms.KinematicTargetOrienation = std::move(KinematicTargetOrienation);
	Parms.bMakeKinematic = bMakeKinematic;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetBodyModifierMovementType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicsMovementType                    MovementType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetBodyModifierMovementType(const class FName Name_0, const EPhysicsMovementType MovementType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetBodyModifierMovementType");

	Params::PhysicsControlComponent_SetBodyModifierMovementType Parms{};

	Parms.Name_0 = Name_0;
	Parms.MovementType = MovementType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetBodyModifierPhysicsBlendWeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PhysicsBlendWeight                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetBodyModifierPhysicsBlendWeight(const class FName Name_0, const float PhysicsBlendWeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetBodyModifierPhysicsBlendWeight");

	Params::PhysicsControlComponent_SetBodyModifierPhysicsBlendWeight Parms{};

	Parms.Name_0 = Name_0;
	Parms.PhysicsBlendWeight = PhysicsBlendWeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersCollisionType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// ECollisionEnabled                       CollisionType                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetBodyModifiersCollisionType(const TArray<class FName>& Names, const ECollisionEnabled CollisionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetBodyModifiersCollisionType");

	Params::PhysicsControlComponent_SetBodyModifiersCollisionType Parms{};

	Parms.Names = std::move(Names);
	Parms.CollisionType = CollisionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersGravityMultiplier
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   GravityMultiplier                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetBodyModifiersGravityMultiplier(const TArray<class FName>& Names, const float GravityMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetBodyModifiersGravityMultiplier");

	Params::PhysicsControlComponent_SetBodyModifiersGravityMultiplier Parms{};

	Parms.Names = std::move(Names);
	Parms.GravityMultiplier = GravityMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersInSetCollisionType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ECollisionEnabled                       CollisionType                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetBodyModifiersInSetCollisionType(const class FName Set, const ECollisionEnabled CollisionType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetBodyModifiersInSetCollisionType");

	Params::PhysicsControlComponent_SetBodyModifiersInSetCollisionType Parms{};

	Parms.Set = Set;
	Parms.CollisionType = CollisionType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersInSetGravityMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   GravityMultiplier                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetBodyModifiersInSetGravityMultiplier(const class FName Set, const float GravityMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetBodyModifiersInSetGravityMultiplier");

	Params::PhysicsControlComponent_SetBodyModifiersInSetGravityMultiplier Parms{};

	Parms.Set = Set;
	Parms.GravityMultiplier = GravityMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersInSetMovementType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EPhysicsMovementType                    MovementType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetBodyModifiersInSetMovementType(const class FName Set, const EPhysicsMovementType MovementType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetBodyModifiersInSetMovementType");

	Params::PhysicsControlComponent_SetBodyModifiersInSetMovementType Parms{};

	Parms.Set = Set;
	Parms.MovementType = MovementType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersInSetPhysicsBlendWeight
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PhysicsBlendWeight                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetBodyModifiersInSetPhysicsBlendWeight(const class FName Set, const float PhysicsBlendWeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetBodyModifiersInSetPhysicsBlendWeight");

	Params::PhysicsControlComponent_SetBodyModifiersInSetPhysicsBlendWeight Parms{};

	Parms.Set = Set;
	Parms.PhysicsBlendWeight = PhysicsBlendWeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersInSetUpdateKinematicFromSimulation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateKinematicFromSimulation                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetBodyModifiersInSetUpdateKinematicFromSimulation(const class FName Set, const bool bUpdateKinematicFromSimulation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetBodyModifiersInSetUpdateKinematicFromSimulation");

	Params::PhysicsControlComponent_SetBodyModifiersInSetUpdateKinematicFromSimulation Parms{};

	Parms.Set = Set;
	Parms.bUpdateKinematicFromSimulation = bUpdateKinematicFromSimulation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersInSetUseSkeletalAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseSkeletalAnimation                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetBodyModifiersInSetUseSkeletalAnimation(const class FName Set, const bool bUseSkeletalAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetBodyModifiersInSetUseSkeletalAnimation");

	Params::PhysicsControlComponent_SetBodyModifiersInSetUseSkeletalAnimation Parms{};

	Parms.Set = Set;
	Parms.bUseSkeletalAnimation = bUseSkeletalAnimation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersMovementType
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// EPhysicsMovementType                    MovementType                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetBodyModifiersMovementType(const TArray<class FName>& Names, const EPhysicsMovementType MovementType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetBodyModifiersMovementType");

	Params::PhysicsControlComponent_SetBodyModifiersMovementType Parms{};

	Parms.Names = std::move(Names);
	Parms.MovementType = MovementType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersPhysicsBlendWeight
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   PhysicsBlendWeight                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetBodyModifiersPhysicsBlendWeight(const TArray<class FName>& Names, const float PhysicsBlendWeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetBodyModifiersPhysicsBlendWeight");

	Params::PhysicsControlComponent_SetBodyModifiersPhysicsBlendWeight Parms{};

	Parms.Names = std::move(Names);
	Parms.PhysicsBlendWeight = PhysicsBlendWeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersUpdateKinematicFromSimulation
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bUpdateKinematicFromSimulation                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetBodyModifiersUpdateKinematicFromSimulation(const TArray<class FName>& Names, const bool bUpdateKinematicFromSimulation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetBodyModifiersUpdateKinematicFromSimulation");

	Params::PhysicsControlComponent_SetBodyModifiersUpdateKinematicFromSimulation Parms{};

	Parms.Names = std::move(Names);
	Parms.bUpdateKinematicFromSimulation = bUpdateKinematicFromSimulation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetBodyModifiersUseSkeletalAnimation
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bUseSkeletalAnimation                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetBodyModifiersUseSkeletalAnimation(const TArray<class FName>& Names, const bool bUseSkeletalAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetBodyModifiersUseSkeletalAnimation");

	Params::PhysicsControlComponent_SetBodyModifiersUseSkeletalAnimation Parms{};

	Parms.Names = std::move(Names);
	Parms.bUseSkeletalAnimation = bUseSkeletalAnimation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetBodyModifierUpdateKinematicFromSimulation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUpdateKinematicFromSimulation                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetBodyModifierUpdateKinematicFromSimulation(const class FName Name_0, const bool bUpdateKinematicFromSimulation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetBodyModifierUpdateKinematicFromSimulation");

	Params::PhysicsControlComponent_SetBodyModifierUpdateKinematicFromSimulation Parms{};

	Parms.Name_0 = Name_0;
	Parms.bUpdateKinematicFromSimulation = bUpdateKinematicFromSimulation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetBodyModifierUseSkeletalAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseSkeletalAnimation                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetBodyModifierUseSkeletalAnimation(const class FName Name_0, const bool bUseSkeletalAnimation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetBodyModifierUseSkeletalAnimation");

	Params::PhysicsControlComponent_SetBodyModifierUseSkeletalAnimation Parms{};

	Parms.Name_0 = Name_0;
	Parms.bUseSkeletalAnimation = bUseSkeletalAnimation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetCachedBoneData
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BoneName                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       TM                                                     (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          Velocity                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          AngularVelocity                                        (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetCachedBoneData(const class USkeletalMeshComponent* SkeletalMeshComponent, const class FName BoneName, const struct FTransform& TM, const struct FVector& Velocity, const struct FVector& AngularVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetCachedBoneData");

	Params::PhysicsControlComponent_SetCachedBoneData Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.BoneName = BoneName;
	Parms.TM = std::move(TM);
	Parms.Velocity = std::move(Velocity);
	Parms.AngularVelocity = std::move(AngularVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlAngularData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Strength                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DampingRatio                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExtraDamping                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxTorque                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetControlAngularData(const class FName Name_0, const float Strength, const float DampingRatio, const float ExtraDamping, const float MaxTorque, const bool bEnableControl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlAngularData");

	Params::PhysicsControlComponent_SetControlAngularData Parms{};

	Parms.Name_0 = Name_0;
	Parms.Strength = Strength;
	Parms.DampingRatio = DampingRatio;
	Parms.ExtraDamping = ExtraDamping;
	Parms.MaxTorque = MaxTorque;
	Parms.bEnableControl = bEnableControl;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlAutoDisable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoDisable                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetControlAutoDisable(const class FName Name_0, const bool bAutoDisable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlAutoDisable");

	Params::PhysicsControlComponent_SetControlAutoDisable Parms{};

	Parms.Name_0 = Name_0;
	Parms.bAutoDisable = bAutoDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPhysicsControlData              ControlData                                            (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetControlData(const class FName Name_0, const struct FPhysicsControlData& ControlData, const bool bEnableControl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlData");

	Params::PhysicsControlComponent_SetControlData Parms{};

	Parms.Name_0 = Name_0;
	Parms.ControlData = std::move(ControlData);
	Parms.bEnableControl = bEnableControl;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlDatas
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FPhysicsControlData              ControlData                                            (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetControlDatas(const TArray<class FName>& Names, const struct FPhysicsControlData& ControlData, const bool bEnableControl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlDatas");

	Params::PhysicsControlComponent_SetControlDatas Parms{};

	Parms.Names = std::move(Names);
	Parms.ControlData = std::move(ControlData);
	Parms.bEnableControl = bEnableControl;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlDatasInSet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPhysicsControlData              ControlData                                            (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetControlDatasInSet(const class FName Set, const struct FPhysicsControlData& ControlData, const bool bEnableControl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlDatasInSet");

	Params::PhysicsControlComponent_SetControlDatasInSet Parms{};

	Parms.Set = Set;
	Parms.ControlData = std::move(ControlData);
	Parms.bEnableControl = bEnableControl;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlDisableCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDisableCollision                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetControlDisableCollision(const class FName Name_0, const bool bDisableCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlDisableCollision");

	Params::PhysicsControlComponent_SetControlDisableCollision Parms{};

	Parms.Name_0 = Name_0;
	Parms.bDisableCollision = bDisableCollision;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetControlEnabled(const class FName Name_0, const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlEnabled");

	Params::PhysicsControlComponent_SetControlEnabled Parms{};

	Parms.Name_0 = Name_0;
	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlLinearData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Strength                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DampingRatio                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ExtraDamping                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxForce                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetControlLinearData(const class FName Name_0, const float Strength, const float DampingRatio, const float ExtraDamping, const float MaxForce, const bool bEnableControl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlLinearData");

	Params::PhysicsControlComponent_SetControlLinearData Parms{};

	Parms.Name_0 = Name_0;
	Parms.Strength = Strength;
	Parms.DampingRatio = DampingRatio;
	Parms.ExtraDamping = ExtraDamping;
	Parms.MaxForce = MaxForce;
	Parms.bEnableControl = bEnableControl;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlMultiplier
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPhysicsControlMultiplier        ControlMultiplier                                      (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetControlMultiplier(const class FName Name_0, const struct FPhysicsControlMultiplier& ControlMultiplier, const bool bEnableControl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlMultiplier");

	Params::PhysicsControlComponent_SetControlMultiplier Parms{};

	Parms.Name_0 = Name_0;
	Parms.ControlMultiplier = std::move(ControlMultiplier);
	Parms.bEnableControl = bEnableControl;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlMultipliers
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FPhysicsControlMultiplier        ControlMultiplier                                      (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetControlMultipliers(const TArray<class FName>& Names, const struct FPhysicsControlMultiplier& ControlMultiplier, const bool bEnableControl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlMultipliers");

	Params::PhysicsControlComponent_SetControlMultipliers Parms{};

	Parms.Names = std::move(Names);
	Parms.ControlMultiplier = std::move(ControlMultiplier);
	Parms.bEnableControl = bEnableControl;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlMultipliersInSet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPhysicsControlMultiplier        ControlMultiplier                                      (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetControlMultipliersInSet(const class FName Set, const struct FPhysicsControlMultiplier& ControlMultiplier, const bool bEnableControl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlMultipliersInSet");

	Params::PhysicsControlComponent_SetControlMultipliersInSet Parms{};

	Parms.Set = Set;
	Parms.ControlMultiplier = std::move(ControlMultiplier);
	Parms.bEnableControl = bEnableControl;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlPoint
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          position                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetControlPoint(const class FName Name_0, const struct FVector& position)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlPoint");

	Params::PhysicsControlComponent_SetControlPoint Parms{};

	Parms.Name_0 = Name_0;
	Parms.position = std::move(position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlsAutoDisable
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bAutoDisable                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetControlsAutoDisable(const TArray<class FName>& Names, const bool bAutoDisable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlsAutoDisable");

	Params::PhysicsControlComponent_SetControlsAutoDisable Parms{};

	Parms.Names = std::move(Names);
	Parms.bAutoDisable = bAutoDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlsDisableCollision
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bDisableCollision                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetControlsDisableCollision(const TArray<class FName>& Names, const bool bDisableCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlsDisableCollision");

	Params::PhysicsControlComponent_SetControlsDisableCollision Parms{};

	Parms.Names = std::move(Names);
	Parms.bDisableCollision = bDisableCollision;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlsEnabled
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetControlsEnabled(const TArray<class FName>& Names, const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlsEnabled");

	Params::PhysicsControlComponent_SetControlsEnabled Parms{};

	Parms.Names = std::move(Names);
	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlsInSetAutoDisable
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAutoDisable                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetControlsInSetAutoDisable(const class FName Set, const bool bAutoDisable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlsInSetAutoDisable");

	Params::PhysicsControlComponent_SetControlsInSetAutoDisable Parms{};

	Parms.Set = Set;
	Parms.bAutoDisable = bAutoDisable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlsInSetDisableCollision
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bDisableCollision                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetControlsInSetDisableCollision(const class FName Set, const bool bDisableCollision)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlsInSetDisableCollision");

	Params::PhysicsControlComponent_SetControlsInSetDisableCollision Parms{};

	Parms.Set = Set;
	Parms.bDisableCollision = bDisableCollision;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlsInSetEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnable                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetControlsInSetEnabled(const class FName Set, const bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlsInSetEnabled");

	Params::PhysicsControlComponent_SetControlsInSetEnabled Parms{};

	Parms.Set = Set;
	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlsInSetUseSkeletalAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseSkeletalAnimation                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SkeletalAnimationVelocityMultiplier                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetControlsInSetUseSkeletalAnimation(const class FName Set, const bool bUseSkeletalAnimation, const float SkeletalAnimationVelocityMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlsInSetUseSkeletalAnimation");

	Params::PhysicsControlComponent_SetControlsInSetUseSkeletalAnimation Parms{};

	Parms.Set = Set;
	Parms.bUseSkeletalAnimation = bUseSkeletalAnimation;
	Parms.SkeletalAnimationVelocityMultiplier = SkeletalAnimationVelocityMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlsUseSkeletalAnimation
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    bUseSkeletalAnimation                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SkeletalAnimationVelocityMultiplier                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetControlsUseSkeletalAnimation(const TArray<class FName>& Names, const bool bUseSkeletalAnimation, const float SkeletalAnimationVelocityMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlsUseSkeletalAnimation");

	Params::PhysicsControlComponent_SetControlsUseSkeletalAnimation Parms{};

	Parms.Names = std::move(Names);
	Parms.bUseSkeletalAnimation = bUseSkeletalAnimation;
	Parms.SkeletalAnimationVelocityMultiplier = SkeletalAnimationVelocityMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlTarget
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPhysicsControlTarget            ControlTarget                                          (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetControlTarget(const class FName Name_0, const struct FPhysicsControlTarget& ControlTarget, const bool bEnableControl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlTarget");

	Params::PhysicsControlComponent_SetControlTarget Parms{};

	Parms.Name_0 = Name_0;
	Parms.ControlTarget = std::move(ControlTarget);
	Parms.bEnableControl = bEnableControl;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlTargetOrientation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Orientation                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   AngularVelocityDeltaTime                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bApplyControlPointToTarget                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetControlTargetOrientation(const class FName Name_0, const struct FRotator& Orientation, const float AngularVelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlTargetOrientation");

	Params::PhysicsControlComponent_SetControlTargetOrientation Parms{};

	Parms.Name_0 = Name_0;
	Parms.Orientation = std::move(Orientation);
	Parms.AngularVelocityDeltaTime = AngularVelocityDeltaTime;
	Parms.bEnableControl = bEnableControl;
	Parms.bApplyControlPointToTarget = bApplyControlPointToTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlTargetOrientations
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRotator                         Orientation                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   AngularVelocityDeltaTime                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bApplyControlPointToTarget                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetControlTargetOrientations(const TArray<class FName>& Names, const struct FRotator& Orientation, const float AngularVelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlTargetOrientations");

	Params::PhysicsControlComponent_SetControlTargetOrientations Parms{};

	Parms.Names = std::move(Names);
	Parms.Orientation = std::move(Orientation);
	Parms.AngularVelocityDeltaTime = AngularVelocityDeltaTime;
	Parms.bEnableControl = bEnableControl;
	Parms.bApplyControlPointToTarget = bApplyControlPointToTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlTargetOrientationsFromArray
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FRotator>                 Orientations                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   VelocityDeltaTime                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bApplyControlPointToTarget                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetControlTargetOrientationsFromArray(const TArray<class FName>& Names, const TArray<struct FRotator>& Orientations, const float VelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlTargetOrientationsFromArray");

	Params::PhysicsControlComponent_SetControlTargetOrientationsFromArray Parms{};

	Parms.Names = std::move(Names);
	Parms.Orientations = std::move(Orientations);
	Parms.VelocityDeltaTime = VelocityDeltaTime;
	Parms.bEnableControl = bEnableControl;
	Parms.bApplyControlPointToTarget = bApplyControlPointToTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlTargetOrientationsInSet
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             SetName                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Orientation                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   AngularVelocityDeltaTime                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bApplyControlPointToTarget                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetControlTargetOrientationsInSet(const class FName SetName, const struct FRotator& Orientation, const float AngularVelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlTargetOrientationsInSet");

	Params::PhysicsControlComponent_SetControlTargetOrientationsInSet Parms{};

	Parms.SetName = SetName;
	Parms.Orientation = std::move(Orientation);
	Parms.AngularVelocityDeltaTime = AngularVelocityDeltaTime;
	Parms.bEnableControl = bEnableControl;
	Parms.bApplyControlPointToTarget = bApplyControlPointToTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlTargetPoses
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ParentPosition                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ParentOrientation                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FVector                          ChildPosition                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         ChildOrientation                                       (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   VelocityDeltaTime                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetControlTargetPoses(const class FName Name_0, const struct FVector& ParentPosition, const struct FRotator& ParentOrientation, const struct FVector& ChildPosition, const struct FRotator& ChildOrientation, const float VelocityDeltaTime, const bool bEnableControl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlTargetPoses");

	Params::PhysicsControlComponent_SetControlTargetPoses Parms{};

	Parms.Name_0 = Name_0;
	Parms.ParentPosition = std::move(ParentPosition);
	Parms.ParentOrientation = std::move(ParentOrientation);
	Parms.ChildPosition = std::move(ChildPosition);
	Parms.ChildOrientation = std::move(ChildOrientation);
	Parms.VelocityDeltaTime = VelocityDeltaTime;
	Parms.bEnableControl = bEnableControl;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlTargetPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          position                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VelocityDeltaTime                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bApplyControlPointToTarget                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetControlTargetPosition(const class FName Name_0, const struct FVector& position, const float VelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlTargetPosition");

	Params::PhysicsControlComponent_SetControlTargetPosition Parms{};

	Parms.Name_0 = Name_0;
	Parms.position = std::move(position);
	Parms.VelocityDeltaTime = VelocityDeltaTime;
	Parms.bEnableControl = bEnableControl;
	Parms.bApplyControlPointToTarget = bApplyControlPointToTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlTargetPositionAndOrientation
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          position                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Orientation                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   VelocityDeltaTime                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bApplyControlPointToTarget                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetControlTargetPositionAndOrientation(const class FName Name_0, const struct FVector& position, const struct FRotator& Orientation, const float VelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlTargetPositionAndOrientation");

	Params::PhysicsControlComponent_SetControlTargetPositionAndOrientation Parms{};

	Parms.Name_0 = Name_0;
	Parms.position = std::move(position);
	Parms.Orientation = std::move(Orientation);
	Parms.VelocityDeltaTime = VelocityDeltaTime;
	Parms.bEnableControl = bEnableControl;
	Parms.bApplyControlPointToTarget = bApplyControlPointToTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlTargetPositions
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                          position                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VelocityDeltaTime                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bApplyControlPointToTarget                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetControlTargetPositions(const TArray<class FName>& Names, const struct FVector& position, const float VelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlTargetPositions");

	Params::PhysicsControlComponent_SetControlTargetPositions Parms{};

	Parms.Names = std::move(Names);
	Parms.position = std::move(position);
	Parms.VelocityDeltaTime = VelocityDeltaTime;
	Parms.bEnableControl = bEnableControl;
	Parms.bApplyControlPointToTarget = bApplyControlPointToTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlTargetPositionsAndOrientations
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                          position                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Orientation                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   VelocityDeltaTime                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bApplyControlPointToTarget                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetControlTargetPositionsAndOrientations(const TArray<class FName>& Names, const struct FVector& position, const struct FRotator& Orientation, const float VelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlTargetPositionsAndOrientations");

	Params::PhysicsControlComponent_SetControlTargetPositionsAndOrientations Parms{};

	Parms.Names = std::move(Names);
	Parms.position = std::move(position);
	Parms.Orientation = std::move(Orientation);
	Parms.VelocityDeltaTime = VelocityDeltaTime;
	Parms.bEnableControl = bEnableControl;
	Parms.bApplyControlPointToTarget = bApplyControlPointToTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlTargetPositionsAndOrientationsFromArray
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  Positions                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FRotator>                 Orientations                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   VelocityDeltaTime                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bApplyControlPointToTarget                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetControlTargetPositionsAndOrientationsFromArray(const TArray<class FName>& Names, const TArray<struct FVector>& Positions, const TArray<struct FRotator>& Orientations, const float VelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlTargetPositionsAndOrientationsFromArray");

	Params::PhysicsControlComponent_SetControlTargetPositionsAndOrientationsFromArray Parms{};

	Parms.Names = std::move(Names);
	Parms.Positions = std::move(Positions);
	Parms.Orientations = std::move(Orientations);
	Parms.VelocityDeltaTime = VelocityDeltaTime;
	Parms.bEnableControl = bEnableControl;
	Parms.bApplyControlPointToTarget = bApplyControlPointToTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlTargetPositionsAndOrientationsInSet
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             SetName                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          position                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRotator                         Orientation                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// float                                   VelocityDeltaTime                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bApplyControlPointToTarget                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetControlTargetPositionsAndOrientationsInSet(const class FName SetName, const struct FVector& position, const struct FRotator& Orientation, const float VelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlTargetPositionsAndOrientationsInSet");

	Params::PhysicsControlComponent_SetControlTargetPositionsAndOrientationsInSet Parms{};

	Parms.SetName = SetName;
	Parms.position = std::move(position);
	Parms.Orientation = std::move(Orientation);
	Parms.VelocityDeltaTime = VelocityDeltaTime;
	Parms.bEnableControl = bEnableControl;
	Parms.bApplyControlPointToTarget = bApplyControlPointToTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlTargetPositionsFromArray
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  Positions                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   VelocityDeltaTime                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bApplyControlPointToTarget                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetControlTargetPositionsFromArray(const TArray<class FName>& Names, const TArray<struct FVector>& Positions, const float VelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlTargetPositionsFromArray");

	Params::PhysicsControlComponent_SetControlTargetPositionsFromArray Parms{};

	Parms.Names = std::move(Names);
	Parms.Positions = std::move(Positions);
	Parms.VelocityDeltaTime = VelocityDeltaTime;
	Parms.bEnableControl = bEnableControl;
	Parms.bApplyControlPointToTarget = bApplyControlPointToTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlTargetPositionsInSet
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class FName                             SetName                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          position                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   VelocityDeltaTime                                      (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bApplyControlPointToTarget                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetControlTargetPositionsInSet(const class FName SetName, const struct FVector& position, const float VelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlTargetPositionsInSet");

	Params::PhysicsControlComponent_SetControlTargetPositionsInSet Parms{};

	Parms.SetName = SetName;
	Parms.position = std::move(position);
	Parms.VelocityDeltaTime = VelocityDeltaTime;
	Parms.bEnableControl = bEnableControl;
	Parms.bApplyControlPointToTarget = bApplyControlPointToTarget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlTargets
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<class FName>                     Names                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// struct FPhysicsControlTarget            ControlTarget                                          (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetControlTargets(const TArray<class FName>& Names, const struct FPhysicsControlTarget& ControlTarget, const bool bEnableControl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlTargets");

	Params::PhysicsControlComponent_SetControlTargets Parms{};

	Parms.Names = std::move(Names);
	Parms.ControlTarget = std::move(ControlTarget);
	Parms.bEnableControl = bEnableControl;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlTargetsInSet
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPhysicsControlTarget            ControlTarget                                          (ConstParm, Parm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bEnableControl                                         (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::SetControlTargetsInSet(const class FName Set, const struct FPhysicsControlTarget& ControlTarget, const bool bEnableControl)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlTargetsInSet");

	Params::PhysicsControlComponent_SetControlTargetsInSet Parms{};

	Parms.Set = Set;
	Parms.ControlTarget = std::move(ControlTarget);
	Parms.bEnableControl = bEnableControl;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.SetControlUseSkeletalAnimation
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseSkeletalAnimation                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   SkeletalAnimationVelocityMultiplier                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::SetControlUseSkeletalAnimation(const class FName Name_0, const bool bUseSkeletalAnimation, const float SkeletalAnimationVelocityMultiplier)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "SetControlUseSkeletalAnimation");

	Params::PhysicsControlComponent_SetControlUseSkeletalAnimation Parms{};

	Parms.Name_0 = Name_0;
	Parms.bUseSkeletalAnimation = bUseSkeletalAnimation;
	Parms.SkeletalAnimationVelocityMultiplier = SkeletalAnimationVelocityMultiplier;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.UpdateControls
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::UpdateControls(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "UpdateControls");

	Params::PhysicsControlComponent_UpdateControls Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.UpdateTargetCaches
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlComponent::UpdateTargetCaches(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "UpdateTargetCaches");

	Params::PhysicsControlComponent_UpdateTargetCaches Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlComponent.GetAllBodyModifierNames
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class FName>               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FName> UPhysicsControlComponent::GetAllBodyModifierNames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "GetAllBodyModifierNames");

	Params::PhysicsControlComponent_GetAllBodyModifierNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.GetAllControlNames
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const TArray<class FName>               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FName> UPhysicsControlComponent::GetAllControlNames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "GetAllControlNames");

	Params::PhysicsControlComponent_GetAllControlNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.GetBodyModifierNamesInSet
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FName>               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FName> UPhysicsControlComponent::GetBodyModifierNamesInSet(const class FName Set) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "GetBodyModifierNamesInSet");

	Params::PhysicsControlComponent_GetBodyModifierNamesInSet Parms{};

	Parms.Set = Set;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.GetControlAutoDisable
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::GetControlAutoDisable(const class FName Name_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "GetControlAutoDisable");

	Params::PhysicsControlComponent_GetControlAutoDisable Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.GetControlData
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPhysicsControlData              ControlData                                            (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::GetControlData(const class FName Name_0, struct FPhysicsControlData* ControlData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "GetControlData");

	Params::PhysicsControlComponent_GetControlData Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ControlData != nullptr)
		*ControlData = std::move(Parms.ControlData);

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.GetControlEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::GetControlEnabled(const class FName Name_0) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "GetControlEnabled");

	Params::PhysicsControlComponent_GetControlEnabled Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.GetControlMultiplier
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPhysicsControlMultiplier        ControlMultiplier                                      (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::GetControlMultiplier(const class FName Name_0, struct FPhysicsControlMultiplier* ControlMultiplier) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "GetControlMultiplier");

	Params::PhysicsControlComponent_GetControlMultiplier Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ControlMultiplier != nullptr)
		*ControlMultiplier = std::move(Parms.ControlMultiplier);

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.GetControlNamesInSet
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Set                                                    (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const TArray<class FName>               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FName> UPhysicsControlComponent::GetControlNamesInSet(const class FName Set) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "GetControlNamesInSet");

	Params::PhysicsControlComponent_GetControlNamesInSet Parms{};

	Parms.Set = Set;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.GetControlTarget
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Name_0                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FPhysicsControlTarget            ControlTarget                                          (Parm, OutParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UPhysicsControlComponent::GetControlTarget(const class FName Name_0, struct FPhysicsControlTarget* ControlTarget) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "GetControlTarget");

	Params::PhysicsControlComponent_GetControlTarget Parms{};

	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ControlTarget != nullptr)
		*ControlTarget = std::move(Parms.ControlTarget);

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.GetLimbBonesFromSkeletalMesh
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USkeletalMeshComponent*           SkeletalMeshComponent                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FPhysicsControlLimbSetupData>LimbSetupData                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// TMap<class FName, struct FPhysicsControlLimbBones>ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

TMap<class FName, struct FPhysicsControlLimbBones> UPhysicsControlComponent::GetLimbBonesFromSkeletalMesh(class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<struct FPhysicsControlLimbSetupData>& LimbSetupData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "GetLimbBonesFromSkeletalMesh");

	Params::PhysicsControlComponent_GetLimbBonesFromSkeletalMesh Parms{};

	Parms.SkeletalMeshComponent = SkeletalMeshComponent;
	Parms.LimbSetupData = std::move(LimbSetupData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.GetSetsContainingBodyModifier
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Control                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UPhysicsControlComponent::GetSetsContainingBodyModifier(const class FName Control) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "GetSetsContainingBodyModifier");

	Params::PhysicsControlComponent_GetSetsContainingBodyModifier Parms{};

	Parms.Control = Control;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlComponent.GetSetsContainingControl
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             Control                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FName>                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FName> UPhysicsControlComponent::GetSetsContainingControl(const class FName Control) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlComponent", "GetSetsContainingControl");

	Params::PhysicsControlComponent_GetSetsContainingControl Parms{};

	Parms.Control = Control;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function PhysicsControl.PhysicsControlProfileAsset.Log
// (Final, Native, Public)

void UPhysicsControlProfileAsset::Log()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlProfileAsset", "Log");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function PhysicsControl.PhysicsControlInitializerComponent.CreateControls
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UPhysicsControlComponent*         PhysicsControlComponent                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UPhysicsControlInitializerComponent::CreateControls(class UPhysicsControlComponent* PhysicsControlComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PhysicsControlInitializerComponent", "CreateControls");

	Params::PhysicsControlInitializerComponent_CreateControls Parms{};

	Parms.PhysicsControlComponent = PhysicsControlComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

