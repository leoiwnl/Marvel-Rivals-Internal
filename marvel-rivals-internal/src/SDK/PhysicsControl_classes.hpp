#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PhysicsControl

#include "Basic.hpp"

#include "PhysicsControl_structs.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "CoreUObject_classes.hpp"


namespace SDK
{

// Class PhysicsControl.PhysicsControlComponent
// 0x0050 (0x04C0 - 0x0470)
class UPhysicsControlComponent final : public USceneComponent
{
public:
	float                                         TeleportDistanceThreshold;                         // 0x0470(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TeleportRotationThreshold;                         // 0x0474(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowDebugVisualization;                           // 0x0478(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_479[0x3];                                      // 0x0479(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VisualizationSizeScale;                            // 0x047C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowDebugControlList;                             // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_481[0x7];                                      // 0x0481(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DebugControlDetailFilter;                          // 0x0488(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowDebugBodyModifierList;                        // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_499[0x7];                                      // 0x0499(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DebugBodyModifierDetailFilter;                     // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityPredictionTime;                            // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNumControlsOrModifiersPerName;                  // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddBodyModifiersToSet(struct FPhysicsControlNames* NewSet, const TArray<class FName>& BodyModifiers, const class FName Set);
	void AddBodyModifierToSet(struct FPhysicsControlNames* NewSet, const class FName BodyModifier, const class FName Set);
	void AddControlsToSet(struct FPhysicsControlNames* NewSet, const TArray<class FName>& Controls, const class FName Set);
	void AddControlToSet(struct FPhysicsControlNames* NewSet, const class FName Control, const class FName Set);
	class FName CreateBodyModifier(class UMeshComponent* MeshComponent, const class FName BoneName, const class FName Set, const EPhysicsMovementType MovementType, const ECollisionEnabled CollisionType, const float GravityMultiplier, const float PhysicsBlendWeight, const bool bUseSkeletalAnimation, const bool bUpdateKinematicFromSimulation);
	TMap<class FName, struct FPhysicsControlNames> CreateBodyModifiersFromLimbBones(struct FPhysicsControlNames* AllBodyModifiers, const TMap<class FName, struct FPhysicsControlLimbBones>& LimbBones, const EPhysicsMovementType MovementType, const ECollisionEnabled CollisionType, const float GravityMultiplier, const float PhysicsBlendWeight, const bool bUseSkeletalAnimation, const bool bUpdateKinematicFromSimulation);
	TArray<class FName> CreateBodyModifiersFromSkeletalMeshBelow(class USkeletalMeshComponent* SkeletalMeshComponent, const class FName BoneName, const bool bIncludeSelf, const class FName Set, const EPhysicsMovementType MovementType, const ECollisionEnabled CollisionType, const float GravityMultiplier, const float PhysicsBlendWeight, const bool bUseSkeletalAnimation, const bool bUpdateKinematicFromSimulation);
	class FName CreateControl(class UMeshComponent* ParentMeshComponent, class FName ParentBoneName, class UMeshComponent* ChildMeshComponent, const class FName ChildBoneName, const struct FPhysicsControlData& ControlData, const struct FPhysicsControlTarget& ControlTarget, const struct FPhysicsControlSettings& ControlSettings, class FName Set, const bool bEnabled);
	void CreateControlsAndBodyModifiersFromLimbBones(struct FPhysicsControlNames* AllWorldSpaceControls, TMap<class FName, struct FPhysicsControlNames>* LimbWorldSpaceControls, struct FPhysicsControlNames* AllParentSpaceControls, TMap<class FName, struct FPhysicsControlNames>* LimbParentSpaceControls, struct FPhysicsControlNames* AllBodyModifiers, TMap<class FName, struct FPhysicsControlNames>* LimbBodyModifiers, class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<struct FPhysicsControlLimbSetupData>& LimbSetupData, const struct FPhysicsControlData& WorldSpaceControlData, const struct FPhysicsControlSettings& WorldSpaceControlSettings, const bool bEnableWorldSpaceControls, const struct FPhysicsControlData& ParentSpaceControlData, const struct FPhysicsControlSettings& ParentSpaceControlSettings, const bool bEnableParentSpaceControls, const EPhysicsMovementType PhysicsMovementType, const float GravityMultiplier, const float PhysicsBlendWeight);
	TMap<class FName, struct FPhysicsControlNames> CreateControlsFromLimbBones(struct FPhysicsControlNames* AllControls, const TMap<class FName, struct FPhysicsControlLimbBones>& LimbBones, const EPhysicsControlType ControlType, const struct FPhysicsControlData& ControlData, const struct FPhysicsControlSettings& ControlSettings, const bool bEnabled);
	TMap<class FName, struct FPhysicsControlNames> CreateControlsFromLimbBonesAndConstraintProfile(struct FPhysicsControlNames* AllControls, const TMap<class FName, struct FPhysicsControlLimbBones>& LimbBones, const class FName ConstraintProfile, const bool bEnabled);
	TArray<class FName> CreateControlsFromSkeletalMesh(class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<class FName>& BoneNames, const EPhysicsControlType ControlType, const struct FPhysicsControlData& ControlData, const struct FPhysicsControlSettings& ControlSettings, const class FName Set, const bool bEnabled);
	TArray<class FName> CreateControlsFromSkeletalMeshAndConstraintProfile(class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<class FName>& BoneNames, const class FName ConstraintProfile, const class FName Set, const bool bEnabled);
	TArray<class FName> CreateControlsFromSkeletalMeshAndConstraintProfileBelow(class USkeletalMeshComponent* SkeletalMeshComponent, const class FName BoneName, const bool bIncludeSelf, const class FName ConstraintProfile, const class FName Set, const bool bEnabled);
	TArray<class FName> CreateControlsFromSkeletalMeshBelow(class USkeletalMeshComponent* SkeletalMeshComponent, const class FName BoneName, const bool bIncludeSelf, const EPhysicsControlType ControlType, const struct FPhysicsControlData& ControlData, const struct FPhysicsControlSettings& ControlSettings, const class FName Set, const bool bEnabled);
	bool CreateNamedBodyModifier(const class FName Name_0, class UMeshComponent* MeshComponent, const class FName BoneName, const class FName Set, const EPhysicsMovementType MovementType, const ECollisionEnabled CollisionType, const float GravityMultiplier, const float PhysicsBlendWeight, const bool bUseSkeletalAnimation, const bool bUpdateKinematicFromSimulation);
	bool CreateNamedControl(class FName Name_0, class UMeshComponent* ParentMeshComponent, const class FName ParentBoneName, class UMeshComponent* ChildMeshComponent, const class FName ChildBoneName, const struct FPhysicsControlData& ControlData, const struct FPhysicsControlTarget& ControlTarget, const struct FPhysicsControlSettings& ControlSettings, const class FName Set, const bool bEnabled);
	bool DestroyBodyModifier(const class FName Name_0);
	void DestroyBodyModifiers(const TArray<class FName>& Names);
	void DestroyBodyModifiersInSet(const class FName Set);
	bool DestroyControl(const class FName Name_0);
	void DestroyControls(const TArray<class FName>& Names);
	void DestroyControlsInSet(const class FName Set);
	TArray<struct FVector> GetCachedBoneAngularVelocities(const class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<class FName>& BoneNames);
	struct FVector GetCachedBoneAngularVelocity(const class USkeletalMeshComponent* SkeletalMeshComponent, const class FName BoneName);
	struct FRotator GetCachedBoneOrientation(const class USkeletalMeshComponent* SkeletalMeshComponent, const class FName BoneName);
	TArray<struct FRotator> GetCachedBoneOrientations(const class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<class FName>& BoneNames);
	struct FVector GetCachedBonePosition(const class USkeletalMeshComponent* SkeletalMeshComponent, const class FName BoneName);
	TArray<struct FVector> GetCachedBonePositions(const class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<class FName>& BoneNames);
	struct FTransform GetCachedBoneTransform(const class USkeletalMeshComponent* SkeletalMeshComponent, const class FName BoneName);
	TArray<struct FTransform> GetCachedBoneTransforms(const class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<class FName>& BoneNames);
	TArray<struct FVector> GetCachedBoneVelocities(const class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<class FName>& BoneNames);
	struct FVector GetCachedBoneVelocity(const class USkeletalMeshComponent* SkeletalMeshComponent, const class FName BoneName);
	void ResetBodyModifiersInSetToCachedBoneTransforms(const class FName SetName, const EResetToCachedTargetBehavior Behavior);
	void ResetBodyModifiersToCachedBoneTransforms(const TArray<class FName>& Names, const EResetToCachedTargetBehavior Behavior);
	bool ResetBodyModifierToCachedBoneTransform(const class FName Name_0, const EResetToCachedTargetBehavior Behavior);
	bool ResetControlPoint(const class FName Name_0);
	bool SetBodyModifierCollisionType(const class FName Name_0, const ECollisionEnabled CollisionType);
	bool SetBodyModifierGravityMultiplier(const class FName Name_0, const float GravityMultiplier);
	bool SetBodyModifierKinematicTarget(const class FName Name_0, const struct FVector& KinematicTargetPosition, const struct FRotator& KinematicTargetOrienation, const bool bMakeKinematic);
	bool SetBodyModifierMovementType(const class FName Name_0, const EPhysicsMovementType MovementType);
	bool SetBodyModifierPhysicsBlendWeight(const class FName Name_0, const float PhysicsBlendWeight);
	void SetBodyModifiersCollisionType(const TArray<class FName>& Names, const ECollisionEnabled CollisionType);
	void SetBodyModifiersGravityMultiplier(const TArray<class FName>& Names, const float GravityMultiplier);
	void SetBodyModifiersInSetCollisionType(const class FName Set, const ECollisionEnabled CollisionType);
	void SetBodyModifiersInSetGravityMultiplier(const class FName Set, const float GravityMultiplier);
	void SetBodyModifiersInSetMovementType(const class FName Set, const EPhysicsMovementType MovementType);
	void SetBodyModifiersInSetPhysicsBlendWeight(const class FName Set, const float PhysicsBlendWeight);
	void SetBodyModifiersInSetUpdateKinematicFromSimulation(const class FName Set, const bool bUpdateKinematicFromSimulation);
	void SetBodyModifiersInSetUseSkeletalAnimation(const class FName Set, const bool bUseSkeletalAnimation);
	void SetBodyModifiersMovementType(const TArray<class FName>& Names, const EPhysicsMovementType MovementType);
	void SetBodyModifiersPhysicsBlendWeight(const TArray<class FName>& Names, const float PhysicsBlendWeight);
	void SetBodyModifiersUpdateKinematicFromSimulation(const TArray<class FName>& Names, const bool bUpdateKinematicFromSimulation);
	void SetBodyModifiersUseSkeletalAnimation(const TArray<class FName>& Names, const bool bUseSkeletalAnimation);
	bool SetBodyModifierUpdateKinematicFromSimulation(const class FName Name_0, const bool bUpdateKinematicFromSimulation);
	bool SetBodyModifierUseSkeletalAnimation(const class FName Name_0, const bool bUseSkeletalAnimation);
	bool SetCachedBoneData(const class USkeletalMeshComponent* SkeletalMeshComponent, const class FName BoneName, const struct FTransform& TM, const struct FVector& Velocity, const struct FVector& AngularVelocity);
	bool SetControlAngularData(const class FName Name_0, const float Strength, const float DampingRatio, const float ExtraDamping, const float MaxTorque, const bool bEnableControl);
	bool SetControlAutoDisable(const class FName Name_0, const bool bAutoDisable);
	bool SetControlData(const class FName Name_0, const struct FPhysicsControlData& ControlData, const bool bEnableControl);
	void SetControlDatas(const TArray<class FName>& Names, const struct FPhysicsControlData& ControlData, const bool bEnableControl);
	void SetControlDatasInSet(const class FName Set, const struct FPhysicsControlData& ControlData, const bool bEnableControl);
	bool SetControlDisableCollision(const class FName Name_0, const bool bDisableCollision);
	bool SetControlEnabled(const class FName Name_0, const bool bEnable);
	bool SetControlLinearData(const class FName Name_0, const float Strength, const float DampingRatio, const float ExtraDamping, const float MaxForce, const bool bEnableControl);
	bool SetControlMultiplier(const class FName Name_0, const struct FPhysicsControlMultiplier& ControlMultiplier, const bool bEnableControl);
	void SetControlMultipliers(const TArray<class FName>& Names, const struct FPhysicsControlMultiplier& ControlMultiplier, const bool bEnableControl);
	void SetControlMultipliersInSet(const class FName Set, const struct FPhysicsControlMultiplier& ControlMultiplier, const bool bEnableControl);
	bool SetControlPoint(const class FName Name_0, const struct FVector& position);
	void SetControlsAutoDisable(const TArray<class FName>& Names, const bool bAutoDisable);
	void SetControlsDisableCollision(const TArray<class FName>& Names, const bool bDisableCollision);
	void SetControlsEnabled(const TArray<class FName>& Names, const bool bEnable);
	void SetControlsInSetAutoDisable(const class FName Set, const bool bAutoDisable);
	void SetControlsInSetDisableCollision(const class FName Set, const bool bDisableCollision);
	void SetControlsInSetEnabled(const class FName Set, const bool bEnable);
	void SetControlsInSetUseSkeletalAnimation(const class FName Set, const bool bUseSkeletalAnimation, const float SkeletalAnimationVelocityMultiplier);
	void SetControlsUseSkeletalAnimation(const TArray<class FName>& Names, const bool bUseSkeletalAnimation, const float SkeletalAnimationVelocityMultiplier);
	bool SetControlTarget(const class FName Name_0, const struct FPhysicsControlTarget& ControlTarget, const bool bEnableControl);
	bool SetControlTargetOrientation(const class FName Name_0, const struct FRotator& Orientation, const float AngularVelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget);
	void SetControlTargetOrientations(const TArray<class FName>& Names, const struct FRotator& Orientation, const float AngularVelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget);
	bool SetControlTargetOrientationsFromArray(const TArray<class FName>& Names, const TArray<struct FRotator>& Orientations, const float VelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget);
	void SetControlTargetOrientationsInSet(const class FName SetName, const struct FRotator& Orientation, const float AngularVelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget);
	bool SetControlTargetPoses(const class FName Name_0, const struct FVector& ParentPosition, const struct FRotator& ParentOrientation, const struct FVector& ChildPosition, const struct FRotator& ChildOrientation, const float VelocityDeltaTime, const bool bEnableControl);
	bool SetControlTargetPosition(const class FName Name_0, const struct FVector& position, const float VelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget);
	bool SetControlTargetPositionAndOrientation(const class FName Name_0, const struct FVector& position, const struct FRotator& Orientation, const float VelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget);
	void SetControlTargetPositions(const TArray<class FName>& Names, const struct FVector& position, const float VelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget);
	void SetControlTargetPositionsAndOrientations(const TArray<class FName>& Names, const struct FVector& position, const struct FRotator& Orientation, const float VelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget);
	bool SetControlTargetPositionsAndOrientationsFromArray(const TArray<class FName>& Names, const TArray<struct FVector>& Positions, const TArray<struct FRotator>& Orientations, const float VelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget);
	void SetControlTargetPositionsAndOrientationsInSet(const class FName SetName, const struct FVector& position, const struct FRotator& Orientation, const float VelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget);
	bool SetControlTargetPositionsFromArray(const TArray<class FName>& Names, const TArray<struct FVector>& Positions, const float VelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget);
	void SetControlTargetPositionsInSet(const class FName SetName, const struct FVector& position, const float VelocityDeltaTime, const bool bEnableControl, const bool bApplyControlPointToTarget);
	void SetControlTargets(const TArray<class FName>& Names, const struct FPhysicsControlTarget& ControlTarget, const bool bEnableControl);
	void SetControlTargetsInSet(const class FName Set, const struct FPhysicsControlTarget& ControlTarget, const bool bEnableControl);
	bool SetControlUseSkeletalAnimation(const class FName Name_0, const bool bUseSkeletalAnimation, const float SkeletalAnimationVelocityMultiplier);
	void UpdateControls(float DeltaTime);
	void UpdateTargetCaches(float DeltaTime);

	const TArray<class FName> GetAllBodyModifierNames() const;
	const TArray<class FName> GetAllControlNames() const;
	const TArray<class FName> GetBodyModifierNamesInSet(const class FName Set) const;
	bool GetControlAutoDisable(const class FName Name_0) const;
	bool GetControlData(const class FName Name_0, struct FPhysicsControlData* ControlData) const;
	bool GetControlEnabled(const class FName Name_0) const;
	bool GetControlMultiplier(const class FName Name_0, struct FPhysicsControlMultiplier* ControlMultiplier) const;
	const TArray<class FName> GetControlNamesInSet(const class FName Set) const;
	bool GetControlTarget(const class FName Name_0, struct FPhysicsControlTarget* ControlTarget) const;
	TMap<class FName, struct FPhysicsControlLimbBones> GetLimbBonesFromSkeletalMesh(class USkeletalMeshComponent* SkeletalMeshComponent, const TArray<struct FPhysicsControlLimbSetupData>& LimbSetupData) const;
	TArray<class FName> GetSetsContainingBodyModifier(const class FName Control) const;
	TArray<class FName> GetSetsContainingControl(const class FName Control) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsControlComponent">();
	}
	static class UPhysicsControlComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsControlComponent>();
	}
};

// Class PhysicsControl.PhysicsControlProfileAsset
// 0x0040 (0x0070 - 0x0030)
class UPhysicsControlProfileAsset final : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class USkeletalMesh>           PreviewSkeletalMesh;                               // 0x0038(0x0030)(Edit, AssetRegistrySearchable, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TestValue;                                         // 0x0068(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Log();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsControlProfileAsset">();
	}
	static class UPhysicsControlProfileAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsControlProfileAsset>();
	}
};

// Class PhysicsControl.PhysicsControlInitializerComponent
// 0x0170 (0x05E0 - 0x0470)
class UPhysicsControlInitializerComponent final : public USceneComponent
{
public:
	struct FInitialCharacterControls              InitialCharacterControls;                          // 0x0470(0x00C8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, struct FInitialPhysicsControl> InitialControls;                                   // 0x0538(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FName, struct FInitialBodyModifier> InitialBodyModifiers;                              // 0x0588(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bCreateControlsAtBeginPlay;                        // 0x05D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D9[0x7];                                      // 0x05D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateControls(class UPhysicsControlComponent* PhysicsControlComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsControlInitializerComponent">();
	}
	static class UPhysicsControlInitializerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsControlInitializerComponent>();
	}
};

// Class PhysicsControl.PhysicsControlActor
// 0x0010 (0x04A0 - 0x0490)
class APhysicsControlActor final : public AActor
{
public:
	class UPhysicsControlComponent*               ControlComponent;                                  // 0x0490(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPhysicsControlInitializerComponent*    ControlInitializerComponent;                       // 0x0498(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsControlActor">();
	}
	static class APhysicsControlActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APhysicsControlActor>();
	}
};

}

