#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_Arrow

#include "Basic.hpp"

#include "WBP_Arrow_classes.hpp"
#include "WBP_Arrow_parameters.hpp"


namespace SDK
{

// Function WBP_Arrow.WBP_Arrow_C.ExecuteUbergraph_WBP_Arrow
// (Final, UbergraphFunction)
// Parameters:
// int32                                   EntryPoint                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UWBP_Arrow_C::ExecuteUbergraph_WBP_Arrow(int32 EntryPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Arrow_C", "ExecuteUbergraph_WBP_Arrow");

	Params::WBP_Arrow_C_ExecuteUbergraph_WBP_Arrow Parms{};

	Parms.EntryPoint = EntryPoint;

	UObject::ProcessEvent(Func, &Parms);
}


// Function WBP_Arrow.WBP_Arrow_C.PlayLoopAnim
// (BlueprintCallable, BlueprintEvent)

void UWBP_Arrow_C::PlayLoopAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Arrow_C", "PlayLoopAnim");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Arrow.WBP_Arrow_C.SetAttackColor
// (BlueprintCallable, BlueprintEvent)

void UWBP_Arrow_C::SetAttackColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Arrow_C", "SetAttackColor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Arrow.WBP_Arrow_C.SetDefaultColor
// (BlueprintCallable, BlueprintEvent)

void UWBP_Arrow_C::SetDefaultColor()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Arrow_C", "SetDefaultColor");

	UObject::ProcessEvent(Func, nullptr);
}


// Function WBP_Arrow.WBP_Arrow_C.StopLoopAnim
// (BlueprintCallable, BlueprintEvent)

void UWBP_Arrow_C::StopLoopAnim()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("WBP_Arrow_C", "StopLoopAnim");

	UObject::ProcessEvent(Func, nullptr);
}

}

