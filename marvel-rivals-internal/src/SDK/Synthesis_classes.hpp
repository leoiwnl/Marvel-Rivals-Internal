#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Synthesis

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Synthesis_structs.hpp"
#include "UMG_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "AudioMixer_classes.hpp"


namespace SDK
{

// Class Synthesis.AudioImpulseResponse
// 0x0030 (0x0060 - 0x0030)
class UAudioImpulseResponse final : public UObject
{
public:
	TArray<float>                                 ImpulseResponse;                                   // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumChannels;                                       // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SampleRate;                                        // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalizationVolumeDb;                             // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTrueStereo;                                       // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 IRData;                                            // 0x0050(0x0010)(ZeroConstructor, Deprecated, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioImpulseResponse">();
	}
	static class UAudioImpulseResponse* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioImpulseResponse>();
	}
};

// Class Synthesis.ModularSynthPresetBank
// 0x0010 (0x0040 - 0x0030)
class UModularSynthPresetBank final : public UObject
{
public:
	TArray<struct FModularSynthPresetBankEntry>   Presets;                                           // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModularSynthPresetBank">();
	}
	static class UModularSynthPresetBank* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModularSynthPresetBank>();
	}
};

// Class Synthesis.ModularSynthLibrary
// 0x0000 (0x0030 - 0x0030)
class UModularSynthLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddModularSynthPresetToBankAsset(class UModularSynthPresetBank* InBank, const struct FModularSynthPreset& Preset, const class FString& PresetName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModularSynthLibrary">();
	}
	static class UModularSynthLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModularSynthLibrary>();
	}
};

// Class Synthesis.ModularSynthComponent
// 0x06D0 (0x11A0 - 0x0AD0)
class UModularSynthComponent final : public USynthComponent
{
public:
	int32                                         VoiceCount;                                        // 0x0AD0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD4[0x6CC];                                    // 0x0AD4(0x06CC)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FPatchId CreatePatch(const ESynth1PatchSource PatchSource, const TArray<struct FSynth1PatchCable>& PatchCables, const bool bEnableByDefault);
	void NoteOff(const float Note, const bool bAllNotesOff, const bool bKillAllNotes);
	void NoteOn(const float Note, const int32 Velocity, const float Duration);
	void SetAttackTime(float AttackTimeMsec);
	void SetChorusDepth(float Depth);
	void SetChorusEnabled(bool EnableChorus);
	void SetChorusFeedback(float Feedback);
	void SetChorusFrequency(float Frequency);
	void SetDecayTime(float DecayTimeMsec);
	void SetEnableLegato(bool LegatoEnabled);
	bool SetEnablePatch(const struct FPatchId& PatchId, const bool bIsEnabled);
	void SetEnablePolyphony(bool bEnablePolyphony);
	void SetEnableRetrigger(bool RetriggerEnabled);
	void SetEnableUnison(bool EnableUnison);
	void SetFilterAlgorithm(ESynthFilterAlgorithm FilterAlgorithm);
	void SetFilterFrequency(float FilterFrequencyHz);
	void SetFilterFrequencyMod(float FilterFrequencyHz);
	void SetFilterQ(float FilterQ);
	void SetFilterQMod(float FilterQ);
	void SetFilterType(ESynthFilterType FilterType);
	void SetGainDb(float GainDb);
	void SetLFOFrequency(int32 LFOIndex, float FrequencyHz);
	void SetLFOFrequencyMod(int32 LFOIndex, float FrequencyModHz);
	void SetLFOGain(int32 LFOIndex, float Gain);
	void SetLFOGainMod(int32 LFOIndex, float GainMod);
	void SetLFOMode(int32 LFOIndex, ESynthLFOMode LFOMode);
	void SetLFOPatch(int32 LFOIndex, ESynthLFOPatchType LFOPatchType);
	void SetLFOType(int32 LFOIndex, ESynthLFOType LFOType);
	void SetModEnvAttackTime(const float AttackTimeMsec);
	void SetModEnvBiasInvert(const bool bInvert);
	void SetModEnvBiasPatch(const ESynthModEnvBiasPatch InPatchType);
	void SetModEnvDecayTime(const float DecayTimeMsec);
	void SetModEnvDepth(const float Depth);
	void SetModEnvInvert(const bool bInvert);
	void SetModEnvPatch(const ESynthModEnvPatch InPatchType);
	void SetModEnvReleaseTime(const float Release);
	void SetModEnvSustainGain(const float SustainGain);
	void SetOscCents(int32 OscIndex, float Cents);
	void SetOscFrequencyMod(int32 OscIndex, float OscFreqMod);
	void SetOscGain(int32 OscIndex, float OscGain);
	void SetOscGainMod(int32 OscIndex, float OscGainMod);
	void SetOscOctave(int32 OscIndex, float Octave);
	void SetOscPulsewidth(int32 OscIndex, float Pulsewidth);
	void SetOscSemitones(int32 OscIndex, float Semitones);
	void SetOscSync(const bool bIsSynced);
	void SetOscType(int32 OscIndex, ESynth1OscType OscType);
	void SetPan(float Pan);
	void SetPitchBend(float PitchBend);
	void SetPortamento(float Portamento);
	void SetReleaseTime(float ReleaseTimeMsec);
	void SetSpread(float Spread);
	void SetStereoDelayFeedback(float DelayFeedback);
	void SetStereoDelayIsEnabled(bool StereoDelayEnabled);
	void SetStereoDelayMode(ESynthStereoDelayMode StereoDelayMode);
	void SetStereoDelayRatio(float DelayRatio);
	void SetStereoDelayTime(float DelayTimeMsec);
	void SetStereoDelayWetlevel(float DelayWetlevel);
	void SetSustainGain(float SustainGain);
	void SetSynthPreset(const struct FModularSynthPreset& SynthPreset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModularSynthComponent">();
	}
	static class UModularSynthComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModularSynthComponent>();
	}
};

// Class Synthesis.SourceEffectBitCrusherPreset
// 0x01A8 (0x0218 - 0x0070)
class USourceEffectBitCrusherPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_70[0xE8];                                      // 0x0070(0x00E8)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectBitCrusherSettings        Settings;                                          // 0x0158(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	void SetBitModulator(const class USoundModulatorBase* Modulator);
	void SetBitModulators(const TSet<class USoundModulatorBase*>& InModulators);
	void SetBits(float Bits);
	void SetModulationSettings(const struct FSourceEffectBitCrusherSettings& ModulationSettings);
	void SetSampleRate(float SampleRate);
	void SetSampleRateModulator(const class USoundModulatorBase* Modulator);
	void SetSampleRateModulators(const TSet<class USoundModulatorBase*>& InModulators);
	void SetSettings(const struct FSourceEffectBitCrusherBaseSettings& Settings_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectBitCrusherPreset">();
	}
	static class USourceEffectBitCrusherPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectBitCrusherPreset>();
	}
};

// Class Synthesis.SourceEffectChorusPreset
// 0x0478 (0x04E8 - 0x0070)
class USourceEffectChorusPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_70[0x250];                                     // 0x0070(0x0250)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectChorusSettings            Settings;                                          // 0x02C0(0x0228)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	void SetDepth(float Depth);
	void SetDepthModulator(const class USoundModulatorBase* Modulator);
	void SetDepthModulators(const TSet<class USoundModulatorBase*>& Modulators);
	void SetDry(float DryAmount);
	void SetDryModulator(const class USoundModulatorBase* Modulator);
	void SetDryModulators(const TSet<class USoundModulatorBase*>& Modulators);
	void SetFeedback(float Feedback);
	void SetFeedbackModulator(const class USoundModulatorBase* Modulator);
	void SetFeedbackModulators(const TSet<class USoundModulatorBase*>& Modulators);
	void SetFrequency(float Frequency);
	void SetFrequencyModulator(const class USoundModulatorBase* Modulator);
	void SetFrequencyModulators(const TSet<class USoundModulatorBase*>& Modulators);
	void SetModulationSettings(const struct FSourceEffectChorusSettings& ModulationSettings);
	void SetSettings(const struct FSourceEffectChorusBaseSettings& Settings_0);
	void SetSpread(float Spread);
	void SetSpreadModulator(const class USoundModulatorBase* Modulator);
	void SetSpreadModulators(const TSet<class USoundModulatorBase*>& Modulators);
	void SetWet(float WetAmount);
	void SetWetModulator(const class USoundModulatorBase* Modulator);
	void SetWetModulators(const TSet<class USoundModulatorBase*>& Modulators);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectChorusPreset">();
	}
	static class USourceEffectChorusPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectChorusPreset>();
	}
};

// Class Synthesis.SourceEffectConvolutionReverbPreset
// 0x0058 (0x00C8 - 0x0070)
class USourceEffectConvolutionReverbPreset final : public USoundEffectSourcePreset
{
public:
	class UAudioImpulseResponse*                  ImpulseResponse;                                   // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSourceEffectConvolutionReverbSettings Settings;                                          // 0x0078(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	ESubmixEffectConvolutionReverbBlockSize       BlockSize;                                         // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableHardwareAcceleration;                       // 0x0089(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A[0x3E];                                      // 0x008A(0x003E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetImpulseResponse(class UAudioImpulseResponse* InImpulseResponse);
	void SetSettings(const struct FSourceEffectConvolutionReverbSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectConvolutionReverbPreset">();
	}
	static class USourceEffectConvolutionReverbPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectConvolutionReverbPreset>();
	}
};

// Class Synthesis.SourceEffectDynamicsProcessorPreset
// 0x0078 (0x00E8 - 0x0070)
class USourceEffectDynamicsProcessorPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_70[0x50];                                      // 0x0070(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectDynamicsProcessorSettings Settings;                                          // 0x00C0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectDynamicsProcessorSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectDynamicsProcessorPreset">();
	}
	static class USourceEffectDynamicsProcessorPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectDynamicsProcessorPreset>();
	}
};

// Class Synthesis.EnvelopeFollowerListener
// 0x0020 (0x0110 - 0x00F0)
class UEnvelopeFollowerListener final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(float EnvelopeValue)> OnEnvelopeFollowerUpdate;                          // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_100[0x10];                                     // 0x0100(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvelopeFollowerListener">();
	}
	static class UEnvelopeFollowerListener* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvelopeFollowerListener>();
	}
};

// Class Synthesis.SourceEffectEnvelopeFollowerPreset
// 0x0040 (0x00B0 - 0x0070)
class USourceEffectEnvelopeFollowerPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_70[0x34];                                      // 0x0070(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectEnvelopeFollowerSettings  Settings;                                          // 0x00A4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void RegisterEnvelopeFollowerListener(class UEnvelopeFollowerListener* EnvelopeFollowerListener);
	void SetSettings(const struct FSourceEffectEnvelopeFollowerSettings& InSettings);
	void UnregisterEnvelopeFollowerListener(class UEnvelopeFollowerListener* EnvelopeFollowerListener);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectEnvelopeFollowerPreset">();
	}
	static class USourceEffectEnvelopeFollowerPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectEnvelopeFollowerPreset>();
	}
};

// Class Synthesis.SourceEffectEQPreset
// 0x0048 (0x00B8 - 0x0070)
class USourceEffectEQPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_70[0x38];                                      // 0x0070(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectEQSettings                Settings;                                          // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectEQSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectEQPreset">();
	}
	static class USourceEffectEQPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectEQPreset>();
	}
};

// Class Synthesis.SourceEffectFilterPreset
// 0x0068 (0x00D8 - 0x0070)
class USourceEffectFilterPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_70[0x48];                                      // 0x0070(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectFilterSettings            Settings;                                          // 0x00B8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectFilterSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectFilterPreset">();
	}
	static class USourceEffectFilterPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectFilterPreset>();
	}
};

// Class Synthesis.SourceEffectFoldbackDistortionPreset
// 0x0040 (0x00B0 - 0x0070)
class USourceEffectFoldbackDistortionPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_70[0x34];                                      // 0x0070(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectFoldbackDistortionSettings Settings;                                          // 0x00A4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectFoldbackDistortionSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectFoldbackDistortionPreset">();
	}
	static class USourceEffectFoldbackDistortionPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectFoldbackDistortionPreset>();
	}
};

// Class Synthesis.SourceEffectMidSideSpreaderPreset
// 0x0038 (0x00A8 - 0x0070)
class USourceEffectMidSideSpreaderPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_70[0x30];                                      // 0x0070(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectMidSideSpreaderSettings   Settings;                                          // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectMidSideSpreaderSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectMidSideSpreaderPreset">();
	}
	static class USourceEffectMidSideSpreaderPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectMidSideSpreaderPreset>();
	}
};

// Class Synthesis.SourceEffectMotionFilterPreset
// 0x0118 (0x0188 - 0x0070)
class USourceEffectMotionFilterPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_70[0xA0];                                      // 0x0070(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectMotionFilterSettings      Settings;                                          // 0x0110(0x0078)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectMotionFilterSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectMotionFilterPreset">();
	}
	static class USourceEffectMotionFilterPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectMotionFilterPreset>();
	}
};

// Class Synthesis.SourceEffectPannerPreset
// 0x0038 (0x00A8 - 0x0070)
class USourceEffectPannerPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_70[0x30];                                      // 0x0070(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectPannerSettings            Settings;                                          // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectPannerSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectPannerPreset">();
	}
	static class USourceEffectPannerPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectPannerPreset>();
	}
};

// Class Synthesis.SourceEffectPhaserPreset
// 0x0048 (0x00B8 - 0x0070)
class USourceEffectPhaserPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_70[0x38];                                      // 0x0070(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectPhaserSettings            Settings;                                          // 0x00A8(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectPhaserSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectPhaserPreset">();
	}
	static class USourceEffectPhaserPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectPhaserPreset>();
	}
};

// Class Synthesis.SourceEffectRingModulationPreset
// 0x0068 (0x00D8 - 0x0070)
class USourceEffectRingModulationPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_70[0x48];                                      // 0x0070(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectRingModulationSettings    Settings;                                          // 0x00B8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectRingModulationSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectRingModulationPreset">();
	}
	static class USourceEffectRingModulationPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectRingModulationPreset>();
	}
};

// Class Synthesis.SourceEffectSimpleDelayPreset
// 0x0058 (0x00C8 - 0x0070)
class USourceEffectSimpleDelayPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_70[0x40];                                      // 0x0070(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectSimpleDelaySettings       Settings;                                          // 0x00B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectSimpleDelaySettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectSimpleDelayPreset">();
	}
	static class USourceEffectSimpleDelayPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectSimpleDelayPreset>();
	}
};

// Class Synthesis.SourceEffectStereoDelayPreset
// 0x0070 (0x00E0 - 0x0070)
class USourceEffectStereoDelayPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_70[0x4C];                                      // 0x0070(0x004C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectStereoDelaySettings       Settings;                                          // 0x00BC(0x0024)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectStereoDelaySettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectStereoDelayPreset">();
	}
	static class USourceEffectStereoDelayPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectStereoDelayPreset>();
	}
};

// Class Synthesis.SourceEffectWaveShaperPreset
// 0x0038 (0x00A8 - 0x0070)
class USourceEffectWaveShaperPreset final : public USoundEffectSourcePreset
{
public:
	uint8                                         Pad_70[0x30];                                      // 0x0070(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSourceEffectWaveShaperSettings        Settings;                                          // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSourceEffectWaveShaperSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SourceEffectWaveShaperPreset">();
	}
	static class USourceEffectWaveShaperPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USourceEffectWaveShaperPreset>();
	}
};

// Class Synthesis.SubmixEffectConvolutionReverbPreset
// 0x0098 (0x0108 - 0x0070)
class USubmixEffectConvolutionReverbPreset final : public USoundEffectSubmixPreset
{
public:
	class UAudioImpulseResponse*                  ImpulseResponse;                                   // 0x0070(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSubmixEffectConvolutionReverbSettings Settings;                                          // 0x0078(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	ESubmixEffectConvolutionReverbBlockSize       BlockSize;                                         // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableHardwareAcceleration;                       // 0x00A9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x5E];                                      // 0x00AA(0x005E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetImpulseResponse(class UAudioImpulseResponse* InImpulseResponse);
	void SetSettings(const struct FSubmixEffectConvolutionReverbSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmixEffectConvolutionReverbPreset">();
	}
	static class USubmixEffectConvolutionReverbPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmixEffectConvolutionReverbPreset>();
	}
};

// Class Synthesis.SubmixEffectDelayStatics
// 0x0000 (0x0030 - 0x0030)
class USubmixEffectDelayStatics final : public UBlueprintFunctionLibrary
{
public:
	static struct FSubmixEffectDelaySettings SetDelayLength(struct FSubmixEffectDelaySettings& DelaySettings, float DelayLength);
	static struct FSubmixEffectDelaySettings SetInterpolationTime(struct FSubmixEffectDelaySettings& DelaySettings, float InterpolationTime);
	static struct FSubmixEffectDelaySettings SetMaximumDelayLength(struct FSubmixEffectDelaySettings& DelaySettings, float MaximumDelayLength);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmixEffectDelayStatics">();
	}
	static class USubmixEffectDelayStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmixEffectDelayStatics>();
	}
};

// Class Synthesis.SubmixEffectDelayPreset
// 0x0050 (0x00C0 - 0x0070)
class USubmixEffectDelayPreset final : public USoundEffectSubmixPreset
{
public:
	uint8                                         Pad_70[0x34];                                      // 0x0070(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSubmixEffectDelaySettings             Settings;                                          // 0x00A4(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FSubmixEffectDelaySettings             DynamicSettings;                                   // 0x00B0(0x000C)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetDefaultSettings(const struct FSubmixEffectDelaySettings& InSettings);
	void SetDelay(float Length);
	void SetInterpolationTime(float Time);
	void SetSettings(const struct FSubmixEffectDelaySettings& InSettings);

	float GetMaxDelayInMilliseconds() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmixEffectDelayPreset">();
	}
	static class USubmixEffectDelayPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmixEffectDelayPreset>();
	}
};

// Class Synthesis.SubmixEffectFilterPreset
// 0x0040 (0x00B0 - 0x0070)
class USubmixEffectFilterPreset final : public USoundEffectSubmixPreset
{
public:
	uint8                                         Pad_70[0x34];                                      // 0x0070(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSubmixEffectFilterSettings            Settings;                                          // 0x00A4(0x000C)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetFilterAlgorithm(ESubmixFilterAlgorithm InAlgorithm);
	void SetFilterCutoffFrequency(float InFrequency);
	void SetFilterCutoffFrequencyMod(float InFrequency);
	void SetFilterQ(float InQ);
	void SetFilterQMod(float InQ);
	void SetFilterType(ESubmixFilterType InType);
	void SetSettings(const struct FSubmixEffectFilterSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmixEffectFilterPreset">();
	}
	static class USubmixEffectFilterPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmixEffectFilterPreset>();
	}
};

// Class Synthesis.SubmixEffectFlexiverbPreset
// 0x0048 (0x00B8 - 0x0070)
class USubmixEffectFlexiverbPreset final : public USoundEffectSubmixPreset
{
public:
	uint8                                         Pad_70[0x38];                                      // 0x0070(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSubmixEffectFlexiverbSettings         Settings;                                          // 0x00A8(0x0010)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSubmixEffectFlexiverbSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmixEffectFlexiverbPreset">();
	}
	static class USubmixEffectFlexiverbPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmixEffectFlexiverbPreset>();
	}
};

// Class Synthesis.SubmixEffectMultibandCompressorPreset
// 0x0098 (0x0108 - 0x0070)
class USubmixEffectMultibandCompressorPreset final : public USoundEffectSubmixPreset
{
public:
	uint8                                         Pad_70[0x60];                                      // 0x0070(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSubmixEffectMultibandCompressorSettings Settings;                                          // 0x00D0(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void ResetKey();
	void SetAudioBus(class UAudioBus* AudioBus);
	void SetExternalSubmix(class USoundSubmix* Submix);
	void SetSettings(const struct FSubmixEffectMultibandCompressorSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmixEffectMultibandCompressorPreset">();
	}
	static class USubmixEffectMultibandCompressorPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmixEffectMultibandCompressorPreset>();
	}
};

// Class Synthesis.SubmixEffectStereoDelayPreset
// 0x0070 (0x00E0 - 0x0070)
class USubmixEffectStereoDelayPreset final : public USoundEffectSubmixPreset
{
public:
	uint8                                         Pad_70[0x4C];                                      // 0x0070(0x004C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSubmixEffectStereoDelaySettings       Settings;                                          // 0x00BC(0x0024)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSubmixEffectStereoDelaySettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmixEffectStereoDelayPreset">();
	}
	static class USubmixEffectStereoDelayPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmixEffectStereoDelayPreset>();
	}
};

// Class Synthesis.SubmixEffectStereoToQuadPreset
// 0x0038 (0x00A8 - 0x0070)
class USubmixEffectStereoToQuadPreset final : public USoundEffectSubmixPreset
{
public:
	uint8                                         Pad_70[0x30];                                      // 0x0070(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSubmixEffectStereoToQuadSettings      Settings;                                          // 0x00A0(0x0008)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	void SetSettings(const struct FSubmixEffectStereoToQuadSettings& InSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmixEffectStereoToQuadPreset">();
	}
	static class USubmixEffectStereoToQuadPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmixEffectStereoToQuadPreset>();
	}
};

// Class Synthesis.SubmixEffectTapDelayPreset
// 0x0070 (0x00E0 - 0x0070)
class USubmixEffectTapDelayPreset final : public USoundEffectSubmixPreset
{
public:
	uint8                                         Pad_70[0x40];                                      // 0x0070(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSubmixEffectTapDelaySettings          Settings;                                          // 0x00B0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8[0x18];                                      // 0x00C8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddTap(int32* TapId);
	float GetMaxDelayInMilliseconds();
	void GetTap(int32 TapId, struct FTapDelayInfo* TapInfo);
	void GetTapIds(TArray<int32>* TapIds);
	void RemoveTap(int32 TapId);
	void SetInterpolationTime(float Time);
	void SetSettings(const struct FSubmixEffectTapDelaySettings& InSettings);
	void SetTap(int32 TapId, const struct FTapDelayInfo& TapInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SubmixEffectTapDelayPreset">();
	}
	static class USubmixEffectTapDelayPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USubmixEffectTapDelayPreset>();
	}
};

// Class Synthesis.GranularSynth
// 0x03E0 (0x0EB0 - 0x0AD0)
class UGranularSynth final : public USynthComponent
{
public:
	class USoundWave*                             GranulatedSoundWave;                               // 0x0AD0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AD8[0x3D8];                                    // 0x0AD8(0x03D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void NoteOff(const float Note, const bool bKill);
	void NoteOn(const float Note, const int32 Velocity, const float Duration);
	void SetAttackTime(const float AttackTimeMsec);
	void SetDecayTime(const float DecayTimeMsec);
	void SetGrainDuration(const float BaseDurationMsec, const struct FVector2D& DurationRange);
	void SetGrainEnvelopeType(const EGranularSynthEnvelopeType EnvelopeType);
	void SetGrainPan(const float BasePan, const struct FVector2D& PanRange);
	void SetGrainPitch(const float BasePitch, const struct FVector2D& PitchRange);
	void SetGrainProbability(const float InGrainProbability);
	void SetGrainsPerSecond(const float InGrainsPerSecond);
	void SetGrainVolume(const float BaseVolume, const struct FVector2D& VolumeRange);
	void SetPlaybackSpeed(const float InPlayheadRate);
	void SetPlayheadTime(const float InPositionSec, const float LerpTimeSec, EGranularSynthSeekType SeekType);
	void SetReleaseTimeMsec(const float ReleaseTimeMsec);
	void SetScrubMode(const bool bScrubMode);
	void SetSoundWave(class USoundWave* InSoundWave);
	void SetSustainGain(const float SustainGain);

	float GetCurrentPlayheadTime() const;
	float GetSampleDuration() const;
	bool IsLoaded() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GranularSynth">();
	}
	static class UGranularSynth* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGranularSynth>();
	}
};

// Class Synthesis.MonoWaveTableSynthPreset
// 0x0148 (0x0178 - 0x0030)
class UMonoWaveTableSynthPreset final : public UObject
{
public:
	class FString                                 PresetName;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bLockKeyframesToGridBool : 1;                      // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LockKeyframesToGrid;                               // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WaveTableResolution;                               // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRuntimeFloatCurve>             WaveTable;                                         // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NonTransactional, NativeAccessSpecifierPublic)
	uint8                                         bNormalizeWaveTables : 1;                          // 0x0060(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_61[0x117];                                     // 0x0061(0x0117)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MonoWaveTableSynthPreset">();
	}
	static class UMonoWaveTableSynthPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMonoWaveTableSynthPreset>();
	}
};

// Class Synthesis.SynthComponentMonoWaveTable
// 0x0750 (0x1220 - 0x0AD0)
class USynthComponentMonoWaveTable final : public USynthComponent
{
public:
	TMulticastInlineDelegate<void(int32 TableIndex)> OnTableAltered;                                    // 0x0AD0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnNumTablesChanged;                                // 0x0AE0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UMonoWaveTableSynthPreset*              CurrentPreset;                                     // 0x0AF0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AF8[0x728];                                    // 0x0AF8(0x0728)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetCurveTangent(int32 TableIndex);
	int32 GetNumTableEntries();
	void NoteOff(const float InMidiNote);
	void NoteOn(const float InMidiNote, const float InVelocity);
	void RefreshAllWaveTables();
	void RefreshWaveTable(int32 Index_0);
	void SetAmpEnvelopeAttackTime(const float InAttackTimeMsec);
	void SetAmpEnvelopeBiasDepth(const float InDepth);
	void SetAmpEnvelopeBiasInvert(const bool bInBiasInvert);
	void SetAmpEnvelopeDecayTime(const float InDecayTimeMsec);
	void SetAmpEnvelopeDepth(const float InDepth);
	void SetAmpEnvelopeInvert(const bool bInInvert);
	void SetAmpEnvelopeReleaseTime(const float InReleaseTimeMsec);
	void SetAmpEnvelopeSustainGain(const float InSustainGain);
	bool SetCurveInterpolationType(ECurveInterpolationType InterpolationType, int32 TableIndex);
	bool SetCurveTangent(int32 TableIndex, float InNewTangent);
	bool SetCurveValue(int32 TableIndex, int32 KeyframeIndex, const float NewValue);
	void SetFilterEnvelopeAttackTime(const float InAttackTimeMsec);
	void SetFilterEnvelopeBiasDepth(const float InDepth);
	void SetFilterEnvelopeBiasInvert(const bool bInBiasInvert);
	void SetFilterEnvelopeDepth(const float InDepth);
	void SetFilterEnvelopeInvert(const bool bInInvert);
	void SetFilterEnvelopenDecayTime(const float InDecayTimeMsec);
	void SetFilterEnvelopeReleaseTime(const float InReleaseTimeMsec);
	void SetFilterEnvelopeSustainGain(const float InSustainGain);
	void SetFrequency(const float FrequencyHz);
	void SetFrequencyPitchBend(const float FrequencyOffsetCents);
	void SetFrequencyWithMidiNote(const float InMidiNote);
	void SetLowPassFilterResonance(float InNewQ);
	void SetPositionEnvelopeAttackTime(const float InAttackTimeMsec);
	void SetPositionEnvelopeBiasDepth(const float InDepth);
	void SetPositionEnvelopeBiasInvert(const bool bInBiasInvert);
	void SetPositionEnvelopeDecayTime(const float InDecayTimeMsec);
	void SetPositionEnvelopeDepth(const float InDepth);
	void SetPositionEnvelopeInvert(const bool bInInvert);
	void SetPositionEnvelopeReleaseTime(const float InReleaseTimeMsec);
	void SetPositionEnvelopeSustainGain(const float InSustainGain);
	void SetPosLfoDepth(const float InLfoDepth);
	void SetPosLfoFrequency(const float InLfoFrequency);
	void SetPosLfoType(const ESynthLFOType InLfoType);
	void SetSustainPedalState(bool InSustainPedalState);
	void SetWaveTablePosition(float InPosition);

	TArray<float> GetKeyFrameValuesForTable(float TableIndex) const;
	int32 GetMaxTableIndex() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SynthComponentMonoWaveTable">();
	}
	static class USynthComponentMonoWaveTable* GetDefaultObj()
	{
		return GetDefaultObjImpl<USynthComponentMonoWaveTable>();
	}
};

// Class Synthesis.SynthComponentToneGenerator
// 0x00F0 (0x0BC0 - 0x0AD0)
class USynthComponentToneGenerator final : public USynthComponent
{
public:
	float                                         Frequency;                                         // 0x0AD0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Volume;                                            // 0x0AD4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRuntimeFloatCurve                     DistanceAttenuationCurve;                          // 0x0AD8(0x0088)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector2D                              DistanceRange;                                     // 0x0B60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttenuationDbAtMaxRange;                           // 0x0B70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B74[0x4C];                                     // 0x0B74(0x004C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetFrequency(float InFrequency);
	void SetVolume(float InVolume);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SynthComponentToneGenerator">();
	}
	static class USynthComponentToneGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<USynthComponentToneGenerator>();
	}
};

// Class Synthesis.SynthSamplePlayer
// 0x0130 (0x0C00 - 0x0AD0)
class USynthSamplePlayer final : public USynthComponent
{
public:
	class USoundWave*                             SoundWave;                                         // 0x0AD0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnSampleLoaded;                                    // 0x0AD8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float ProgressPercent, float ProgressTimeSeconds)> OnSamplePlaybackProgress;                          // 0x0AE8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_AF8[0x108];                                    // 0x0AF8(0x0108)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SeekToTime(float TimeSec, ESamplePlayerSeekType SeekType, bool bWrap);
	void SetPitch(float InPitch, float TimeSec);
	void SetScrubMode(bool bScrubMode);
	void SetScrubTimeWidth(float InScrubTimeWidthSec);
	void SetSoundWave(class USoundWave* InSoundWave);

	float GetCurrentPlaybackProgressPercent() const;
	float GetCurrentPlaybackProgressTime() const;
	float GetSampleDuration() const;
	bool IsLoaded() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SynthSamplePlayer">();
	}
	static class USynthSamplePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USynthSamplePlayer>();
	}
};

// Class Synthesis.SynthesisUtilitiesBlueprintFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class USynthesisUtilitiesBlueprintFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float GetLinearFrequency(float InLogFrequencyValue, float InDomainMin, float InDomainMax, float InRangeMin, float InRangeMax);
	static float GetLogFrequency(float InLinearValue, float InDomainMin, float InDomainMax, float InRangeMin, float InRangeMax);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SynthesisUtilitiesBlueprintFunctionLibrary">();
	}
	static class USynthesisUtilitiesBlueprintFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USynthesisUtilitiesBlueprintFunctionLibrary>();
	}
};

// Class Synthesis.Synth2DSlider
// 0x04F8 (0x06B0 - 0x01B8)
class USynth2DSlider final : public UWidget
{
public:
	float                                         ValueX;                                            // 0x01B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueY;                                            // 0x01BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ValueXDelegate;                                    // 0x01C0(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ValueYDelegate;                                    // 0x01D4(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8[0x8];                                      // 0x01E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSynth2DSliderStyle                    WidgetStyle;                                       // 0x01F0(0x0430)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FLinearColor                           SliderHandleColor;                                 // 0x0620(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IndentHandle;                                      // 0x0630(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Locked;                                            // 0x0631(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_632[0x2];                                      // 0x0632(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StepSize;                                          // 0x0634(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x0638(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_639[0x7];                                      // 0x0639(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnMouseCaptureBegin;                               // 0x0640(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMouseCaptureEnd;                                 // 0x0650(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnControllerCaptureBegin;                          // 0x0660(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnControllerCaptureEnd;                            // 0x0670(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float Value)>   OnValueChangedX;                                   // 0x0680(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float Value)>   OnValueChangedY;                                   // 0x0690(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A0[0x10];                                     // 0x06A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetIndentHandle(bool InValue);
	void SetLocked(bool InValue);
	void SetSliderHandleColor(const struct FLinearColor& InValue);
	void SetStepSize(float InValue);
	void SetValue(const struct FVector2D& InValue);

	struct FVector2D GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Synth2DSlider">();
	}
	static class USynth2DSlider* GetDefaultObj()
	{
		return GetDefaultObjImpl<USynth2DSlider>();
	}
};

// Class Synthesis.SynthKnob
// 0x0438 (0x05F0 - 0x01B8)
class USynthKnob final : public UWidget
{
public:
	float                                         Value;                                             // 0x01B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StepSize;                                          // 0x01BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouseSpeed;                                        // 0x01C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MouseFineTuneSpeed;                                // 0x01C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ShowTooltipInfo : 1;                               // 0x01C8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1C9[0x7];                                      // 0x01C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ParameterName;                                     // 0x01D0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   ParameterUnits;                                    // 0x01E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TDelegate<void()>                             ValueDelegate;                                     // 0x0200(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214[0xC];                                      // 0x0214(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSynthKnobStyle                        WidgetStyle;                                       // 0x0220(0x0360)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          Locked;                                            // 0x0580(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsFocusable;                                       // 0x0581(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_582[0x6];                                      // 0x0582(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnMouseCaptureBegin;                               // 0x0588(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMouseCaptureEnd;                                 // 0x0598(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnControllerCaptureBegin;                          // 0x05A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnControllerCaptureEnd;                            // 0x05B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float Value)>   OnValueChanged;                                    // 0x05C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D8[0x18];                                     // 0x05D8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetLocked(bool InValue);
	void SetStepSize(float InValue);
	void SetValue(float InValue);

	float GetValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SynthKnob">();
	}
	static class USynthKnob* GetDefaultObj()
	{
		return GetDefaultObjImpl<USynthKnob>();
	}
};

}

