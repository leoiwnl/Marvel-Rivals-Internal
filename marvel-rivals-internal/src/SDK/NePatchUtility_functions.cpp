#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NePatchUtility

#include "Basic.hpp"

#include "NePatchUtility_classes.hpp"
#include "NePatchUtility_parameters.hpp"


namespace SDK
{

// Function NePatchUtility.NePatchUtility.AddContainerHeaderData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FNePatchUCasFileHandle           UCasFile                                               (Parm, NativeAccessSpecifierPublic)
// class FString                           ContainerEntryChunkID                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::AddContainerHeaderData(const struct FNePatchUCasFileHandle& UCasFile, const class FString& ContainerEntryChunkID, const TArray<uint8>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "AddContainerHeaderData");

	Params::NePatchUtility_AddContainerHeaderData Parms{};

	Parms.UCasFile = std::move(UCasFile);
	Parms.ContainerEntryChunkID = std::move(ContainerEntryChunkID);
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.AddPakData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FNePatchPakFileHandle            PakFile                                                (Parm, NativeAccessSpecifierPublic)
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::AddPakData(const struct FNePatchPakFileHandle& PakFile, const class FString& Filename, const TArray<uint8>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "AddPakData");

	Params::NePatchUtility_AddPakData Parms{};

	Parms.PakFile = std::move(PakFile);
	Parms.Filename = std::move(Filename);
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.AddShaderCodeData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FNePatchShaderLibraryFileHandle  ShaderLibrary                                          (Parm, NativeAccessSpecifierPublic)
// class FString                           ShaderHash                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::AddShaderCodeData(const struct FNePatchShaderLibraryFileHandle& ShaderLibrary, const class FString& ShaderHash, const TArray<uint8>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "AddShaderCodeData");

	Params::NePatchUtility_AddShaderCodeData Parms{};

	Parms.ShaderLibrary = std::move(ShaderLibrary);
	Parms.ShaderHash = std::move(ShaderHash);
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.AddUCasData
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FNePatchUCasFileHandle           UCasFile                                               (Parm, NativeAccessSpecifierPublic)
// struct FNePatchUtocEntry                Entry                                                  (ConstParm, Parm, NativeAccessSpecifierPublic)
// TArray<uint8>                           Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::AddUCasData(const struct FNePatchUCasFileHandle& UCasFile, const struct FNePatchUtocEntry& Entry, const TArray<uint8>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "AddUCasData");

	Params::NePatchUtility_AddUCasData Parms{};

	Parms.UCasFile = std::move(UCasFile);
	Parms.Entry = std::move(Entry);
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.AddUCasDataFromResultUtoc
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FNePatchUCasFileHandle           UCasFile                                               (Parm, NativeAccessSpecifierPublic)
// struct FNePatchUtocFileHandle           ResultUtocFileHandle                                   (Parm, NativeAccessSpecifierPublic)
// class FString                           ChunkIdStr                                             (ConstParm, Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           Data                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::AddUCasDataFromResultUtoc(const struct FNePatchUCasFileHandle& UCasFile, const struct FNePatchUtocFileHandle& ResultUtocFileHandle, const class FString& ChunkIdStr, const TArray<uint8>& Data)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "AddUCasDataFromResultUtoc");

	Params::NePatchUtility_AddUCasDataFromResultUtoc Parms{};

	Parms.UCasFile = std::move(UCasFile);
	Parms.ResultUtocFileHandle = std::move(ResultUtocFileHandle);
	Parms.ChunkIdStr = std::move(ChunkIdStr);
	Parms.Data = std::move(Data);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.ApplyShaderLibrary
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::ApplyShaderLibrary(const class FString& Name_0, const class FString& Directory)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "ApplyShaderLibrary");

	Params::NePatchUtility_ApplyShaderLibrary Parms{};

	Parms.Name_0 = std::move(Name_0);
	Parms.Directory = std::move(Directory);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.CalcPakDownloadEntries
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchPakFileHandle            PakFile                                                (Parm, NativeAccessSpecifierPublic)
// struct FNePatchHashFileHandle           RemoteHashFile                                         (Parm, NativeAccessSpecifierPublic)
// TArray<struct FNePatchEntry>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FNePatchEntry> UNePatchUtility::CalcPakDownloadEntries(const struct FNePatchPakFileHandle& PakFile, const struct FNePatchHashFileHandle& RemoteHashFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "CalcPakDownloadEntries");

	Params::NePatchUtility_CalcPakDownloadEntries Parms{};

	Parms.PakFile = std::move(PakFile);
	Parms.RemoteHashFile = std::move(RemoteHashFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.CalcShaderLibraryDownloadEntries
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchShaderLibraryFileHandle  ShaderLibrary                                          (Parm, NativeAccessSpecifierPublic)
// struct FNePatchShaderHashFileHandle     RemoteHashFile                                         (Parm, NativeAccessSpecifierPublic)
// TArray<struct FNePatchShaderCodeEntry>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FNePatchShaderCodeEntry> UNePatchUtility::CalcShaderLibraryDownloadEntries(const struct FNePatchShaderLibraryFileHandle& ShaderLibrary, const struct FNePatchShaderHashFileHandle& RemoteHashFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "CalcShaderLibraryDownloadEntries");

	Params::NePatchUtility_CalcShaderLibraryDownloadEntries Parms{};

	Parms.ShaderLibrary = std::move(ShaderLibrary);
	Parms.RemoteHashFile = std::move(RemoteHashFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.CheckEntryDataHash
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FNePatchUtocFileHandle           ResultUtocFileHandle                                   (Parm, NativeAccessSpecifierPublic)
// class FString                           ChunkIdStr                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<uint8>                           CompressedData                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::CheckEntryDataHash(const struct FNePatchUtocFileHandle& ResultUtocFileHandle, const class FString& ChunkIdStr, const TArray<uint8>& CompressedData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "CheckEntryDataHash");

	Params::NePatchUtility_CheckEntryDataHash Parms{};

	Parms.ResultUtocFileHandle = std::move(ResultUtocFileHandle);
	Parms.ChunkIdStr = std::move(ChunkIdStr);
	Parms.CompressedData = std::move(CompressedData);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.CheckNeedUpdateWholeFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchHashFileHandle           OldHashFile                                            (Parm, NativeAccessSpecifierPublic)
// struct FNePatchHashFileHandle           NewHashFile                                            (Parm, NativeAccessSpecifierPublic)
// bool                                    bPrintReason                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::CheckNeedUpdateWholeFile(const struct FNePatchHashFileHandle& OldHashFile, const struct FNePatchHashFileHandle& NewHashFile, bool bPrintReason)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "CheckNeedUpdateWholeFile");

	Params::NePatchUtility_CheckNeedUpdateWholeFile Parms{};

	Parms.OldHashFile = std::move(OldHashFile);
	Parms.NewHashFile = std::move(NewHashFile);
	Parms.bPrintReason = bPrintReason;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.ClosePak
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchPakFileHandle            PakFile                                                (Parm, NativeAccessSpecifierPublic)

void UNePatchUtility::ClosePak(const struct FNePatchPakFileHandle& PakFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "ClosePak");

	Params::NePatchUtility_ClosePak Parms{};

	Parms.PakFile = std::move(PakFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NePatchUtility.NePatchUtility.ClosePakHash
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchHashFileHandle           HashFile                                               (Parm, NativeAccessSpecifierPublic)

void UNePatchUtility::ClosePakHash(const struct FNePatchHashFileHandle& HashFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "ClosePakHash");

	Params::NePatchUtility_ClosePakHash Parms{};

	Parms.HashFile = std::move(HashFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NePatchUtility.NePatchUtility.CloseShaderHash
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchShaderHashFileHandle     HashFile                                               (Parm, NativeAccessSpecifierPublic)

void UNePatchUtility::CloseShaderHash(const struct FNePatchShaderHashFileHandle& HashFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "CloseShaderHash");

	Params::NePatchUtility_CloseShaderHash Parms{};

	Parms.HashFile = std::move(HashFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NePatchUtility.NePatchUtility.CloseShaderLibrary
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchShaderLibraryFileHandle  ShaderLibrary                                          (Parm, NativeAccessSpecifierPublic)

void UNePatchUtility::CloseShaderLibrary(const struct FNePatchShaderLibraryFileHandle& ShaderLibrary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "CloseShaderLibrary");

	Params::NePatchUtility_CloseShaderLibrary Parms{};

	Parms.ShaderLibrary = std::move(ShaderLibrary);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NePatchUtility.NePatchUtility.CloseUCas
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchUCasFileHandle           UCasFile                                               (Parm, NativeAccessSpecifierPublic)

void UNePatchUtility::CloseUCas(const struct FNePatchUCasFileHandle& UCasFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "CloseUCas");

	Params::NePatchUtility_CloseUCas Parms{};

	Parms.UCasFile = std::move(UCasFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NePatchUtility.NePatchUtility.CloseUtoc
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchUtocFileHandle           TocFile                                                (Parm, NativeAccessSpecifierPublic)

void UNePatchUtility::CloseUtoc(const struct FNePatchUtocFileHandle& TocFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "CloseUtoc");

	Params::NePatchUtility_CloseUtoc Parms{};

	Parms.TocFile = std::move(TocFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NePatchUtility.NePatchUtility.ComparePakHash
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchHashFileHandle           OldHashFile                                            (Parm, NativeAccessSpecifierPublic)
// struct FNePatchHashFileHandle           NewHashFile                                            (Parm, NativeAccessSpecifierPublic)
// TArray<struct FNePatchEntry>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FNePatchEntry> UNePatchUtility::ComparePakHash(const struct FNePatchHashFileHandle& OldHashFile, const struct FNePatchHashFileHandle& NewHashFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "ComparePakHash");

	Params::NePatchUtility_ComparePakHash Parms{};

	Parms.OldHashFile = std::move(OldHashFile);
	Parms.NewHashFile = std::move(NewHashFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.ComparePakHashList
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// TArray<struct FNePatchHashFileHandle>   LocalHashFileList                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FNePatchHashFileHandle>   RemoteHashFileList                                     (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FNePatchEntry>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FNePatchEntry> UNePatchUtility::ComparePakHashList(const TArray<struct FNePatchHashFileHandle>& LocalHashFileList, const TArray<struct FNePatchHashFileHandle>& RemoteHashFileList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "ComparePakHashList");

	Params::NePatchUtility_ComparePakHashList Parms{};

	Parms.LocalHashFileList = std::move(LocalHashFileList);
	Parms.RemoteHashFileList = std::move(RemoteHashFileList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.ComparePakHashToHandle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FNePatchHashFileHandle>   LocalHashFileList                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FNePatchHashFileHandle>   RemoteHashFileList                                     (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FNePatchHashFileHandle           OutHashFileHandle                                      (Parm, OutParm, NativeAccessSpecifierPublic)
// TArray<struct FNePatchEntry>            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FNePatchEntry> UNePatchUtility::ComparePakHashToHandle(const TArray<struct FNePatchHashFileHandle>& LocalHashFileList, const TArray<struct FNePatchHashFileHandle>& RemoteHashFileList, struct FNePatchHashFileHandle* OutHashFileHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "ComparePakHashToHandle");

	Params::NePatchUtility_ComparePakHashToHandle Parms{};

	Parms.LocalHashFileList = std::move(LocalHashFileList);
	Parms.RemoteHashFileList = std::move(RemoteHashFileList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHashFileHandle != nullptr)
		*OutHashFileHandle = std::move(Parms.OutHashFileHandle);

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.CompareUtoc
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FNePatchUtocFileHandle           OldTocFile                                             (Parm, NativeAccessSpecifierPublic)
// struct FNePatchUtocFileHandle           NewTocFile                                             (Parm, NativeAccessSpecifierPublic)
// struct FNePatchUtocFileHandle           OutTocResource                                         (Parm, OutParm, NativeAccessSpecifierPublic)
// TArray<struct FNePatchUtocEntry>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FNePatchUtocEntry> UNePatchUtility::CompareUtoc(const struct FNePatchUtocFileHandle& OldTocFile, const struct FNePatchUtocFileHandle& NewTocFile, struct FNePatchUtocFileHandle* OutTocResource)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "CompareUtoc");

	Params::NePatchUtility_CompareUtoc Parms{};

	Parms.OldTocFile = std::move(OldTocFile);
	Parms.NewTocFile = std::move(NewTocFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTocResource != nullptr)
		*OutTocResource = std::move(Parms.OutTocResource);

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.CompareUtocs
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FNePatchUtocFileHandle>   LocalTocFileList                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FNePatchUtocFileHandle>   RemoteTocFileList                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FNePatchUtocEntry>        DiffEntries                                            (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FNePatchUtocEntry>        DifferHeaderEntries                                    (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::CompareUtocs(const TArray<struct FNePatchUtocFileHandle>& LocalTocFileList, const TArray<struct FNePatchUtocFileHandle>& RemoteTocFileList, TArray<struct FNePatchUtocEntry>* DiffEntries, TArray<struct FNePatchUtocEntry>* DifferHeaderEntries)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "CompareUtocs");

	Params::NePatchUtility_CompareUtocs Parms{};

	Parms.LocalTocFileList = std::move(LocalTocFileList);
	Parms.RemoteTocFileList = std::move(RemoteTocFileList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DiffEntries != nullptr)
		*DiffEntries = std::move(Parms.DiffEntries);

	if (DifferHeaderEntries != nullptr)
		*DifferHeaderEntries = std::move(Parms.DifferHeaderEntries);

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.CompareUtocsToResultUtoc
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FNePatchUtocFileHandle>   LocalTocFileList                                       (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FNePatchUtocFileHandle>   RemoteTocFileList                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// struct FNePatchUtocFileHandle           OutResultUtocFileHandle                                (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::CompareUtocsToResultUtoc(const TArray<struct FNePatchUtocFileHandle>& LocalTocFileList, const TArray<struct FNePatchUtocFileHandle>& RemoteTocFileList, struct FNePatchUtocFileHandle* OutResultUtocFileHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "CompareUtocsToResultUtoc");

	Params::NePatchUtility_CompareUtocsToResultUtoc Parms{};

	Parms.LocalTocFileList = std::move(LocalTocFileList);
	Parms.RemoteTocFileList = std::move(RemoteTocFileList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutResultUtocFileHandle != nullptr)
		*OutResultUtocFileHandle = std::move(Parms.OutResultUtocFileHandle);

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.CopyDataFromOtherPak
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchPakFileHandle            PakFile                                                (Parm, NativeAccessSpecifierPublic)
// class FString                           OtherPakFilename                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNePatchHashFileHandle           OtherHashFile                                          (Parm, NativeAccessSpecifierPublic)
// bool                                    bSalvageMode                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSkipExistingData                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::CopyDataFromOtherPak(const struct FNePatchPakFileHandle& PakFile, const class FString& OtherPakFilename, const struct FNePatchHashFileHandle& OtherHashFile, bool bSalvageMode, bool bSkipExistingData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "CopyDataFromOtherPak");

	Params::NePatchUtility_CopyDataFromOtherPak Parms{};

	Parms.PakFile = std::move(PakFile);
	Parms.OtherPakFilename = std::move(OtherPakFilename);
	Parms.OtherHashFile = std::move(OtherHashFile);
	Parms.bSalvageMode = bSalvageMode;
	Parms.bSkipExistingData = bSkipExistingData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.CopyDataFromOtherShaderLibrary
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchShaderLibraryFileHandle  ShaderLibrary                                          (Parm, NativeAccessSpecifierPublic)
// class FString                           OtherShaderLibraryPath                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNePatchShaderHashFileHandle     OtherHashFile                                          (Parm, NativeAccessSpecifierPublic)
// bool                                    bSalvageMode                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSkipExistingData                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::CopyDataFromOtherShaderLibrary(const struct FNePatchShaderLibraryFileHandle& ShaderLibrary, const class FString& OtherShaderLibraryPath, const struct FNePatchShaderHashFileHandle& OtherHashFile, bool bSalvageMode, bool bSkipExistingData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "CopyDataFromOtherShaderLibrary");

	Params::NePatchUtility_CopyDataFromOtherShaderLibrary Parms{};

	Parms.ShaderLibrary = std::move(ShaderLibrary);
	Parms.OtherShaderLibraryPath = std::move(OtherShaderLibraryPath);
	Parms.OtherHashFile = std::move(OtherHashFile);
	Parms.bSalvageMode = bSalvageMode;
	Parms.bSkipExistingData = bSkipExistingData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.CopyFromOtherUtoc
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FNePatchUtocFileHandle           OtherUtocFile                                          (Parm, NativeAccessSpecifierPublic)
// TArray<struct FNePatchUtocEntry>        InOutDiffEntries                                       (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::CopyFromOtherUtoc(const struct FNePatchUtocFileHandle& OtherUtocFile, TArray<struct FNePatchUtocEntry>* InOutDiffEntries)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "CopyFromOtherUtoc");

	Params::NePatchUtility_CopyFromOtherUtoc Parms{};

	Parms.OtherUtocFile = std::move(OtherUtocFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (InOutDiffEntries != nullptr)
		*InOutDiffEntries = std::move(Parms.InOutDiffEntries);

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.CopyFromOtherUtocToResultUtoc
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchUtocFileHandle           OtherUtocFile                                          (Parm, NativeAccessSpecifierPublic)
// struct FNePatchUtocFileHandle           ResultUtocFileHandle                                   (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::CopyFromOtherUtocToResultUtoc(const struct FNePatchUtocFileHandle& OtherUtocFile, const struct FNePatchUtocFileHandle& ResultUtocFileHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "CopyFromOtherUtocToResultUtoc");

	Params::NePatchUtility_CopyFromOtherUtocToResultUtoc Parms{};

	Parms.OtherUtocFile = std::move(OtherUtocFile);
	Parms.ResultUtocFileHandle = std::move(ResultUtocFileHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.CopyHashFiles
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           SrcDirectory                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           DstDirectory                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Extension                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::CopyHashFiles(const class FString& SrcDirectory, const class FString& DstDirectory, const class FString& Extension)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "CopyHashFiles");

	Params::NePatchUtility_CopyHashFiles Parms{};

	Parms.SrcDirectory = std::move(SrcDirectory);
	Parms.DstDirectory = std::move(DstDirectory);
	Parms.Extension = std::move(Extension);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.FlushContainerHeaderData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchUCasFileHandle           UCasFile                                               (Parm, NativeAccessSpecifierPublic)
// struct FNePatchUtocFileHandle           ResultUtocFileHandle                                   (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::FlushContainerHeaderData(const struct FNePatchUCasFileHandle& UCasFile, const struct FNePatchUtocFileHandle& ResultUtocFileHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "FlushContainerHeaderData");

	Params::NePatchUtility_FlushContainerHeaderData Parms{};

	Parms.UCasFile = std::move(UCasFile);
	Parms.ResultUtocFileHandle = std::move(ResultUtocFileHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.GetHashFilePaths
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           Directory                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Extension                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UNePatchUtility::GetHashFilePaths(const class FString& Directory, const class FString& Extension)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "GetHashFilePaths");

	Params::NePatchUtility_GetHashFilePaths Parms{};

	Parms.Directory = std::move(Directory);
	Parms.Extension = std::move(Extension);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.GetPakHashCompressionMethods
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchHashFileHandle           HashFile                                               (Parm, NativeAccessSpecifierPublic)
// const TArray<class FName>               ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<class FName> UNePatchUtility::GetPakHashCompressionMethods(const struct FNePatchHashFileHandle& HashFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "GetPakHashCompressionMethods");

	Params::NePatchUtility_GetPakHashCompressionMethods Parms{};

	Parms.HashFile = std::move(HashFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.GetPakHashMountPoint
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchHashFileHandle           HashFile                                               (Parm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UNePatchUtility::GetPakHashMountPoint(const struct FNePatchHashFileHandle& HashFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "GetPakHashMountPoint");

	Params::NePatchUtility_GetPakHashMountPoint Parms{};

	Parms.HashFile = std::move(HashFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.GetPakHashPatchEntries
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchHashFileHandle           HashFile                                               (Parm, NativeAccessSpecifierPublic)
// const TArray<struct FNePatchEntry>      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FNePatchEntry> UNePatchUtility::GetPakHashPatchEntries(const struct FNePatchHashFileHandle& HashFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "GetPakHashPatchEntries");

	Params::NePatchUtility_GetPakHashPatchEntries Parms{};

	Parms.HashFile = std::move(HashFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.GetPakHashPatchEntry
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchHashFileHandle           HashFile                                               (Parm, NativeAccessSpecifierPublic)
// int32                                   EntryIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FNePatchEntry              ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const struct FNePatchEntry UNePatchUtility::GetPakHashPatchEntry(const struct FNePatchHashFileHandle& HashFile, int32 EntryIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "GetPakHashPatchEntry");

	Params::NePatchUtility_GetPakHashPatchEntry Parms{};

	Parms.HashFile = std::move(HashFile);
	Parms.EntryIndex = EntryIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.GetPakHashPatchEntryCount
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchHashFileHandle           HashFile                                               (Parm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UNePatchUtility::GetPakHashPatchEntryCount(const struct FNePatchHashFileHandle& HashFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "GetPakHashPatchEntryCount");

	Params::NePatchUtility_GetPakHashPatchEntryCount Parms{};

	Parms.HashFile = std::move(HashFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.GetPakPatchEntries
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchPakFileHandle            PakFile                                                (Parm, NativeAccessSpecifierPublic)
// const TArray<struct FNePatchEntry>      ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, NativeAccessSpecifierPublic)

const TArray<struct FNePatchEntry> UNePatchUtility::GetPakPatchEntries(const struct FNePatchPakFileHandle& PakFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "GetPakPatchEntries");

	Params::NePatchUtility_GetPakPatchEntries Parms{};

	Parms.PakFile = std::move(PakFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.GetShaderHashLibraryCodeOffset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchShaderHashFileHandle     HashFile                                               (Parm, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UNePatchUtility::GetShaderHashLibraryCodeOffset(const struct FNePatchShaderHashFileHandle& HashFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "GetShaderHashLibraryCodeOffset");

	Params::NePatchUtility_GetShaderHashLibraryCodeOffset Parms{};

	Parms.HashFile = std::move(HashFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.GetShaderLibraryLibraryCodeOffset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchShaderLibraryFileHandle  ShaderLibrary                                          (Parm, NativeAccessSpecifierPublic)
// int64                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int64 UNePatchUtility::GetShaderLibraryLibraryCodeOffset(const struct FNePatchShaderLibraryFileHandle& ShaderLibrary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "GetShaderLibraryLibraryCodeOffset");

	Params::NePatchUtility_GetShaderLibraryLibraryCodeOffset Parms{};

	Parms.ShaderLibrary = std::move(ShaderLibrary);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.GetUTocPatchEntries
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchUtocFileHandle           UtocFile                                               (Parm, NativeAccessSpecifierPublic)
// TArray<struct FNePatchUtocEntry>        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<struct FNePatchUtocEntry> UNePatchUtility::GetUTocPatchEntries(const struct FNePatchUtocFileHandle& UtocFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "GetUTocPatchEntries");

	Params::NePatchUtility_GetUTocPatchEntries Parms{};

	Parms.UtocFile = std::move(UtocFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.GetUTocPatchEntry
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchUtocFileHandle           UtocFile                                               (Parm, NativeAccessSpecifierPublic)
// class FString                           ChunkIdStr                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNePatchUtocEntry                ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FNePatchUtocEntry UNePatchUtility::GetUTocPatchEntry(const struct FNePatchUtocFileHandle& UtocFile, const class FString& ChunkIdStr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "GetUTocPatchEntry");

	Params::NePatchUtility_GetUTocPatchEntry Parms{};

	Parms.UtocFile = std::move(UtocFile);
	Parms.ChunkIdStr = std::move(ChunkIdStr);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.HasActiveWiFiConnection
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::HasActiveWiFiConnection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "HasActiveWiFiConnection");

	Params::NePatchUtility_HasActiveWiFiConnection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.MergeAllUCasDataFromFolder
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchUCasFileHandle           UCasFile                                               (Parm, NativeAccessSpecifierPublic)
// struct FNePatchUtocFileHandle           ResultUtocFileHandle                                   (Parm, NativeAccessSpecifierPublic)
// class FString                           UCasDataFolder                                         (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::MergeAllUCasDataFromFolder(const struct FNePatchUCasFileHandle& UCasFile, const struct FNePatchUtocFileHandle& ResultUtocFileHandle, const class FString& UCasDataFolder)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "MergeAllUCasDataFromFolder");

	Params::NePatchUtility_MergeAllUCasDataFromFolder Parms{};

	Parms.UCasFile = std::move(UCasFile);
	Parms.ResultUtocFileHandle = std::move(ResultUtocFileHandle);
	Parms.UCasDataFolder = std::move(UCasDataFolder);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.MountPak
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           PakFilename                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Order                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::MountPak(const class FString& PakFilename, int32 Order)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "MountPak");

	Params::NePatchUtility_MountPak Parms{};

	Parms.PakFilename = std::move(PakFilename);
	Parms.Order = Order;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.MountPakWithMountPoint
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           PakFilename                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PakOrder                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           MountPoint                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::MountPakWithMountPoint(const class FString& PakFilename, int32 PakOrder, const class FString& MountPoint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "MountPakWithMountPoint");

	Params::NePatchUtility_MountPakWithMountPoint Parms{};

	Parms.PakFilename = std::move(PakFilename);
	Parms.PakOrder = PakOrder;
	Parms.MountPoint = std::move(MountPoint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.OpenPakForWrite
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           PakFilePath                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNePatchHashFileHandle           RemoteHashFile                                         (Parm, NativeAccessSpecifierPublic)
// struct FNePatchPakFileHandle            OutPakFile                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::OpenPakForWrite(const class FString& PakFilePath, const struct FNePatchHashFileHandle& RemoteHashFile, struct FNePatchPakFileHandle* OutPakFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "OpenPakForWrite");

	Params::NePatchUtility_OpenPakForWrite Parms{};

	Parms.PakFilePath = std::move(PakFilePath);
	Parms.RemoteHashFile = std::move(RemoteHashFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPakFile != nullptr)
		*OutPakFile = std::move(Parms.OutPakFile);

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.OpenPakForWriteWithInitialHash
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           PakFilePath                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNePatchHashFileHandle           RemoteHashFile                                         (Parm, NativeAccessSpecifierPublic)
// struct FNePatchHashFileHandle           InitialHashFile                                        (Parm, NativeAccessSpecifierPublic)
// struct FNePatchPakFileHandle            OutPakFile                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::OpenPakForWriteWithInitialHash(const class FString& PakFilePath, const struct FNePatchHashFileHandle& RemoteHashFile, const struct FNePatchHashFileHandle& InitialHashFile, struct FNePatchPakFileHandle* OutPakFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "OpenPakForWriteWithInitialHash");

	Params::NePatchUtility_OpenPakForWriteWithInitialHash Parms{};

	Parms.PakFilePath = std::move(PakFilePath);
	Parms.RemoteHashFile = std::move(RemoteHashFile);
	Parms.InitialHashFile = std::move(InitialHashFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPakFile != nullptr)
		*OutPakFile = std::move(Parms.OutPakFile);

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.OpenPakHash
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           HashFilePath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNePatchHashFileHandle           OutHashFile                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::OpenPakHash(const class FString& HashFilePath, struct FNePatchHashFileHandle* OutHashFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "OpenPakHash");

	Params::NePatchUtility_OpenPakHash Parms{};

	Parms.HashFilePath = std::move(HashFilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHashFile != nullptr)
		*OutHashFile = std::move(Parms.OutHashFile);

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.OpenShaderHash
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           HashFilePath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNePatchShaderHashFileHandle     OutHashFile                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::OpenShaderHash(const class FString& HashFilePath, struct FNePatchShaderHashFileHandle* OutHashFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "OpenShaderHash");

	Params::NePatchUtility_OpenShaderHash Parms{};

	Parms.HashFilePath = std::move(HashFilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutHashFile != nullptr)
		*OutHashFile = std::move(Parms.OutHashFile);

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.OpenShaderLibraryForWrite
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           ShaderLibraryPath                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNePatchShaderHashFileHandle     RemoteHashFile                                         (Parm, NativeAccessSpecifierPublic)
// struct FNePatchShaderLibraryFileHandle  OutShaderLibrary                                       (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::OpenShaderLibraryForWrite(const class FString& ShaderLibraryPath, const struct FNePatchShaderHashFileHandle& RemoteHashFile, struct FNePatchShaderLibraryFileHandle* OutShaderLibrary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "OpenShaderLibraryForWrite");

	Params::NePatchUtility_OpenShaderLibraryForWrite Parms{};

	Parms.ShaderLibraryPath = std::move(ShaderLibraryPath);
	Parms.RemoteHashFile = std::move(RemoteHashFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutShaderLibrary != nullptr)
		*OutShaderLibrary = std::move(Parms.OutShaderLibrary);

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.OpenShaderLibraryForWriteWithInitialHash
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           ShaderLibraryPath                                      (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNePatchShaderHashFileHandle     RemoteHashFile                                         (Parm, NativeAccessSpecifierPublic)
// struct FNePatchShaderHashFileHandle     InitialHashFile                                        (Parm, NativeAccessSpecifierPublic)
// struct FNePatchShaderLibraryFileHandle  OutShaderLibrary                                       (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::OpenShaderLibraryForWriteWithInitialHash(const class FString& ShaderLibraryPath, const struct FNePatchShaderHashFileHandle& RemoteHashFile, const struct FNePatchShaderHashFileHandle& InitialHashFile, struct FNePatchShaderLibraryFileHandle* OutShaderLibrary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "OpenShaderLibraryForWriteWithInitialHash");

	Params::NePatchUtility_OpenShaderLibraryForWriteWithInitialHash Parms{};

	Parms.ShaderLibraryPath = std::move(ShaderLibraryPath);
	Parms.RemoteHashFile = std::move(RemoteHashFile);
	Parms.InitialHashFile = std::move(InitialHashFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutShaderLibrary != nullptr)
		*OutShaderLibrary = std::move(Parms.OutShaderLibrary);

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.OpenUcasForWrite
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           UCasFilePath                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNePatchUCasFileHandle           OutUCasFile                                            (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::OpenUcasForWrite(const class FString& UCasFilePath, struct FNePatchUCasFileHandle* OutUCasFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "OpenUcasForWrite");

	Params::NePatchUtility_OpenUcasForWrite Parms{};

	Parms.UCasFilePath = std::move(UCasFilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutUCasFile != nullptr)
		*OutUCasFile = std::move(Parms.OutUCasFile);

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.OpenUtoc
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           TocFilePath                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNePatchUtocFileHandle           OutTocFile                                             (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::OpenUtoc(const class FString& TocFilePath, struct FNePatchUtocFileHandle* OutTocFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "OpenUtoc");

	Params::NePatchUtility_OpenUtoc Parms{};

	Parms.TocFilePath = std::move(TocFilePath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTocFile != nullptr)
		*OutTocFile = std::move(Parms.OutTocFile);

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.RegisterDecryptKey
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           DecryptionKeyStr                                       (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::RegisterDecryptKey(const class FString& DecryptionKeyStr)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "RegisterDecryptKey");

	Params::NePatchUtility_RegisterDecryptKey Parms{};

	Parms.DecryptionKeyStr = std::move(DecryptionKeyStr);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.SavePakHashFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchPakFileHandle            PakFile                                                (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::SavePakHashFile(const struct FNePatchPakFileHandle& PakFile)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "SavePakHashFile");

	Params::NePatchUtility_SavePakHashFile Parms{};

	Parms.PakFile = std::move(PakFile);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.SaveShaderLibraryHashFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FNePatchShaderLibraryFileHandle  ShaderLibrary                                          (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::SaveShaderLibraryHashFile(const struct FNePatchShaderLibraryFileHandle& ShaderLibrary)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "SaveShaderLibraryHashFile");

	Params::NePatchUtility_SaveShaderLibraryHashFile Parms{};

	Parms.ShaderLibrary = std::move(ShaderLibrary);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.SaveUtocFile
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           NewUtocFileName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FNePatchUtocEntry>        DiffEntryList                                          (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// TArray<struct FNePatchUtocFileHandle>   RemoteTocFileList                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::SaveUtocFile(const class FString& NewUtocFileName, const TArray<struct FNePatchUtocEntry>& DiffEntryList, const TArray<struct FNePatchUtocFileHandle>& RemoteTocFileList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "SaveUtocFile");

	Params::NePatchUtility_SaveUtocFile Parms{};

	Parms.NewUtocFileName = std::move(NewUtocFileName);
	Parms.DiffEntryList = std::move(DiffEntryList);
	Parms.RemoteTocFileList = std::move(RemoteTocFileList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.SaveUtocFileFromResultUtoc
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           NewUtocFileName                                        (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FNePatchUtocFileHandle           ResultUtocFileHandle                                   (Parm, NativeAccessSpecifierPublic)
// TArray<struct FNePatchUtocFileHandle>   RemoteTocFileList                                      (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::SaveUtocFileFromResultUtoc(const class FString& NewUtocFileName, const struct FNePatchUtocFileHandle& ResultUtocFileHandle, const TArray<struct FNePatchUtocFileHandle>& RemoteTocFileList)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "SaveUtocFileFromResultUtoc");

	Params::NePatchUtility_SaveUtocFileFromResultUtoc Parms{};

	Parms.NewUtocFileName = std::move(NewUtocFileName);
	Parms.ResultUtocFileHandle = std::move(ResultUtocFileHandle);
	Parms.RemoteTocFileList = std::move(RemoteTocFileList);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function NePatchUtility.NePatchUtility.SetPakHashPatchEntries
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FNePatchHashFileHandle           HashFile                                               (Parm, NativeAccessSpecifierPublic)
// TArray<struct FNePatchEntry>            Entries                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UNePatchUtility::SetPakHashPatchEntries(const struct FNePatchHashFileHandle& HashFile, const TArray<struct FNePatchEntry>& Entries)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "SetPakHashPatchEntries");

	Params::NePatchUtility_SetPakHashPatchEntries Parms{};

	Parms.HashFile = std::move(HashFile);
	Parms.Entries = std::move(Entries);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function NePatchUtility.NePatchUtility.UnmountPak
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class FString                           PakFilename                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UNePatchUtility::UnmountPak(const class FString& PakFilename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("NePatchUtility", "UnmountPak");

	Params::NePatchUtility_UnmountPak Parms{};

	Parms.PakFilename = std::move(PakFilename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

