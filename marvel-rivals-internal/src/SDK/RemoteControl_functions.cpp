#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: RemoteControl

#include "Basic.hpp"

#include "RemoteControl_classes.hpp"
#include "RemoteControl_parameters.hpp"


namespace SDK
{

// Function RemoteControl.RCVirtualPropertyBase.SetValueBool
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InBoolValue                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::SetValueBool(const bool InBoolValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "SetValueBool");

	Params::RCVirtualPropertyBase_SetValueBool Parms{};

	Parms.InBoolValue = InBoolValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.SetValueByte
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// uint8                                   InByte                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::SetValueByte(const uint8 InByte)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "SetValueByte");

	Params::RCVirtualPropertyBase_SetValueByte Parms{};

	Parms.InByte = InByte;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.SetValueColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FColor                           InColor                                                (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::SetValueColor(const struct FColor& InColor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "SetValueColor");

	Params::RCVirtualPropertyBase_SetValueColor Parms{};

	Parms.InColor = std::move(InColor);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.SetValueDouble
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// double                                  InDouble                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::SetValueDouble(const double InDouble)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "SetValueDouble");

	Params::RCVirtualPropertyBase_SetValueDouble Parms{};

	Parms.InDouble = InDouble;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.SetValueFloat
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InFloat                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::SetValueFloat(const float InFloat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "SetValueFloat");

	Params::RCVirtualPropertyBase_SetValueFloat Parms{};

	Parms.InFloat = InFloat;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.SetValueInt16
// (Final, Native, Public)
// Parameters:
// int16                                   InInt16                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::SetValueInt16(const int16 InInt16)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "SetValueInt16");

	Params::RCVirtualPropertyBase_SetValueInt16 Parms{};

	Parms.InInt16 = InInt16;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.SetValueInt32
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   InInt32                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::SetValueInt32(const int32 InInt32)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "SetValueInt32");

	Params::RCVirtualPropertyBase_SetValueInt32 Parms{};

	Parms.InInt32 = InInt32;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.SetValueInt64
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int64                                   InInt64                                                (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::SetValueInt64(const int64 InInt64)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "SetValueInt64");

	Params::RCVirtualPropertyBase_SetValueInt64 Parms{};

	Parms.InInt64 = InInt64;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.SetValueInt8
// (Final, Native, Public)
// Parameters:
// int8                                    InInt8                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::SetValueInt8(const int8 InInt8)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "SetValueInt8");

	Params::RCVirtualPropertyBase_SetValueInt8 Parms{};

	Parms.InInt8 = InInt8;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.SetValueName
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FName                             InNameValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::SetValueName(const class FName& InNameValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "SetValueName");

	Params::RCVirtualPropertyBase_SetValueName Parms{};

	Parms.InNameValue = InNameValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.SetValueNumericInteger
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int64                                   InInt64Value                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::SetValueNumericInteger(const int64 InInt64Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "SetValueNumericInteger");

	Params::RCVirtualPropertyBase_SetValueNumericInteger Parms{};

	Parms.InInt64Value = InInt64Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.SetValueRotator
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FRotator                         InRotator                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::SetValueRotator(const struct FRotator& InRotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "SetValueRotator");

	Params::RCVirtualPropertyBase_SetValueRotator Parms{};

	Parms.InRotator = std::move(InRotator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.SetValueString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           InStringValue                                          (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::SetValueString(const class FString& InStringValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "SetValueString");

	Params::RCVirtualPropertyBase_SetValueString Parms{};

	Parms.InStringValue = std::move(InStringValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.SetValueText
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             InTextValue                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::SetValueText(const class FText& InTextValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "SetValueText");

	Params::RCVirtualPropertyBase_SetValueText Parms{};

	Parms.InTextValue = std::move(InTextValue);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.SetValueUint16
// (Final, Native, Public)
// Parameters:
// uint16                                  InUInt16                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::SetValueUint16(const uint16 InUInt16)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "SetValueUint16");

	Params::RCVirtualPropertyBase_SetValueUint16 Parms{};

	Parms.InUInt16 = InUInt16;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.SetValueUInt32
// (Final, Native, Public)
// Parameters:
// uint32                                  InUInt32                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::SetValueUInt32(const uint32 InUInt32)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "SetValueUInt32");

	Params::RCVirtualPropertyBase_SetValueUInt32 Parms{};

	Parms.InUInt32 = InUInt32;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.SetValueUint64
// (Final, Native, Public)
// Parameters:
// uint64                                  InUInt64                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::SetValueUint64(const uint64 InUInt64)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "SetValueUint64");

	Params::RCVirtualPropertyBase_SetValueUint64 Parms{};

	Parms.InUInt64 = InUInt64;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.SetValueVector
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          InVector                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::SetValueVector(const struct FVector& InVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "SetValueVector");

	Params::RCVirtualPropertyBase_SetValueVector Parms{};

	Parms.InVector = std::move(InVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.GetDisplayValueAsString
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString URCVirtualPropertyBase::GetDisplayValueAsString() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "GetDisplayValueAsString");

	Params::RCVirtualPropertyBase_GetDisplayValueAsString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.GetPropertyName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName URCVirtualPropertyBase::GetPropertyName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "GetPropertyName");

	Params::RCVirtualPropertyBase_GetPropertyName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.GetValueBool
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    OutBoolValue                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::GetValueBool(bool* OutBoolValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "GetValueBool");

	Params::RCVirtualPropertyBase_GetValueBool Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutBoolValue != nullptr)
		*OutBoolValue = Parms.OutBoolValue;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.GetValueByte
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// uint8                                   OutByte                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::GetValueByte(uint8* OutByte) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "GetValueByte");

	Params::RCVirtualPropertyBase_GetValueByte Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutByte != nullptr)
		*OutByte = Parms.OutByte;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.GetValueColor
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FColor                           OutColor                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::GetValueColor(struct FColor* OutColor) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "GetValueColor");

	Params::RCVirtualPropertyBase_GetValueColor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutColor != nullptr)
		*OutColor = std::move(Parms.OutColor);

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.GetValueDouble
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// double                                  OutDouble                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::GetValueDouble(double* OutDouble) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "GetValueDouble");

	Params::RCVirtualPropertyBase_GetValueDouble Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutDouble != nullptr)
		*OutDouble = Parms.OutDouble;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.GetValueFloat
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   OutFloat                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::GetValueFloat(float* OutFloat) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "GetValueFloat");

	Params::RCVirtualPropertyBase_GetValueFloat Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutFloat != nullptr)
		*OutFloat = Parms.OutFloat;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.GetValueInt16
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// int16                                   OutInt16                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::GetValueInt16(int16* OutInt16) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "GetValueInt16");

	Params::RCVirtualPropertyBase_GetValueInt16 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutInt16 != nullptr)
		*OutInt16 = Parms.OutInt16;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.GetValueInt32
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   OutInt32                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::GetValueInt32(int32* OutInt32) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "GetValueInt32");

	Params::RCVirtualPropertyBase_GetValueInt32 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutInt32 != nullptr)
		*OutInt32 = Parms.OutInt32;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.GetValueInt64
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   OuyInt64                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::GetValueInt64(int64* OuyInt64) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "GetValueInt64");

	Params::RCVirtualPropertyBase_GetValueInt64 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OuyInt64 != nullptr)
		*OuyInt64 = Parms.OuyInt64;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.GetValueInt8
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// int8                                    OutInt8                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::GetValueInt8(int8* OutInt8) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "GetValueInt8");

	Params::RCVirtualPropertyBase_GetValueInt8 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutInt8 != nullptr)
		*OutInt8 = Parms.OutInt8;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.GetValueName
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             OutNameValue                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::GetValueName(class FName* OutNameValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "GetValueName");

	Params::RCVirtualPropertyBase_GetValueName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutNameValue != nullptr)
		*OutNameValue = Parms.OutNameValue;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.GetValueNumericInteger
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int64                                   OutInt64Value                                          (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::GetValueNumericInteger(int64* OutInt64Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "GetValueNumericInteger");

	Params::RCVirtualPropertyBase_GetValueNumericInteger Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutInt64Value != nullptr)
		*OutInt64Value = Parms.OutInt64Value;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.GetValueObject
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* URCVirtualPropertyBase::GetValueObject() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "GetValueObject");

	Params::RCVirtualPropertyBase_GetValueObject Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.GetValueRotator
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FRotator                         OutRotator                                             (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::GetValueRotator(struct FRotator* OutRotator) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "GetValueRotator");

	Params::RCVirtualPropertyBase_GetValueRotator Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutRotator != nullptr)
		*OutRotator = std::move(Parms.OutRotator);

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.GetValueString
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           OutStringValue                                         (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::GetValueString(class FString* OutStringValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "GetValueString");

	Params::RCVirtualPropertyBase_GetValueString Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutStringValue != nullptr)
		*OutStringValue = std::move(Parms.OutStringValue);

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.GetValueText
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FText                             OutTextValue                                           (Parm, OutParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::GetValueText(class FText* OutTextValue) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "GetValueText");

	Params::RCVirtualPropertyBase_GetValueText Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTextValue != nullptr)
		*OutTextValue = std::move(Parms.OutTextValue);

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.GetValueUint16
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// uint16                                  OutUInt16                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::GetValueUint16(uint16* OutUInt16) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "GetValueUint16");

	Params::RCVirtualPropertyBase_GetValueUint16 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutUInt16 != nullptr)
		*OutUInt16 = Parms.OutUInt16;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.GetValueUInt32
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// uint32                                  OutUInt32                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::GetValueUInt32(uint32* OutUInt32) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "GetValueUInt32");

	Params::RCVirtualPropertyBase_GetValueUInt32 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutUInt32 != nullptr)
		*OutUInt32 = Parms.OutUInt32;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.GetValueUint64
// (Final, Native, Public, HasOutParams, Const)
// Parameters:
// uint64                                  OuyUInt64                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::GetValueUint64(uint64* OuyUInt64) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "GetValueUint64");

	Params::RCVirtualPropertyBase_GetValueUint64 Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OuyUInt64 != nullptr)
		*OuyUInt64 = Parms.OuyUInt64;

	return Parms.ReturnValue;
}


// Function RemoteControl.RCVirtualPropertyBase.GetValueVector
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          OutVector                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URCVirtualPropertyBase::GetValueVector(struct FVector* OutVector) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RCVirtualPropertyBase", "GetValueVector");

	Params::RCVirtualPropertyBase_GetValueVector Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutVector != nullptr)
		*OutVector = std::move(Parms.OutVector);

	return Parms.ReturnValue;
}


// Function RemoteControl.RemoteControlDeltaAPITestObject.GetInt32WithSetterValue
// (Final, Native, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 URemoteControlDeltaAPITestObject::GetInt32WithSetterValue()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RemoteControlDeltaAPITestObject", "GetInt32WithSetterValue");

	Params::RemoteControlDeltaAPITestObject_GetInt32WithSetterValue Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RemoteControlDeltaAPITestObject.SetInt32WithSetterValue
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   NewValue                                               (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void URemoteControlDeltaAPITestObject::SetInt32WithSetterValue(const int32 NewValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RemoteControlDeltaAPITestObject", "SetInt32WithSetterValue");

	Params::RemoteControlDeltaAPITestObject_SetInt32WithSetterValue Parms{};

	Parms.NewValue = NewValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function RemoteControl.RemoteControlFunctionLibrary.ApplyColorGradingWheelDelta
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          TargetObject                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColorGradingWheelColor          DeltaValue                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FColorGradingWheelColor          ReferenceColor                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bIsInteractive                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MinValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   MaxValue                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URemoteControlFunctionLibrary::ApplyColorGradingWheelDelta(class UObject* TargetObject, const class FString& PropertyName, const struct FColorGradingWheelColor& DeltaValue, const struct FColorGradingWheelColor& ReferenceColor, bool bIsInteractive, float MinValue, float MaxValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RemoteControlFunctionLibrary", "ApplyColorGradingWheelDelta");

	Params::RemoteControlFunctionLibrary_ApplyColorGradingWheelDelta Parms{};

	Parms.TargetObject = TargetObject;
	Parms.PropertyName = std::move(PropertyName);
	Parms.DeltaValue = std::move(DeltaValue);
	Parms.ReferenceColor = std::move(ReferenceColor);
	Parms.bIsInteractive = bIsInteractive;
	Parms.MinValue = MinValue;
	Parms.MaxValue = MaxValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RemoteControlFunctionLibrary.ApplyColorWheelDelta
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UObject*                          TargetObject                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           PropertyName                                           (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FColorWheelColor                 DeltaValue                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FColorWheelColor                 ReferenceColor                                         (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// bool                                    bIsInteractive                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URemoteControlFunctionLibrary::ApplyColorWheelDelta(class UObject* TargetObject, const class FString& PropertyName, const struct FColorWheelColor& DeltaValue, const struct FColorWheelColor& ReferenceColor, bool bIsInteractive)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RemoteControlFunctionLibrary", "ApplyColorWheelDelta");

	Params::RemoteControlFunctionLibrary_ApplyColorWheelDelta Parms{};

	Parms.TargetObject = TargetObject;
	Parms.PropertyName = std::move(PropertyName);
	Parms.DeltaValue = std::move(DeltaValue);
	Parms.ReferenceColor = std::move(ReferenceColor);
	Parms.bIsInteractive = bIsInteractive;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RemoteControlFunctionLibrary.ExposeActor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class URemoteControlPreset*             Preset                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           Actor                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRemoteControlOptionalExposeArgs Args                                                   (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URemoteControlFunctionLibrary::ExposeActor(class URemoteControlPreset* Preset, class AActor* Actor, const struct FRemoteControlOptionalExposeArgs& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RemoteControlFunctionLibrary", "ExposeActor");

	Params::RemoteControlFunctionLibrary_ExposeActor Parms{};

	Parms.Preset = Preset;
	Parms.Actor = Actor;
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RemoteControlFunctionLibrary.ExposeFunction
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class URemoteControlPreset*             Preset                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          SourceObject                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Function                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRemoteControlOptionalExposeArgs Args                                                   (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URemoteControlFunctionLibrary::ExposeFunction(class URemoteControlPreset* Preset, class UObject* SourceObject, const class FString& Function, const struct FRemoteControlOptionalExposeArgs& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RemoteControlFunctionLibrary", "ExposeFunction");

	Params::RemoteControlFunctionLibrary_ExposeFunction Parms{};

	Parms.Preset = Preset;
	Parms.SourceObject = SourceObject;
	Parms.Function = std::move(Function);
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RemoteControlFunctionLibrary.ExposeProperty
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class URemoteControlPreset*             Preset                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          SourceObject                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Property                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRemoteControlOptionalExposeArgs Args                                                   (Parm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool URemoteControlFunctionLibrary::ExposeProperty(class URemoteControlPreset* Preset, class UObject* SourceObject, const class FString& Property, const struct FRemoteControlOptionalExposeArgs& Args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("RemoteControlFunctionLibrary", "ExposeProperty");

	Params::RemoteControlFunctionLibrary_ExposeProperty Parms{};

	Parms.Preset = Preset;
	Parms.SourceObject = SourceObject;
	Parms.Property = std::move(Property);
	Parms.Args = std::move(Args);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function RemoteControl.RemoteControlInterceptionTestObject.TestFunction
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FRemoteControlInterceptionFunctionParamStructInStruct                                               (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   InTestFactor                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FRemoteControlInterceptionFunctionParamStructReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

struct FRemoteControlInterceptionFunctionParamStruct URemoteControlInterceptionTestObject::TestFunction(const struct FRemoteControlInterceptionFunctionParamStruct& InStruct, int32 InTestFactor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("RemoteControlInterceptionTestObject", "TestFunction");

	Params::RemoteControlInterceptionTestObject_TestFunction Parms{};

	Parms.InStruct = std::move(InStruct);
	Parms.InTestFactor = InTestFactor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

