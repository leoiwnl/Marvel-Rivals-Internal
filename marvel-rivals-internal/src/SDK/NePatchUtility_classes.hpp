#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: NePatchUtility

#include "Basic.hpp"

#include "Engine_classes.hpp"


namespace SDK
{

// Class NePatchUtility.NeExtractSerializedShaderArchiveCommandlet
// 0x0000 (0x0088 - 0x0088)
class UNeExtractSerializedShaderArchiveCommandlet final : public UCommandlet
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NeExtractSerializedShaderArchiveCommandlet">();
	}
	static class UNeExtractSerializedShaderArchiveCommandlet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNeExtractSerializedShaderArchiveCommandlet>();
	}
};

// Class NePatchUtility.NePakCommandlet
// 0x0000 (0x0088 - 0x0088)
class UNePakCommandlet final : public UCommandlet
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NePakCommandlet">();
	}
	static class UNePakCommandlet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNePakCommandlet>();
	}
};

// Class NePatchUtility.NeGenHashFromPakCommandlet
// 0x0000 (0x0088 - 0x0088)
class UNeGenHashFromPakCommandlet final : public UCommandlet
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NeGenHashFromPakCommandlet">();
	}
	static class UNeGenHashFromPakCommandlet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNeGenHashFromPakCommandlet>();
	}
};

// Class NePatchUtility.NeUCasPatchTestCommandlet
// 0x0000 (0x0088 - 0x0088)
class UNeUCasPatchTestCommandlet final : public UCommandlet
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NeUCasPatchTestCommandlet">();
	}
	static class UNeUCasPatchTestCommandlet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNeUCasPatchTestCommandlet>();
	}
};

// Class NePatchUtility.NePatchUtility
// 0x0000 (0x0030 - 0x0030)
class UNePatchUtility final : public UBlueprintFunctionLibrary
{
public:
	static bool AddContainerHeaderData(const struct FNePatchUCasFileHandle& UCasFile, const class FString& ContainerEntryChunkID, const TArray<uint8>& Data);
	static bool AddPakData(const struct FNePatchPakFileHandle& PakFile, const class FString& Filename, const TArray<uint8>& Data);
	static bool AddShaderCodeData(const struct FNePatchShaderLibraryFileHandle& ShaderLibrary, const class FString& ShaderHash, const TArray<uint8>& Data);
	static bool AddUCasData(const struct FNePatchUCasFileHandle& UCasFile, const struct FNePatchUtocEntry& Entry, const TArray<uint8>& Data);
	static bool AddUCasDataFromResultUtoc(const struct FNePatchUCasFileHandle& UCasFile, const struct FNePatchUtocFileHandle& ResultUtocFileHandle, const class FString& ChunkIdStr, const TArray<uint8>& Data);
	static bool ApplyShaderLibrary(const class FString& Name_0, const class FString& Directory);
	static TArray<struct FNePatchEntry> CalcPakDownloadEntries(const struct FNePatchPakFileHandle& PakFile, const struct FNePatchHashFileHandle& RemoteHashFile);
	static TArray<struct FNePatchShaderCodeEntry> CalcShaderLibraryDownloadEntries(const struct FNePatchShaderLibraryFileHandle& ShaderLibrary, const struct FNePatchShaderHashFileHandle& RemoteHashFile);
	static bool CheckEntryDataHash(const struct FNePatchUtocFileHandle& ResultUtocFileHandle, const class FString& ChunkIdStr, const TArray<uint8>& CompressedData);
	static bool CheckNeedUpdateWholeFile(const struct FNePatchHashFileHandle& OldHashFile, const struct FNePatchHashFileHandle& NewHashFile, bool bPrintReason);
	static void ClosePak(const struct FNePatchPakFileHandle& PakFile);
	static void ClosePakHash(const struct FNePatchHashFileHandle& HashFile);
	static void CloseShaderHash(const struct FNePatchShaderHashFileHandle& HashFile);
	static void CloseShaderLibrary(const struct FNePatchShaderLibraryFileHandle& ShaderLibrary);
	static void CloseUCas(const struct FNePatchUCasFileHandle& UCasFile);
	static void CloseUtoc(const struct FNePatchUtocFileHandle& TocFile);
	static TArray<struct FNePatchEntry> ComparePakHash(const struct FNePatchHashFileHandle& OldHashFile, const struct FNePatchHashFileHandle& NewHashFile);
	static TArray<struct FNePatchEntry> ComparePakHashList(const TArray<struct FNePatchHashFileHandle>& LocalHashFileList, const TArray<struct FNePatchHashFileHandle>& RemoteHashFileList);
	static TArray<struct FNePatchEntry> ComparePakHashToHandle(const TArray<struct FNePatchHashFileHandle>& LocalHashFileList, const TArray<struct FNePatchHashFileHandle>& RemoteHashFileList, struct FNePatchHashFileHandle* OutHashFileHandle);
	static TArray<struct FNePatchUtocEntry> CompareUtoc(const struct FNePatchUtocFileHandle& OldTocFile, const struct FNePatchUtocFileHandle& NewTocFile, struct FNePatchUtocFileHandle* OutTocResource);
	static bool CompareUtocs(const TArray<struct FNePatchUtocFileHandle>& LocalTocFileList, const TArray<struct FNePatchUtocFileHandle>& RemoteTocFileList, TArray<struct FNePatchUtocEntry>* DiffEntries, TArray<struct FNePatchUtocEntry>* DifferHeaderEntries);
	static bool CompareUtocsToResultUtoc(const TArray<struct FNePatchUtocFileHandle>& LocalTocFileList, const TArray<struct FNePatchUtocFileHandle>& RemoteTocFileList, struct FNePatchUtocFileHandle* OutResultUtocFileHandle);
	static bool CopyDataFromOtherPak(const struct FNePatchPakFileHandle& PakFile, const class FString& OtherPakFilename, const struct FNePatchHashFileHandle& OtherHashFile, bool bSalvageMode, bool bSkipExistingData);
	static bool CopyDataFromOtherShaderLibrary(const struct FNePatchShaderLibraryFileHandle& ShaderLibrary, const class FString& OtherShaderLibraryPath, const struct FNePatchShaderHashFileHandle& OtherHashFile, bool bSalvageMode, bool bSkipExistingData);
	static bool CopyFromOtherUtoc(const struct FNePatchUtocFileHandle& OtherUtocFile, TArray<struct FNePatchUtocEntry>* InOutDiffEntries);
	static bool CopyFromOtherUtocToResultUtoc(const struct FNePatchUtocFileHandle& OtherUtocFile, const struct FNePatchUtocFileHandle& ResultUtocFileHandle);
	static bool CopyHashFiles(const class FString& SrcDirectory, const class FString& DstDirectory, const class FString& Extension);
	static bool FlushContainerHeaderData(const struct FNePatchUCasFileHandle& UCasFile, const struct FNePatchUtocFileHandle& ResultUtocFileHandle);
	static TArray<class FString> GetHashFilePaths(const class FString& Directory, const class FString& Extension);
	static const TArray<class FName> GetPakHashCompressionMethods(const struct FNePatchHashFileHandle& HashFile);
	static class FString GetPakHashMountPoint(const struct FNePatchHashFileHandle& HashFile);
	static const TArray<struct FNePatchEntry> GetPakHashPatchEntries(const struct FNePatchHashFileHandle& HashFile);
	static const struct FNePatchEntry GetPakHashPatchEntry(const struct FNePatchHashFileHandle& HashFile, int32 EntryIndex);
	static int32 GetPakHashPatchEntryCount(const struct FNePatchHashFileHandle& HashFile);
	static const TArray<struct FNePatchEntry> GetPakPatchEntries(const struct FNePatchPakFileHandle& PakFile);
	static int64 GetShaderHashLibraryCodeOffset(const struct FNePatchShaderHashFileHandle& HashFile);
	static int64 GetShaderLibraryLibraryCodeOffset(const struct FNePatchShaderLibraryFileHandle& ShaderLibrary);
	static TArray<struct FNePatchUtocEntry> GetUTocPatchEntries(const struct FNePatchUtocFileHandle& UtocFile);
	static struct FNePatchUtocEntry GetUTocPatchEntry(const struct FNePatchUtocFileHandle& UtocFile, const class FString& ChunkIdStr);
	static bool HasActiveWiFiConnection();
	static bool MergeAllUCasDataFromFolder(const struct FNePatchUCasFileHandle& UCasFile, const struct FNePatchUtocFileHandle& ResultUtocFileHandle, const class FString& UCasDataFolder);
	static bool MountPak(const class FString& PakFilename, int32 Order);
	static bool MountPakWithMountPoint(const class FString& PakFilename, int32 PakOrder, const class FString& MountPoint);
	static bool OpenPakForWrite(const class FString& PakFilePath, const struct FNePatchHashFileHandle& RemoteHashFile, struct FNePatchPakFileHandle* OutPakFile);
	static bool OpenPakForWriteWithInitialHash(const class FString& PakFilePath, const struct FNePatchHashFileHandle& RemoteHashFile, const struct FNePatchHashFileHandle& InitialHashFile, struct FNePatchPakFileHandle* OutPakFile);
	static bool OpenPakHash(const class FString& HashFilePath, struct FNePatchHashFileHandle* OutHashFile);
	static bool OpenShaderHash(const class FString& HashFilePath, struct FNePatchShaderHashFileHandle* OutHashFile);
	static bool OpenShaderLibraryForWrite(const class FString& ShaderLibraryPath, const struct FNePatchShaderHashFileHandle& RemoteHashFile, struct FNePatchShaderLibraryFileHandle* OutShaderLibrary);
	static bool OpenShaderLibraryForWriteWithInitialHash(const class FString& ShaderLibraryPath, const struct FNePatchShaderHashFileHandle& RemoteHashFile, const struct FNePatchShaderHashFileHandle& InitialHashFile, struct FNePatchShaderLibraryFileHandle* OutShaderLibrary);
	static bool OpenUcasForWrite(const class FString& UCasFilePath, struct FNePatchUCasFileHandle* OutUCasFile);
	static bool OpenUtoc(const class FString& TocFilePath, struct FNePatchUtocFileHandle* OutTocFile);
	static bool RegisterDecryptKey(const class FString& DecryptionKeyStr);
	static bool SavePakHashFile(const struct FNePatchPakFileHandle& PakFile);
	static bool SaveShaderLibraryHashFile(const struct FNePatchShaderLibraryFileHandle& ShaderLibrary);
	static bool SaveUtocFile(const class FString& NewUtocFileName, const TArray<struct FNePatchUtocEntry>& DiffEntryList, const TArray<struct FNePatchUtocFileHandle>& RemoteTocFileList);
	static bool SaveUtocFileFromResultUtoc(const class FString& NewUtocFileName, const struct FNePatchUtocFileHandle& ResultUtocFileHandle, const TArray<struct FNePatchUtocFileHandle>& RemoteTocFileList);
	static void SetPakHashPatchEntries(const struct FNePatchHashFileHandle& HashFile, const TArray<struct FNePatchEntry>& Entries);
	static bool UnmountPak(const class FString& PakFilename);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NePatchUtility">();
	}
	static class UNePatchUtility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNePatchUtility>();
	}
};

}

