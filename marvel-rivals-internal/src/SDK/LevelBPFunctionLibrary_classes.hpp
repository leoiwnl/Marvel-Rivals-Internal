#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LevelBPFunctionLibrary

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "Marvel_structs.hpp"
#include "MarvelLevel_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass LevelBPFunctionLibrary.LevelBPFunctionLibrary_C
// 0x0000 (0x0030 - 0x0030)
class ULevelBPFunctionLibrary_C final : public UBlueprintFunctionLibrary
{
public:
	static void AssaultHint(const class FString& UINAME, const class FString& RedSideHit, const class FString& BlueSideHit, class UObject* __WorldContext);
	static void AssaultObjectiveClose(const class FString& CampName, const class FString& UINAME, class UObject* __WorldContext);
	static void AssaultObjectiveUnlock(const class FString& CampName, const class FString& UINAME, class UObject* __WorldContext);
	static void ChangeControlColor(const class FString& UINAME, EOwnershipType OwnerSide, class UObject* __WorldContext);
	static void GetHeroComponent(class UObject* __WorldContext, class UPyHeroComponent** HeroComponent);
	static void GetMarvelGameState(class UObject* __WorldContext, class AMarvelGameStateBP_C** MarvelGameStateBP);
	static void GetMarvelPlayerStateByUID(int32 UID, class UObject* __WorldContext, class AMarvelPlayerStateBP_C** NewParam);
	static void GetMarvelPlayerStateList(class UObject* __WorldContext, TArray<class AMarvelPlayerStateBP_C*>* MarvelPlayerStateList);
	static void GetModularRuleComponent(class UObject* __WorldContext, class UPyModularRuleComponent** ModularRuleComponent);
	static void GetModularRuleControlComponent(class UObject* __WorldContext, class UPyModularRuleControlComponent** ModularRuleComponent);
	static void GetModuleUIComponent(class UObject* __WorldContext, class UPyModuleUIComponent** ModuleUIComponent);
	static void SetRoute(TArray<double>& RouteLength, class UObject* __WorldContext);
	static void UpdateAssaultBarProcess(double CurrentProgress, TArray<double>& OccupyProgressStage, const class FString& UINAME, class UObject* __WorldContext);
	static void UpdateAssaultPieOccupy(double CurrentProgress, double TotalProgress, const class FString& CampName, const class FString& UINAME, class UObject* __WorldContext);
	static void UpdateVictoryProgressText(double Percent, const class FString& UINAME, class UObject* __WorldContext);
	static void 修改条带颜色(class UMarvelSplineComponent* MarvelSpline, const struct FVector& Color, class UObject* __WorldContext);
	static void 切换上个重生室(class UObject* __WorldContext);
	static void 切换下个重生室(class UObject* __WorldContext);
	static void 占点结束(const class FString& 实例名, class UObject* __WorldContext);
	static void 对指定角色施加BUFF(int32 BuffID, TArray<int32>& ActorList, class UObject* __WorldContext);
	static void 对指定角色移除BUFF(int32 BuffID, TArray<int32>& ActorList, class UObject* __WorldContext);
	static void 广播关卡机关触发(class AActor* Trigger, class AActor* Target, class UObject* __WorldContext);
	static void 开关克拉克门(const class FString& 实例名, bool 开关, class UObject* __WorldContext);
	static void 快速充能玩家大招(class AMarvelBaseCharacter* Character, class UObject* __WorldContext);
	static void 播放环境音效_实例组件_(const class FString& 实例名, const class FString& 组件名, TSoftObjectPtr<class UAkAudioEvent> AudioEvent, class UObject* __WorldContext);
	static void 改变据点状态_UI(int32 Index_0, const class FString& UI_NAME, class UObject* __WorldContext);
	static void 攻防点结束(const class FString& 实例名, EBattleSide 胜利方, class UObject* __WorldContext);
	static void 是否进攻方_客户端_(class UObject* __WorldContext, bool* NewParam);
	static void 显示_UI(const class FString& UI_NAME, double Duration_Time, int32 Player_UID, class UObject* __WorldContext);
	static void 隐藏浮标(const class FString& ActorName, bool Hidden, class UObject* __WorldContext);
	static void 显示通用文本UI(const class FString& Input, const class FString& UI_NAME, double DurationTime, class UObject* __WorldContext);
	static void 更新进度条_UI(double Percent, const class FString& UI_NAME, class UObject* __WorldContext);
	static void 更新饼状UI(double Percent, const class FString& UI_NAME, class UObject* __WorldContext);
	static void 最近是否有攻击方在车边(class UObject* __WorldContext, bool* 存在);
	static void 最近是否有防守方在车边(class UObject* __WorldContext, bool* 存在);
	static void 根据人数设置占点占领速度(const class FString& 实例名, class UObject* __WorldContext);
	static void 根据人数设置占点占领速度_MineControl(const class FString& 实例名, class UObject* __WorldContext);
	static void 根据攻方人数设置攻防点速度(const class FString& 实例名, class UObject* __WorldContext);
	static void 模块化创建_AI玩家(int32 HeroID, EBattleSide BattleSide, const struct FVector& position, const struct FRotator& Rotation, const class FString& Name_0, const class FString& TreePath, const struct FVector& RelivePosition, double ReliveTime, bool IsScore, class UObject* __WorldContext, class AActor** Actor);
	static void 模块化选择英雄界面(int32 UID, class UObject* __WorldContext);
	static void 消除玩家所有技能_CD一次(class AMarvelBaseCharacter* Character, class UObject* __WorldContext);
	static void 激活控制组件(const class FString& 实例名, class UObject* __WorldContext);
	static void 激活推车组件(class UObject* __WorldContext);
	static void 激活攻防组件(const class FString& 实例名, class UObject* __WorldContext);
	static void 获取全部玩家(class UObject* __WorldContext, TArray<int32>* OutputList);
	static void 获取关卡定时器剩余时间(const class FString& 定时器名, class UObject* __WorldContext, double* 剩余时间);
	static void 获取关卡定时器过去时间(const class FString& 定时器名, class UObject* __WorldContext, double* 过去时间);
	static void 获取加时状态(class UObject* __WorldContext, int32* 加时状态);
	static void 获取占点人数(const class FString& 实例名, EBattleSide 阵营, class UObject* __WorldContext, int32* 人数);
	static void 获取占点占领进度(const class FString& 实例名, class UObject* __WorldContext, double* 进度);
	static void 获取占点占领阵营(const class FString& 实例名, class UObject* __WorldContext, EOwnershipType* 当前阵营);
	static void 获取占点胜利进度(const class FString& 实例名, class UObject* __WorldContext, double* 进度);
	static void 获取实例(const class FString& 实例名, class UObject* __WorldContext, class AActor** Result);
	static void 获取当前游戏阶段(class UObject* __WorldContext, EMatchState* MatchState);
	static void 获取指定存活状态玩家(EPlayerLivingState PlayerLivingState, class UObject* __WorldContext, TArray<int32>* PlayerUIDList);
	static void 获取指定阵营玩家(EBattleSide BattleSide, class UObject* __WorldContext, TArray<int32>* PlayerUIDList);
	static void 获取推车(class UObject* __WorldContext, class APyPayload** Payload);
	static void 获取攻防点(const class FString& 实例名, class UObject* __WorldContext, class APyObjective** Objective);
	static void 获取攻防点速度(const class FString& 实例名, class UObject* __WorldContext, double* 速度);
	static void 获取玩家存活状态(int32 UID, class UObject* __WorldContext, EPlayerLivingState* PlayerLivingState);
	static void 获取玩家战斗信息(int32 UID, class UObject* __WorldContext, int32* 击杀次数, int32* 连杀, int32* 助攻次数, int32* 死亡次数, double* 主武器命中率, double* 总伤害, double* 总治疗, double* 总承伤);
	static void 获取玩家所选择英雄(int32 UID, class UObject* __WorldContext, int32* HeroID);
	static void 获取玩家阵营(int32 UID, class UObject* __WorldContext, EBattleSide* BattleSide);
	static void 获取移动Actor倒数剩余时间(const class FString& 实例名, class UObject* __WorldContext, double* 进度);
	static void 获取规则组件_旧_(class UClass* Class_0, class UObject* __WorldContext, class UActorComponent** Component);
	static void 获取路线(const class FString& 实例名, class UObject* __WorldContext, class APyPayloadTrace** PayloadTrace);
	static void 获取载具占领方(class UObject* __WorldContext, EOwnershipType* OwnerSide);
	static void 获取选择指定英雄玩家(int32 HeroID, class UObject* __WorldContext, TArray<int64>* PlayerUIDList);
	static void 蜘蛛零下落(const class FString& 实例名, class UObject* __WorldContext);
	static void 蜘蛛零禁锢弱化(const class FString& 实例名, class UObject* __WorldContext);
	static void 蜘蛛零随机idle动画(const class FString& 实例名, class UObject* __WorldContext);
	static void 视频面板播放(const class FString& 实例名, class UObject* __WorldContext);
	static void 触发_Actor组移动根据时间(const class FString& 实例名, double 移动时间, double 回复时间, double 延迟回复时间, double 角度偏移, bool 是否初始位置旋转, class UObject* __WorldContext);
	static void 触发Actor组移动(const class FString& 实例名, double 移动速度, double 回复速度, double 延迟回复时间, double 旋转角度, bool 是否初始位置旋转, class UObject* __WorldContext);
	static void 触发多Actor组联动根据时间(TArray<struct FGroupMoveActorsContainner>& 实例组, class UObject* __WorldContext);
	static void 设置加时状态(EOvertimeState EOvertimeState, class UObject* __WorldContext);
	static void 设置占点占领速度(const class FString& 实例名, double 速度, class UObject* __WorldContext);
	static void 设置攻防点速度(const class FString& 实例名, double 速度, class UObject* __WorldContext);
	static void 设置载具速度(double 速度, class UObject* __WorldContext);
	static void 设置重生室复活点(const class FString& 重生室名, const class FString& 重生点名, class UObject* __WorldContext);
	static void 设置重生室状态(const TMap<class FString, bool>& BirthbaseState, class UObject* __WorldContext);
	static void 载具开始回退(class UObject* __WorldContext);
	static void 载具当前路线名(const class FString& 实例名, class UObject* __WorldContext, class FString* 路线名);
	static void 载具当前进度(class UObject* __WorldContext, double* 进度_百分比为整数_);
	static void 载具根据攻方人数前进(class UObject* __WorldContext);
	static void 载具结束(const class FString& 实例名, EBattleSide 胜利方, class UObject* __WorldContext);
	static void 通过_ID播放音频_可带字幕_(const class FString& 实例名, int32 语音ID1, int32 语音ID2, int32 语音ID3, class UObject* __WorldContext);
	static void 重生室开门(EBattleSide 阵营, class UObject* __WorldContext);
	static void 重设占点参数(const class FString& 实例名, double 衰退速度, double 衰退延时, double 占领速度仅1人, double 占领速度仅2人, double 占领速度仅3人, double 占领速度仅4人, double 占领速度仅5人, double 占领速度仅6人, class UObject* __WorldContext);
	static void 重设攻防点参数(const class FString& 实例名, double 衰退延迟, double 衰退速度, double 仅攻方1人, double 仅攻方2人, double 仅攻方3人, double 仅攻方4人, double 仅攻方5人, double 仅攻方6人, class UObject* __WorldContext);
	static void 重设载具参数(const class FString& 实例名, double 回退速度, double 前进延迟, double 后退延迟, int32 车边BuffID, double 仅攻方1人速度, double 仅攻方2人速度, double 仅攻方3人速度, double 仅攻方4人速度, double 仅攻方5人速度, double 仅攻方6人速度, class UObject* __WorldContext);
	static void 隐藏UI(const class FString& UI_NAME, int32 Player_UID, class UObject* __WorldContext);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"LevelBPFunctionLibrary_C">();
	}
	static class ULevelBPFunctionLibrary_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelBPFunctionLibrary_C>();
	}
};

}

