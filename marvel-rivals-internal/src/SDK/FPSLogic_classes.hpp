#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: FPSLogic

#include "Basic.hpp"

#include "Marvel_classes.hpp"


namespace SDK
{

// PythonClass FPSLogic.UISettingEntryFPSLimitHandler
// 0x0000 (0x0030 - 0x0030)
class UUISettingEntryFPSLimitHandler final : public UUISettingEntrySettingHandler
{
public:
	void BP_OnApply(class UObject* Obj, const class FString& setting_key, const TMap<class FString, class FString>& P, const TMap<int32, class FText>& OPTIONS, float Value);
	float BP_GetCurrentValue(class UObject* Obj, const class FString& setting_key, const TMap<class FString, class FString>& P, const TMap<int32, class FText>& O);
	TMap<class FString, int32> BP_OnChanged(class UObject* Obj, const class FString& setting_key, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& OPTIONS, float Value, const TMap<class FString, int32>& Tags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UISettingEntryFPSLimitHandler">();
	}
	static class UUISettingEntryFPSLimitHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUISettingEntryFPSLimitHandler>();
	}
};

// PythonClass FPSLogic.UISettingEntryMaxFPSHandler
// 0x0000 (0x0030 - 0x0030)
class UUISettingEntryMaxFPSHandler final : public UUISettingEntrySettingHandler
{
public:
	void BP_OnApply(class UObject* Obj, const class FString& setting_key, const TMap<class FString, class FString>& P, const TMap<int32, class FText>& OPTIONS, float Value);
	float BP_GetCurrentValue(class UObject* Obj, const class FString& setting_key, const TMap<class FString, class FString>& P, const TMap<int32, class FText>& O);
	float BP_GetDefaultValue(class UObject* Obj, const class FString& setting_key, const TMap<class FString, class FString>& P, const TMap<int32, class FText>& O);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UISettingEntryMaxFPSHandler">();
	}
	static class UUISettingEntryMaxFPSHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUISettingEntryMaxFPSHandler>();
	}
};

// PythonClass FPSLogic.UISettingEntryShowFPSSwitchHandler
// 0x0000 (0x0030 - 0x0030)
class UUISettingEntryShowFPSSwitchHandler final : public UUISettingEntrySettingHandler
{
public:
	void BP_OnApply(class UObject* Obj, const class FString& setting_key, const TMap<class FString, class FString>& P, const TMap<int32, class FText>& OPTIONS, float Value);
	float BP_GetCurrentValue(class UObject* Obj, const class FString& setting_key, const TMap<class FString, class FString>& P, const TMap<int32, class FText>& O);
	TMap<class FString, int32> BP_OnChanged(class UObject* Obj, const class FString& setting_key, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& OPTIONS, float Value, const TMap<class FString, int32>& Tags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UISettingEntryShowFPSSwitchHandler">();
	}
	static class UUISettingEntryShowFPSSwitchHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUISettingEntryShowFPSSwitchHandler>();
	}
};

}

