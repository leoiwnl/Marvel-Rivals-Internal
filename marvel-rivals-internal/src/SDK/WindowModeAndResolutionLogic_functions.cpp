#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WindowModeAndResolutionLogic

#include "Basic.hpp"

#include "WindowModeAndResolutionLogic_classes.hpp"
#include "WindowModeAndResolutionLogic_parameters.hpp"


namespace SDK
{

// PythonFunction WindowModeAndResolutionLogic.UISettingEntryMonitorSelectionOptionsGenerator.BP_Gen
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           setting_key                                            (Parm, ZeroConstructor, HasGetValueTypeHash)
// TMap<int32, class FText>                OPTIONS                                                (ConstParm, Parm, OutParm, ReferenceParm)
// TMap<int32, class FText>                ReturnValue                                            (Parm, OutParm, ReturnParm)

TMap<int32, class FText> UUISettingEntryMonitorSelectionOptionsGenerator::BP_Gen(class UObject* Obj, const class FString& setting_key, const TMap<int32, class FText>& OPTIONS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISettingEntryMonitorSelectionOptionsGenerator", "BP_Gen");

	Params::UISettingEntryMonitorSelectionOptionsGenerator_BP_Gen Parms{};

	Parms.Obj = Obj;
	Parms.setting_key = std::move(setting_key);
	Parms.OPTIONS = std::move(OPTIONS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// PythonFunction WindowModeAndResolutionLogic.UISettingEntryWindowModeOptionsGenerator.BP_Gen
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           setting_key                                            (Parm, ZeroConstructor, HasGetValueTypeHash)
// TMap<int32, class FText>                OPTIONS                                                (ConstParm, Parm, OutParm, ReferenceParm)
// TMap<int32, class FText>                ReturnValue                                            (Parm, OutParm, ReturnParm)

TMap<int32, class FText> UUISettingEntryWindowModeOptionsGenerator::BP_Gen(class UObject* Obj, const class FString& setting_key, const TMap<int32, class FText>& OPTIONS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISettingEntryWindowModeOptionsGenerator", "BP_Gen");

	Params::UISettingEntryWindowModeOptionsGenerator_BP_Gen Parms{};

	Parms.Obj = Obj;
	Parms.setting_key = std::move(setting_key);
	Parms.OPTIONS = std::move(OPTIONS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// PythonFunction WindowModeAndResolutionLogic.UISettingEntryMonitorSelection.BP_OnApply
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           setting_key                                            (Parm, ZeroConstructor, HasGetValueTypeHash)
// TMap<class FString, class FString>      P                                                      (ConstParm, Parm, OutParm, ReferenceParm)
// TMap<int32, class FText>                OPTIONS                                                (ConstParm, Parm, OutParm, ReferenceParm)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUISettingEntryMonitorSelection::BP_OnApply(class UObject* Obj, const class FString& setting_key, const TMap<class FString, class FString>& P, const TMap<int32, class FText>& OPTIONS, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISettingEntryMonitorSelection", "BP_OnApply");

	Params::UISettingEntryMonitorSelection_BP_OnApply Parms{};

	Parms.Obj = Obj;
	Parms.setting_key = std::move(setting_key);
	Parms.P = std::move(P);
	Parms.OPTIONS = std::move(OPTIONS);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction WindowModeAndResolutionLogic.UISettingEntryMonitorSelection.BP_GetCurrentValue
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           setting_key                                            (Parm, ZeroConstructor, HasGetValueTypeHash)
// TMap<class FString, class FString>      P                                                      (ConstParm, Parm, OutParm, ReferenceParm)
// TMap<int32, class FText>                O                                                      (ConstParm, Parm, OutParm, ReferenceParm)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UUISettingEntryMonitorSelection::BP_GetCurrentValue(class UObject* Obj, const class FString& setting_key, const TMap<class FString, class FString>& P, const TMap<int32, class FText>& O)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISettingEntryMonitorSelection", "BP_GetCurrentValue");

	Params::UISettingEntryMonitorSelection_BP_GetCurrentValue Parms{};

	Parms.Obj = Obj;
	Parms.setting_key = std::move(setting_key);
	Parms.P = std::move(P);
	Parms.O = std::move(O);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// PythonFunction WindowModeAndResolutionLogic.UISettingEntryMonitorSelection.BP_OnChanged
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           setting_key                                            (Parm, ZeroConstructor, HasGetValueTypeHash)
// TMap<class FString, class FString>      Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm)
// TMap<int32, class FText>                OPTIONS                                                (ConstParm, Parm, OutParm, ReferenceParm)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class FString, int32>              Tags                                                   (ConstParm, Parm, OutParm, ReferenceParm)
// TMap<class FString, int32>              ReturnValue                                            (Parm, OutParm, ReturnParm)

TMap<class FString, int32> UUISettingEntryMonitorSelection::BP_OnChanged(class UObject* Obj, const class FString& setting_key, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& OPTIONS, float Value, const TMap<class FString, int32>& Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISettingEntryMonitorSelection", "BP_OnChanged");

	Params::UISettingEntryMonitorSelection_BP_OnChanged Parms{};

	Parms.Obj = Obj;
	Parms.setting_key = std::move(setting_key);
	Parms.Params_0 = std::move(Params_0);
	Parms.OPTIONS = std::move(OPTIONS);
	Parms.Value = Value;
	Parms.Tags = std::move(Tags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// PythonFunction WindowModeAndResolutionLogic.UISettingEntryWindowModeHandler.HardcodeSyncFullWindowMode
// (Native, Static, Public, BlueprintCallable)

void UUISettingEntryWindowModeHandler::HardcodeSyncFullWindowMode()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UISettingEntryWindowModeHandler", "HardcodeSyncFullWindowMode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// PythonFunction WindowModeAndResolutionLogic.UISettingEntryWindowModeHandler.HardcodeSyncTargetMoniter
// (Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TMap<class FString, int32>              ReturnValue                                            (Parm, OutParm, ReturnParm)

TMap<class FString, int32> UUISettingEntryWindowModeHandler::HardcodeSyncTargetMoniter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("UISettingEntryWindowModeHandler", "HardcodeSyncTargetMoniter");

	Params::UISettingEntryWindowModeHandler_HardcodeSyncTargetMoniter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// PythonFunction WindowModeAndResolutionLogic.UISettingEntryWindowModeHandler.BP_OnApply
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           setting_key                                            (Parm, ZeroConstructor, HasGetValueTypeHash)
// TMap<class FString, class FString>      P                                                      (ConstParm, Parm, OutParm, ReferenceParm)
// TMap<int32, class FText>                OPTIONS                                                (ConstParm, Parm, OutParm, ReferenceParm)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUISettingEntryWindowModeHandler::BP_OnApply(class UObject* Obj, const class FString& setting_key, const TMap<class FString, class FString>& P, const TMap<int32, class FText>& OPTIONS, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISettingEntryWindowModeHandler", "BP_OnApply");

	Params::UISettingEntryWindowModeHandler_BP_OnApply Parms{};

	Parms.Obj = Obj;
	Parms.setting_key = std::move(setting_key);
	Parms.P = std::move(P);
	Parms.OPTIONS = std::move(OPTIONS);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction WindowModeAndResolutionLogic.UISettingEntryWindowModeHandler.BP_GetCurrentValue
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           setting_key                                            (Parm, ZeroConstructor, HasGetValueTypeHash)
// TMap<class FString, class FString>      P                                                      (ConstParm, Parm, OutParm, ReferenceParm)
// TMap<int32, class FText>                O                                                      (ConstParm, Parm, OutParm, ReferenceParm)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UUISettingEntryWindowModeHandler::BP_GetCurrentValue(class UObject* Obj, const class FString& setting_key, const TMap<class FString, class FString>& P, const TMap<int32, class FText>& O)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISettingEntryWindowModeHandler", "BP_GetCurrentValue");

	Params::UISettingEntryWindowModeHandler_BP_GetCurrentValue Parms{};

	Parms.Obj = Obj;
	Parms.setting_key = std::move(setting_key);
	Parms.P = std::move(P);
	Parms.O = std::move(O);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// PythonFunction WindowModeAndResolutionLogic.UISettingEntryWindowModeHandler.BP_OnChanged
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           setting_key                                            (Parm, ZeroConstructor, HasGetValueTypeHash)
// TMap<class FString, class FString>      Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm)
// TMap<int32, class FText>                OPTIONS                                                (ConstParm, Parm, OutParm, ReferenceParm)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class FString, int32>              Tags                                                   (ConstParm, Parm, OutParm, ReferenceParm)
// TMap<class FString, int32>              ReturnValue                                            (Parm, OutParm, ReturnParm)

TMap<class FString, int32> UUISettingEntryWindowModeHandler::BP_OnChanged(class UObject* Obj, const class FString& setting_key, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& OPTIONS, float Value, const TMap<class FString, int32>& Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISettingEntryWindowModeHandler", "BP_OnChanged");

	Params::UISettingEntryWindowModeHandler_BP_OnChanged Parms{};

	Parms.Obj = Obj;
	Parms.setting_key = std::move(setting_key);
	Parms.Params_0 = std::move(Params_0);
	Parms.OPTIONS = std::move(OPTIONS);
	Parms.Value = Value;
	Parms.Tags = std::move(Tags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// PythonFunction WindowModeAndResolutionLogic.UISettingEntryResolutionAspectOptionsGenerator.BP_Gen
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           setting_key                                            (Parm, ZeroConstructor, HasGetValueTypeHash)
// TMap<int32, class FText>                OPTIONS                                                (ConstParm, Parm, OutParm, ReferenceParm)
// TMap<int32, class FText>                ReturnValue                                            (Parm, OutParm, ReturnParm)

TMap<int32, class FText> UUISettingEntryResolutionAspectOptionsGenerator::BP_Gen(class UObject* Obj, const class FString& setting_key, const TMap<int32, class FText>& OPTIONS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISettingEntryResolutionAspectOptionsGenerator", "BP_Gen");

	Params::UISettingEntryResolutionAspectOptionsGenerator_BP_Gen Parms{};

	Parms.Obj = Obj;
	Parms.setting_key = std::move(setting_key);
	Parms.OPTIONS = std::move(OPTIONS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// PythonFunction WindowModeAndResolutionLogic.UISettingEntryResolutionAspectHandler.BP_GetCurrentValue
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           setting_key                                            (Parm, ZeroConstructor, HasGetValueTypeHash)
// TMap<class FString, class FString>      Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm)
// TMap<int32, class FText>                OPTIONS                                                (ConstParm, Parm, OutParm, ReferenceParm)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UUISettingEntryResolutionAspectHandler::BP_GetCurrentValue(class UObject* Obj, const class FString& setting_key, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& OPTIONS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISettingEntryResolutionAspectHandler", "BP_GetCurrentValue");

	Params::UISettingEntryResolutionAspectHandler_BP_GetCurrentValue Parms{};

	Parms.Obj = Obj;
	Parms.setting_key = std::move(setting_key);
	Parms.Params_0 = std::move(Params_0);
	Parms.OPTIONS = std::move(OPTIONS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// PythonFunction WindowModeAndResolutionLogic.UISettingEntryResolutionAspectHandler.BP_OnChanged
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           setting_key                                            (Parm, ZeroConstructor, HasGetValueTypeHash)
// TMap<class FString, class FString>      Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm)
// TMap<int32, class FText>                OPTIONS                                                (ConstParm, Parm, OutParm, ReferenceParm)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TMap<class FString, int32>              Tags                                                   (ConstParm, Parm, OutParm, ReferenceParm)
// TMap<class FString, int32>              ReturnValue                                            (Parm, OutParm, ReturnParm)

TMap<class FString, int32> UUISettingEntryResolutionAspectHandler::BP_OnChanged(class UObject* Obj, const class FString& setting_key, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& OPTIONS, float Value, const TMap<class FString, int32>& Tags)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISettingEntryResolutionAspectHandler", "BP_OnChanged");

	Params::UISettingEntryResolutionAspectHandler_BP_OnChanged Parms{};

	Parms.Obj = Obj;
	Parms.setting_key = std::move(setting_key);
	Parms.Params_0 = std::move(Params_0);
	Parms.OPTIONS = std::move(OPTIONS);
	Parms.Value = Value;
	Parms.Tags = std::move(Tags);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// PythonFunction WindowModeAndResolutionLogic.UISettingEntryResolutionHandler.BP_OnApply
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           setting_key                                            (Parm, ZeroConstructor, HasGetValueTypeHash)
// TMap<class FString, class FString>      P                                                      (ConstParm, Parm, OutParm, ReferenceParm)
// TMap<int32, class FText>                OPTIONS                                                (ConstParm, Parm, OutParm, ReferenceParm)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UUISettingEntryResolutionHandler::BP_OnApply(class UObject* Obj, const class FString& setting_key, const TMap<class FString, class FString>& P, const TMap<int32, class FText>& OPTIONS, float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISettingEntryResolutionHandler", "BP_OnApply");

	Params::UISettingEntryResolutionHandler_BP_OnApply Parms{};

	Parms.Obj = Obj;
	Parms.setting_key = std::move(setting_key);
	Parms.P = std::move(P);
	Parms.OPTIONS = std::move(OPTIONS);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction WindowModeAndResolutionLogic.UISettingEntryResolutionHandler.BP_GetCurrentValue
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           setting_key                                            (Parm, ZeroConstructor, HasGetValueTypeHash)
// TMap<class FString, class FString>      Params_0                                               (ConstParm, Parm, OutParm, ReferenceParm)
// TMap<int32, class FText>                OPTIONS                                                (ConstParm, Parm, OutParm, ReferenceParm)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

float UUISettingEntryResolutionHandler::BP_GetCurrentValue(class UObject* Obj, const class FString& setting_key, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& OPTIONS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISettingEntryResolutionHandler", "BP_GetCurrentValue");

	Params::UISettingEntryResolutionHandler_BP_GetCurrentValue Parms{};

	Parms.Obj = Obj;
	Parms.setting_key = std::move(setting_key);
	Parms.Params_0 = std::move(Params_0);
	Parms.OPTIONS = std::move(OPTIONS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// PythonFunction WindowModeAndResolutionLogic.UISettingEntryResolutionOptionsGenerator.BP_Gen
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UObject*                          Obj                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class FString                           setting_key                                            (Parm, ZeroConstructor, HasGetValueTypeHash)
// TMap<int32, class FText>                OPTIONS                                                (ConstParm, Parm, OutParm, ReferenceParm)
// TMap<int32, class FText>                ReturnValue                                            (Parm, OutParm, ReturnParm)

TMap<int32, class FText> UUISettingEntryResolutionOptionsGenerator::BP_Gen(class UObject* Obj, const class FString& setting_key, const TMap<int32, class FText>& OPTIONS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UISettingEntryResolutionOptionsGenerator", "BP_Gen");

	Params::UISettingEntryResolutionOptionsGenerator_BP_Gen Parms{};

	Parms.Obj = Obj;
	Parms.setting_key = std::move(setting_key);
	Parms.OPTIONS = std::move(OPTIONS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

