#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Marvel

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Niagara_structs.hpp"
#include "Niagara_classes.hpp"
#include "Marvel_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayAbilities_classes.hpp"
#include "UMG_structs.hpp"
#include "UMG_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "EnhancedInput_structs.hpp"
#include "EnhancedInput_classes.hpp"
#include "PhysicsCore_structs.hpp"
#include "AnimGraphRuntime_structs.hpp"
#include "AnimGraphRuntime_classes.hpp"
#include "DeclarativeUnreal_structs.hpp"
#include "AnimationPro_structs.hpp"
#include "AkAudio_structs.hpp"
#include "AkAudio_classes.hpp"
#include "NiagaraAnimNotifies_classes.hpp"
#include "NavigationSystem_classes.hpp"
#include "InputCore_structs.hpp"
#include "GeometryCollectionEngine_structs.hpp"
#include "GeometryCollectionEngine_classes.hpp"
#include "ChaosSolverEngine_structs.hpp"
#include "FieldSystemEngine_classes.hpp"
#include "Chaos_structs.hpp"
#include "SlateCore_structs.hpp"
#include "StructUtils_structs.hpp"
#include "CableComponent_classes.hpp"
#include "DatasmithContent_classes.hpp"
#include "AIModule_classes.hpp"
#include "DeveloperSettings_classes.hpp"
#include "OnlineSubsystemUtils_classes.hpp"
#include "ActorSequence_classes.hpp"
#include "JarvisReplay_classes.hpp"
#include "GameplayTasks_classes.hpp"
#include "AnimationBudgetAllocator_classes.hpp"
#include "ReplicationGraph_classes.hpp"


namespace SDK
{

// Class Marvel.MarvelPlayerState
// 0x0618 (0x0B78 - 0x0560)
class AMarvelPlayerState : public APlayerState
{
public:
	uint8                                         Pad_560[0x38];                                     // 0x0560(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   MarvelCharacter;                                   // 0x0598(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UID;                                               // 0x05A0(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A4[0x1C];                                     // 0x05A4(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TeamID;                                            // 0x05C0(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleSide                                   BattleSide;                                        // 0x05C4(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnMethod                                  SpawnMethod;                                       // 0x05C5(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDemoRecording;                                  // 0x05C6(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C7[0x1];                                      // 0x05C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ViewTarget;                                        // 0x05C8(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAlive;                                          // 0x05D0(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanChooseHero;                                    // 0x05D1(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsChoosingHero;                                   // 0x05D2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRespawnDelayReady;                                // 0x05D3(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOnlineStatus                                 OnlineStatus;                                      // 0x05D4(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D5[0x3];                                      // 0x05D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class AActor*>                    CharacterPool;                                     // 0x05D8(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         SelectedHeroID;                                    // 0x0628(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedHeroUID;                                   // 0x062C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID_Controlled;                                 // 0x0630(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptID;                                          // 0x0634(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  PreviousPawn;                                      // 0x0638(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ExtraPlayerInfo;                                   // 0x0640(0x0010)(BlueprintVisible, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPlayerHeroInfo>                HeroInfoOfPlayer;                                  // 0x0650(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         ShowHeroID;                                        // 0x0660(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_664[0x4];                                      // 0x0664(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FPlayerHeroInfo>           MosHeroInfoMap;                                    // 0x0668(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         AIDifficulty;                                      // 0x06B8(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTrainAI;                                         // 0x06BC(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6BD[0x3];                                      // 0x06BD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CharacterReSpawnTime;                              // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsReplaceableInMatch : 1;                         // 0x06C8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bKeepEnergyOnHeroChange;                           // 0x06C9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepEnergyOnReconnect;                            // 0x06CA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6CB[0x5];                                      // 0x06CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UImGuiNetworkComponent*                 ImGuiNetwork;                                      // 0x06D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPlayerLivingState                            LivingState;                                       // 0x06D8(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6D9[0x3];                                      // 0x06D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         KillScore;                                         // 0x06DC(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeathScore;                                        // 0x06E0(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssistScore;                                       // 0x06E4(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KillStreak;                                        // 0x06E8(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameplayScore;                                     // 0x06EC(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameplayRank;                                      // 0x06F0(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDamage;                                       // 0x06F4(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalHeal;                                         // 0x06F8(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTokenDamage;                                  // 0x06FC(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MainHitRate;                                       // 0x0700(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalHeroDamage;                                   // 0x0704(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LastBlowHero;                                      // 0x0708(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_70C[0x4];                                      // 0x070C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTeamComponent*                         TeamComponent;                                     // 0x0710(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BattleUID;                                         // 0x0718(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        KeyStatePackedData0;                               // 0x071C(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        KeyStatePackedData1;                               // 0x0720(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        KeyStatePackedData2;                               // 0x0724(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        KeyStatePackedData3;                               // 0x0728(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        KeyStatePackedData4;                               // 0x072C(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int64                                         AnalogInputData;                                   // 0x0730(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ControllerTilt;                                    // 0x0738(0x0018)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ControllerRotationRate;                            // 0x0750(0x0018)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ControllerAcceleration;                            // 0x0768(0x0018)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControllerLSScore;                                 // 0x0780(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControllerRSScore;                                 // 0x0784(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControllerLTScore;                                 // 0x0788(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControllerRTScore;                                 // 0x078C(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PS, int32 KillScore)> OnKillScoreChangedDispatcher;                      // 0x0790(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PS, int32 DeathScore)> OnDeathScoreChangedDispatcher;                     // 0x07A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PS, int32 AssistScore)> OnAssistScoreChangedDispatcher;                    // 0x07B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PS, int32 KillStreak)> OnKillStreakChangedDispatcher;                     // 0x07C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PS, int32 GameplayScore)> OnGameplayScoreChangedDispatcher;                  // 0x07D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PS, int32 GameplayRank)> OnGameplayRankChangedDispatcher;                   // 0x07E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PS, float TotalDamage)> OnTotalDamageChangedDispatcher;                    // 0x07F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PS, float TotalHeal)> OnTotalHealChangedDispatcher;                      // 0x0800(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PS, float TotalTokenDamage)> OnTotalTokenDamageChangedDispatcher;               // 0x0810(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PS, float MainHitRate)> OnMainHitRateChangedDispatcher;                    // 0x0820(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PS, float TotalHeroDamage)> OnTotalHeroDamageChangedDispatcher;                // 0x0830(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PS, int32 HeroID)> OnPlayerHeroChangedDispatcher;                     // 0x0840(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PS, int32 HeroID)> OnPlayerControlledHeroChangedDispatcher;           // 0x0850(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PS, int32 HeroID)> OnPlayerSculptChangedDispatcher;                   // 0x0860(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PS, bool CanChooseHero)> OnPlayerCanChooseHeroDispatcher;                   // 0x0870(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PS, class AMarvelBaseCharacter* BaseCharacter)> OnPlayerPossessCharacterDispatcher;                // 0x0880(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PS, EBattleSide BattleSide)> OnBattleSideChangedDispatcher;                     // 0x0890(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class APlayerState* PS)> OnViewTargetChangedDispatcher;                     // 0x08A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PS, EOnlineStatus OnlineStatus)> OnOnlineStatusChangeDispatcher;                    // 0x08B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PS, class AMarvelBaseCharacter* BaseCharacter, bool bFinished)> OnCharacterAbilityStateDispatcher;                 // 0x08C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class APlayerState* PS)> OnPlayerReplaceableChangedDispatcher;              // 0x08D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PS, class FText KickReason)> OnPlayerBeKickedDispatcher;                        // 0x08E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_8F0[0xD8];                                     // 0x08F0(0x00D8)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelTeamState*                       TeamState;                                         // 0x09C8(0x0008)(Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PS, class AMarvelTeamState* TeamState)> OnTeamStateChangeDispatcher;                       // 0x09D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsPress)>  OnMoveActionChangeDispatcher;                      // 0x09E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMoveActionInputDispatcher;                       // 0x09F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PS, int32 LastBlowHero)> OnPlayerLastBlowHeroChangedDelegate;               // 0x0A00(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UMarvelTabDataComponent*                TabDataComponent;                                  // 0x0A10(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHighLightDataComponent*                HighLightDataComponent;                            // 0x0A18(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelGameState*                       MarvelGameState;                                   // 0x0A20(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelGameMode*                        MarvelGameMode;                                    // 0x0A28(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasAuthority;                                     // 0x0A30(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsDedicatedServer;                                // 0x0A31(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A32[0x6];                                      // 0x0A32(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FCachedAbilityData>        CachedAbilityDataMap;                              // 0x0A38(0x0050)(Protected, NativeAccessSpecifierProtected)
	bool                                          bAllowBeSpectated;                                 // 0x0A88(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A89[0x7];                                      // 0x0A89(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                AutoPossessComponents;                             // 0x0A90(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_AA0[0x8];                                      // 0x0AA0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   CompletedAchievements;                             // 0x0AA8(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPlayerNameChanged;                               // 0x0AF8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_B08[0x58];                                     // 0x0B08(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              InputTypeChangedDelegate;                          // 0x0B60(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	Marvel::EInputType                            InputType;                                         // 0x0B70(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B71[0x7];                                      // 0x0B71(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddAutoPossessParticleSystem(class UFXSystemComponent* FXSystem);
	void AddKillScoreAndMarkDirtyNextTick(int32 Num);
	void ChangeBattleSide(EBattleSide NewBattleSide);
	bool CheckMOSHeroActivation(int32 HeroID);
	bool CheckMOSHeroSkinActivation(int32 HeroID, int32 SkinID);
	int32 GetHeroID_Selected();
	struct FHeroIdentifier GetHeroIdentifier();
	bool GetIsLocalPlayer();
	float GetServerTimeSeconds();
	int32 GetUID();
	void InitPlayerInfo(const struct FPlayerInfo& Info);
	void InitReconnectPlayerInfo(const struct FPlayerInfo& Info);
	void InputTypeChanged();
	void InterruptLevelRespawn();
	bool IsEnemyOnClient();
	void K2_UpdateHeroChoosable();
	void MulticastCommand(const class FString& Command, uint8 RoleFlag);
	void OnBeKicked(const class FText& KickReason);
	void OnCharacterSculptChanged(int32 NewScupltID);
	void OnCharacterSetupPlayerInputComponent();
	void OnEnterRound();
	void OnExitRound();
	void OnInputTypeChanged(Marvel::EInputType OldType, Marvel::EInputType NewType);
	void OnLivingStateChanged();
	void OnPossessNewCharacter(class AMarvelPlayerState* PS, class AMarvelBaseCharacter* Character);
	void OnRep_AssistScore();
	void OnRep_BattleSide();
	void OnRep_CanChooseHero();
	void OnRep_DeathScore();
	void OnRep_GameplayRank();
	void OnRep_GameplayScore();
	void OnRep_KillScore();
	void OnRep_KillStreak();
	void OnRep_LastBlowHero();
	void OnRep_LivingState();
	void OnRep_MainHitRate();
	void OnRep_OnlineStatus();
	void OnRep_ReplaceableInMatch();
	void OnRep_SavedHeroID();
	void OnRep_SculptID();
	void OnRep_SelectedHeroID();
	void OnRep_TeamState();
	void OnRep_TotalDamage();
	void OnRep_TotalHeal();
	void OnRep_TotalHeroDamage();
	void OnRep_TotalTokenDamage();
	void OnRep_ViewTarget();
	void PostSpawnPlayer();
	void PreSpawnPlayer();
	void PyInitPlayerInfo(int32 InUID, int32 InHeroID, EBattleSide InBattleSide, const class FString& InPlayerNickName, bool IsAI, const class FString& ExtraInfo);
	void Reactive();
	void ReceiveReactivated();
	void RemoveAutoPossessNiagara(class UNiagaraComponent* NiagaraComp);
	void RemoveAutoPossessParticle(class UParticleSystemComponent* ParticleComp);
	void RemoveAutoPossessParticleSystem(class UFXSystemComponent* FXSystem);
	void ResetRoundVariables();
	void ServerCommand(const class FString& Command, uint8 RoleFlag);
	void ServerMulticastOnlineStatus();
	void ServerSetInputType(Marvel::EInputType InInputType);
	void ServerUpdateIsChoosingHero(bool InIsChoosingHero);
	void SetAbilityInitFinished(const bool bFinished);
	void SetAllowBeSpectated(bool bInAllowBeSpectated);
	void SetBattleUID(int32 SetBattleUID_0);
	void SetBotName(const class FString& InBotName);
	void SetCharReconnecting(bool bIsReconnecting);
	void SetHeroChoosable(bool CanChooseHero);
	void SetInSocialBlackList(bool bInSocialBlackList);
	void SetIsFriendOrTeamMember(bool bIsFriendOrTeamMember);
	void SetIsLocalPlayer(bool bInIsLocalPlayer);
	void SetLivingState(EPlayerLivingState InLivingState);
	void SetOnlineStatus(EOnlineStatus InStatus);
	void SetRespawnTime(float InDelay);
	void SetSavedHeroID(int32 NewHeroID);
	void SetSculptID(int32 SculptID_0);
	void SetSelectedHeroID(int32 NewHeroID);
	void SetViewTarget(class AActor* NewViewTarget);
	void UpdateIsLocalPlayer();
	void UpdatePlayerHeroLimit(const TArray<struct FPlayerHeroInfo>& HeroInfo);
	void UpdatePlayerName();
	void WizcmdChangeSkin(int32 HeroID, const struct FPlayerHeroInfo& HeroInfo);

	Marvel::EInputType GetInputType() const;
	bool GetIsABot() const;
	EPlayerLivingState GetLivingState() const;
	bool GetSpectatorOnly() const;
	bool IsControlledByAI() const;
	bool IsDead() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPlayerState">();
	}
	static class AMarvelPlayerState* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelPlayerState>();
	}
};

// Class Marvel.AbilityActivateResolver
// 0x0088 (0x0518 - 0x0490)
class AAbilityActivateResolver final : public AActor
{
public:
	uint8                                         Pad_490[0x8];                                      // 0x0490(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAbilityActivateCandidate>      InteractiveAbilityActivateCandidates;              // 0x0498(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAbilityActivateCandidateArray> AbilityActivateCandidates;                         // 0x04A8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B8[0x60];                                     // 0x04B8(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetAbilityActivateCandidateArrayByInputBinds(EAbilityInputBinds InputBinds, struct FAbilityActivateCandidateArray* OutCandidates);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityActivateResolver">();
	}
	static class AAbilityActivateResolver* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAbilityActivateResolver>();
	}
};

// Class Marvel.MarvelGenMeshComponent
// 0x0040 (0x0880 - 0x0840)
class UMarvelGenMeshComponent : public UPrimitiveComponent
{
public:
	uint8                                         Pad_838[0x28];                                     // 0x0838(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MaterialToUse;                                     // 0x0860(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_868[0x10];                                     // 0x0868(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UBodySetup*                             GenBodySetup;                                      // 0x0878(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnBeginOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnEndOverlap(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void OnHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGenMeshComponent">();
	}
	static class UMarvelGenMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGenMeshComponent>();
	}
};

// Class Marvel.MarvelBaseGameplayAbility
// 0x0360 (0x10F0 - 0x0D90)
class UMarvelBaseGameplayAbility : public UGameplayAbility
{
public:
	uint8                                         Pad_D90[0x8];                                      // 0x0D90(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAbilityTickFunction                   PrimaryAbilityTick;                                // 0x0D98(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          TickEnableWithAbilityActive;                       // 0x0DD0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bContinuouslyActiveAbilityLoopCheck;               // 0x0DD1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceiveGenericSpawnProjectileEvent;               // 0x0DD2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceiveGenericSpawnScopeEvent;                    // 0x0DD3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceiveGenericSpawnSummonedEvent;                 // 0x0DD4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD5[0x3];                                      // 0x0DD5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ActivateKey;                                       // 0x0DD8(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnActivateDispatcher;                              // 0x0DE8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDeactivateDispatcher;                            // 0x0DF8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBreakDispatcher;                                 // 0x0E08(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMissileDispatcher;                               // 0x0E18(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnStatusUpdateDispatcher;                          // 0x0E28(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float Value)>   OnCooldownStartDispatcher;                         // 0x0E38(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float Value)>   OnCooldownChangeDispatcher;                        // 0x0E48(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FMarvelAbilityContextHandle            AbilityContextHandle;                              // 0x0E58(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActivationOwnedTags_AI;                            // 0x0E98(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bForceReplicateFlag;                               // 0x0F00(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F01[0xF];                                      // 0x0F01(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         AbilityEndKey;                                     // 0x0F10(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FB0[0x8];                                      // 0x0FB0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ContinueAbilityCheckTimer;                         // 0x0FB8(0x0018)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  CancelWithOwnerTagRemove;                          // 0x0FD0(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  CancelWithOwnerTagAdd;                             // 0x1038(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A0[0x50];                                    // 0x10A0(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AE_OnAbilityInitialized();
	void ChangeCancelAllowedPolicy(bool bCanBeCanceledByAbility, bool bCanBeCanceledByBuff);
	void ClearContinueAbilityCheckTimer();
	void ContinueAbilityLoopCheck();
	class APawn* GetAbilityInstigator();
	float GetCollideKnockDownDamage();
	struct FGameplayTagRequirements GetCollideKnockDownRequire();
	class AMarvelBaseCharacter* GetMarvelBaseCharacterInstigator();
	void K2_CancelAbilityWithCheck(EGACancelType InCancelType, EAbilityEndReason EndReason);
	void OnAbilityOwnerTranslatedByPortal(class APortalViewActor* InPortalActor);
	void OnCancelRequireTagHandle(const struct FGameplayTag& Tag, int32 Count);
	void OnNotifySpawnProjectileSuccess(class AActor* SpawnActor, const struct FGameplayAbilityTargetDataHandle& Data);
	void OnNotifySpawnScopeSuccess(class AActor* SpawnActor, const struct FGameplayAbilityTargetDataHandle& Data);
	void OnNotifySpawnSummonedSuccess(class AActor* SpawnActor);
	void PlayerControllerSet();
	void ReceiveTick(float DeltaTime);
	void SetAbilityTickEnabled(bool bEnabled);
	void SetAbilityTickInterval(float TickInterval);
	void SetTickGroup(ETickingGroup NewTickGroup);
	void TrySetContinueAbilityCheckTimer();

	class AActor* GetAbilityOwner() const;
	class AMarvelBaseCharacter* GetAbilityOwnerCharacter() const;
	class UMarvelBaseAbilitySystemComponent* GetAbilitySystemComponent() const;
	float GetAbilityTickInterval() const;
	class FString GetActivationPredictionKeyValue() const;
	int32 GetActivationPredictionSerial() const;
	const struct FActiveGameplayEffectHandle GetGrantedActiveGameplayEffectHandle() const;
	class UMarvelGameplayAbility* GetGrantedEffectAbility() const;
	class AActor* GetGrantedEffectCauser() const;
	float GetGrantedEffectDuration() const;
	class AMarvelBaseCharacter* GetGrantedEffectInstigater() const;
	class AActor* GetGrantedEffectInstigaterActor() const;
	bool IsAbilityTickEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelBaseGameplayAbility">();
	}
	static class UMarvelBaseGameplayAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelBaseGameplayAbility>();
	}
};

// Class Marvel.MarvelGameplayAbility
// 0x1490 (0x2580 - 0x10F0)
class UMarvelGameplayAbility : public UMarvelBaseGameplayAbility
{
public:
	uint8                                         Pad_10F0[0x18];                                    // 0x10F0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Value)>    OnGatherStateChange;                               // 0x1108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Value)>   OnGatherIndexChanged;                              // 0x1118(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1128[0x290];                                   // 0x1128(0x0290)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            SkillCostGameplayEffectClass;                      // 0x13B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAbilityStageConfig                    PreMissileStageConfig;                             // 0x13C0(0x0138)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAbilityStageConfig                    MissileStageConfig;                                // 0x14F8(0x0138)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAbilityStageConfig                    BreakStageConfig;                                  // 0x1630(0x0138)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_1768[0x10];                                    // 0x1768(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bBlock)>   OnBlockedAbilityDispatcher;                        // 0x1778(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UGameplayAbility* Ability)> AbilityDestroyDelegate;                            // 0x1788(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FGameplayTagContainer& FailureReason)> AbilityFailedDelegate;                             // 0x1798(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          EnterBreakRemoveActivateBlockTags;                 // 0x17A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17A9[0x7];                                     // 0x17A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AbilityDynamicTags;                                // 0x17B0(0x0068)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bReceiveSimulatedTimelineEvent;                    // 0x1818(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLoopAbility;                                     // 0x1819(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181A[0x2];                                     // 0x181A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LoopAbilityInterval;                               // 0x181C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1820[0x10];                                    // 0x1820(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ActivationLoopAbilityBlockedTags;                  // 0x1830(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bAllowActiveAbilityWhenDeath;                      // 0x1898(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelGACancelAllowedType                    CancelAllowedConfigType;                           // 0x1899(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189A[0x6];                                     // 0x189A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAbilityStagedCancelConfig             ConsistentCancelConfig;                            // 0x18A0(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAbilityStagedCancelConfig             PreMissileCancelConfig;                            // 0x1910(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAbilityStagedCancelConfig             MissileCancelConfig;                               // 0x1980(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FAbilityStagedCancelConfig             BreakCancelConfig;                                 // 0x19F0(0x0070)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          IsCombo;                                           // 0x1A60(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A61[0x3];                                     // 0x1A61(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InputActionName;                                   // 0x1A64(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInputHapticFeedBackEffect>     HapticFeedBackEffects;                             // 0x1A70(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Threshold;                                         // 0x1A80(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelfCancelled;                                    // 0x1A81(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A82[0x6];                                     // 0x1A82(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAbilityItem*                     AbilityAsset;                                      // 0x1A88(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<TSoftObjectPtr<class UAnimMontage>>    AbilityMontages;                                   // 0x1A90(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FGameplayCueParameters                 AbilityCueParameters;                              // 0x1AA0(0x01B8)(Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C58[0x2F2];                                   // 0x1C58(0x02F2)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHasCommitCost;                                    // 0x1F4A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F4B[0x1];                                     // 0x1F4B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableCommitPrediction;                           // 0x1F4C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreCoolDown;                                   // 0x1F4D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNoCD;                                       // 0x1F4E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreNoCost;                                     // 0x1F4F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSelectBackTrace;                                  // 0x1F50(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F51[0x428];                                   // 0x1F51(0x0428)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsDurableAbility;                                 // 0x2379(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelAbilityStage                           DurationStartStage;                                // 0x237A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_237B[0xCD];                                    // 0x237B(0x00CD)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnDurationTimerChanged;                            // 0x2448(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FReplicateTimerSpecHandle& SpecHandle)> OnTaskDurationTimerChanged;                        // 0x2458(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2468[0x50];                                    // 0x2468(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UGameplayAbility* InAbility)> AE_CustomCanActivateDelegate;                      // 0x24B8(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24CC[0x4];                                     // 0x24CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  RefSelectTarget;                                   // 0x24D0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24D8[0x8];                                     // 0x24D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastEndTime;                                       // 0x24E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24E4[0x1C];                                    // 0x24E4(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseSimpleDeathPhysicalAnim;                       // 0x2500(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2501[0x7];                                     // 0x2501(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SimpleDeathPhysicalAnimExtraOffset;                // 0x2508(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2520[0x10];                                    // 0x2520(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLocalClientCost                       LocalClientCost;                                   // 0x2530(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, Protected, NativeAccessSpecifierProtected)
	bool                                          bNoCancelIgnoreTag;                                // 0x2578(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2579[0x7];                                     // 0x2579(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AbilityCueExecute(const struct FGameplayTag& CueTag);
	void AbilityCueExecuteOnActive(const struct FGameplayTag& CueTag);
	void AbilityCueRemove(const struct FGameplayTag& CueTag);
	void AddEnergy(float DeltaEnergy);
	void AddGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	void AE_EndAbility();
	class AMarvelBaseCharacter* AE_GetCharacterActor();
	void BeginPlay();
	void BindEnhancedInputAction(const class UInputAction* Action, class FName FuncName, ETriggerEvent TriggerMode);
	void BreakEventNotify();
	struct FTransform CalculateSocketInfoTransform(EMarvelScopeQuoteType InMarvelScopeQuoteType);
	bool CanActivate();
	bool CanActivateForSelectUI();
	bool CanActivateInteractiveAbility();
	bool CanActivateWithResolver();
	bool CanActiveAbilityByTags(const struct FGameplayTagContainer& SourceTags);
	bool CanActiveCameraInterp();
	bool CanPreActivate();
	void ChangeAbilityCooldown(float NewCooldown);
	void ChangeAbilityType(const struct FGameplayTagContainer& InTypes, bool bEndClear, bool bModifyOwnerTag);
	void ClearDurationTimer(const class FString& TaskName);
	float CommitCustomCost(const struct FGameplayTag& CostType, float CostValue, bool bShouldPredict);
	void ConditionalSaveAbilityCost();
	void DoCostAttrActionsForStage(EMarvelAbilityStage InStage);
	void DoCostAttrActionsForTagEvent(const struct FGameplayTag& InTag);
	void DynamicBlockOtherAbilitiesWithTags(const struct FGameplayTagContainer& Tags);
	void DynamicUnBlockOtherAbilitiesWithTags(const struct FGameplayTagContainer& Tags);
	void EndPlay();
	void EnergyCostEmpty(bool* bOutEndAbility, bool* bOutStopCostCheck);
	void ExecuteEnterBreak();
	void ExecuteEnterMissile();
	void ExecuteGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	void FullEnergy();
	float GetAbilityDuration();
	class UAnimMontage* GetAbilityMontage(int32 Index_0);
	const TArray<TSoftObjectPtr<class UAnimMontage>> GetAbilityMontages();
	struct FReplicateTimerData GetDurationTimerData(const class FString& TaskName);
	struct FReplicateTimerData GetDurationTimerData_Local(const class FString& TaskName);
	struct FTransform GetHeadTransform();
	struct FTransform GetLeftHandTransform();
	int32 GetNowGatheringIndex();
	float GetNowGatherTime();
	struct FTransform GetRightHandTransform();
	void HandleAbilityCue(EAbilityCueStage InCueStage);
	void HandleAnimSocketInfo(int32 SocketId, const struct FMarvelAbilitySocketInfo& SocketInfo);
	bool HasAbilityBegunPlay();
	bool HasIgnoreCostTag();
	void InitGameplayAbilityCost(class UMarvelAbilityItem* InAbilityAsset);
	bool IsGathering();
	void K2_ExecuteStageStatus(const struct FGameplayTag& InStatus);
	void K2_Initialize();
	void K2_OnAvatarReborn();
	void K2_OnGatherCallback(int32 GatherIndex);
	void K2_OnGatherIndexChanged(int32 GatherIndex);
	void K2_OnGatherStart();
	void K2_OnGatherStateChanged(bool NewState);
	void K2_OnGatherStop();
	void LocalGatherCallback();
	void LocalGatherStop(float GatherDuration);
	void MissileEventNotify();
	void ModifyDeathImpulseInfo(int32& InOutImpulseLevel, struct FVector& InOutDeathDir, const struct FAttributeModifierParameter& InModifierParameter);
	void NativeOnCharacterDeath(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void NativeOnDurationEnd();
	void NativeOnMontageBlendOut(const class FString& EventTag);
	void NativeOnMontageCancelled(const class FString& EventTag);
	void NativeOnMontageCompleted(const class FString& EventTag);
	void NativeOnMontageEvent(const class FString& EventTag);
	void NativeOnMontageInterrupted(const class FString& EventTag);
	void NativeOnSimulatedMontageEvent(const class FString& EventTag);
	void OnAbilityBlocked(bool IsBlocked);
	void OnCharacterReborn(class AActor* TargetActor, const struct FCharacterRebornParam& Param);
	void OnComboStateUpdate(int32 OldComboState, int32 NewComboState);
	void OnCooldownCallBack(const struct FGameplayTag& InTag, int32 Count);
	void OnDurationEnd();
	void OnExecuteCameraInterp(bool bEnable);
	void OnGameplayAbilityHit(const TArray<struct FHitResult>& HitResults);
	void OnGameplayEffectRemoved(const struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo);
	void OnGameplayEffectTagCountChanged(const struct FGameplayTag& Tag, int32 Count);
	void OnGameplayEffectTagCountRequired(const struct FGameplayTag& Tag, int32 Count);
	void OnGameplayEffectTagCountRequiredAny(const struct FGameplayTag& Tag, int32 Count);
	void OnLoopAbilityFailed(const struct FGameplayTagContainer& FailureReason);
	void OnMontageBlendOut(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void OnMontageCancelled(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void OnMontageCompleted(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void OnMontageEvent(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void OnMontageInterrupted(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void OnShakeHUD();
	void OnSimulatedMontageEvent(const struct FGameplayTag& EventTag, const struct FGameplayEventData& EventData);
	void OnUnPossessed();
	void PauseDurationTimer(const class FString& TaskName);
	void PendingBindAbilityInput();
	class UMarvelAbilityTask_PlayMontageAndWaitForEvent* PlayTimelineAndWaitForEventTask(int32 TimelineIndex, class FName TaskInstanceName, float Rate, class FName StartSection, bool bStopWhenAbilityEnds, float AnimRootMotionTranslationScale, bool bIgnoreBehitAnim);
	void PostBeginPlay();
	void PreMissileEventNotify();
	void ReceiveComboStateUpdate(int32 OldComboState, int32 NewComboState);
	void RefreshAbilityCooldown(float NewCooldown);
	void RemoteGatherCallback();
	void RemoteGatherStop(const struct FGameplayAbilityTargetDataHandle& Duration);
	void RemoveGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	void ResetCooldown(float NewCooldown);
	void SetDurationTimer(float Duration, const class FString& TaskName);
	void SetDurationTimer_TotalAndRemainTime(float TotalTime, float RemainTime, const class FString& TaskName);
	void SetEnergy(float NewEnergy);
	void StartGather(float CustomCallbackTime, bool bReset);
	void StartReduceEnergy(float CustomDelay, bool bReset);
	void StartRegenEnergy(float CustomDelay, bool bReset);
	void StopGather();
	void StopReduceEnergy();
	void StopRegenEnergy();
	void StopUpdateEnergy();
	void SyncGatherInfo(const struct FSyncGatherInfo& SyncInfo);
	void TickCheckReduceCost();
	void UnBindEnhancedInputAction();
	void UnpauseDurationTimer(const class FString& TaskName);
	void UpdateIgnoreCommitState(const struct FGameplayTag& IgnoreType, bool bIgnore);
	void UseAbilityCacheForCD();
	void UseAbilityCacheForCost();
	void ZeroEnergy();

	bool AbilityIsPressed() const;
	struct FGameplayAbilityTagSatisfyResult DoesAbilitySatisfyTagRequirements(const struct FGameplayAbilityTagSatisfyQuery& Query) const;
	struct FGameplayTag GetAbilityIDTag() const;
	void GetActivateIntervalInfo(float* OutActivateInterval, float* OutLastActiveTime) const;
	int32 GetComboState(bool bStartFromZero) const;
	int32 GetComboStateByTimeline() const;
	float GetCooldownDuration() const;
	float GetEnergyMaxValue() const;
	float GetEnergyPercent() const;
	float GetEnergyToCache() const;
	float GetEnergyValue() const;
	class UMarvelAbilityItem* GetMarvelAbilityAsset() const;
	class UMarvelAbilityConfig* GetMarvelAbilityConfig() const;
	int32 GetMarvelAbilityID() const;
	EAbilityInputBinds GetMarvelAbilityInputBind() const;
	int32 GetMarvelAbilityInputID() const;
	class FName GetMarvelAbilityInputName() const;
	struct FMarvelAbilityTable GetMarvelAbilityTable() const;
	struct FGameplayTagContainer GetMarvelAbilityTags() const;
	class UMarvelAttrReduceRegenAbility* GetReduceRegenAbility() const;
	class UAnimTimeline* GetTimelineByIndex(int32 Index_0) const;
	bool HasExecuteBreak() const;
	bool HasExecuteMissile() const;
	bool HasExecutePreMissile() const;
	bool HasTimelineByName(const class FName& TimelineName) const;
	bool IsActivated() const;
	bool IsBlocked() const;
	bool IsCoolingDown() const;
	bool IsEnergyReducing() const;
	bool IsEnergyRegening() const;
	bool IsEnergyStopping() const;
	bool IsIgnoreTargetCommitType(const struct FGameplayTag& IgnoreType) const;
	bool IsIgnoreTargetCommitTypeWithActorInfo(const struct FGameplayTag& IgnoreType, const struct FGameplayAbilityActorInfo& ActorInfo) const;
	bool IsPrimaryAbility() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayAbility">();
	}
	static class UMarvelGameplayAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayAbility>();
	}
};

// Class Marvel.Ability_112
// 0x0038 (0x25B8 - 0x2580)
class UAbility_112 : public UMarvelGameplayAbility
{
public:
	class APhysicsSummoner*                       WeaponSummoner;                                    // 0x2580(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OwnerActor;                                        // 0x2588(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UConfig_112*                            AbilityConfig;                                     // 0x2590(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicalInteractionComponent*          InteractionComponent;                              // 0x2598(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A0[0x10];                                    // 0x25A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAbilityTask_PlayMontageAndWaitForEvent* AnimTask;                                          // 0x25B0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	int32 GetCurrentTimelineIndex();
	void HoldShield();
	void InputReleasedWait(float TimeWaited);
	void OnWeaponEndAgentTask(class AActor* Weapon);
	void TryThrow();
	void UnHoldShield();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_112">();
	}
	static class UAbility_112* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_112>();
	}
};

// Class Marvel.MarvelAbilityTargetActor_Base
// 0x0570 (0x0CA0 - 0x0730)
class AMarvelAbilityTargetActor_Base : public AGameplayAbilityTargetActor
{
public:
	uint8                                         Pad_730[0x60];                                     // 0x0730(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAudioComponent*                  AudioComponent;                                    // 0x0790(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        DefaultSceneRoot;                                  // 0x0798(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  MarvelActorTags;                                   // 0x07A0(0x0068)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	uint8                                         Pad_808[0x8];                                      // 0x0808(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelQuoteContext                    QuoteContext;                                      // 0x0810(0x00F0)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         TargetId;                                          // 0x0900(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0904(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAbilitySpecHandle             AbilityHandle;                                     // 0x0908(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerSpawnWorldTime;                              // 0x090C(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_910[0x8];                                      // 0x0910(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            InstigatorController;                              // 0x0918(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelTargetActorGenerateInfo         GenerateInfo;                                      // 0x0920(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	ETargetActorType                              TargetActorType;                                   // 0x0968(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_969[0x7];                                      // 0x0969(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAgentOriginInfo                 OriginInfo;                                        // 0x0970(0x0018)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_988[0x8];                                      // 0x0988(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAbilityTask_Projectile*          SpawnTask;                                         // 0x0990(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AMarvelPlayerState*                     RefPlayerState;                                    // 0x0998(0x0008)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ETargetActorBeginReason                       BeginReason;                                       // 0x09A0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETargetActorDestroyReason                     DestroyReason;                                     // 0x09A1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A2[0x6];                                      // 0x09A2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* Value)> OnBeginTask;                                       // 0x09A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Value)> OnEndTask;                                         // 0x09B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Value)> OnRecycleTask;                                     // 0x09C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Instigator)> OnRepInstigatorDelegate;                           // 0x09D8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_9E8[0xEC];                                     // 0x09E8(0x00EC)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkinID;                                            // 0x0AD4(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UID;                                               // 0x0AD8(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ADC[0x4];                                      // 0x0ADC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityContextHandle            AbilityContextHandle;                              // 0x0AE0(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         BaseDamageRatioForReflex;                          // 0x0B20(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B24[0x4];                                      // 0x0B24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelActorPoolComponent*              ActorPoolComponent;                                // 0x0B28(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNumBool                               bCacheEndAgentTask;                                // 0x0B30(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_B31[0x7];                                      // 0x0B31(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* CacheActor)> OnActorCacheDispatcher;                            // 0x0B38(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_B48[0x8];                                      // 0x0B48(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilitySourceLocationInfo       StartLocationInfo;                                 // 0x0B50(0x0140)(BlueprintVisible, Net, NoDestructor, ContainsInstancedReference, ExposeOnSpawn, NativeAccessSpecifierPublic)
	int32                                         BeginPlayIdx;                                      // 0x0C90(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C94[0xC];                                      // 0x0C94(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	bool ClientBroadcastShouldExecuteScopeNoActorCue(const struct FGameplayCueParameters& GameplayCueParameters);
	bool ClientSelfShouldExecuteScopeNoActorCue(const struct FGameplayCueParameters& GameplayCueParameters);
	void DirectEnd();
	void ExecuteGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	void ExecuteScopeNoActorCue(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	void ExecuteScopeNoActorHitCue(const TArray<struct FGameplayTag>& GameplayCueTags, const TArray<struct FHitResult>& HitResults, struct FGameplayCueParameters* GameplayCueParameters);
	void K2_EndAgentTask();
	void K2_OnBeginAgentTask();
	void K2_OnBeginAgentTaskRenderOnly();
	void K2_OnCachingAgentTask();
	void K2_OnEndAgentTask();
	void K2_OnEndAgentTaskRenderOnly();
	void K2_OnGameplayAbilityEnded(class UGameplayAbility* InAbility);
	void K2_OnInitializeData();
	void K2_OnLifeSpanExpired();
	void K2_OnPawnInstigatorDeath();
	void K2_OnPawnInstigatorReborn();
	void K2_OnQuoteContextSourceReady();
	void K2_OnQuoteContextTargetsReady();
	void K2_OnRecycleAgentTask();
	void k2_RecycleAgentTask();
	const struct FMarvelAgentOriginInfo MakeOriginInfo();
	void MulticastExecuteScopeNoActorCue(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	void MulticastExecuteScopeNoActorHitCue(const TArray<struct FGameplayTag>& GameplayCueTags, const TArray<struct FHitResult>& HitResults, const struct FGameplayCueParameters& GameplayCueParameters);
	void OnEffectiveComponentCreated(class UMarvelAgentEffectiveComponent* InEffectComponent);
	void OnGameplayAbilityDestroy();
	void OnGameplayAbilityEnded(class UGameplayAbility* InAbility);
	void OnInstigatorEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
	void OnPawnInstigatorDeath(class AActor* DamageCauser, class AActor* TargetActor, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnPawnInstigatorReborn(class AActor* TargetActor, const struct FCharacterRebornParam& Param);
	void OnQuoteNewTarget(class AActor* InNewQuoteTarget);
	void OnQuoteSourceEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
	void OnQuoteSourceEndTask(class AActor* Actor);
	void OnRep_ActorPoolBeginPlayChanged();
	void OnRep_EndAgentTask();
	void OnRep_QuoteContext();
	void OnTraceComponentCreated(class UMarvelAgentTraceComponent* InTraceComponent);
	void RemoveGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	void SetRecycleDelay(float InDelayTime);
	void SpawnEffectiveScopeQuote();
	class UMarvelAbilityTask_Projectile* SpawnProjectileTask(int32 ID, const struct FMarvelAbilitySocketInfo& SocketInfo, bool bActivateTask);
	class UMarvelAbilityTask_Projectile* SpawnProjectileTaskEx(int32 ID, const struct FMarvelAbilitySourceLocationInfo& LocationInfo, bool bActivateTask);
	void SpawnRecycleScopeQuote();
	class UMarvelAbilityTask_Projectile* SpawnScopeTask(int32 ID, const struct FMarvelAbilitySocketInfo& SocketInfo, bool bActivateTask, bool bInServerWaitLocationInfo);
	class UMarvelAbilityTask_Projectile* SpawnScopeTaskEx(int32 ID, const struct FMarvelAbilitySourceLocationInfo& LocationInfo, bool bActivateTask);
	class UMarvelAbilityTask_SpawnSummoner* SpawnSummonerTask(int32 ID, const struct FMarvelAbilitySocketInfo& SocketInfo, ESummonedPredictMode InMode, bool bActivateTask);
	class UMarvelAbilityTask_SpawnSummoner* SpawnSummonerTaskEx(int32 ID, const struct FMarvelAbilitySourceLocationInfo& LocationInfo, ESummonedPredictMode InMode, bool bActivateTask);

	class APawn* GetCurrentInstigator() const;
	class AMarvelBaseCharacter* GetCurrentInstigatorCharacter() const;
	class AActor* GetCurrentOwner() const;
	class AMarvelBaseCharacter* GetCurrentOwnerCharacter() const;
	class UMarvelBaseGameplayAbility* GetCurrentOwningAbility() const;
	float GetDamageRatioForReflex() const;
	class APawn* GetOriginInstigator() const;
	class AMarvelBaseCharacter* GetOriginInstigatorCharacter() const;
	class AActor* GetOriginOwner() const;
	class AMarvelBaseCharacter* GetOriginOwnerCharacter() const;
	class UMarvelBaseGameplayAbility* GetOriginOwningAbility() const;
	class UMarvelAbilityItem* GetOriginOwningAbilityAsset() const;
	class UMarvelAbilityConfig* GetOriginOwningAbilityConfig() const;
	class UMarvelBaseAbilitySystemComponent* GetOriginOwningASC() const;
	class AMarvelPlayerState* GetPlayerState() const;
	float GetSurvivalTime() const;
	bool HasAutonomousClient() const;
	bool HasOriginAutonomousClient() const;
	bool HasOriginClientNetOwner() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTargetActor_Base">();
	}
	static class AMarvelAbilityTargetActor_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelAbilityTargetActor_Base>();
	}
};

// Class Marvel.EpicMomentBaseAction
// 0x00F0 (0x0120 - 0x0030)
class UEpicMomentBaseAction : public UObject
{
public:
	uint8                                         Pad_30[0x78];                                      // 0x0030(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelGameplayEventManager*            EventManager;                                      // 0x00A8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelGameState*                       GameState;                                         // 0x00B0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCareerWorldSubsystem*                  CareerSubsystem;                                   // 0x00B8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 OwningActor;                                       // 0x00C0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelBaseAbilitySystemComponent*      OwningASC;                                         // 0x00C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCareerGameData*                        CareerGameData;                                    // 0x00D0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D8[0x48];                                      // 0x00D8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddNewEventToTimeline(int32 UID, const struct FEpicMomentEventInfo& InEventInfo);
	EUltimateAbilityType GetUltimateAbilityType();
	void OnAbilityInitialize(int32 AbilityID);
	void OnActorDeathEvent(class AActor* Killer, class AActor* Target, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void OnDeinitialize();
	void OnGameplayTagEvent(const struct FGameplayTag& InTag, int32 Count);
	void OnInitialize();
	void OnPawnPossessed(class AMarvelPlayerState* PlayerState, class AMarvelBaseCharacter* Character);
	void OnUltimateAbilityActivate();
	void OnUltimateAbilityEnd();
	void TrySaveEpicMoment();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EpicMomentBaseAction">();
	}
	static class UEpicMomentBaseAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEpicMomentBaseAction>();
	}
};

// Class Marvel.EpicMomentAction_Treat
// 0x0050 (0x0170 - 0x0120)
class UEpicMomentAction_Treat : public UEpicMomentBaseAction
{
public:
	uint8                                         Pad_120[0x50];                                     // 0x0120(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnOwnerApplyTreat(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EpicMomentAction_Treat">();
	}
	static class UEpicMomentAction_Treat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEpicMomentAction_Treat>();
	}
};

// Class Marvel.AbilityActivateData_Base
// 0x0008 (0x0038 - 0x0030)
class UAbilityActivateData_Base final : public UObject
{
public:
	EAbilityActivatePriority                      ActivatePriorityType;                              // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetAbilityActivatePriority();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityActivateData_Base">();
	}
	static class UAbilityActivateData_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityActivateData_Base>();
	}
};

// Class Marvel.MarvelDemoNetDriver
// 0x0080 (0x1B20 - 0x1AA0)
class UMarvelDemoNetDriver final : public UJarvisReplayDemoNetDriver
{
public:
	TArray<struct FReplayEvent>                   FMarvelEvents;                                     // 0x1AA0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UWorld* DemoWorld)> OnReplayEventLoaded;                               // 0x1AB0(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AC0[0x30];                                    // 0x1AC0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FNetworkReplayChunkMerge>       ChunkDownloadList;                                 // 0x1AF0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class ULevelSubsystem*                        CachedLevelSubsystem;                              // 0x1B00(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B08[0x18];                                    // 0x1B08(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddMarvelReplayEvent(struct FReplayEvent* F);
	void GetMarvelReplayEvent();
	void OnCheckpointLoaded(class UWorld* DemoWorld);
	void OnPlayerStateAdded(class AMarvelPlayerState* MarvelPlayerState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelDemoNetDriver">();
	}
	static class UMarvelDemoNetDriver* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelDemoNetDriver>();
	}
};

// Class Marvel.MarvelCueNotify_Actor
// 0x06E8 (0x0CC8 - 0x05E0)
class AMarvelCueNotify_Actor : public AGameplayCueNotify_Actor
{
public:
	uint8                                         Pad_5E0[0x58];                                     // 0x05E0(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	class UCueDataManagerComponent*               CueDataManagerComponent;                           // 0x0638(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseCustomTeamVisual : 1;                          // 0x0640(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_641[0x53];                                     // 0x0641(0x0053)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FXRecycleTime;                                     // 0x0694(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CameraShakeOptions;                                // 0x0698(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_699[0x7];                                      // 0x0699(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULegacyCameraShake>         ActiveCameraShake;                                 // 0x06A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     CameraMaterialResource;                            // 0x06A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UCurveFloat*>                    CameraMaterialParameterCurves;                     // 0x06B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           CameraMaterialParameterNames;                      // 0x06C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bPlayOnEnable;                                     // 0x06D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverseOnDisable;                                 // 0x06D1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D2[0x6];                                      // 0x06D2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                UIDisplay;                                         // 0x06D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowUIDisplay_WhenViewTargetIsCueInstigator;      // 0x06E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowUIDisplay_WhenViewTargetIsCueOwner;           // 0x06E1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E2[0x6];                                      // 0x06E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            UIDisplayWidget;                                   // 0x06E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUIUnits                               UIUnits;                                           // 0x06F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bHideReticleWhenActive;                            // 0x0700(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_701[0x7];                                      // 0x0701(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           WidgetTimerHandle;                                 // 0x0708(0x0018)(BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasHint;                                          // 0x0720(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_721[0x7];                                      // 0x0721(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCueHintData                           CueHintData;                                       // 0x0728(0x0098)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bBroadcastHitOfTarget;                             // 0x07C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C1[0x7];                                      // 0x07C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetStyle_BattleTransientTip        BattleTransientTip_WhileActive;                    // 0x07C8(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FWidgetStyle_BattleTransientTip        BattleTransientTip_Active;                         // 0x0810(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FWidgetStyle_BattleTransientTip        BattleTransientTip_Inactive;                       // 0x0858(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FWidgetStyle_BattlePersistentTip       BattlePersistentTip;                               // 0x08A0(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class UUIController_BattlePersistentTip*      PersistentTipController;                           // 0x08E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraInterp*                          CameraInterpAsset;                                 // 0x08F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableCameraViewInterp;                            // 0x08F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8F9[0x7];                                      // 0x08F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CustomViewLocation;                                // 0x0900(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               CustomViewRotation;                                // 0x0918(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         CustomViewInterpSpeed;                             // 0x0930(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomViewRecoverInterpSpeed;                      // 0x0934(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEffectActivationMethod                       EnableShellMeshMaterial;                           // 0x0938(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_939[0x7];                                      // 0x0939(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     ShellMeshMaterial;                                 // 0x0940(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ShellMeshClothMaterial;                            // 0x0948(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelShellMeshComponent*              ShellMeshComponent;                                // 0x0950(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivatingIsShellMesh;                            // 0x0958(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRenderAdditionalBloom : 1;                        // 0x0959(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCheckInstigator : 1;                              // 0x0959(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCheckCauser : 1;                                  // 0x0959(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_95A[0x2];                                      // 0x095A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ProjectileVisualSize;                              // 0x095C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FResponsiveHitFXConfig                 ResponsiveHitFX;                                   // 0x0960(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FResponsiveHitAudioConfig              ResponsiveHitAudio;                                // 0x0980(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              CueUIActiveChanged;                                // 0x0988(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class FName                                   MagnetoStopParticleParameterName;                  // 0x0998(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MagnetoMagicEntityDissolveParameterName;           // 0x09A4(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9B0[0x28];                                     // 0x09B0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CameraMaterialInstance;                            // 0x09D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UParticleSystemComponent*               CameraParticleInstance;                            // 0x09E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_9E8[0x10];                                     // 0x09E8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 HandleStr4NextTick;                                // 0x09F8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayCueParameters                 CacheCueParameters;                                // 0x0A08(0x01B8)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_BC0[0x40];                                     // 0x0BC0(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   TargetChar;                                        // 0x0C00(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelBaseCharacter*                   SourceChar;                                        // 0x0C08(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULegacyCameraShake*                     ActiveCameraShakeInstance;                         // 0x0C10(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UParticleSystemComponent*>       CueParticles;                                      // 0x0C18(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UNiagaraComponent*>              CueNiagaras;                                       // 0x0C28(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UDecalComponent*>                CueDecals;                                         // 0x0C38(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UCueCombineNiagaraComponent*>    CueCombineNiagaras;                                // 0x0C48(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_C58[0x20];                                     // 0x0C58(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNiagaraComponent*>              WarmupNiagaras;                                    // 0x0C78(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UMeshComponent*>                 CueMeshComponents;                                 // 0x0C88(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UNiagaraComponent*>              CustomNiagaraComponents;                           // 0x0C98(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UNiagaraComponent*>              SegmentNiagaraComponents;                          // 0x0CA8(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FTransform>                     SegmentThroughTransforms;                          // 0x0CB8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void ActivateShellMeshMaterial(class AMarvelBaseCharacter* TargetCharacter, const struct FGameplayCueParameters& Parameters, bool bEnable);
	bool CheckIsMagnetoShield(const struct FGameplayCueParameters& Parameters);
	bool CheckIsNeedForceEnd(const struct FGameplayCueParameters& Parameters);
	void ClearCameraMaterial();
	void DeactivateAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	class UFXSystemComponent* ExecuteAttachedCombineFX(class USceneComponent* AttachMesh, class UFXSystemAsset* FXAsset, class FName SocketName);
	void ExecuteHitCombineFX(class UFXSystemAsset* FXAsset, const struct FTransform& HitTransform);
	struct FTeamVisual K2_GetCustomTeamVisual(const struct FGameplayCueParameters& GameplayCueParameters);
	void K2_UpdateTeamVisualEffect(const struct FTeamVisual& NewTeamVisual);
	void NextTickCallback();
	void NextTickLogic(const class FString& HandleStr);
	void OnActorPostForceChanged(class AActor* SourceActor, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, ETargetActorType TargetActorType, int32 AbilityID);
	void OnCharacterSculptChanged(int32 SculptID);
	void OnExecuteForceEndAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnExecuteForceEndFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnNextTick(const class FString& HandleStr);
	void OnSkinInitialized(int32 SkinID);
	void OnTargetApplyDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnTargetCharacterEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
	void OnViewTargetChanged(EClientPlayerViewSide ViewSide);
	void OnWidgetShowUp(class AMarvelBaseCharacter* TargetCharacter, class UUserWidget* DisplayWidget);
	void RefreshFXSystem();
	void RequestRefreshTeamVisual();
	void RestoreNiagaraParameter();
	void RuleOfWidget();
	void SetEnemyParamForMesh(class UMeshComponent* InMeshComponent);
	void SetTeamEffectsForNiagara(class UNiagaraComponent* InNiagaraComponent);
	class UNiagaraComponent* SpawnFXSystemAtLocation(class UFXSystemAsset* Template, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivate);
	class UNiagaraComponent* SpawnFXSystemAttached(class UFXSystemAsset* Template, class USceneComponent* AttachToComponent, class FName SocketName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivate);
	class UNiagaraComponent* SpawnNiagaraAtLocationWithParams(const struct FNiagaraSystemSpawnParameters& InOutSpawnParameters);
	class UNiagaraComponent* SpawnNiagaraAttachedWithParams(const struct FNiagaraSystemSpawnParameters& InOutSpawnParameters);
	void UpdateCameraMaterial(class FName TrackName, class FName PropertyName, float OutValue);
	void UpdateTeamVisualEffects();

	struct FGameplayCueParameters GetCacheCueParameters() const;
	class AActor* GetCachedInstigator() const;
	struct FTeamVisual GetTeamVisual() const;
	bool IsCueUIActive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_Actor">();
	}
	static class AMarvelCueNotify_Actor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_Actor>();
	}
};

// Class Marvel.MarvelCueNotify_Buff
// 0x0370 (0x1038 - 0x0CC8)
class AMarvelCueNotify_Buff : public AMarvelCueNotify_Actor
{
public:
	uint8                                         bIsAttached : 1;                                   // 0x0CC8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_CC9[0x3];                                      // 0x0CC9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0CCC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         StartFX;                                           // 0x0CD8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         EndFX;                                             // 0x0CE0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         ExecuteFX;                                         // 0x0CE8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsBodySize : 1;                                   // 0x0CF0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_CF1[0x3];                                      // 0x0CF1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ParameterName;                                     // 0x0CF4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBodySizeType                                 BodySizeType;                                      // 0x0D00(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D01[0x3];                                      // 0x0D01(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BaseSize;                                          // 0x0D04(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseSizeForAll;                                    // 0x0D08(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultScale;                                      // 0x0D0C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartAudioID;                                      // 0x0D10(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopAudioID;                                       // 0x0D14(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndAudioID;                                        // 0x0D18(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1C[0x4];                                      // 0x0D1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            AudioSwitchParams;                                 // 0x0D20(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            AudioStateParams;                                  // 0x0D70(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         ActorDopplerSpeed;                                 // 0x0DC0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialParameterName;                             // 0x0DC4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialParameterValue;                            // 0x0DD0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetOnOverlayMaterial;                             // 0x0DD4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bDelayRecycleFX : 1;                               // 0x0DD5(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDelayRecycleUI : 1;                               // 0x0DD5(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDelayRecycleMaterial : 1;                         // 0x0DD5(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bNeedChangeReticleStyle;                           // 0x0DD6(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD7[0x1];                                      // 0x0DD7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FReticleStyle                          ReticleStyle;                                      // 0x0DD8(0x00E4)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDisplayBuffDuration;                              // 0x0EBC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EBD[0x3];                                      // 0x0EBD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetStyle_BattleHUD_Duration        BuffDurationStyle;                                 // 0x0EC0(0x0140)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         BuffID;                                            // 0x1000(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1004[0x4];                                     // 0x1004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIController_BattleHUD_BuffDuration*   UIC_BuffDuration;                                  // 0x1008(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            Widget_BuffDuration;                               // 0x1010(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1018[0x20];                                    // 0x1018(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateReticle();
	void DeactivateReticle();
	void OnActiveAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnActiveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnExecuteAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnExecuteFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnRemoveAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnRemoveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnRemoveMaterial(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnRemoveUI(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnTargetCharacterDeath(class AActor* DamageCauser, class AActor* TargetActor, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnUniqueInstigatorEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
	void WhileActiveAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void WhileActiveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void WhileActiveMaterial(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void WhileActiveUI(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_Buff">();
	}
	static class AMarvelCueNotify_Buff* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_Buff>();
	}
};

// Class Marvel.Cue_Buff_Stun
// 0x0008 (0x1040 - 0x1038)
class ACue_Buff_Stun final : public AMarvelCueNotify_Buff
{
public:
	class UNiagaraComponent*                      NS_Stun;                                           // 0x1038(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Buff_Stun">();
	}
	static class ACue_Buff_Stun* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Buff_Stun>();
	}
};

// Class Marvel.AbilityStatistics
// 0x0040 (0x0070 - 0x0030)
class UAbilityStatistics : public UObject
{
public:
	int32                                         AbilityType;                                       // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayAbility*                 SourceGameplayAbility;                             // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerUID;                                         // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroUID;                                           // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectHeroID;                                      // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityStatisticsController*           AbilityStatisticsController;                       // 0x0050(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   FinalCharacter;                                    // 0x0058(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SourceInstigator;                                  // 0x0060(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SourceActorType;                                   // 0x0068(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void AbilityRecordSpecialInfo(const class UMarvelGameplayAbility* Ability, const class FString& ExtraKey, const float Value);

	void Initialize(class UAbilityStatisticsController* InController, const struct FActionLogAbilityContext& AbilityInfoContext, const int32 InAbilityType, class UMarvelGameplayAbility* InGameAbility);
	void K2_OnInitialize();
	void K2_OnShutdown();
	void OnAbilityActivate(const struct FActionLogAbilityContext& AbilityInfoContext);
	void OnAbilityBreak(const struct FActionLogAbilityContext& AbilityInfoContext);
	void OnAbilityEnd(const struct FActionLogAbilityContext& AbilityInfoContext);
	void OnAbilityEndAgentTask(class AActor* Instigator, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, const struct FEndAgentTaskInfo& EndAgentTaskInfo);
	void OnAbilityHit(const struct FActionLogBattleContext& BattleContext, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnAbilityHitOnChaos(class AActor* Instigator, class AActor* Target, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnAbilityMissile(const struct FActionLogAbilityContext& AbilityInfoContext);
	void OnAbilityPostTraceSpec(class AActor* Instigator, const class FString& TraceID, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnAbilityProjectileBegin(class AActor* Instigator, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnAbilityRecycleAgentTask(class AActor* Instigator, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, const struct FEndAgentTaskInfo& EndAgentTaskInfo);
	void OnAbilityScopeBegin(class AActor* Instigator, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnAbilitySummonedBegin(class AActor* Instigator, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnAbilityWeaponAmmoEnd(class AActor* Instigator, class AActor* Target, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, int32 Count);
	void OnRecordAbilityUseInfo(struct FActionLogAbilityRecord* AbilityRecord);
	void OnRecordUnitUseInfo(struct FActionLogAbilityRecord* AbilityRecord);
	void Shutdown();
	void SpecialInfo(const class UMarvelGameplayAbility* Ability, const class FString& ExtraKey, float Value);

	int32 GetCurrentHeroID() const;
	int32 GetCurrentSculptID() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityStatistics">();
	}
	static class UAbilityStatistics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityStatistics>();
	}
};

// Class Marvel.AnimNotify_TagNotify
// 0x02A8 (0x02F8 - 0x0050)
class UAnimNotify_TagNotify : public UAnimNotify_PlayMontageNotify
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0050(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     Payload;                                           // 0x0060(0x0290)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         bHasBlueprintReceivedNotify : 1;                   // 0x02F0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_2F1[0x7];                                      // 0x02F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_TagNotify">();
	}
	static class UAnimNotify_TagNotify* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_TagNotify>();
	}
};

// Class Marvel.MarvelTagNotify_Reload
// 0x0000 (0x02F8 - 0x02F8)
class UMarvelTagNotify_Reload final : public UAnimNotify_TagNotify
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTagNotify_Reload">();
	}
	static class UMarvelTagNotify_Reload* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTagNotify_Reload>();
	}
};

// Class Marvel.MarvelAbilityTargetActor_Predict
// 0x09C0 (0x1660 - 0x0CA0)
class AMarvelAbilityTargetActor_Predict : public AMarvelAbilityTargetActor_Base
{
public:
	uint8                                         Pad_CA0[0x378];                                    // 0x0CA0(0x0378)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bMoveFakeToReplicatedPos;                          // 0x1018(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1019[0x7];                                     // 0x1019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         SpawnPredictionKey;                                // 0x1020(0x00A0)(Net, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10C0[0x5A0];                                   // 0x10C0(0x05A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsOwningAbilityChange();
	void K2_OnBeginAgentTask_GraphAbility();
	void K2_OnEndAgentTask_GraphAbility(ETargetActorDestroyReason ActorDestroyReason);
	void ServerSetFakeValid(bool bNewValue);

	class AMarvelAbilityTargetActor_Predict* GetFakePredictActor() const;
	class AMarvelAbilityTargetActor_Predict* GetMasterPredictActor() const;
	bool IsFakeActor() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTargetActor_Predict">();
	}
	static class AMarvelAbilityTargetActor_Predict* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelAbilityTargetActor_Predict>();
	}
};

// Class Marvel.MarvelGameplayEffectSkillEnergy2Reduce
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectSkillEnergy2Reduce final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectSkillEnergy2Reduce">();
	}
	static class UMarvelGameplayEffectSkillEnergy2Reduce* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectSkillEnergy2Reduce>();
	}
};

// Class Marvel.AbilityTableFuncLibrary
// 0x0000 (0x0030 - 0x0030)
class UAbilityTableFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FStreamableHandleWrapper AsyncLoadAbilityTables(const TArray<int32>& HeroIDs, const TDelegate<void(TArray<class UObject*>& LoadedAssets)>& OnLoaded);
	static class UMarvelAbilityItem* GetAbilityAsset(const int32 AbilityID);
	static class UMarvelAbilityConfig* GetAbilityConfig(const int32 AbilityID);
	static struct FMarvelAbilityTable GetAbilityData(const int32 AbilityID);
	static bool GetAbilityDatas(const int32 HeroID, TArray<struct FMarvelAbilityTable>* OutAbilities);
	static EAbilityInputBinds GetAbilityInputBind(const int32 AbilityID);
	static bool GetAbilityNamesGroupByInputAction(const int32 HeroID, TMap<EAbilityInputBinds, class FString>* OutAbilityNames);
	static struct FMarvelAbilityResTable GetAbilityResTable(class AActor* AbilityOwner, int32 AbilityID);
	static struct FSoftObjectPath GetAbilityTablePath(const int32 HeroID);
	static struct FSoftObjectPath GetCommonAbilityTablePath();
	static bool GetCommunicationAbilities(TSet<int32>* OutAbilityIDs);
	static bool GetHeroAbilities(const int32 HeroID, TSet<int32>* OutAbilityIDs);
	static bool GetHeroAllAbilities(const int32 HeroID, TSet<int32>* OutAbilityIDs, const bool bEnableCheck);
	static bool GetHeroCommonAbilities(TSet<int32>* OutAbilityIDs);
	static bool GetHeroSummonedAbilities(const int32 HeroID, TSet<int32>* OutAbilityIDs);
	static bool IsCommunicationAbility(const int32 AbilityID);
	static bool IsHeroAbility(const int32 AbilityID);
	static bool IsHeroCommonAbility(const int32 AbilityID);
	static bool UpdateDataAsset(const class FString& InDataAssetName, const class FString& DataExec);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTableFuncLibrary">();
	}
	static class UAbilityTableFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTableFuncLibrary>();
	}
};

// Class Marvel.MarvelPyramidMeshComponent
// 0x0170 (0x09F0 - 0x0880)
class UMarvelPyramidMeshComponent final : public UMarvelGenMeshComponent
{
public:
	struct FMarvelPyramidPoints                   Points;                                            // 0x0880(0x00B0)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_930[0x8];                                      // 0x0930(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelPyramidPoints                   RelativePoints;                                    // 0x0938(0x00B0)(NativeAccessSpecifierPublic)
	uint8                                         Pad_9E8[0x8];                                      // 0x09E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPyramidMeshComponent">();
	}
	static class UMarvelPyramidMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelPyramidMeshComponent>();
	}
};

// Class Marvel.MarvelBondManager
// 0x0198 (0x0628 - 0x0490)
class AMarvelBondManager : public AActor
{
public:
	TMulticastInlineDelegate<void(struct FBondInstance& InBondInstance, TArray<class AMarvelBaseCharacter*>& TriggerCharacters)> OnAddNewBondDelegate;                              // 0x0490(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FBondInstance& InBondInstance, TArray<class AMarvelBaseCharacter*>& TriggerCharacters)> OnPreRemoveBondDelegate;                           // 0x04A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FBondInstance& InBondInstance, TArray<class AMarvelBaseCharacter*>& TriggerCharacters)> OnBondStateChangedDelegate;                        // 0x04B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelBaseCharacter* TriggerCharacter, TArray<struct FBondInstance>& RefBondInstances)> OnCharacterAddDelegate;                            // 0x04C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelBaseCharacter* TriggerCharacter, TArray<struct FBondInstance>& RefBondInstances)> OnCharacterRemoveDelegate;                         // 0x04D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelBaseCharacter* InTriggerCharacter, class AMarvelBaseCharacter* InTarget, struct FAttributeModifierParameter& KillModifierParam, struct FBondInstance& InBondInstance)> OnAssistKillDelegate;                              // 0x04E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelBaseCharacter* InTriggerCharacter, int32 InTriggerAbilityID, class AMarvelBaseCharacter* InTarget, struct FBondInstance& InBondInstance)> OnReceiverTriggeredDelegate;                       // 0x04F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelBaseCharacter* InTriggerCharacter, int32 InTriggerAbilityID, class AMarvelBaseCharacter* InTarget, struct FBondInstance& InBondInstance)> OnSenderTriggeredDelegate;                         // 0x0500(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_510[0xA0];                                     // 0x0510(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class AMarvelBaseCharacter*, class UCharacterStateInfo*> CharacterStateInfoMap;                             // 0x05B0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TArray<class UCharacterBondActivateCondition*> CharacterBondActiveCondistions;                    // 0x0600(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<int32>                                 AllGroupIDs;                                       // 0x0610(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	bool                                          bInitialied;                                       // 0x0620(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_621[0x7];                                      // 0x0621(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class AMarvelBondManager* GetBondManager(class UObject* WOC);

	TArray<int32> GetActiveBondAbilityIDForCharacter(class AMarvelBaseCharacter* InCharacter);
	TArray<class AMarvelBaseCharacter*> GetBondBuffSourceCharacters(class AMarvelBaseCharacter* InBuffOwner);
	TArray<class AMarvelBaseCharacter*> GetBondCharactersByAbility(class UMarvelGameplayAbility* InAbility, bool bIncludeSelf);
	TArray<class AMarvelBaseCharacter*> GetBondCharactersByAbilityID(class AMarvelBaseCharacter* InCharacter, int32 InAbilityId, bool bIncludeSelf);
	TArray<class AMarvelBaseCharacter*> GetBondCharactersByBondID(class AMarvelBaseCharacter* InCharacter, int32 InBondID, bool bIncludeSelf);
	TArray<class AMarvelBaseCharacter*> GetBondGroupCharactersByAbility(class UMarvelGameplayAbility* InAbility, bool bIncludeSelf);
	TArray<class AMarvelBaseCharacter*> GetBondGroupCharactersByAbilityID(class AMarvelBaseCharacter* InCharacter, int32 InAbilityId, bool bIncludeSelf);
	TArray<class AMarvelBaseCharacter*> GetBondGroupCharactersByBondGroupID(class AMarvelBaseCharacter* InCharacter, int32 InBondGroupID, bool bIncludeSelf);
	TArray<struct FBondInstance> GetBondInstanceByBondID(int32 InBondID, int32 InTeamID);
	TArray<struct FBondInstance> GetBondInstanceForCharacter(class AMarvelBaseCharacter* InCharacter);
	class APlayerState* GetPlayerStateFromStateInfo(class AMarvelBaseCharacter* InCharacter);
	void InternalTriggerFeedback_AssistKill(class AMarvelBaseCharacter* InTrigger, int32 InTriggerAbilityID, class AMarvelBaseCharacter* InTarget, const struct FAttributeModifierParameter& KillModifierParam, int32 InBondID);
	void InternalTriggerFeedback_ReceiverTrigger(class AMarvelBaseCharacter* InTrigger, int32 InTriggerAbilityID, class AMarvelBaseCharacter* InTarget, int32 InBondID);
	void InternalTriggerFeedback_SenderTrigger(class AMarvelBaseCharacter* InTrigger, int32 InTriggerAbilityID, const TArray<class AMarvelBaseCharacter*>& InTargets, int32 InBondID);
	bool IsBondActive(class AMarvelBaseCharacter* InCharacter, int32 InBondID, bool bConsiderSculpt);
	bool IsBondActiveByAbility(class UMarvelGameplayAbility* InAbility, bool bConsiderSculpt);
	bool IsBondActiveByAbilityID(class AMarvelBaseCharacter* InCharacter, int32 InAbilityId, bool bConsiderSculpt);
	bool IsBondCharacterByAbility(class UMarvelGameplayAbility* InAbility, class AMarvelBaseCharacter* TargetCharacter);
	bool IsBondCharacterByAbilityID(class AMarvelBaseCharacter* SourceCharacter, int32 InAbilityId, class AMarvelBaseCharacter* TargetCharacter);
	bool IsBondCharacterByBondID(class AMarvelBaseCharacter* SourceCharacter, class AMarvelBaseCharacter* TargetCharacter, int32 InBondID);
	bool IsBondGroupActive(class AMarvelBaseCharacter* InCharacter, int32 InBondGroupID, bool bConsiderSculpt);
	bool IsBondGroupActiveByAbility(class UMarvelGameplayAbility* InAbility, bool bConsiderSculpt);
	bool IsBondGroupActiveByAbilityID(class AMarvelBaseCharacter* InCharacter, int32 InAbilityId, bool bConsiderSculpt);
	bool IsBondGroupCharacterByAbility(class UMarvelGameplayAbility* InAbility, class AMarvelBaseCharacter* TargetCharacter);
	bool IsBondGroupCharacterByAbilityID(class AMarvelBaseCharacter* SourceCharacter, int32 InAbilityId, class AMarvelBaseCharacter* TargetCharacter);
	bool IsBondGroupCharacterByBondGroupID(class AMarvelBaseCharacter* SourceCharacter, class AMarvelBaseCharacter* TargetCharacter, int32 InBondGroupID);
	void K2_OnDeInitialize();
	void K2_OnInitialize();
	void MulticastFeedback_AssistKill(class AMarvelBaseCharacter* InTrigger, int32 InTriggerAbilityID, class AMarvelBaseCharacter* InTarget, const struct FAttributeModifierParameter& KillModifierParam, int32 InBondID);
	void MulticastFeedback_ReceiverTrigger(class AMarvelBaseCharacter* InTrigger, int32 InTriggerAbilityID, class AMarvelBaseCharacter* InTarget, int32 InBondID);
	void MulticastFeedback_SenderTrigger(class AMarvelBaseCharacter* InTrigger, int32 InTriggerAbilityID, const TArray<class AMarvelBaseCharacter*>& InTargets, int32 InBondID);
	void OnBondCharacterActivateAbility(class UGameplayAbility* InAbility);
	void OnBondCharacterKillOther(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnBondCharacterReceiveBondBuff(const struct FActiveGameplayEffectHandle& EffectHandle, const struct FGameplayEffectSpec& AppliedEffect);
	void OnCharacterBondActivateReady(class UCharacterBondActivateCondition* InConditionInfo);
	void OnCharacterStateInvalid(class UCharacterStateInfo* StateInfo);
	void OnCharacterStateValid(class UCharacterStateInfo* StateInfo);
	void TriggerFeedback_AssistKill(class AMarvelBaseCharacter* InTrigger, int32 InTriggerAbilityID, class AMarvelBaseCharacter* InTarget, const struct FAttributeModifierParameter& KillModifierParam, int32 InBondID);
	void TriggerFeedback_ReceiverTrigger(class AMarvelBaseCharacter* InTrigger, int32 InTriggerAbilityID, class AMarvelBaseCharacter* InTarget, int32 InBondID);
	void TriggerFeedback_SenderTrigger(class AMarvelBaseCharacter* InTrigger, int32 InTriggerAbilityID, const TArray<class AMarvelBaseCharacter*>& InTargets, int32 InBondID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelBondManager">();
	}
	static class AMarvelBondManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelBondManager>();
	}
};

// Class Marvel.MarvelAbilityTargetActor_Projectile
// 0x19F0 (0x3050 - 0x1660)
class AMarvelAbilityTargetActor_Projectile : public AMarvelAbilityTargetActor_Predict
{
public:
	uint8                                         Pad_1660[0xB8];                                    // 0x1660(0x00B8)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRepMarvelProjMovement                 CustomProjReplicatedMovement;                      // 0x1718(0x01E8)(Net, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_1900[0x28];                                    // 0x1900(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	struct FProjectileForceChangedInfo            LastForceChangedInfo;                              // 0x1928(0x0260)(Net, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FProjectileForceChangedInfo& ProjectileForceChangedInfo)> OnProjectileForceChangedDispatcher_ThreadSafe;     // 0x1B88(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FVector& TargetLocation, struct FVector& TargetDirection)> CatchUpTailFXNotice;                               // 0x1B98(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA8[0x18];                                    // 0x1BA8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFieldParams>                   HitFieldParams;                                    // 0x1BC0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	struct FMarvelGameplayEffectContainerSpec     ContainerSpec;                                     // 0x1BD0(0x0E90)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UMarvelAgentEffectiveComponent*         EffectiveComponent;                                // 0x2A60(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelProjectileComponent*             MovementComponent;                                 // 0x2A68(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UProjectileCollisionComponent*          SphereCollision;                                   // 0x2A70(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                ProjectileServerLocation;                          // 0x2A78(0x0018)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ProjectileStartDelegate;                           // 0x2A90(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	TDelegate<void(struct FHitResult& HitResult)> ProjectileStopDelegate;                            // 0x2AA0(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AB4[0x4];                                     // 0x2AB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(struct FHitResult& Hit)> OnHitTargetDelegate;                               // 0x2AB8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnApplyDamageDelegate;                             // 0x2AC8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	float                                         ImpactRadius;                                      // 0x2AD8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExploded;                                         // 0x2ADC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2ADD[0x3D3];                                   // 0x2ADD(0x03D3)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bFlyMaxDistance;                                   // 0x2EB0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2EB1[0xF];                                     // 0x2EB1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPortalSegments                        PortalSegments;                                    // 0x2EC0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FPredictionKey                         ForceChangedKey;                                   // 0x2F10(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         CollisionEventKey;                                 // 0x2FB0(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ApplyField(const struct FHitResult& ImpactResult);
	void BeforeProjectileInfoForceChangedFromServer();
	void CatchUpTailFX(const struct FVector& Location, const struct FVector& Direction);
	void ClientAskForProjectileMoveData(const struct FVisualLogMapKey& Key);
	void ClientRecordCombatInfo(const struct FProjExpInfo& InfoFromServer);
	void DoForceChangeProjectile_ThreadSafe(struct FProjectileForceChangedInfo* ChangeParam);
	void FlyOverMaxDistance(const struct FHitResult& HitResult);
	void ForceProjectileStop(const struct FHitResult& ImpactResult);
	float GetCollisionRadius(bool bAlly);
	void HitTargetDataParamResolver(const struct FGameplayAbilityTargetDataHandle& Data);
	void IgnoreAllMask();
	void IgnoreEnemyMask();
	void IgnoreTeamMateMask();
	bool IsOnlyUseServerHitInfo(const struct FHitResult& Remote, const struct FHitResult& Local);
	void K2_OnBounce(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void K2_OnFlyOverMaxDistance(const struct FHitResult& HitResult);
	void K2_OnForceEndAgentTask();
	void K2_OnForceProcessHit(const struct FHitResult& ImpactResult);
	void K2_OnPenetrate(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void K2_OnProcessHit(const struct FHitResult& ImpactResult);
	void K2_OnProjectileInfoForceChanged_ThreadSafe(const struct FProjectileForceChangedInfo& InProjectileForceChangedInfo);
	void K2_OnProjectileStart();
	void K2_SetProjectileData(const struct FMarvelProjectileAgentTable& InData);
	void MarkProjectileStopDirty(const struct FHitResult& ImpactResult);
	void OnLocalDebugHitTargetDataCallback(const struct FGameplayAbilityTargetDataHandle& LocalDataHandle);
	void OnLocalEffectTargetDataCallback(const struct FGameplayAbilityTargetDataHandle& LocalDataHandle);
	void OnLocalFakeAdvancedHitTargetDataCallback(const struct FGameplayAbilityTargetDataHandle& LocalDataHandle);
	void OnLocalFlyOverMaxDistanceCallback(const struct FGameplayAbilityTargetDataHandle& LocalDataHandle);
	void OnLocalHitTargetDataCallback(const struct FGameplayAbilityTargetDataHandle& LocalDataHandle);
	void OnMergeDebugHitTargetDataCallback(const struct FGameplayAbilityTargetDataHandle& RemoteDataHandle, const struct FGameplayAbilityTargetDataHandle& LocalDataHandle);
	void OnMergeEffectTargetDataCallback(const struct FGameplayAbilityTargetDataHandle& RemoteDataHandle, const struct FGameplayAbilityTargetDataHandle& LocalDataHandle);
	void OnMergeFakeAdvancedHitTargetDataCallback(const struct FGameplayAbilityTargetDataHandle& RemoteDataHandle, const struct FGameplayAbilityTargetDataHandle& LocalDataHandle);
	void OnMergeFlyOverMaxDistanceCallback(const struct FGameplayAbilityTargetDataHandle& RemoteDataHandle, const struct FGameplayAbilityTargetDataHandle& LocalDataHandle);
	void OnMergeHitTargetDataCallback(const struct FGameplayAbilityTargetDataHandle& RemoteDataHandle, const struct FGameplayAbilityTargetDataHandle& LocalDataHandle);
	void OnMoveProjectilePenetrate(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void OnProjectileApplyDamage();
	void OnProjectileHit(const struct FHitResult& ImpactResult);
	void OnProjectileImpact_ThreadSafe(const struct FHitResult& ImpactResult, bool* bIgnoreImpact);
	void OnProjectileInfoForceChanged_ThreadSafe(const struct FProjectileForceChangedInfo& InProjectileForceChangedInfo);
	void OnReceivePenetrate(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity, float FlyDistance);
	void OnRep_CustomProjReplicatedMovement();
	void PendingStopByServer(const struct FHitResult& ImpactResult);
	void ProjectileBounce(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void ProjectileHide();
	void ProjectileHit(const struct FHitResult& ImpactResult);
	void ProjectileHitByServer(const struct FHitResult& ImpactResult);
	void ProjectileHitByTimer(const struct FHitResult& ImpactResult);
	void ProjectileInfoForceChangedFromServer();
	void ProjectilePenetrate(const struct FHitResult& ImpactResult, const struct FVector& ImpactVelocity);
	void ProjectileStart();
	void ProjectileStop(const struct FHitResult& ImpactResult);
	void ProjectileStopSimulating();
	void ServerRecordInfoAndSendClient(const struct FHitResult& ImpactResult, int64 InTicks, ECombatExpProjectileType SourceType);
	void SetMovementGravity(float NewGravity);
	void SetMovementGravityWithCurve(class UCurveFloat* InCurve);
	void SetMovementSpeed(float NewSpeed);
	void SetVelocity(const struct FVector& NewVelocity);
	bool ShouldEndTaskOnProjectileStop();
	bool ShouldEndTaskOverMaxDistance();
	void SpawnTraceOrHitScopeQuote();
	void TellClientDrawHit(const class UPrimitiveComponent* Component, const struct FVector& position, const struct FQuat& Orientation, const struct FVector& HitPoint);
	void TickPendingPenetrate(const struct FVector& MoveDelta, const struct FHitResult& Hit);
	void UpdateCollisionRuleMask();
	void UpdateComponentVelocity();

	float GetFlyDistance() const;
	float GetHasFlyDistance() const;
	float GetMaxFlyDistance() const;
	struct FMarvelProjectileAgentTable K2_GetProjectileData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTargetActor_Projectile">();
	}
	static class AMarvelAbilityTargetActor_Projectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelAbilityTargetActor_Projectile>();
	}
};

// Class Marvel.MarvelSimpleUserWidget
// 0x00B0 (0x0468 - 0x03B8)
class UMarvelSimpleUserWidget : public UUserWidget
{
public:
	TArray<TSubclassOf<class UMarvelUserWidgetExtension>> AutoExtensionClasses;                              // 0x03B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         AnimationlUserWidgetExtensionClass;                // 0x03C8(0x0028)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftClassPath                         UIInputUserWidgetExtensionClass;                   // 0x03F0(0x0028)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimationlUserWidgetExtension*         AnimationlUserWidgetExtension;                     // 0x0418(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UUIInputUserWidgetExtension*            UIInputlUserWidgetExtension;                       // 0x0420(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UWidgetAnimation*                       Anim_FadeIn;                                       // 0x0428(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Anim_FadeOut;                                      // 0x0430(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Anim_Loop;                                         // 0x0438(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEverNeedInput;                                    // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInputEnabled;                                     // 0x0441(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseParentUserWidgetInputComponent;                // 0x0442(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_443[0x5];                                      // 0x0443(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputMappingContext*                   UIActionMappingContextBP;                          // 0x0448(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 InputContextPriorityName;                          // 0x0450(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_460[0x1];                                      // 0x0460(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsAutoControlStackWhenVisibleChange;              // 0x0461(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_462[0x6];                                      // 0x0462(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddOnTopWidgetStack();
	void ClearEnhancedInputActionBindings();
	void ClearGlobalInputKey();
	void ClearInputActionBindings();
	void ClearInputKeyBinds();
	void ClearMyAllInputBindings();
	class UAnimationlUserWidgetExtension* GetAnimationlEx();
	bool GetEnableRegisterInputContextBp();
	class UInputComponent* GetInputComponent();
	bool GetIsActive();
	bool GetIsFading();
	bool GetIsFadingIn();
	bool GetIsFadingOut();
	bool GetIsOnTopFromWidgeStack();
	class UUIInputUserWidgetExtension* GetUIInputEx();
	bool HasValidSlateWidget();
	void K2_InitializeInputComponent();
	void MarvelSetAnimationTime(class UWidgetAnimation* InAnimation, float InTime);
	void OnActiveStateChange(bool bInActive);
	void OnReceiveAxisKey(const struct FKey& Key, float AxisValue);
	void OnReceiveEnhancedInputAction(const class UInputAction* Action);
	void OnReceiveEnhancedInputActionWithBoolValue(const class UInputAction* Action, bool bValue);
	void OnReceiveEnhancedInputActionWithFloatValue(const class UInputAction* Action, float fValue);
	void OnReceiveEnhancedInputActionWithTriggerEvent(const class UInputAction* Action, ETriggerEvent InTriggerEvent);
	void OnReceiveEnhancedInputActionWithV2Value(const class UInputAction* Action, const struct FVector2D& v2Value);
	void OnReceiveEnhancedInputActionWithV3Value(const class UInputAction* Action, const struct FVector& v3Value);
	void OnReceiveGlobalInputKey(const struct FKey& Key, const EInputEvent EventType);
	void OnReceiveInputAction(class FName ActionName, const EInputEvent EventType);
	void OnReceiveInputAxis(class FName AxisName, float AxisValue);
	void OnReceiveInputChord(const struct FInputChord& Chord, const EInputEvent EventType);
	void OnReceiveInputKey(const struct FKey& Key, const EInputEvent EventType);
	void QueueSetAnimationTime(class UWidgetAnimation* InAnimation, float InTime);
	void RegisterAxisKey(const struct FKey& Key, bool bConsume);
	void RegisterEnhancedInputAction(const class UInputAction* Action);
	void RegisterEnhancedInputActionWithTriggerEvent(const class UInputAction* Action, ETriggerEvent InTriggerEvent);
	void RegisterEnhancedInputActionWithValue(const class UInputAction* Action);
	void RegisterGlobalInputKey(const struct FKey& Key, const EInputEvent KeyEvent, bool bConsume);
	void RegisterHoldEnhancedInputAction(const class UInputAction* Action);
	void RegisterInputAction(class FName ActionName, const EInputEvent EventType, bool bConsume);
	int32 RegisterInputActionForHandle(class FName ActionName, const EInputEvent EventType, bool bConsume);
	void RegisterInputAxis(const class FName AxisName, bool bConsume);
	void RegisterInputChord(const struct FInputChord& Chord, const EInputEvent KeyEvent, bool bConsume);
	void RegisterInputKey(const struct FKey& Key, const EInputEvent KeyEvent, bool bConsume);
	void RemoveOnTopWidgetStack();
	void RequestRegisterInputContextBp();
	void RequestUnRegisterInputContextBp();
	void SetAnimationToFirstFrame(class UWidgetAnimation* InAnimation);
	void SetAnimationToLastFrame(class UWidgetAnimation* InAnimation);
	void SetContextBPAndPriorityName(class UInputMappingContext* InUIActionMappingContextBP, const class FString& InInputContextPriorityName);
	void SetInputEnable(bool bInEnable);
	void SetIsAutoControlStackWhenVisibleChange(bool bValue);
	bool ShouldEnableInput();
	void StopAllAnimationsAndThenPlay(class UWidgetAnimation* InAnimation, float StartAtTime, int32 NumLoopsToPlay, EUMGSequencePlayMode PlayMode, float PlaybackSpeed, bool bRestoreState);
	void StopAllAnimationsExcept(const TArray<class UWidgetAnimation*>& ExceptAnims);
	void StopAllAnimationsExceptFade();
	void SyncSetAnimationTime(class UWidgetAnimation* InAnimation, float InTime);
	void UnRegisterAxisKey(const struct FKey& Key);
	void UnRegisterEnhancedInputAction(const class UInputAction* Action);
	void UnRegisterGlobalInputKey(const struct FKey& Key, const EInputEvent KeyEvent);
	void UnregisterInputAction(int32 Handle);
	void UnregisterInputActionByActionName(class FName ActionName);
	void UnregisterInputAxis(const class FName AxisName);
	void UnregisterInputChord(const struct FInputChord& Chord, const EInputEvent KeyEvent);
	void UnregisterInputKey(const struct FKey& Key, const EInputEvent KeyEvent);
	void UpdateInputContextBpRegisterState();
	void UpdateInputEnable();

	class UUserWidget* GetParentUserWidget() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSimpleUserWidget">();
	}
	static class UMarvelSimpleUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSimpleUserWidget>();
	}
};

// Class Marvel.MarvelPlayerCameraManager
// 0x0030 (0x30B0 - 0x3080)
class AMarvelPlayerCameraManager final : public APlayerCameraManager
{
public:
	bool                                          bNeedUpdateCamera;                                 // 0x3078(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3079[0x3];                                     // 0x3079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentCamBonus;                                   // 0x307C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HigherScoreBonus;                                  // 0x3080(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentActionBonus;                                // 0x3084(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdjustFOVBasedOnViewportScale;                    // 0x3088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopCameraShakeWhileChangedViewTarget;            // 0x3089(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_308A[0x6];                                     // 0x308A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AMarvelBaseCharacter* Value)> OnViewingCharacterChanged;                         // 0x3090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UMarvelPlayerView*                      PlayerView;                                        // 0x30A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_30A8[0x8];                                     // 0x30A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class AMarvelPlayerCameraManager* GetMarvelPlayerCameraManager(class UObject* WCO, int32 PlayerIndex);

	ESpectationMode GetCurrentSpectationMode();
	class AMarvelBaseCharacter* GetViewingMarvelCharacter();
	void UpdateMarvelPlayerView();
	void UpdateSpectationState();

	class APlayerState* GetViewTargetPlayerState() const;
	bool HasActiveCameraShake() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPlayerCameraManager">();
	}
	static class AMarvelPlayerCameraManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelPlayerCameraManager>();
	}
};

// Class Marvel.MarvelGameplayEffectDamage
// 0x0348 (0x16C8 - 0x1380)
class UMarvelGameplayEffectDamage : public UGameplayEffect
{
public:
	uint8                                         Pad_1380[0x348];                                   // 0x1380(0x0348)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectDamage">();
	}
	static class UMarvelGameplayEffectDamage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectDamage>();
	}
};

// Class Marvel.MarvelGameplayEffectTemplate
// 0x0020 (0x13A0 - 0x1380)
class UMarvelGameplayEffectTemplate : public UGameplayEffect
{
public:
	bool                                          bOwnerDeathAutoRemove;                             // 0x1380(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMulitiToAddition;                                 // 0x1381(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1382[0x1E];                                    // 0x1382(0x001E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectTemplate">();
	}
	static class UMarvelGameplayEffectTemplate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectTemplate>();
	}
};

// Class Marvel.MarvelGameplayEffectSkillEnergyRegen
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectSkillEnergyRegen final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectSkillEnergyRegen">();
	}
	static class UMarvelGameplayEffectSkillEnergyRegen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectSkillEnergyRegen>();
	}
};

// Class Marvel.AbilityActionDisplayOrder
// 0x0000 (0x0038 - 0x0038)
class UAbilityActionDisplayOrder final : public UDataAsset
{
public:
	int32 GetAbilityActionDisplayOrder(EAbilityInputBinds AbilityInputBinds) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityActionDisplayOrder">();
	}
	static class UAbilityActionDisplayOrder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityActionDisplayOrder>();
	}
};

// Class Marvel.MarvelCueNotify_Loop
// 0x0200 (0x0EC8 - 0x0CC8)
class AMarvelCueNotify_Loop : public AMarvelCueNotify_Actor
{
public:
	uint8                                         bIsAttached : 1;                                   // 0x0CC8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_CC9[0x7];                                      // 0x0CC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         StartFX;                                           // 0x0CD0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         EndFX;                                             // 0x0CD8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x0CE0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x0CF8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RelativeScale;                                     // 0x0D10(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachedComponentName;                             // 0x0D28(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0D34(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEndAgentTaskStopAudio : 1;                        // 0x0D40(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D41[0x3];                                      // 0x0D41(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LoopAudioID;                                       // 0x0D44(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartAudioID;                                      // 0x0D48(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndAudioID;                                        // 0x0D4C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            AudioSwitchParams;                                 // 0x0D50(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         ActorDopplerSpeed;                                 // 0x0DA0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bNeedSetTickPrerequisite : 1;                      // 0x0DA4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bNeedChangeReticleStyle;                           // 0x0DA5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DA6[0x2];                                      // 0x0DA6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FReticleStyle                          ReticleStyle;                                      // 0x0DA8(0x00E4)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUpdateStencilWhenActive;                          // 0x0E8C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldActiveStencilModifier;                      // 0x0E8D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSyncPPTransparentFromInstigator;                  // 0x0E8E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8F[0x1];                                      // 0x0E8F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStencilModifier_SyncPPTransparent     StencilModifier_SyncPPTransparent;                 // 0x0E90(0x0010)(BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FDeclarationHolder                     SummonedCueHolder;                                 // 0x0EA0(0x0010)(NativeAccessSpecifierPrivate)
	TDelegate<void(class AActor* InActor)>        SummonedCueDelegate;                               // 0x0EB0(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_EC4[0x4];                                      // 0x0EC4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateReticle();
	void DeactivateReticle();
	void OnActiveAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnActiveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnExecuteAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnExecuteFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnRemoveAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnRemoveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnSummonedViewTargetChange(class AActor* ViewingTarget);
	void SetCueActorHiddenInGame(bool bNewHidden);
	bool ShouldSummonedCueVisible();
	class UFXSystemComponent* SpawnEndFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, class UFXSystemAsset* InFXAsset);
	class UFXSystemComponent* SpawnInstantFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, class UFXSystemAsset* InFXAsset);
	class UFXSystemComponent* SpawnStartFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, class UFXSystemAsset* InFXAsset);
	void StopAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void UpdateIsRender(bool bIsRender);
	void UpdateStencilModifier();
	void UpdateSummonedCueVisibility();
	void WhileActiveAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void WhileActiveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_Loop">();
	}
	static class AMarvelCueNotify_Loop* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_Loop>();
	}
};

// Class Marvel.Cue_Death_HideMesh_Loop
// 0x0118 (0x0FE0 - 0x0EC8)
class ACue_Death_HideMesh_Loop final : public AMarvelCueNotify_Loop
{
public:
	class UFXSystemAsset*                         DissipateFXAsset;                                  // 0x0EC8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachSocket;                                      // 0x0ED0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FXDissipateTime;                                   // 0x0EDC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialDissipateTime;                             // 0x0EE0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDeathDissolveDir_HideMesh                    DissolveDir;                                       // 0x0EE4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE5[0x3];                                      // 0x0EE5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DownRatio;                                         // 0x0EE8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaterialDissipateInitRatio;                        // 0x0EEC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDeathDissolveDir_HideMesh                    FXDissolveDir;                                     // 0x0EF0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EF1[0x3];                                      // 0x0EF1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FXDownRatio;                                       // 0x0EF4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenDebugDraw;                                    // 0x0EF8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAnimPause;                                  // 0x0EF9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDissipate;                                  // 0x0EFA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EFB[0x5];                                      // 0x0EFB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         ExplodeFXAsset;                                    // 0x0F00(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BaseRadius;                                        // 0x0F08(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ScaleParamName;                                    // 0x0F0C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DissipatingAudio;                                  // 0x0F18(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1C[0x4];                                      // 0x0F1C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemComponent*                     DissipateFXComp;                                   // 0x0F20(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACharacter*                             OwnerCharacter;                                    // 0x0F28(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelBaseAbilitySystemComponent*      OwningABS;                                         // 0x0F30(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelCharacterChildActor*             ChildActor;                                        // 0x0F38(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         OwningMeshComp;                                    // 0x0F40(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F48[0x8];                                      // 0x0F48(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMeshComponent*>                 DissipatingComponents;                             // 0x0F50(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class USceneComponent*>                AttachedComponentsAfterDeath;                      // 0x0F60(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_F70[0x70];                                     // 0x0F70(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnChildAttachedToTargetMesh(class USceneComponent* SourceComponent, class USceneComponent* ChildComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Death_HideMesh_Loop">();
	}
	static class ACue_Death_HideMesh_Loop* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Death_HideMesh_Loop>();
	}
};

// Class Marvel.MarvelCueNotify_TraceActor
// 0x0038 (0x0D00 - 0x0CC8)
class AMarvelCueNotify_TraceActor : public AMarvelCueNotify_Actor
{
public:
	class UNiagaraComponent*                      NS_Loop;                                           // 0x0CC8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         StartFX;                                           // 0x0CD0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         ConfirmFX;                                         // 0x0CD8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         CancelFX;                                          // 0x0CE0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPointSelectAudioConfig                StartAudioConfig;                                  // 0x0CE8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FPointSelectAudioConfig                LoopAudioConfig;                                   // 0x0CF0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         ConfirmAudioID;                                    // 0x0CF8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CancelAudioID;                                     // 0x0CFC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnActiveAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnActiveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnRemoveAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnRemoveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnWhileActiveAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void PlayAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, const struct FPointSelectAudioConfig& AudioConfig);
	void StopAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, const struct FPointSelectAudioConfig& AudioConfig);
	void WhileActiveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_TraceActor">();
	}
	static class AMarvelCueNotify_TraceActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_TraceActor>();
	}
};

// Class Marvel.AbilityActorPoolController
// 0x0000 (0x0030 - 0x0030)
class IAbilityActorPoolController final : public IInterface
{
public:
	bool IsCacheReusing();
	bool IsInCache();
	bool IsSpawnNewActor();
	void K2_DirectEnd();
	void Log_CachePool(const class FString& LogTitle, bool IsVlog);

	bool IsServerCacheUseing() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityActorPoolController">();
	}
	static class IAbilityActorPoolController* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAbilityActorPoolController>();
	}
};

// Class Marvel.AbilityBlendSubAnimInstance
// 0x0170 (0x05A0 - 0x0430)
class UAbilityBlendSubAnimInstance final : public UAnimInstance
{
public:
	float                                         LayeredBlendAlphaInterpSpeed;                      // 0x0428(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_42C[0x4];                                      // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               AbilityMeshSpaceRotationOffset;                    // 0x0430(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bUseExternLayerCondition;                          // 0x0448(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EExternMontageBlendMode                       ExternMontageBlendMode;                            // 0x0449(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_44A[0x2];                                      // 0x044A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ExternRotationBlendBoneName;                       // 0x044C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultAbilityBlendTime;                           // 0x0458(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DirectionBase;                                     // 0x045C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedBase;                                         // 0x0460(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MontageBlendAlpha;                                 // 0x0464(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLayeredBoneBlendExternalSetting       PelvisBlendSetting;                                // 0x0468(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, EditConst, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsAdditiveMT;                                     // 0x0478(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsMeshSpaceAdditiveMT;                            // 0x0479(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasActiveAbility;                                 // 0x047A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EAbilityBlendType                             AbilityBlendType;                                  // 0x047B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AbilityBlendTime_HalfBlendToFullBody;              // 0x047C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AbilityBlendTime_FullBodyToHalfBlend;              // 0x0480(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Spine_BlendAlpha;                                  // 0x0484(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Spine_BlendAlpha_1;                                // 0x0488(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Spine_BlendAlpha_2;                                // 0x048C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Clavicle_R_BlendAlpha;                             // 0x0490(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Clavicle_L_BlendAlpha;                             // 0x0494(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSpineMeshSpaceRotationBlend;                      // 0x0498(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSpineMeshSpaceRotationBlend_1;                    // 0x0499(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bClavicleMeshSpaceRotationBlend_L;                 // 0x049A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bClavicleMeshSpaceRotationBlend_R;                 // 0x049B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bForceUpdateSourcePose;                            // 0x049C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_49D[0x3];                                      // 0x049D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MontageWeight;                                     // 0x04A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MeleeTwistWhenLandingOrIdling;                     // 0x04A4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bNeedMeleeTwist;                                   // 0x04A8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseLean;                                          // 0x04A9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4AA[0x2];                                      // 0x04AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LeanX;                                             // 0x04AC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LeanY;                                             // 0x04B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4B4[0x4];                                      // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            CurrentLean_2D;                                    // 0x04B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LayerIndex;                                        // 0x04C0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C4[0x4];                                      // 0x04C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CurrentMT;                                         // 0x04C8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimMontage*                           CurrentMT_UnSafe;                                  // 0x04D0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarvelAnimInstance*                    MainAnimInstance;                                  // 0x04D8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UGroundMotionSubAnimInstance*           GroundAnimInstance;                                // 0x04E0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4E8[0x78];                                     // 0x04E8(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            MontageLean_2D;                                    // 0x0560(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_568[0x8];                                      // 0x0568(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelMontageData*                     CurrentMTData;                                     // 0x0570(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelMontageData*                     CurrentMTData_UnSafe;                              // 0x0578(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PreparedTurninPlaceAnimL90;                        // 0x0580(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           PreparedTurninPlaceAnimR90;                        // 0x0588(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceUseUpperBlend;                               // 0x0590(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_591[0xF];                                      // 0x0591(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EvaluateLayerBasePose(const struct FAnimPoseContext& PoseContext);
	void EvaluateLayerBodyPose(const struct FAnimPoseContext& PoseContext);
	void OnMontageStart(class UAnimMontage* AnimMontage);
	void RelevantLayerBlendNode(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void UpdateAbilitySlotNode(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);

	EAbilityBlendType GetCurrentAbilityBlendType() const;
	class UBlendSpace* GetCurrentLean() const;
	struct FUpperBodyBlendSwitch GetCurrentUpperBodyBlendSwitch() const;
	float GetLeanX() const;
	float GetLeanY() const;
	class UMarvelMontageData* GetSectionMetaDataWithAO() const;
	bool IsUsingLean() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityBlendSubAnimInstance">();
	}
	static class UAbilityBlendSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityBlendSubAnimInstance>();
	}
};

// Class Marvel.HealthLinkTargetManager
// 0x0848 (0x0878 - 0x0030)
class UHealthLinkTargetManager final : public UObject
{
public:
	uint8                                         Pad_30[0x820];                                     // 0x0030(0x0820)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* Instigator, float Value, int32 BuffID)> HealthLinkDelegate;                                // 0x0850(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Instigator)> OnOriginLinkGroupEnd;                              // 0x0860(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_870[0x8];                                      // 0x0870(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UHealthLinkTargetManager* Get(class UObject* WCO);

	float GetHealthLinkRemainingTime(int32 BuffID, class AActor* InTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HealthLinkTargetManager">();
	}
	static class UHealthLinkTargetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHealthLinkTargetManager>();
	}
};

// Class Marvel.MarvelDebugProfilePanel
// 0x0038 (0x03F0 - 0x03B8)
class UMarvelDebugProfilePanel final : public UUserWidget
{
public:
	class FString                                 TargetPath;                                        // 0x03B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecursive;                                        // 0x03C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C9[0x7];                                      // 0x03C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarvelDebugProfileWidget>  ProfileWidgetClass;                                // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWrapBox*                               WrapBox;                                           // 0x03D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E0[0x10];                                     // 0x03E0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CreateProfileWidgets();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelDebugProfilePanel">();
	}
	static class UMarvelDebugProfilePanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelDebugProfilePanel>();
	}
};

// Class Marvel.Cue_Buff_1220
// 0x00B0 (0x10E8 - 0x1038)
class ACue_Buff_1220 final : public AMarvelCueNotify_Buff
{
public:
	class UNiagaraComponent*                      NSCover;                                           // 0x1038(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRenderCustemDepthPass;                            // 0x1040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1041[0x3];                                     // 0x1041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CustomDepthStencilValue;                           // 0x1044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FOutlineConfig                         FXOutlineConfig;                                   // 0x1048(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         VisibleRadius;                                     // 0x1068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlindFXRadius;                                     // 0x106C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VisibleRadiusModification;                         // 0x1070(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   IsInsideParamName;                                 // 0x1074(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CharacterLoctionParamName;                         // 0x1080(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108C[0x4];                                     // 0x108C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     BlindRingCameraMaterial;                           // 0x1090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldFXBeActive;                                 // 0x1098(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1099[0x7];                                     // 0x1099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               BlindRingCameraMaterialInstance;                   // 0x10A0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDeclarationHolder                     PlayerViewSideHolder;                              // 0x10A8(0x0010)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_10B8[0x30];                                    // 0x10B8(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPlayerViewSideChanged(EClientPlayerViewSide InViewSide);
	void SetShouldFXBeActive(bool bInShouldFXBeActive);
	void UpdateFXCoverage();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Buff_1220">();
	}
	static class ACue_Buff_1220* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Buff_1220>();
	}
};

// Class Marvel.AbilityExtraStatistics
// 0x0040 (0x0070 - 0x0030)
class UAbilityExtraStatistics : public UObject
{
public:
	class UAbilityStatisticsController*           OwnerStatisticsController;                         // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelGameplayAbility*                 SourceGameplayAbility;                             // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerUID;                                         // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroUID;                                           // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectHeroID;                                      // 0x0050(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   FinalCharacter;                                    // 0x0058(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SourceInstigator;                                  // 0x0060(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ActorType;                                         // 0x0068(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void AbilityRecordAbilityExtraHitRate(const class UMarvelGameplayAbility* Ability, const class FString& ExtraKey, float LaunchCnt, float HitCnt, float CritCnt);
	static void AbilityRecordAbilityExtraNormal(const class UMarvelGameplayAbility* Ability, const class FString& ExtraKey, const float Value);

	void Initialize(class UAbilityStatisticsController* InController, const struct FActionLogAbilityContext& AbilityInfoContext, class UMarvelGameplayAbility* InGameAbility);
	void K2_OnInitialize();
	void K2_OnShutdown();
	void OnAbilityDestroy(class UGameplayAbility* InGameplayAbility);
	void OnAbilityEndAgentTask(class AActor* Instigator, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, const struct FEndAgentTaskInfo& EndAgentTaskInfo);
	void OnAbilityHit(const struct FActionLogBattleContext& BattleContext, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnAbilityProjectileBegin(class AActor* Instigator, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnAbilityRecycleAgentTask(class AActor* Instigator, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, const struct FEndAgentTaskInfo& EndAgentTaskInfo);
	void OnAbilityScopeBegin(class AActor* Instigator, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnAbilitySummonedBegin(class AActor* Instigator, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void RecordAbilityExtraHitRate(const class FString& ExtraKey, float LaunchCnt, float HitCnt, float CritCnt);
	void RecordAbilityExtraNormal(const class FString& ExtraKey, float Value);
	void Shutdown();

	int32 GetCurrentHeroID() const;
	int32 GetCurrentSculptID() const;
	void OnRecordAbilityExtraHitRate(const struct FAbilityExtraBaseInfo& BaseInfo, const class FString& ExtraKey, const struct FAbilityExtraHitRate& ExtraHitRate) const;
	void OnRecordAbilityExtraNormal(const struct FAbilityExtraBaseInfo& BaseInfo, const class FString& ExtraKey, float ExtraValue) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityExtraStatistics">();
	}
	static class UAbilityExtraStatistics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityExtraStatistics>();
	}
};

// Class Marvel.OutSpecialValueType
// 0x0000 (0x0030 - 0x0030)
class UOutSpecialValueType : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OutSpecialValueType">();
	}
	static class UOutSpecialValueType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOutSpecialValueType>();
	}
};

// Class Marvel.MarvelUserWidget
// 0x0140 (0x05A8 - 0x0468)
class UMarvelUserWidget : public UMarvelSimpleUserWidget
{
public:
	uint8                                         Pad_468[0x8];                                      // 0x0468(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ESlateVisibility                              SlateVisibilityWhenVisible;                        // 0x0470(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESlateVisibility                              SlateVisibilityWhenInvisible;                      // 0x0471(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUpdateInitialVisibilityImmediately;               // 0x0472(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_473[0x1];                                      // 0x0473(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bExternalControlledVisible;                        // 0x0474(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCacheShouldBeVisible;                             // 0x0475(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarvelWidgetVisibility                       MarvelVisibility;                                  // 0x0476(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bVisible;                                          // 0x0477(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelUITextConfig*                    UITextConfig;                                      // 0x0478(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_480[0x40];                                     // 0x0480(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StringTable;                                       // 0x04C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSingletonWidget;                                // 0x04CC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNewModeVisibility;                                // 0x04CD(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4CE[0x1A];                                     // 0x04CE(0x001A)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TypeTags;                                          // 0x04E8(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMarvelWidgetTag                       WidgetTag;                                         // 0x0550(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsVisible)> OnVisibleChanged;                                  // 0x0568(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsTop)>    OnTopChanged;                                      // 0x0578(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_588[0x20];                                     // 0x0588(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool IsMoviePipelineRenderMode();

	void CacheWidget();
	void ForceUpdateStyle();
	EMarvelWidgetVisibility GetMarvelVisibility();
	void MarkGPM();
	bool MarvelIsInvisible();
	bool MarvelIsVisible();
	void MarvelOnFocusChanging();
	void MarvelRemoveFromParent();
	void MarvelSetVisible(bool bTmpVisible);
	void MarvelSetVisibleImmediately(bool bTmpVisible);
	void MarvelVisibilityChanged();
	class FText NativeGetSliderText();
	void ReceiveIsOpenUpdateDefaultFocusChange(bool bOpen);
	void ReceiveSetDefaultFocusWidget(class UWidget* InWidget);
	void ReceiveSetFocusingWidget(class UWidget* InWidget);
	void RequiresImageLazyBrushResourceLoad(TDelegate<void()> Callback);
	bool SetDesiredFocusWidget(class UWidget* InWidget);
	bool ShouldBeVisible();
	void UncacheWidget();
	void UpdateVisibility(bool bImmediately);

	class FName GetDesiredFocusWidgetName() const;
	class FText GetUIText(class FName TextKey) const;
	bool IsConstructed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelUserWidget">();
	}
	static class UMarvelUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelUserWidget>();
	}
};

// Class Marvel.MarvelCueNotify_ScreenFX
// 0x0110 (0x06F0 - 0x05E0)
class AMarvelCueNotify_ScreenFX final : public AGameplayCueNotify_Actor
{
public:
	TSubclassOf<class UUserWidget>                UIDisplay;                                         // 0x05E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         CameraParticlesOptions;                            // 0x05E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E9[0x7];                                      // 0x05E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UParticleSystem*                        CameraParticleResource;                            // 0x05F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraParticleForward;                             // 0x05F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5FC[0x4];                                      // 0x05FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CameraParticleScale;                               // 0x0600(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bListenAttributeChange;                            // 0x0618(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_619[0x7];                                      // 0x0619(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     ListenAttribute;                                   // 0x0620(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     ListenAttributeMax;                                // 0x0660(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomLifeTime;                                    // 0x06A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A4[0x34];                                     // 0x06A4(0x0034)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            UIDisplayWidget;                                   // 0x06D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UParticleSystemComponent*               CameraParticleInstance;                            // 0x06E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_6E8[0x8];                                      // 0x06E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTargetCharacterEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
	void OnViewingCharacterChange(class AMarvelBaseCharacter* TargetCharacter);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_ScreenFX">();
	}
	static class AMarvelCueNotify_ScreenFX* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_ScreenFX>();
	}
};

// Class Marvel.AbilityInfoPanel_CueTag
// 0x0030 (0x05D8 - 0x05A8)
class UAbilityInfoPanel_CueTag final : public UMarvelUserWidget
{
public:
	class AActor*                                 TargetActor;                                       // 0x05A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   RegisterCueTags;                                   // 0x05B0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C0[0x18];                                     // 0x05C0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTagUpdated(const struct FGameplayTag& Tag, bool bInExist);
	void SetTargetActor(class AActor* InActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityInfoPanel_CueTag">();
	}
	static class UAbilityInfoPanel_CueTag* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityInfoPanel_CueTag>();
	}
};

// Class Marvel.MarvelGameplayEffectSkillEnergy2Regen
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectSkillEnergy2Regen final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectSkillEnergy2Regen">();
	}
	static class UMarvelGameplayEffectSkillEnergy2Regen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectSkillEnergy2Regen>();
	}
};

// Class Marvel.AbilityStatisticsController
// 0x0100 (0x0130 - 0x0030)
class UAbilityStatisticsController final : public UObject
{
public:
	class UActionLogController*                   LogController;                                     // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayEventManager*            GlobalEventManager;                                // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<uint32, class UTagAbilityStatistics*>    AllAbilityStatistics;                              // 0x0040(0x0050)(NativeAccessSpecifierPublic)
	TMap<uint32, class UAbilityExtraStatistics*>  AllAbilityExtraStatistics;                         // 0x0090(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FString, struct FDataBaseHitInfo>  AbilityHitInfo;                                    // 0x00E0(0x0050)(NativeAccessSpecifierPublic)

public:
	void AddAbilityExtraStatistics(class UMarvelGameplayAbility* SourceAbility);
	void AddAbilityStatistics(class UMarvelGameplayAbility* SourceAbility);
	void BindEvents();
	TSubclassOf<class UAbilityExtraStatistics> GetAbilityExtraStatisticsClass(int32 AbilityID);
	class UAbilityExtraStatistics* GetAbilityExtraStatisticsObj(const class UMarvelGameplayAbility* SourceAbility);
	TSubclassOf<class UAbilityStatistics> GetAbilityStatisticsClass(int32 AbilityID);
	class UTagAbilityStatistics* GetAbilityStatisticsObj(const class UMarvelGameplayAbility* SourceAbility);
	TSubclassOf<class UTagAbilityStatisticsImpl> GetTagAbilityStatisticsImplClass(int32 AbilityID);
	TSubclassOf<class UTagAbilityStatisticsImpl> GetUnitStatisticsImplClass(struct FMarvelToRecordEffectIDs* RecordEffectIDs);
	void Initialize(class UActionLogController* InLogController);
	void OnActorAbilityActivate(class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility);
	void OnActorAbilityBreak(class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility);
	void OnActorAbilityEnd(class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility);
	void OnActorAbilityMissile(class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility);
	void OnActorBuffApplied(class AActor* InInstigator, class AActor* InCauser, class AActor* InTarget, const struct FGameplayEffectSpecStackHandle& InEffectSpecHandle, const struct FActiveGameplayEffectHandle& EffectHandle);
	void OnActorDestroyAbility(class UMarvelGameplayAbility* SourceAbility);
	void OnActorEndAgentTask(class AActor* SourceActor, class UMarvelGameplayAbility* SourceAbility, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, const struct FEndAgentTaskInfo& EndAgentTaskInfo);
	void OnActorGiveAbility(class UMarvelGameplayAbility* SourceAbility);
	void OnActorPostForceChanged(class AActor* SourceActor, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, ETargetActorType TargetActorType, int32 AbilityID);
	void OnActorPostTakeDamage(class AActor* InInstigator, class AActor* InTarget, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnActorPostTakeDamageOnChaos(class AActor* InInstigator, class AActor* InTarget, class UGameplayAbility* SourceAbility, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnActorPostTraceSpec(class AActor* Source, class UMarvelGameplayAbility* SourceAbility, const class FString& TraceUniqueID, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnActorPreForceChanged(class AActor* SourceActor, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, ETargetActorType TargetActorType, int32 AbilityID);
	void OnActorProjectileBegin(class AActor* SourceActor, class UMarvelGameplayAbility* SourceAbility, class AActor* Projectile, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnActorRecycleAgentTask(class AActor* SourceActor, class UMarvelGameplayAbility* SourceAbility, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, const struct FEndAgentTaskInfo& EndAgentTaskInfo);
	void OnActorScopeBegin(class AActor* SourceActor, class UMarvelGameplayAbility* SourceAbility, class AActor* Scope, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnActorSummonedBegin(class AActor* SourceActor, class UMarvelGameplayAbility* SourceAbility, class AActor* Summoned, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnActorTakeHealth(class AActor* InInstigator, class AActor* InTarget, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void OnActorWeaponAmmoEnd(class AActor* SourceActor, class AActor* TargetActor, class UGameplayAbility* SourceAbility, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, int32 Count);
	void RemoveAbilityExtraStatistics(class UMarvelGameplayAbility* SourceAbility);
	void RemoveAbilityStatistics(class UMarvelGameplayAbility* SourceAbility);
	void Shutdown();
	void UnbindEvents();

	void OnRecordAbilityExtraHitRate(const struct FAbilityExtraBaseInfo& BaseInfo, const class FString& ExtraKey, const struct FAbilityExtraHitRate& ExtraHitRate) const;
	void OnRecordAbilityExtraNormal(const struct FAbilityExtraBaseInfo& BaseInfo, const class FString& ExtraKey, const float ExtraValue) const;
	void OnRecordAbilityUseInfo(struct FActionLogAbilityRecord* AbilityRecord) const;
	void OnRecordUnitUseInfo(struct FActionLogAbilityRecord* AbilityRecord) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityStatisticsController">();
	}
	static class UAbilityStatisticsController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityStatisticsController>();
	}
};

// Class Marvel.MarvelCueNotify_Static
// 0x0238 (0x0288 - 0x0050)
class UMarvelCueNotify_Static : public UGameplayCueNotify_Static
{
public:
	float                                         FXRecycleTime;                                     // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x234];                                     // 0x0054(0x0234)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UNiagaraComponent* PlayStaticCue_NiagaraInfo(const struct FStaticCue_NiagaraInfo_Instant& NiagaraInfo);
	class UNiagaraComponent* SpawnNiagaraWithCustomNiagaraInfo(const struct FCueNiagaraInfo_Custom& InNiagaraInfo);

	void SetFXParameter(class UNiagaraComponent* InNSComponent, const class AActor* MyTarget, const struct FGameplayCueParameters& Parameters) const;
	class UNiagaraComponent* SpawnFXSystemAtLocation(class UFXSystemAsset* Template, const struct FGameplayCueParameters& Parameters, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivate) const;
	class UNiagaraComponent* SpawnFXSystemAttached(class UFXSystemAsset* Template, const struct FGameplayCueParameters& Parameters, class USceneComponent* AttachToComponent, class FName SocketName, const struct FVector& Location, const struct FRotator& Rotation, EAttachLocation LocationType, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivate) const;
	TArray<class UNiagaraComponent*> SpawnFXSystemsAtLocation(class UFXSystemAsset* Template, const struct FGameplayCueParameters& Parameters, const struct FVector& Location, const struct FRotator& Rotation, const struct FPortalSegments& PortalSegments, const struct FVector& Scale, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivate) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_Static">();
	}
	static class UMarvelCueNotify_Static* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCueNotify_Static>();
	}
};

// Class Marvel.MarvelCueNotify_Base
// 0x00E0 (0x0368 - 0x0288)
class UMarvelCueNotify_Base : public UMarvelCueNotify_Static
{
public:
	uint8                                         bIsAttached : 1;                                   // 0x0288(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_289[0x3];                                      // 0x0289(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x028C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AttachedComponentName;                             // 0x0298(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetPosParamName;                                // 0x02A4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x02B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RelativeRotation;                                  // 0x02C8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                RelativeScale;                                     // 0x02E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         FXAsset;                                           // 0x02F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FInstantFXAttachParameter>      FXAttachParameters;                                // 0x0300(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         AudioID;                                           // 0x0310(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OnRemoveAudioID;                                   // 0x0314(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCameraShake : 1;                                  // 0x0318(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULegacyCameraShake>         ActiveCameraShake;                                 // 0x0320(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStaticCue_NiagaraInfo_Instant         NiagaraInfo;                                       // 0x0328(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	void OnExecuteAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters) const;
	void OnExecuteCamera(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters) const;
	void OnExecuteFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters) const;
	void OnFinishSpawnInstantFX(class AActor* MyTarget, class UNiagaraComponent* NiagaraComponent) const;
	void OnRemoveAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters) const;
	void SpawnInstantFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, const struct FInstantFXAttachParameter& FxParameter) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_Base">();
	}
	static class UMarvelCueNotify_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCueNotify_Base>();
	}
};

// Class Marvel.AbilityStatisticsUnit
// 0x0620 (0x0650 - 0x0030)
class UAbilityStatisticsUnit : public UObject
{
public:
	class UBattleStatisticsManager*               BattleStatisticsManager;                           // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHeroStatisticsUnit*                    OwnerHeroStatistics;                               // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AbilityName;                                       // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityType;                                       // 0x0058(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTable                    AbilityTable;                                      // 0x0060(0x0338)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         UseCnt;                                            // 0x0398(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroHitCnt;                                        // 0x039C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroCritCnt;                                       // 0x03A0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NormalSummonedHitCnt;                              // 0x03A4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShieldSummonedHitCnt;                              // 0x03A8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToHeroDamage;                                      // 0x03AC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToNormalSummonedDamage;                            // 0x03B0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToShieldSummonedDamage;                            // 0x03B4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToSelfHeal;                                        // 0x03B8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToHeroHeal;                                        // 0x03BC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToNormalSummonerHeal;                              // 0x03C0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToShieldSummonerHeal;                              // 0x03C4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TheLastBlowHero;                                   // 0x03C8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SummonerTakeDamageValue;                           // 0x03CC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalEnergy;                                       // 0x03D0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnergyTemp;                                        // 0x03D4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RealHitHeroCnt;                                    // 0x03D8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalHeal;                                         // 0x03DC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDamage;                                       // 0x03E0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         InstigateArmorValue;                               // 0x03E4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FExtraHitRateInfo> ExtraHitRateInfo;                                  // 0x03E8(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, struct FExtraNormalInfo>  ExtraNormalInfo;                                   // 0x0438(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         TotalTerrainKill;                                  // 0x0488(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTerrainKillDamage;                            // 0x048C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_490[0x50];                                     // 0x0490(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeroHitDistance;                                   // 0x04E0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E4[0x4];                                      // 0x04E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FScopeHitHeroInfo> ScopeTraceHitHeroInfos;                            // 0x04E8(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, struct FStatisticsHitInfo> HitInfos;                                          // 0x0538(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_588[0xC8];                                     // 0x0588(0x00C8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AbilityHitHero(int32 Count, bool bIsCrit);
	void AbilityHitNormalSummoned(int32 Count);
	void AbilityHitShieldSummoned(int32 Count);
	void AbilityUse(int32 Count);
	void Active(const struct FBattleInfoContext& BattleInfoContext);
	bool ActiveAddUseCnt();
	void AddSessionHitInfo(const struct FBattleInfoContext& BattleInfoContext);
	void ExtraHitRateLog(const class FString& Key, float LaunchCnt, float HitCnt, float CritCnt);
	void ExtraNormalLog(const TMap<class FString, float>& KeyValue);
	TArray<float> GetExtraNormalLog(const class FString& Key);
	void InitAbilitySpecialLog();
	void Initialize(class UBattleStatisticsManager* InBattleStatisticsManager, class UHeroStatisticsUnit* InHeroStatistics, int32 InAbilityId);
	void InstigateBuff(const struct FBuffInfoContext& BuffInfoContext);
	void InstigateDamage(const struct FBattleInfoContext& BattleInfoContext);
	void InstigateEnergy(const struct FBattleInfoContext& BattleInfoContext);
	void InstigateHeal(const struct FBattleInfoContext& BattleInfoContext);
	bool IsHitRateType(const class FString& Key);
	void OnAbilityKill(const struct FKillInfoContext& KillInfoContext);
	void OnAbilityMissile(const struct FBattleInfoContext& BattleInfoContext);
	void OnAbilityProjectileBegin(const struct FMarvelTargetActorGenerateInfo& GenerateInfo, class AActor* Instigator);
	void OnAbilityProjectileEnd(const struct FBattleInfoContext& BattleInfoContext, const struct FEndAgentTaskInfo& EndAgentTaskInfo);
	void OnAbilityScopeBegin(const struct FMarvelTargetActorGenerateInfo& GenerateInfo, class AActor* Instigator);
	void OnAbilityScopeEnd(const struct FBattleInfoContext& BattleInfoContext, const struct FEndAgentTaskInfo& EndAgentTaskInfo);
	void OnEnergyFull();
	void OnInstigateArmor(float Value);
	void OnSummonerTakeDamage(float Value);
	void OnSwitchOut();
	void PyInitialize();
	void Reset();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityStatisticsUnit">();
	}
	static class UAbilityStatisticsUnit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityStatisticsUnit>();
	}
};

// Class Marvel.Cue_Death_HideMesh
// 0x00A8 (0x0D70 - 0x0CC8)
class ACue_Death_HideMesh final : public AMarvelCueNotify_Actor
{
public:
	bool                                          bNeedHideMesh;                                     // 0x0CC8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CC9[0x7];                                      // 0x0CC9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         DeathFx;                                           // 0x0CD0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   DeathFxSocket;                                     // 0x0CD8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CE4[0x4];                                      // 0x0CE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstance*                      DeathMaterial;                                     // 0x0CE8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UCurveBase*>          MaterialCurves;                                    // 0x0CF0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bTargetIsSummoner;                                 // 0x0D40(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D41[0x7];                                      // 0x0D41(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0D48(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 TargetCharMesh;                                    // 0x0D50(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class USceneComponent*>                ProcessingComps;                                   // 0x0D58(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class AMarvelCharacterChildActor*             ChildActor;                                        // 0x0D68(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void HandleDefaultBehavior(bool bIsActive);
	void HandleExtraBehavior(bool bIsActive);
	void OnChildAttachedToTargetMesh(class USceneComponent* SourceComponent, class USceneComponent* ChildComponent);
	void SetOwnerActorHideInGame(class AActor* OwnerActor, bool bNeedHidden);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Death_HideMesh">();
	}
	static class ACue_Death_HideMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Death_HideMesh>();
	}
};

// Class Marvel.AbilityTargetDataBlueprintLibrary
// 0x0000 (0x0030 - 0x0030)
class UAbilityTargetDataBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromPlacementInfo(const struct FGameplayAbilityTargetData_PlacementInfo& PlacementInfo);
	static struct FGameplayAbilityTargetDataHandle AppendTargetDataHandleFromPlacementInfo(const struct FGameplayAbilityTargetDataHandle& TargetHandle, const struct FGameplayAbilityTargetData_PlacementInfo& PlacementInfo);
	static struct FGameplayAbilityTargetData_PlacementInfo GetPlacementInfoFromTargetData(const struct FGameplayAbilityTargetDataHandle& TargetHandle, int32 Index_0);
	static bool TargetDataHasPlacementInfo(const struct FGameplayAbilityTargetDataHandle& TargetHandle, int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTargetDataBlueprintLibrary">();
	}
	static class UAbilityTargetDataBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTargetDataBlueprintLibrary>();
	}
};

// Class Marvel.AbilityTargetMgmtSys
// 0x04A0 (0x04D8 - 0x0038)
class UAbilityTargetMgmtSys final : public UWorldSubsystem
{
public:
	uint8                                         Pad_38[0x328];                                     // 0x0038(0x0328)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UMarvelSummonedComponent* LevelSummoner)> OnLevelSummonedUnregister;                         // 0x0360(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_370[0x168];                                    // 0x0370(0x0168)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTargetMgmtSys* GetAbilityTargetMgmtSubsystem(const class UObject* WorldContextObject);

	void GetOwnedActorArray(EQuantityStatsStrategy InStatsStrategy, class UObject* QuantityOwner, int32 QuantityGroupID, TArray<TWeakObjectPtr<class AActor>>* OutArray);
	TArray<class AMarvelAbilityTargetActor_Projectile*> GetProjectileByCharacter(class AMarvelBaseCharacter* InCharacter);
	void OnSwitchBattleSide();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTargetMgmtSys">();
	}
	static class UAbilityTargetMgmtSys* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTargetMgmtSys>();
	}
};

// Class Marvel.MarvelInputFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UMarvelInputFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool ChangeInputKey(const class UObject* WCO, const struct FKey& NewKey, class FName MappingName, int32 Slot);
	static struct FKey GetDefaultMappingKey(const class UObject* WCO, class FName MappingName, int32 Slot);
	static bool GetEnableMouseSmoothing(class UObject* WCO);
	static class UInputAction* GetInputActionByInputBinds(EAbilityInputBinds InputBinds);
	static EAbilityInputBinds GetInputBindsByInputAction(class UInputAction* InputAction);
	static TArray<struct FKey> GetKeysMappedToAction(const class UObject* WCO, class UInputAction* Action);
	static class FName GetMarvelInputMappingName(const class FName InputMappingName, const EInputChordSlot InputChordSlot, const int32 SculptID, float AxisScale);
	static void GetMarvelPlayerMappableKeySettingsBySculptID(const class UObject* WCO, TArray<struct FEnhancedInputSettingMapping>* OutPlayerMappableKeySettings, int32 HeroSculptID);
	static float GetMouseAcceleration(class UObject* WCO);
	static float GetMouseAccelerationThreshold(class UObject* WCO);
	static class UInputMappingContext* GetSculptInputMappingContext(int32 HeroID, int32 SculptID);
	static bool IsEnhancedInputMode();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelInputFunctionLibrary">();
	}
	static class UMarvelInputFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelInputFunctionLibrary>();
	}
};

// Class Marvel.PlayerSurvivalData
// 0x0030 (0x0060 - 0x0030)
class UPlayerSurvivalData final : public UObject
{
public:
	float                                         SingleSurvivalTotalHeal;                           // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSingleSurvivalDamageInfo>      SingleSurvivalInstigateDamage;                     // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSingleSurvivalDamageInfo>      SingleSurvivalTakeDamage;                          // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         PlayerUID;                                         // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Initialize(int32 InPlayerUID);
	void OnActorInstigateHealForKillcam(float HealValue);
	void OnInstigateHeal(class AActor* InInstigator, class AActor* InTarget, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnPostInstigateDamage(class AActor* InInstigator, class AActor* InTarget, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnPostTakeDamage(class AActor* InInstigator, class AActor* InTarget, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnPreDeathClearDataForKillcam();
	void OnPreDeathGetDataForKillcam(TArray<struct FSingleSurvivalDamageInfo>* InSingleSurvivalTakeDamage, TArray<struct FSingleSurvivalDamageInfo>* InSingleSurvivalInstigateDamage, int32* InSingleSurvivalTotalHeal);
	void OnSingleSurvivalInstigateDamage(int32 TargetUID, float DamageValue);
	void OnSingleSurvivalTakeDamage(int32 TargetUID, float DamageValue);
	void Shutdown();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerSurvivalData">();
	}
	static class UPlayerSurvivalData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerSurvivalData>();
	}
};

// Class Marvel.MarvelMultiAssetsAnimInstanceBase
// 0x00D0 (0x0500 - 0x0430)
class UMarvelMultiAssetsAnimInstanceBase : public UAnimInstance
{
public:
	int32                                         AnimIndex;                                         // 0x0428(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsingOther;                                     // 0x042C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_42D[0x3];                                      // 0x042D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NextBlendTime;                                     // 0x0430(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_434[0x14];                                     // 0x0434(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   MarvelCharacterRelated;                            // 0x0448(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ACharacter*                             OwnerChar;                                         // 0x0450(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAnimInstance*                    MainAnimInstance;                                  // 0x0458(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_460[0xA0];                                     // 0x0460(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTagUpdated(const struct FGameplayTag& InTag, bool bInExists);
	bool SwitchAnimAssets(const int32 InNewIndex, const float InBlendTimeOverride);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelMultiAssetsAnimInstanceBase">();
	}
	static class UMarvelMultiAssetsAnimInstanceBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelMultiAssetsAnimInstanceBase>();
	}
};

// Class Marvel.HeroStateSubAnimInstance
// 0x0160 (0x0660 - 0x0500)
class UHeroStateSubAnimInstance final : public UMarvelMultiAssetsAnimInstanceBase
{
public:
	struct FGameplayTagContainer                  RefreshBindPoseOnDeathGameplayTags;                // 0x0500(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bUseEnhancedHeadShot;                              // 0x0568(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bResetHeadShotAnimPlayTime;                        // 0x0569(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_56A[0x2];                                      // 0x056A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BeHitDirection;                                    // 0x056C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarvelHeroStateTransitionFlag         TransitionFlag;                                    // 0x0570(0x0007)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	EHeroAnimState                                CurrentState;                                      // 0x0577(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHeroStateAnimContainer                HeroStateAnims;                                    // 0x0578(0x00C0)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	class UAnimSequence*                          CobwebBinding_SeqNew;                              // 0x0638(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_640[0x20];                                     // 0x0640(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetCobwebBinding_SeqIndex(const int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroStateSubAnimInstance">();
	}
	static class UHeroStateSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeroStateSubAnimInstance>();
	}
};

// Class Marvel.AbilityUIUtils
// 0x0000 (0x0030 - 0x0030)
class UAbilityUIUtils final : public UObject
{
public:
	static bool UsingBattlePanelV7();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityUIUtils">();
	}
	static class UAbilityUIUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityUIUtils>();
	}
};

// Class Marvel.MarvelFZBEventManager
// 0x0018 (0x0050 - 0x0038)
class UMarvelFZBEventManager final : public UWorldSubsystem
{
public:
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelFZBEventManager">();
	}
	static class UMarvelFZBEventManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelFZBEventManager>();
	}
};

// Class Marvel.AbilityUserSettingLibrary
// 0x0000 (0x0030 - 0x0030)
class UAbilityUserSettingLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void BindSettingValueChangedByAbility(class FName SettingKey, class UGameplayAbility* OwningAbility, TDelegate<void()> ChangedFunction, int32 OverrideAbilityID);
	static float GetFloatTypeUserSettingValueByAbility(class FName SettingKey, class UGameplayAbility* OwningAbility, int32 OverrideAbilityID);
	static void GetGameplaySensitivity(float* CurHorizontalSens, float* CurVerticalSens, bool bIsGamepad);
	static float GetSensRatioByFNumber(float ShootModeFOV, float DefaultFOV);
	static float GetSensRatioByNormalizedMonDistHorizontal(float HalfMonitorWidthRatio, float ShootModeFOV, float DefaultFOV);
	static class FName GetStateTypeUserSettingValueByAbility(class FName SettingKey, class UGameplayAbility* OwningAbility, int32 OverrideAbilityID);
	static bool GetSwitchTypeUserSettingValueByAbility(class FName SettingKey, class UGameplayAbility* OwningAbility, int32 OverrideAbilityID);
	static void RecoverDefaultSensitivity(class UGameplayAbility* OwningAbility);
	static void SetGameplaySensitivity(float HorizontalSens, float VerticalSens, bool bIsGamepad);
	static void SetShootModeSensitivity(class UGameplayAbility* OwningAbility, const struct FShootModeSensitivityParam& ShootModeSensitivityParam);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityUserSettingLibrary">();
	}
	static class UAbilityUserSettingLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityUserSettingLibrary>();
	}
};

// Class Marvel.AbilityVideoFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UAbilityVideoFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FAbilityVideo_AISetting LoadAbilityVideo_AISetting(const class FString& Filename);
	static struct FAbilityVideo_AISettingMapping LoadAbilityVideo_HeroAISetting(const int32& HeroID, const class FString& Filename);
	static void SaveAbilityVideo_AISetting(const class FString& Filename, const struct FAbilityVideo_AISetting& AbilityVideo_AISetting);
	static void SaveAbilityVideo_HeroAISetting(const int32& HeroID, const class FString& Filename, const struct FAbilityVideo_AISettingMapping& AbilityVideo_AISettingMapping);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityVideoFunctionLibrary">();
	}
	static class UAbilityVideoFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityVideoFunctionLibrary>();
	}
};

// Class Marvel.MarvelCueNotify_TargetActor
// 0x00A0 (0x0D68 - 0x0CC8)
class AMarvelCueNotify_TargetActor : public AMarvelCueNotify_Actor
{
public:
	TArray<struct FCommonNiagaraInfo>             StartNiagaraInfos;                                 // 0x0CC8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FCommonNiagaraInfo>             EndNiagaraInfos;                                   // 0x0CD8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         LoopAudioID;                                       // 0x0CE8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartAudioID;                                      // 0x0CEC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndAudioID;                                        // 0x0CF0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEndAgentTaskStopAudio : 1;                        // 0x0CF4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_CF5[0x3];                                      // 0x0CF5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            AudioSwitchParams;                                 // 0x0CF8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         bNeedSetTickPrerequisite : 1;                      // 0x0D48(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bSyncPPTransparentFromInstigator;                  // 0x0D49(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4A[0x6];                                      // 0x0D4A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStencilModifier_SyncPPTransparent     StencilModifier_SyncPPTransparent;                 // 0x0D50(0x0010)(BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_D60[0x8];                                      // 0x0D60(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActiveAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnActiveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnExecuteAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnExecuteFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnRemoveAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnRemoveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	class UFXSystemComponent* SpawnEndFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, const struct FCommonNiagaraInfo& InFXAsset);
	class UFXSystemComponent* SpawnStartFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, const struct FCommonNiagaraInfo& InNiagaraInfo);
	void UpdateStencilModifier();
	void WhileActiveAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void WhileActiveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_TargetActor">();
	}
	static class AMarvelCueNotify_TargetActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_TargetActor>();
	}
};

// Class Marvel.MarvelCueNotify_Summoned
// 0x0128 (0x0E90 - 0x0D68)
class AMarvelCueNotify_Summoned : public AMarvelCueNotify_TargetActor
{
public:
	uint8                                         Pad_D68[0x8];                                      // 0x0D68(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelSummonedHiddenComponent*         CachedSummonedHiddenComponent;                     // 0x0D70(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   AttachedComponentName;                             // 0x0D78(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplaySummonUpHpBar;                             // 0x0D84(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D85[0x3];                                      // 0x0D85(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetConfig_SummonUpHpBar            SummonUpHpBarConfig;                               // 0x0D88(0x00D8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UUIController_SummonUpHpBar*            UIC_SummonUpHpBar;                                 // 0x0E60(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDeclarationHolder                     SummonedCueHolder;                                 // 0x0E68(0x0010)(Transient, NativeAccessSpecifierPublic)
	TDelegate<void(class AActor* InActor)>        SummonedCueDelegate;                               // 0x0E78(0x0014)(ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8C[0x4];                                      // 0x0E8C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnOwnerSummonedDeath(class AActor* DamageCauser, class AActor* TargetActor, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnSummonedViewTargetChange(class AActor* ViewingTarget);
	bool ShouldSummonedCueVisible();
	void UpdateSummonedCueVisibility();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_Summoned">();
	}
	static class AMarvelCueNotify_Summoned* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_Summoned>();
	}
};

// Class Marvel.MarvelRichTextBlockCustomWidgetDecorator
// 0x0018 (0x0048 - 0x0030)
class UMarvelRichTextBlockCustomWidgetDecorator final : public URichTextBlockDecorator
{
public:
	class UDataTable*                             WidgetSet;                                         // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class UUserWidget* Widget, class FString& ID, class FString& Tag)> OnCustomWidgetCreated;                             // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void SetWidgetStyle(const class UUserWidget* Widget, const TMap<class FString, class FString>& InMetaData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelRichTextBlockCustomWidgetDecorator">();
	}
	static class UMarvelRichTextBlockCustomWidgetDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelRichTextBlockCustomWidgetDecorator>();
	}
};

// Class Marvel.CurveSourceComponent
// 0x0008 (0x00F8 - 0x00F0)
class UCurveSourceComponent final : public UActorComponent
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<struct FNamedCurveValue> GetCurveValues() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CurveSourceComponent">();
	}
	static class UCurveSourceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCurveSourceComponent>();
	}
};

// Class Marvel.Ability_101
// 0x0000 (0x2580 - 0x2580)
class UAbility_101 : public UMarvelGameplayAbility
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_101">();
	}
	static class UAbility_101* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_101>();
	}
};

// Class Marvel.CueDataProcessor_Base
// 0x0020 (0x0050 - 0x0030)
class UCueDataProcessor_Base : public UObject
{
public:
	TWeakObjectPtr<class UActorComponent>         TargetComponent;                                   // 0x0030(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCueData_Base*                          CueUserData;                                       // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UCueDataManagerComponent> ManagerComponent;                                  // 0x0040(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AMarvelCueNotify_Actor>  OwnerCue;                                          // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueDataProcessor_Base">();
	}
	static class UCueDataProcessor_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueDataProcessor_Base>();
	}
};

// Class Marvel.CueUserDataProcessor_Tickable
// 0x0008 (0x0058 - 0x0050)
class UCueUserDataProcessor_Tickable : public UCueDataProcessor_Base
{
public:
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueUserDataProcessor_Tickable">();
	}
	static class UCueUserDataProcessor_Tickable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueUserDataProcessor_Tickable>();
	}
};

// Class Marvel.Ability_102
// 0x0008 (0x2588 - 0x2580)
class UAbility_102 : public UMarvelGameplayAbility
{
public:
	uint8                                         Pad_2580[0x8];                                     // 0x2580(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void LandHitCallback(const struct FHitResult& Hit);
	void OnJumpFail();
	void OnMovementModeChange(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_102">();
	}
	static class UAbility_102* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_102>();
	}
};

// Class Marvel.MarvelAbilityConfig
// 0x0068 (0x0098 - 0x0030)
class UMarvelAbilityConfig : public UObject
{
public:
	float                                         PrintDebugTime;                                    // 0x0030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PrintDebug;                                        // 0x0034(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawTraceType;                                     // 0x0035(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36[0x2];                                       // 0x0036(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DrawTraceTime;                                     // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AbilityDuration;                                   // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMarvelAbilityTaskDurationConfig> TaskDurationConfigs;                               // 0x0040(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SimulateCurveFloat;                                // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void Config_PrintString(class UObject* WorldContextObject, const class FString& Contenxt);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityConfig">();
	}
	static class UMarvelAbilityConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityConfig>();
	}
};

// Class Marvel.MarvelCueNotify_HitImpact
// 0x0248 (0x04D0 - 0x0288)
class UMarvelCueNotify_HitImpact : public UMarvelCueNotify_Static
{
public:
	class UFXSystemAsset*                         BeamParticleSystem;                                // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitCueBeamParticleConfig              BeamParticleConfig;                                // 0x0290(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bUseCombineFX;                                     // 0x0300(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_301[0x7];                                      // 0x0301(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         CombineBeamParticleSystem;                         // 0x0308(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStaticCue_HitNiagaraInfo              HitNiagaraInfo;                                    // 0x0310(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bUseSpecificDecal;                                 // 0x0358(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStaticCue_DecalInfo_HitImpact         HitImpactDecalInfo;                                // 0x0360(0x0098)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     DecalMaterial;                                     // 0x03F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             DecalMaterials;                                    // 0x0400(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class ADecalActor>>        DecalActors;                                       // 0x0410(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	struct FFeedBack_Decal                        HitDecal;                                          // 0x0420(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EAbilityFeedBackType                          DecalType;                                         // 0x0478(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceAttachDecal;                                 // 0x0479(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoComputeDecalDepth;                            // 0x047A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_47B[0x5];                                      // 0x047B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULegacyCameraShake>         ActiveCameraShake;                                 // 0x0480(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bUseCameraShake : 1;                               // 0x0488(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_489[0x7];                                      // 0x0489(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULegacyCameraShake>         LocalActiveCameraShake;                            // 0x0490(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bLocalUseCameraShake : 1;                          // 0x0498(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_499[0x1F];                                     // 0x0499(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AbilityHitAudio;                                   // 0x04B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHearAllyBeHit;                                    // 0x04BC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayCommonHitAudio;                               // 0x04BD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonHitAudioType                           CommonHitAudioType;                                // 0x04BE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableAudioFilter;                                // 0x04BF(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FHitCueAudioFilterConfig               AudioFilterConfig;                                 // 0x04C0(0x000A)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableChaosFeedbackAudio;                         // 0x04CA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4CB[0x5];                                      // 0x04CB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FQuat ComputeFXRotationFromNormal(const struct FVector& InNormal, EAxis InAxis);
	static bool IsHitImpactAdsorbed(const struct FHitResult& InHitResult);
	static bool IsHitImpactBend(const struct FHitResult& InHitResult);
	static bool IsHitImpactIgnoreFX(const struct FHitResult& InHitResult);

	bool CheckAmmoHitActorTag(class AActor* InActor, const struct FGameplayTag& CheckTag) const;
	const struct FRotator ComputeDecalRotation(class AActor* InInstigator, class AActor* InCauser, const struct FHitResult& HitResult) const;
	struct FTransform ComputeFXTransform(class AActor* MyTarget, const struct FGameplayCueParameters& Parameter) const;
	int32 GetAbilityHitAudioID(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters) const;
	float GetDecalScale(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters) const;
	bool IsValidAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters) const;
	void OnExecuteAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters) const;
	void OnExecuteCameraShake(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters) const;
	void OnExecuteFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters) const;
	void OnExecuteUI(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters) const;
	void SetDecalMaterialParameter(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, class UDecalComponent* DecalComp) const;
	bool SpawnBeamParticle(TArray<class UFXSystemComponent*>* OutComponents, class UFXSystemAsset* InParticle, const struct FHitCueBeamParticleConfig& InParticleConfig, class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, bool IsCombineFX) const;
	class UDecalComponent* SpawnDecalBuffer(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, struct FCueDecalSpawnParam* DecalParam) const;
	class UNiagaraComponent* SpawnHitImpactNiagara(class UNiagaraSystem* NiagaraSystem, const struct FGameplayCue_TransformInfoResult& CueTransformInfo) const;
	class UNiagaraComponent* SpawnHitImpactNiagara_WithCueNiagaraAsset(const struct FCue_NiagaraAsset_Hit& CueNiagaraAssetHit, const struct FGameplayCue_TransformInfoResult& TransformInfo) const;
	class UNiagaraComponent* SpawnHitImpactNiagara_WithParams(class UNiagaraSystem* NiagaraSystem, const struct FVector& Location, const struct FRotator& Rotation, class USceneComponent* AttachToComponent, const class FName& SocketName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_HitImpact">();
	}
	static class UMarvelCueNotify_HitImpact* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCueNotify_HitImpact>();
	}
};

// Class Marvel.MarvelCueNotify_MeleeHitImpact
// 0x01E0 (0x06B0 - 0x04D0)
class UMarvelCueNotify_MeleeHitImpact : public UMarvelCueNotify_HitImpact
{
public:
	bool                                          bUseDifferentNiagaraHitConfigByCombo;              // 0x04D0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D1[0x7];                                      // 0x04D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStaticCue_MeleeHitNiagaraDecalInfo    HitNiagaraDecalConfig;                             // 0x04D8(0x0178)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FMeleeHitInfoSetWithCombo>      HitNiagaraConfigByCombo;                           // 0x0650(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_660[0x50];                                     // 0x0660(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_MeleeHitImpact">();
	}
	static class UMarvelCueNotify_MeleeHitImpact* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCueNotify_MeleeHitImpact>();
	}
};

// Class Marvel.MarvelActorBase
// 0x0020 (0x04B0 - 0x0490)
class AMarvelActorBase : public AActor
{
public:
	uint8                                         Pad_490[0x20];                                     // 0x0490(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void K2_PreRewindForReplay();
	void K2_RewindForReplay();
	void ResetNetUpdateFrequency(float fNetUpdateFrequency, float fDelaySeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelActorBase">();
	}
	static class AMarvelActorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelActorBase>();
	}
};

// Class Marvel.MarvelSummonerBase
// 0x03E0 (0x0890 - 0x04B0)
class alignas(0x10) AMarvelSummonerBase : public AMarvelActorBase
{
public:
	uint8                                         Pad_4B0[0x260];                                    // 0x04B0(0x0260)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelActorPoolComponent*              ActorPoolComponent;                                // 0x0710(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    SummonedDefaultRootComp;                           // 0x0718(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USummonedAbilitySystemComponent*        SummonedAbilitySystemComponent;                    // 0x0720(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateStencilComponent;                           // 0x0728(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_729[0x7];                                      // 0x0729(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStencilComponent*                      StencilComponent;                                  // 0x0730(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReactivePropertyComponent*             ReactivePropertyComponent;                         // 0x0738(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAudioComponent*                  AudioComponent;                                    // 0x0740(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelSummonedComponent*               CacheSummonedComponent;                            // 0x0748(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USummonedMovementComponent*             CacheSummonedMovementComponent;                    // 0x0750(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GenerateID;                                        // 0x0758(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeginPlayIdx;                                      // 0x0768(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bEnableAimAssist : 1;                              // 0x076C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsLevelSummoned : 1;                              // 0x076C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_76D[0x3];                                      // 0x076D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  MarvelActorTags;                                   // 0x0770(0x0068)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReplicatedMarvelActorTags;                         // 0x07D8(0x0068)(Edit, Net, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<EAimAssistCondition>                   AimAssistConditions;                               // 0x0840(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UMarvelSummonedHiddenComponent*         SummonedHiddenComponent;                           // 0x0850(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_858[0x10];                                     // 0x0858(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UGameplayAbility>        OwningAbility;                                     // 0x0868(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 QuoteSource;                                       // 0x0870(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 SourceActor;                                       // 0x0878(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMovementManagerComponent*              MovementManagerComponent;                          // 0x0880(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bSweepRootByMovementComp;                          // 0x0888(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_889[0x7];                                      // 0x0889(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class USummonedMovementComponent* GetSummonedMovementComponent();
	void MulticastChangeVelocity(const struct FVector& Velocity);
	void OnRep_ActorPoolBeginPlayChanged();
	void RouteMulticastExecuteScopeNoActorClientImpulseField(int32 ScopeId, const TArray<int32>& ScopeFieldIDs, class AActor* Causer, const TArray<struct FHitResult>& Hits, const struct FVector& TraceStart, const struct FVector& TraceEnd, const TArray<uint32>& StaticCacheIDs, const TArray<struct FVector>& CustomDirs);
	void RouteMulticastExecuteScopeNoActorHitCue(const TArray<struct FGameplayTag>& GameplayCueTags, const TArray<struct FHitResult>& HitResults, const struct FGameplayCueParameters& Parameters);

	class UMarvelSummonedComponent* GetSummonedComponent() const;
	float GetSummonedScaledRadius() const;
	float GetSummonedUnscaledRadius() const;
	bool IsAlive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSummonerBase">();
	}
	static class AMarvelSummonerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelSummonerBase>();
	}
};

// Class Marvel.MarvelTraceableSummoner
// 0x00D0 (0x0960 - 0x0890)
class AMarvelTraceableSummoner : public AMarvelSummonerBase
{
public:
	uint8                                         Pad_890[0x18];                                     // 0x0890(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* Value)> OnTraceBegin;                                      // 0x08A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UOverlapHandlerComponent*               OverlapComp;                                       // 0x08B8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C0[0x8];                                      // 0x08C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   InstigatorChar;                                    // 0x08C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OverlappedActor;                                   // 0x08D0(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OnTraceBeginTime;                                  // 0x08D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8DC[0x4];                                      // 0x08DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TraceTime;                                         // 0x08E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E4[0x4];                                      // 0x08E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 BuffIDArray;                                       // 0x08E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  IgnoreBuffTags;                                    // 0x08F8(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	void DelayAddBuff();
	void InternalAddCue(class AActor* InOverlappedActor);
	void NetMulticast_OverlappedActor(class AActor* InOverlappedActor);
	void OnRep_OverlappedActor();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTraceableSummoner">();
	}
	static class AMarvelTraceableSummoner* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelTraceableSummoner>();
	}
};

// Class Marvel.DestructionCableComponent
// 0x0030 (0x0AC0 - 0x0A90)
class UDestructionCableComponent final : public UCableComponent
{
public:
	uint8                                         Pad_A90[0x28];                                     // 0x0A90(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class AChaosDestructionActor*                 AttachChaosDestructionActor;                       // 0x0AB8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DestructionCableComponent">();
	}
	static class UDestructionCableComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDestructionCableComponent>();
	}
};

// Class Marvel.Config_103
// 0x0008 (0x00A0 - 0x0098)
class UConfig_103 : public UMarvelAbilityConfig
{
public:
	int32                                         TotalWeaponToSwitch;                               // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_103">();
	}
	static class UConfig_103* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_103>();
	}
};

// Class Marvel.MarvelMiscAudioData
// 0x0050 (0x0088 - 0x0038)
class UMarvelMiscAudioData final : public UDataAsset
{
public:
	TMap<class FString, struct FMiscAudio>        MiscAudioMap;                                      // 0x0038(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelMiscAudioData">();
	}
	static class UMarvelMiscAudioData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelMiscAudioData>();
	}
};

// Class Marvel.Ability_103
// 0x0108 (0x2688 - 0x2580)
class UAbility_103 : public UMarvelGameplayAbility
{
public:
	int32                                         PendingWeaponEquipID;                              // 0x2580(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PendingWeaponIndex;                                // 0x2584(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FMarvelEquipmentTable>          WeaponSpecs;                                       // 0x2588(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   PressedActionName;                                 // 0x2598(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ActivatingActionName;                              // 0x25A4(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSet<class FName>                             ListenActionNames;                                 // 0x25B0(0x0050)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class UMarvelAbilityItem*                     Asset;                                             // 0x2600(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelBaseCharacter*                   Owner;                                             // 0x2608(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UConfig_103*                            Config;                                            // 0x2610(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEquipComponent*                        EquipComp;                                         // 0x2618(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAbilityTask_PlayMontageAndWaitForEvent* AnimTask;                                          // 0x2620(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UMarvelAbilityTask_WaitBindInput*> InputTaskArray;                                    // 0x2628(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2638[0x50];                                    // 0x2638(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetCurrentEquipWeaponIndex(int32* WeaponIndex);
	class UAnimMontage* GetCurrentMontageToPlay();
	int32 GetCurrentTimelineIndex();
	int32 GetPendingWeaponIndex();
	TArray<int32> GetWeaponEquipIDs(class FName InActionName);
	void OnInputAction(class FName InActionName, bool bPressed);
	void OnPress1(float DeltaTime);
	void OnPress2(float DeltaTime);
	bool SwitchWeapon(class FName InActionName);
	void WheelDown(float DeltaTime);
	void WheelUp(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_103">();
	}
	static class UAbility_103* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_103>();
	}
};

// Class Marvel.CueDataProcessor_NormalWeapon
// 0x0070 (0x00C0 - 0x0050)
class UCueDataProcessor_NormalWeapon final : public UCueDataProcessor_Base
{
public:
	uint8                                         Pad_50[0x70];                                      // 0x0050(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ArmWeapon();
	void HandleCharacterMeshReady();
	void HandleRecycle();
	void UnArmWeapon();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueDataProcessor_NormalWeapon">();
	}
	static class UCueDataProcessor_NormalWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueDataProcessor_NormalWeapon>();
	}
};

// Class Marvel.Config_104
// 0x0008 (0x00A0 - 0x0098)
class UConfig_104 final : public UMarvelAbilityConfig
{
public:
	float                                         SwitchWeaponInterval;                              // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_104">();
	}
	static class UConfig_104* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_104>();
	}
};

// Class Marvel.MarvelMusicMgr
// 0x0148 (0x0178 - 0x0030)
class UMarvelMusicMgr : public UObject
{
public:
	TMap<class FString, class UAkAudioEvent*>     LoadingMusics;                                     // 0x0030(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         LoadingFadeoutTime;                                // 0x0080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class UAkAudioEvent*>     Musics;                                            // 0x0088(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FString, int32>                    PlayingMusics;                                     // 0x00D8(0x0050)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TArray<class UMarvelMusicItem*>               PlayingItems;                                      // 0x0128(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FString                                 LevelName;                                         // 0x0138(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMusicGroupType                               CurrentMusicGroup;                                 // 0x0148(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_149[0x3];                                      // 0x0149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UMarvelMusicItem>        CurrentPlayingItem;                                // 0x014C(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelMusicData*                       MarvelMusicData;                                   // 0x0158(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_160[0x18];                                     // 0x0160(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool PostMusicItem(const class UMarvelMusicItem* MusicItem);
	bool PostMusicItemByName(const class FString& ItemName);
	bool PostMusicStateDynamic(EMusicStateType StateType);
	void PostSilenceItem();
	void RestartMusic();
	void StopAllItems();
	bool StopMusicItem(const class UMarvelMusicItem* MusicItem);
	bool StopMusicItemByName(const class FString& ItemName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelMusicMgr">();
	}
	static class UMarvelMusicMgr* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelMusicMgr>();
	}
};

// Class Marvel.Ability_104
// 0x0088 (0x2608 - 0x2580)
class UAbility_104 final : public UMarvelGameplayAbility
{
public:
	uint8                                         Pad_2580[0x88];                                    // 0x2580(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MouseWheelDownOneTime();
	void MouseWheelUpOneTime();
	void OnKeyOnePressed(float DeltaTime);
	void OnKeyTwoPressed(float DeltaTime);
	void OnMouseWheelDown(float DeltaTime);
	void OnMouseWheelUp(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_104">();
	}
	static class UAbility_104* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_104>();
	}
};

// Class Marvel.InputMoveModifier
// 0x0000 (0x0030 - 0x0030)
class UInputMoveModifier final : public UInputModifier
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputMoveModifier">();
	}
	static class UInputMoveModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputMoveModifier>();
	}
};

// Class Marvel.TestActorBatchTick
// 0x0008 (0x0498 - 0x0490)
class ATestActorBatchTick final : public AActor
{
public:
	uint8                                         Pad_490[0x8];                                      // 0x0490(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTickInterval(float Interval);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TestActorBatchTick">();
	}
	static class ATestActorBatchTick* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATestActorBatchTick>();
	}
};

// Class Marvel.Config_105
// 0x0020 (0x00B8 - 0x0098)
class UConfig_105 : public UMarvelAbilityConfig
{
public:
	float                                         DelayEndTaskOnRelease;                             // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayEndAbilityOnTaskEnd;                          // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 FireModeIndexes;                                   // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         EquipID;                                           // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRoundRobin;                                       // 0x00B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLoopAbility;                                      // 0x00B5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B6[0x2];                                       // 0x00B6(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_105">();
	}
	static class UConfig_105* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_105>();
	}
};

// Class Marvel.Ability_105
// 0x0048 (0x25C8 - 0x2580)
class UAbility_105 : public UMarvelGameplayAbility
{
public:
	uint8                                         Pad_2580[0x18];                                    // 0x2580(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UConfig_105*                            AbilityConfig;                                     // 0x2598(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEquipComponent*                        WeaponComponent;                                   // 0x25A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AShootingWeapon*                        CurrentWeapon;                                     // 0x25A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelWeaponTask_Firing*               FireTask;                                          // 0x25B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAbilityTask_PlayMontageAndWaitForEvent* PlayMontageTask;                                   // 0x25B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          HasPostGunGoolDown;                                // 0x25C0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_25C1[0x7];                                     // 0x25C1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAbilityFire();
	void OnWeaponFireTaskEnd(bool AbilityEnded);
	void PostGunCoolDown();
	void PostGunWarmUp();
	void TryGetCurrentWeaponAgain();
	class UMarvelWeaponTask_Firing* WeaponFireTask();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_105">();
	}
	static class UAbility_105* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_105>();
	}
};

// Class Marvel.MarvelProcedureData
// 0x1388 (0x13C0 - 0x0038)
class UMarvelProcedureData final : public UDataAsset
{
public:
	EProcedureDataType                            DataType;                                          // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FProcedureNotifyState>          Scoring;                                           // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          Death;                                             // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          DoubleKill;                                        // 0x0060(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          TripleKill;                                        // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          QuadraKill;                                        // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          PentaKill;                                         // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          HexaKill;                                          // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          TeamKill;                                          // 0x00B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FProcedureNotifyEvent>          ConsecutiveKill;                                   // 0x00C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FProcedureDataCommon                   AssaultCommon;                                     // 0x00D0(0x00F0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FProcedureDataAssault                  AssaultUnique;                                     // 0x01C0(0x0070)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FProcedureDataCommon                   ControlCommon;                                     // 0x0230(0x00F0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FProceDureDataControl                  ControlUnique;                                     // 0x0320(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FProcedureDataCommon                   EscortCommon;                                      // 0x03E0(0x00F0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FProcedureDataEscort                   EscortUnique;                                      // 0x04D0(0x0120)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FProcedureDataCommon                   HybridCommon;                                      // 0x05F0(0x00F0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FProcedureDataHybrid                   HybridUnique;                                      // 0x06E0(0x0170)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FProcedureDataCommon                   CaptureFlagCommon;                                 // 0x0850(0x00F0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FProcedureDataCaptureFlag              CaptureFlagUnique;                                 // 0x0940(0x0200)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FProcedureDataCommon                   DeathMatchCommon;                                  // 0x0B40(0x00F0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FProcedureDataDeathMatch               DeathMatchUnique;                                  // 0x0C30(0x0130)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FProcedureDataCommon                   TeamDeathMatchCommon;                              // 0x0D60(0x00F0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FProcedureDataTeamDeathMatch           TeamDeathMatchUnique;                              // 0x0E50(0x0120)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FProcedureDataCommon                   TDMArcadeCommon;                                   // 0x0F70(0x00F0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FProcedureDataTDMArcade                TDMArcadeUnique;                                   // 0x1060(0x0220)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FProcedureDataNovice                   NoviceUnique;                                      // 0x1280(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FProcedureDataNovice                   RankUnique;                                        // 0x1320(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelProcedureData">();
	}
	static class UMarvelProcedureData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelProcedureData>();
	}
};

// Class Marvel.CueDataProcessor_RotateToCharacterMoveDir
// 0x0000 (0x0058 - 0x0058)
class UCueDataProcessor_RotateToCharacterMoveDir final : public UCueUserDataProcessor_Tickable
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueDataProcessor_RotateToCharacterMoveDir">();
	}
	static class UCueDataProcessor_RotateToCharacterMoveDir* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueDataProcessor_RotateToCharacterMoveDir>();
	}
};

// Class Marvel.Config_106
// 0x0030 (0x00C8 - 0x0098)
class UConfig_106 : public UMarvelAbilityConfig
{
public:
	bool                                          bSimulateIndependent;                              // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAbilitySocketInfo;                             // 0x0099(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInnerArray>                    FireModeIndexes;                                   // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         EquipID;                                           // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShootCount;                                        // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShootDelay;                                        // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSwitchWithShootCount;                             // 0x00BC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMontagePlayMode                              MontagePlayMode;                                   // 0x00BD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSameWithComboState;                               // 0x00BE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BF[0x1];                                       // 0x00BF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AbilityEndDelaySeconds;                            // 0x00C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AbilityEndDelayOptions;                            // 0x00C4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C5[0x3];                                       // 0x00C5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_106">();
	}
	static class UConfig_106* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_106>();
	}
};

// Class Marvel.Ability_106
// 0x0118 (0x2698 - 0x2580)
class UAbility_106 : public UMarvelGameplayAbility
{
public:
	class AMarvelBaseCharacter*                   Owner;                                             // 0x2580(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UConfig_106*                            AbilityConfig;                                     // 0x2588(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAbilityItem*                     Asset;                                             // 0x2590(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEquipComponent*                        WeaponComponent;                                   // 0x2598(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AShootingWeapon*                        CurrentWeapon;                                     // 0x25A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAbilityTask_PlayMontageAndWaitForEvent* AnimTask;                                          // 0x25A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAnimInstance*                    AnimInstance;                                      // 0x25B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AbilityID;                                         // 0x25B8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ComboStateID;                                      // 0x25BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           ShootTimerHandle;                                  // 0x25C0(0x0018)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbilityTask_WaitDelay*                 DelayTask;                                         // 0x25D8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         RemainShootCount;                                  // 0x25E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_25E4[0x4];                                     // 0x25E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         ShootPredictionKey;                                // 0x25E8(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2688[0x10];                                    // 0x2688(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CheckCommonCanActive();
	void CheckDelayEndAbility(EDelayEndAbilityPosition EndAbilityPosition);
	void CustomActivatePrepare();
	class UAnimMontage* GetCurrentMontageToPlay();
	int32 GetCurrentTimelineIndex();
	void MakeWeaponParams(const TArray<int32>& FireModes);
	void OnMontageBreakEvent();
	void OnMontageMissileEvent();
	void OnTimer();
	void Shoot();

	TArray<int32> GetCurrentFireMode() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_106">();
	}
	static class UAbility_106* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_106>();
	}
};

// Class Marvel.ChaosDestructionStatisticsUnit
// 0x0010 (0x0040 - 0x0030)
class UChaosDestructionStatisticsUnit final : public UObject
{
public:
	class UBattleStatisticsManager*               BattleStatisticsManager;                           // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AChaosDestructionActor*                 ChaosDestructionActor;                             // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosDestructionStatisticsUnit">();
	}
	static class UChaosDestructionStatisticsUnit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChaosDestructionStatisticsUnit>();
	}
};

// Class Marvel.Config_107
// 0x00B0 (0x0148 - 0x0098)
class UConfig_107 final : public UMarvelAbilityConfig
{
public:
	TArray<EAmmoClipType>                         AmmoIndexes;                                       // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bNeedAutomaticReload;                              // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedUserSettingAutomaticReload;                   // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   UserSettingAutomaticReloadKey;                     // 0x00AC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 AllAutomaticReloadAbilityIDs;                      // 0x00B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bApplyPrediction;                                  // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x3];                                       // 0x00C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AbilityEndDelaySeconds;                            // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AbilityEndDelayOptions;                            // 0x00D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpecialDuration;                                  // 0x00D1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D2[0x2];                                       // 0x00D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           EventTag;                                          // 0x00D4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AllowCancelTags;                                   // 0x00E0(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_107">();
	}
	static class UConfig_107* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_107>();
	}
};

// Class Marvel.MarvelGameUserSettings
// 0x0170 (0x02C0 - 0x0150)
class alignas(0x10) UMarvelGameUserSettings final : public UGameUserSettings
{
public:
	uint8                                         Pad_150[0x4];                                      // 0x0150(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AntiAliasingSuperSamplingMode;                     // 0x0154(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         SuperSamplingQuality;                              // 0x0158(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CASSharpness;                                      // 0x015C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ScreenPercentage;                                  // 0x0160(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VoiceLanguage;                                     // 0x0168(0x0010)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bNvidiaReflex;                                     // 0x0178(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bXeLowLatency;                                     // 0x0179(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDlssFrameGeneration;                              // 0x017A(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFSRFrameGeneration;                               // 0x017B(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bXeFrameGeneration;                                // 0x017C(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17D[0x3];                                      // 0x017D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MonitorIndex;                                      // 0x0180(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableConsole120Fps;                              // 0x0184(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_185[0x13B];                                    // 0x0185(0x013B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static float GetCVarScreenPercentage();
	static bool GetFSRFrameGenerationHardwareSupport();
	static class UMarvelGameUserSettings* GetMarvelGameUserSettings();
	static void SetGlobalIlluminationQualityChangedDelegate(TDelegate<void()> Delegate);

	void ApplyCachedScalabilityQuality();
	void ClearCachedScalabilityQualityEntry();
	struct FIntPoint GetActiveSlateInsideMonitorMaxResolution();
	int32 GetAntiAliasingSuperSamplingMode();
	bool GetAnyFrameGeneration();
	float GetCASSharpness();
	void GetCurrentScreenResolution(int32* OutScreenWidth, int32* OutScreenHeight);
	float GetCVar(const class FString& CVarName);
	bool GetDlssFrameGeneration();
	bool GetDlssFrameGenerationHardwareSupport();
	bool GetEnableConsole120Fps();
	bool GetFSRFrameGeneration();
	bool GetHDRSupport();
	int32 GetMonitorCount();
	class FString GetMonitorName(int32 InMonitorIndex);
	bool GetNvidiaReflex();
	struct FIntPoint GetPrimaryMonitorMaxResolution();
	float GetScreenPercentage();
	class FString GetShortAntiAliasingAndSuperSamplingModeName(int32 InMode);
	int32 GetSuperSamplingQuality();
	class FString GetVoiceLanguage();
	bool GetXeFrameGeneration();
	bool GetXeLowLatency();
	bool IsBeyondToDesktopResolution(const int32 ScreenWidth, const int32 ScreenHeight);
	bool IsConsole120FpsSupported();
	bool IsCurrentResolution(const int32 ScreenWidth, const int32 ScreenHeight);
	bool IsNvidiaGPU();
	bool IsPrimaryMonitor(int32 InMonitorIndex);
	void LogSettingEntries();
	void LogSettingEntriesBase();
	void LogSettingEntriesMarvel();
	void LogSettingEntriesScalability();
	void MoveWindowToAssignedMonitor();
	void SetAntiAliasingSuperSamplingMode(int32 InMode);
	void SetCachedScalabilityQualityEntry(const TSet<class FString>& Names);
	void SetCASSharpness(float Sharpness);
	void SetCurrentScreenResolution(const int32 InScreenWidth, const int32 InScreenHeight);
	void SetCVar(const class FString& CVarName, float Value);
	void SetDlssFrameGeneration(bool IsEnabled);
	void SetEnableConsole120Fps(bool IsEnabled);
	void SetFSRFrameGeneration(bool IsEnabled);
	void SetNvidiaReflex(bool IsEnabled);
	void SetPostWorldInitializationDelegate(TDelegate<void()> Delegate);
	void SetPresetMonitorIndex(int32 InPresetMonitorIndex);
	void SetPrimaryMonitorIndex();
	void SetScreenPercentage(float Percentage);
	void SetSuperSamplingQuality(int32 InQuality);
	void SetVoiceLanguage(const class FString& VoiceLanguage_0);
	void SetXeFrameGeneration(bool IsEnabled);
	void SetXeLowLatency(bool IsEnabled);
	void SyncCachedScalabilityQuality();
	void UpdateCachedDisplayMetrics();

	class FName GetCurrentPlatformName() const;
	int32 GetGraphicSettingLevel() const;
	class FString GetIniFileLocation() const;
	int32 GetMonitorIndex() const;
	int32 GetPresetMonitorIndex() const;
	bool IsAllModuleLoadingPhasesCompleted() const;
	bool IsAntiAliasingSuperSamplingDirty() const;
	bool IsFrameRateLimitDirty() const;
	bool IsScalabilityDirty() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameUserSettings">();
	}
	static class UMarvelGameUserSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameUserSettings>();
	}
};

// Class Marvel.Ability_107
// 0x01C8 (0x2748 - 0x2580)
class UAbility_107 : public UMarvelGameplayAbility
{
public:
	struct FPredictionKey                         LatestReloadAbilityActivationKey;                  // 0x2580(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  BlockReLoadAutomaticReloadTags;                    // 0x2620(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	class AMarvelBaseCharacter*                   Owner;                                             // 0x2688(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UConfig_107*                            AbilityConfig;                                     // 0x2690(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAbilityItem*                     Asset;                                             // 0x2698(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AShootingWeapon*                        CurrentWeapon;                                     // 0x26A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAbilityTask_PlayMontageAndWaitForEvent* AnimTask;                                          // 0x26A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbilityTask_WaitDelay*                 DelayTask;                                         // 0x26B0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FGameplayAttribute>             AmmoAttributes;                                    // 0x26B8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                 ListenAbilityIds;                                  // 0x26C8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TSet<int32>                                   CostTypeCheckedAbilityIds;                         // 0x26D8(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2728[0x20];                                    // 0x2728(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CheckDelayEndAbility(EDelayEndAbilityPosition EndAbilityPosition);
	void DoCustomReload(EAmmoClipType AmmoType, float ModValue, bool bApplyPredict);
	void DoReload(EAmmoClipType AmmoType, bool bApplyPrediction);
	class UAnimMontage* GetCurrentMontageToPlay();
	int32 GetCurrentTimelineIndex();
	void InitParamsSet();
	void OnMainAbilityActivateFailed(const class UGameplayAbility* InFailedAbility, const struct FGameplayTagContainer& FailureReason);
	void OnMainAbilityBreakOrEnded(class UGameplayAbility* InEndedAbility);
	void OnMontageBreakEvent();
	void OnMontageMissileEvent();
	void OnMontageMissileEventWeapon();
	void OnTimer();
	void TryAddListenAbility(int32 TryListenAbilityID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_107">();
	}
	static class UAbility_107* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_107>();
	}
};

// Class Marvel.CueDataProcessor_WeaponAnim
// 0x0000 (0x0050 - 0x0050)
class UCueDataProcessor_WeaponAnim final : public UCueDataProcessor_Base
{
public:
	void HandleAnimNotifyEvent(const struct FWeaponNotifyEvent& WeaponNotifyEvent);
	void HandleMontageStopEvent(class UAnimMontage* Montage, bool bInterrupted);
	void HandleRecycleEvent();
	void HandleWeaponOwnerChanged(class AActor* NewOwner);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueDataProcessor_WeaponAnim">();
	}
	static class UCueDataProcessor_WeaponAnim* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueDataProcessor_WeaponAnim>();
	}
};

// Class Marvel.Ability_108
// 0x0008 (0x2588 - 0x2580)
class UAbility_108 : public UMarvelGameplayAbility
{
public:
	class UMarvelAbilityTask_PlayMontageAndWaitForEvent* PlayTimelineTask;                                  // 0x2580(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	int32 GetTimelineIndexToPlay();
	void K2_EndAbilityWithChecked();
	bool ShouldPlayTimeline();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_108">();
	}
	static class UAbility_108* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_108>();
	}
};

// Class Marvel.MarvelGroundDecalComponent
// 0x0030 (0x0590 - 0x0560)
class UMarvelGroundDecalComponent final : public UDecalComponent
{
public:
	float                                         DecalRadius;                                       // 0x0560(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeightParameterName;                               // 0x0564(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DecalRotator;                                      // 0x0570(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_588[0x8];                                      // 0x0588(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGroundDecalComponent">();
	}
	static class UMarvelGroundDecalComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGroundDecalComponent>();
	}
};

// Class Marvel.Config_108_WithDelayEndAbility
// 0x0008 (0x00A0 - 0x0098)
class UConfig_108_WithDelayEndAbility final : public UMarvelAbilityConfig
{
public:
	float                                         AbilityEndDelaySeconds;                            // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         AbilityEndDelayOptions;                            // 0x009C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_108_WithDelayEndAbility">();
	}
	static class UConfig_108_WithDelayEndAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_108_WithDelayEndAbility>();
	}
};

// Class Marvel.DebugFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UDebugFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static TArray<class UObject*> FindObjectsUnderOuter(class UObject* Outer_0, class FName ObjectName);
	static class UObject* FindObjectUnderOuter(class UObject* Outer_0, class FName ObjectName);
	static void SetWorldShouldTick(class UWorld* InWorld, bool bInShouldTick);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DebugFunctionLibrary">();
	}
	static class UDebugFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDebugFunctionLibrary>();
	}
};

// Class Marvel.MarvelEnvironmentBuildingBase
// 0x0000 (0x0490 - 0x0490)
class AMarvelEnvironmentBuildingBase final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelEnvironmentBuildingBase">();
	}
	static class AMarvelEnvironmentBuildingBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelEnvironmentBuildingBase>();
	}
};

// Class Marvel.Ability_108_WithDelayEndAbility
// 0x0008 (0x2588 - 0x2580)
class UAbility_108_WithDelayEndAbility : public UMarvelGameplayAbility
{
public:
	class UAbilityTask_WaitDelay*                 DelayEndAbilityTask;                               // 0x2580(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void CheckDelayEndAbility(EDelayEndAbilityPosition EndAbilityPosition);
	void OnDelayEndAbility();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_108_WithDelayEndAbility">();
	}
	static class UAbility_108_WithDelayEndAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_108_WithDelayEndAbility>();
	}
};

// Class Marvel.Config_108_WithRootMotion
// 0x0918 (0x09B0 - 0x0098)
class UConfig_108_WithRootMotion final : public UMarvelAbilityConfig
{
public:
	struct FRootMotionDashInfo                    DashInfo;                                          // 0x0098(0x0910)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          DisableCorrection;                                 // 0x09A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A9[0x7];                                      // 0x09A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_108_WithRootMotion">();
	}
	static class UConfig_108_WithRootMotion* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_108_WithRootMotion>();
	}
};

// Class Marvel.MarvelInteractableActor
// 0x00B0 (0x0540 - 0x0490)
class AMarvelInteractableActor : public AActor
{
public:
	TMulticastInlineDelegate<void()>              OnMarvelActivatePhysicsDispatcher;                 // 0x0490(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A0[0x8];                                      // 0x04A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FVector& Impulse, const struct FVector& Location)> OnHitDispatcher;                                   // 0x04A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         DelayDeactivateTime;                               // 0x04B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ApplyImpulseTimes;                                 // 0x04BC(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             OriginalTransform;                                 // 0x04C0(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInteractableMeshComponent*             MeshComponent;                                     // 0x0520(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_528[0x18];                                     // 0x0528(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UPrimitiveComponent* ActivatePhysics();
	class UInteractableMeshComponent* GetOriginMeshComponent();
	class UInteractableMeshComponent* GetSimulatingMeshComponent();
	void MulticastPlayHitEffect(const struct FVector& HitDir, const struct FVector& InLocation);
	void MulticastReplaceMesh(int32 InMeshIndex);
	void OnHit(const struct FVector& HitDir, const struct FVector& InLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelInteractableActor">();
	}
	static class AMarvelInteractableActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelInteractableActor>();
	}
};

// Class Marvel.MarvelInteractableGroupItemActor
// 0x0000 (0x0540 - 0x0540)
class AMarvelInteractableGroupItemActor final : public AMarvelInteractableActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelInteractableGroupItemActor">();
	}
	static class AMarvelInteractableGroupItemActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelInteractableGroupItemActor>();
	}
};

// Class Marvel.MarvelGameplayAttributeGlobals
// 0x0000 (0x0068 - 0x0068)
class UMarvelGameplayAttributeGlobals final : public UGameplayAttributeGlobals
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayAttributeGlobals">();
	}
	static class UMarvelGameplayAttributeGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayAttributeGlobals>();
	}
};

// Class Marvel.OutSpecialValue_Modifier
// 0x0008 (0x0038 - 0x0030)
class UOutSpecialValue_Modifier final : public UInputModifier
{
public:
	class UOutSpecialValueType*                   OutSpecial;                                        // 0x0030(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OutSpecialValue_Modifier">();
	}
	static class UOutSpecialValue_Modifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOutSpecialValue_Modifier>();
	}
};

// Class Marvel.Ability_108_WithRootMotion
// 0x09A8 (0x2F30 - 0x2588)
class UAbility_108_WithRootMotion final : public UAbility_108
{
public:
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x2588(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarvelCharacterMovementComponent*      OwnerMovement;                                     // 0x2590(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UCharacterCollisionComponent*           OwnerCapsule;                                      // 0x2598(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                Velocity;                                          // 0x25A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRootMotionDashInfo                    DashInfo;                                          // 0x25B8(0x0910)(NativeAccessSpecifierPrivate)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x2EC8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2ED8[0x58];                                    // 0x2ED8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActorHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnCharacterHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_108_WithRootMotion">();
	}
	static class UAbility_108_WithRootMotion* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_108_WithRootMotion>();
	}
};

// Class Marvel.Config_109
// 0x0028 (0x00C0 - 0x0098)
class UConfig_109 : public UMarvelAbilityConfig
{
public:
	struct FGameplayTag                           SculptTag;                                         // 0x0098(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetCamera;                                      // 0x00A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReInitAttributes;                                 // 0x00A5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A6[0x2];                                       // 0x00A6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   NextTLSection;                                     // 0x00A8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoEndAbility;                                   // 0x00B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EndAbilityID;                                      // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_109">();
	}
	static class UConfig_109* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_109>();
	}
};

// Class Marvel.MarvelReplicationGraphNode_AbilityActor
// 0x0000 (0x00F8 - 0x00F8)
class UMarvelReplicationGraphNode_AbilityActor final : public UReplicationGraphNode_ActorList
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelReplicationGraphNode_AbilityActor">();
	}
	static class UMarvelReplicationGraphNode_AbilityActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelReplicationGraphNode_AbilityActor>();
	}
};

// Class Marvel.EquipComponent
// 0x02B0 (0x03A0 - 0x00F0)
class UEquipComponent final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(class AShootingWeapon* Weapon, struct FMarvelEquipmentTable& WeaponInfo)> OnWeaponSpawned;                                   // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AShootingWeapon* Weapon, struct FMarvelEquipmentTable& WeaponInfo, bool bState)> OnEquipStateChanged;                               // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AShootingWeapon* Weapon, struct FMarvelEquipmentTable& WeaponInfo, bool bState)> OnAfterEquipStateChanged;                          // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AShootingWeapon* Weapon, bool bState)> OnPresentStateChanged;                             // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool IsBlocked, const struct FVector& BlockPosition)> OnWeaponBlockingChanged;                           // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float CritRate, float Damage)> OnAmmoStatChanged;                                 // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(TArray<struct FInstantAmmoHitInfo>& AmmoHitInfo)> DispatchAmmoHitInfo;                               // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TArray<class AShootingWeapon*>                WeaponInventory;                                   // 0x0160(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	class APawn*                                  Instigator;                                        // 0x0170(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<int32>                                 EquipWeapons;                                      // 0x0178(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                 WeaklyEquipWeapons;                                // 0x0188(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                 NetOldEquipWeapons;                                // 0x0198(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                 ClientWeapons;                                     // 0x01A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<int32>                                 ClientWeaklyWeapons;                               // 0x01B8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C8[0x1D8];                                    // 0x01C8(0x01D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnOwnerSculptChanged(int32 SculptID);
	void OnOwnerSkinInitialized(int32 SkinID);
	void OnPredictEquipWeaponRejected(const class FString& PredictionKey);
	void OnRep_EquipWeapons();
	void OnRep_WeaklyEquipWeapons();
	void ResetComponent();
	void SetWeaponVisibility(bool IsVisible);
	void TryEquipWeaponByEquipID(int32 EquipID, class UGameplayAbility* SourceAbility, bool bShouldPredict);
	void UnEquipWeaponByEquipID(int32 EquipID);

	class FName GetAttachSocket(int32 EquipID) const;
	void GetConflictWeaponsToUnEquip(int32 InWeaponIndex, const TArray<int32>& InEquipWeapons, TArray<int32>* OutToUnEquipWeapons) const;
	class AShootingWeapon* GetCurrentWeapon() const;
	int32 GetCurrentWeaponEquipID() const;
	TArray<int32> GetEquipWeaponIDs(bool bWithWeaklyEquip) const;
	class FString GetEquipWeaponPredictionKey() const;
	TArray<class AShootingWeapon*> GetEquipWeapons(bool bWithWeaklyEquip) const;
	class AMarvelBaseCharacter* GetInstigatorCharacter() const;
	class FName GetSecondaryAttachSocket(int32 EquipID) const;
	class AShootingWeapon* GetWeaponByClass(TSubclassOf<class AShootingWeapon> WeaponClass) const;
	class AShootingWeapon* GetWeaponByEquipID(int32 EquipID) const;
	int32 GetWeaponIndex(const class AShootingWeapon* Weapon) const;
	const TArray<struct FMarvelEquipmentTable> GetWeaponSpecs() const;
	bool IsClientWeaponEquipped(const class AShootingWeapon* Weapon) const;
	bool IsWeaponEquipped(const class AShootingWeapon* Weapon) const;
	bool IsWeaponEquippedByEquipID(int32 EquipID) const;
	bool IsWeaponPresent(int32 EquipID) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EquipComponent">();
	}
	static class UEquipComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEquipComponent>();
	}
};

// Class Marvel.Ability_109
// 0x02B0 (0x2838 - 0x2588)
class UAbility_109 : public UAbility_108
{
public:
	struct FPredictionKey                         CharacterDeathKey;                                 // 0x2588(0x00A0)(Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         SculptChangeKey;                                   // 0x2628(0x00A0)(Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         OnSculptChangeKey;                                 // 0x26C8(0x00A0)(Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         OnDurationEndKey;                                  // 0x2768(0x00A0)(Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           MorphTag;                                          // 0x2808(0x000C)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2814[0x4];                                     // 0x2814(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UConfig_109*                            Config_109;                                        // 0x2818(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAbilityItem*                     AbilityItem_109;                                   // 0x2820(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelBaseCharacter*                   OwningCharacter;                                   // 0x2828(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelBaseAbilitySystemComponent*      OwningAbilitySystemComp;                           // 0x2830(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool CanChangeSculpt();
	void ChangeSculpt();
	int32 GetTimelineIndexToPlayOnSculptChanged();
	void OnCharacterDeath(class AActor* DamageCauser, class AActor* TargetActor, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnSculptChanged(int32 InSculptID);
	void TryActivateRevertAbility();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_109">();
	}
	static class UAbility_109* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_109>();
	}
};

// Class Marvel.MarvelEffectTemplateLogicTypes
// 0x0000 (0x0030 - 0x0030)
class UMarvelEffectTemplateLogicTypes : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelEffectTemplateLogicTypes">();
	}
	static class UMarvelEffectTemplateLogicTypes* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelEffectTemplateLogicTypes>();
	}
};

// Class Marvel.EffectTemplateLogic_TerrainRelevancy
// 0x0000 (0x0030 - 0x0030)
class UEffectTemplateLogic_TerrainRelevancy final : public UMarvelEffectTemplateLogicTypes
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EffectTemplateLogic_TerrainRelevancy">();
	}
	static class UEffectTemplateLogic_TerrainRelevancy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEffectTemplateLogic_TerrainRelevancy>();
	}
};

// Class Marvel.Config_111
// 0x10B8 (0x1150 - 0x0098)
class UConfig_111 : public UMarvelAbilityConfig
{
public:
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             TraceContext;                                      // 0x00A0(0x0F90)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FPhysicsWeaponPossessInfos             PossessInfos;                                      // 0x1030(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FPhysicsWeaponUnPossessInfos           UnPossessInfos;                                    // 0x1080(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         bMultiPossess : 1;                                 // 0x10D0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_10D1[0x7];                                     // 0x10D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPhysicsWeaponPossessInfos>     OtherPossessInfos;                                 // 0x10D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FPhysicsWeaponUnPossessInfos>   OtherUnPossessInfos;                               // 0x10E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EPhysicsWeaponType, struct FPossessCooldownParam> CooldownParams;                                    // 0x10F8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_1148[0x8];                                     // 0x1148(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	uint8 GetInteractiveWeaponTypeMask() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_111">();
	}
	static class UConfig_111* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_111>();
	}
};

// Class Marvel.DataBaseManager
// 0x0008 (0x0038 - 0x0030)
class UDataBaseManager final : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static TArray<class UDataTable*> GetDataTables();

	void Initialize();
	void Shutdown();

	class UPyObjectWrapper* GetDataBase() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataBaseManager">();
	}
	static class UDataBaseManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataBaseManager>();
	}
};

// Class Marvel.Ability_111
// 0x0058 (0x25D8 - 0x2580)
class UAbility_111 : public UMarvelGameplayAbility
{
public:
	class UMarvelAbilityTask_PlayMontageAndWaitForEvent* AnimTask;                                          // 0x2580(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAbilityTask_WaitCancel*                CancelTask;                                        // 0x2588(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarvelAbilityTask_WaitBindInput*       InputTask;                                         // 0x2590(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class APhysicsSummoner*                       CachedPhysicsSummoner;                             // 0x2598(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 OwnerActor;                                        // 0x25A0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UConfig_111*                            AbilityConfig;                                     // 0x25A8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPhysicalInteractionComponent*          InteractionComponent;                              // 0x25B0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_25B8[0x20];                                    // 0x25B8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class AActor* GetTraceResult();
	void HandleDelegate(class APhysicsSummoner* InSummoner, bool bIsAdd);
	void OnCancelEvent();
	void OnMontageBreakEvent();
	void OnMontageMissileEvent();
	void OnThrowWeapon(class AActor* Weapon);
	void OnWeaponEndAgentTask(class AActor* Weapon);
	void OnWeaponReset();
	void SetCooldownValue(class APhysicsSummoner* Weapon);
	void TryActivateOtherTimeline(float TimeWaited);
	class APhysicsSummoner* TryGetWeapon();
	void UnPossessWeapon();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_111">();
	}
	static class UAbility_111* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_111>();
	}
};

// Class Marvel.DestructionConstraintServerActor
// 0x00A8 (0x0538 - 0x0490)
class ADestructionConstraintServerActor final : public AActor
{
public:
	TWeakObjectPtr<class AChaosDestructionActor>  ConstraintDesActor;                                // 0x0490(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_498[0x30];                                     // 0x0498(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayConstraintTime;                               // 0x04C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StableSpeed;                                       // 0x04CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoopJudgeSpeedGap;                                 // 0x04D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLinearDrive;                                   // 0x04D4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D5[0x3];                                      // 0x04D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LinearTargetPosition;                              // 0x04D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearTargetStrength;                              // 0x04F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearTargetVelocityStrength;                      // 0x04F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearTargetMaxForce;                              // 0x04F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLinearAngularDrive;                            // 0x04FC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAngularDriveMode                             AngularDriveMode;                                  // 0x04FD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TwistDrive;                                        // 0x04FE(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SwingDrive;                                        // 0x04FF(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LinearAngularTarget;                               // 0x0500(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LinearAngularStrength;                             // 0x0518(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearVelocityStrength;                            // 0x051C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearAngularMaxForce;                             // 0x0520(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_524[0x4];                                      // 0x0524(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USphereComponent*                       SphereRoot;                                        // 0x0528(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDestructionConstraintComponent*        ConstraintComponent;                               // 0x0530(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void DealChaosBreakEvent(bool bIsBind);
	void JudgeSpeedForParams();
	void OnChaosBreak(const struct FChaosBreakEvent& BreakEvent);
	void OnChaosDesCompReset(class AActor* DesActor);
	void ProcessConstraintLogic();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DestructionConstraintServerActor">();
	}
	static class ADestructionConstraintServerActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADestructionConstraintServerActor>();
	}
};

// Class Marvel.Config_112
// 0x0018 (0x00B0 - 0x0098)
class UConfig_112 : public UMarvelAbilityConfig
{
public:
	EWeaponUseType                                WeaponUseType;                                     // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         WeaponType;                                        // 0x0099(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWeaponUseInfo>                 WeaponUseInfos;                                    // 0x00A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_112">();
	}
	static class UConfig_112* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_112>();
	}
};

// Class Marvel.Config_113
// 0x10F8 (0x1190 - 0x0098)
class UConfig_113 : public UMarvelAbilityConfig
{
public:
	bool                                          bTimeCrystalAbilityEnabled;                        // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanbeEnhanced;                                    // 0x0099(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x2];                                       // 0x009A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NormalAbilityTimelineIndex;                        // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EnhancedAbilityTimelineIndex;                      // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDestroy;                                      // 0x00A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5[0xB];                                       // 0x00A5(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLoopAdsorbTaskParameters              AdsorbParameters;                                  // 0x00B0(0x10B0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EMarvelAbilityStage                           BeginAdsorbStage;                                  // 0x1160(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoPlayTimeline;                                 // 0x1161(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoEndAbility;                                   // 0x1162(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1163[0x1];                                     // 0x1163(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EnhancedAbilityCD;                                 // 0x1164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStateChangedTaskParam                 AbilityUseSettings;                                // 0x1168(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_113">();
	}
	static class UConfig_113* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_113>();
	}
};

// Class Marvel.MarvelBaseEffectExecution
// 0x0000 (0x0048 - 0x0048)
class UMarvelBaseEffectExecution : public UGameplayEffectExecutionCalculation
{
public:
	bool CheckSpecHasAssetTags(const struct FGameplayEffectSpec& Spec, const struct FGameplayAttribute& Attribute, const struct FGameplayTag& HasAssetTag) const;
	bool GetModifierMagnitude(const struct FGameplayEffectSpec& Spec, const struct FGameplayAttribute& Attribute, TArray<float>* Magnitudes, TArray<EGameplayModOp>* InModOps) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelBaseEffectExecution">();
	}
	static class UMarvelBaseEffectExecution* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelBaseEffectExecution>();
	}
};

// Class Marvel.MarvelDamageExecutionCalculation
// 0x0070 (0x00B8 - 0x0048)
class UMarvelDamageExecutionCalculation final : public UMarvelBaseEffectExecution
{
public:
	struct FGameplayTag                           EffectDamageSource;                                // 0x0048(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EffectDamageTarget;                                // 0x0054(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EffectDamage;                                      // 0x0060(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EffectDamage_DontKill;                             // 0x006C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EffectDamage_DontKill_FromSelf;                    // 0x0078(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EffectDamage_ToCure;                               // 0x0084(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Effect_ForceKill;                                  // 0x0090(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EffectDamage_IgnoreSourcePercent;                  // 0x009C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EffectDamage_IgnoreTargetPercent;                  // 0x00A8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B4[0x4];                                       // 0x00B4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelDamageExecutionCalculation">();
	}
	static class UMarvelDamageExecutionCalculation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelDamageExecutionCalculation>();
	}
};

// Class Marvel.DataBaseEvent
// 0x0000 (0x0030 - 0x0030)
class UDataBaseEvent : public UObject
{
public:
	TSet<class FString> GetEventHeroIDsAll();
	TArray<struct FDependencyHeroIDSet> GetEventHeroIDsAny();
	TSet<class FString> GetEventMapIDsAll();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataBaseEvent">();
	}
	static class UDataBaseEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataBaseEvent>();
	}
};

// Class Marvel.Ability_113
// 0x0260 (0x27E0 - 0x2580)
class UAbility_113 : public UMarvelGameplayAbility
{
public:
	TMulticastInlineDelegate<void(class AActor* InActor)> OnAdsorbSucceedDelegate;                           // 0x2580(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bEnhancedState;                                    // 0x2590(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2591[0x7];                                     // 0x2591(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAbilityTask_LoopAdsorb*          AdsorbTask;                                        // 0x2598(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbilityTask_WaitInputRelease*          WaitReleaseTask;                                   // 0x25A0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           AdsorbDurationTimer;                               // 0x25A8(0x0018)(Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         PreTraceActors;                                    // 0x25C0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class APhysicsSummoner*>               TracedActors;                                      // 0x25D0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x25E0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UConfig_113*                            AbilityConfig;                                     // 0x25E8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPhysicalInteractionComponent*          InteractionComponent;                              // 0x25F0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         Adsorb_RPC_PredictionKey;                          // 0x25F8(0x00A0)(Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         Adsorb_Begin_PredictionKey;                        // 0x2698(0x00A0)(Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         Adsorb_Timeout_PredictionKey;                      // 0x2738(0x00A0)(Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_27D8[0x8];                                     // 0x27D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginAdsorb();
	void EndAdsorb();
	void MulticastOnAdsorbSucceed(class AActor* InActor);
	void MulticastOnAdsorbTrace(const TArray<class APhysicsSummoner*>& InActors);
	void NativeOnAdsorbSucceed(class AActor* InActor);
	void NativeOnTraceSuccess(const TSet<class APhysicsSummoner*>& InActors);
	void OnAdsorbEnd();
	void OnAdsorbSucceed(class AActor* InActor);
	void OnAdsorbTrace(class AActor* InActor);
	void OnMontageMissileEvent();
	void OnReleaseButton(float PressDuration);
	void PreTrace();
	void SetEnhancedState(bool bInEnhancedState);

	TArray<class AActor*> GetPreTraceActors() const;
	TArray<class APhysicsSummoner*> GetTracedActors() const;
	bool IsEnhanced() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_113">();
	}
	static class UAbility_113* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_113>();
	}
};

// Class Marvel.Ability_119
// 0x0010 (0x2590 - 0x2580)
class UAbility_119 : public UMarvelGameplayAbility
{
public:
	class UMarvelAbilityTask_Projectile*          Task_Projectile;                                   // 0x2580(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAbilityTask_SpawnSummoner*       Task_Summoner;                                     // 0x2588(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class UMarvelAbilityTask_Projectile* SpawnProjectile(int32 ID, const struct FMarvelAbilitySocketInfo& SocketInfo, const struct FMarvelAgentOriginInfo& AgentOriginInfo, class AActor* InQuote);
	class UMarvelAbilityTask_Projectile* SpawnProjectileEx(int32 ID, const struct FMarvelAbilitySourceLocationInfo& InLocationInfo, class AActor* InQuote);
	class UMarvelAbilityTask_Projectile* SpawnScope(int32 ID, const struct FMarvelAbilitySocketInfo& SocketInfo, const struct FMarvelAgentOriginInfo& AgentOriginInfo, class AActor* InQuote);
	class UMarvelAbilityTask_Projectile* SpawnScopeEx(int32 ID, const struct FMarvelAbilitySourceLocationInfo& InLocationInfo, class AActor* InQuote);
	class UMarvelAbilityTask_SpawnSummoner* SpawnSummoner(int32 SummonerId, const struct FMarvelAbilitySocketInfo& SocketInfo, class AActor* InQuoteSource, const struct FMarvelAgentOriginInfo& AgentOriginInfo, ESummonedPredictMode InMode, EAbilityTaskNetSyncType InSyncType);
	class UMarvelAbilityTask_SpawnSummoner* SpawnSummonerEx(int32 SummonerId, const struct FMarvelAbilitySourceLocationInfo& LocationInfo, class AActor* InQuoteSource, ESummonedPredictMode InMode, EAbilityTaskNetSyncType InSyncType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_119">();
	}
	static class UAbility_119* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_119>();
	}
};

// Class Marvel.LifeInfo_Params
// 0x0018 (0x0048 - 0x0030)
class ULifeInfo_Params : public UObject
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAbilityDestroy(class UGameplayAbility* Ability);
	void OnCache(class AActor* Actor);
	void OnDeath(class AActor* DamageCauser, class AActor* TargetActor, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnDestroy(class AActor* Actor);
	void OnEndAbility(class UGameplayAbility* Ability);
	void OnEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
	void Reset();
	void SearchNotFound(class UObject* TraceSource, const TArray<struct FHitResult>& HitResults);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LifeInfo_Params">();
	}
	static class ULifeInfo_Params* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULifeInfo_Params>();
	}
};

// Class Marvel.LifeInfo_ActiveHandle_Params
// 0x0090 (0x00D8 - 0x0048)
class ULifeInfo_ActiveHandle_Params final : public ULifeInfo_Params
{
public:
	uint8                                         Pad_48[0x90];                                      // 0x0048(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAnyGameplayEffectRemoved(const struct FActiveGameplayEffect& ActiveGameplayEffect);
	void OnTargetEndAgentTask(class AActor* TargetActor);
	void OnTargetEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LifeInfo_ActiveHandle_Params">();
	}
	static class ULifeInfo_ActiveHandle_Params* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULifeInfo_ActiveHandle_Params>();
	}
};

// Class Marvel.RecoveryEffectComponent
// 0x0048 (0x0138 - 0x00F0)
class URecoveryEffectComponent final : public UActorComponent
{
public:
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Time;                                              // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRecoveryMaterialParam>         RecoveryMaterialParams;                            // 0x0108(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x20];                                     // 0x0118(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DoRecoveryEffect();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RecoveryEffectComponent">();
	}
	static class URecoveryEffectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URecoveryEffectComponent>();
	}
};

// Class Marvel.Cue_CharacterPlaneCut
// 0x0030 (0x0CF8 - 0x0CC8)
class ACue_CharacterPlaneCut final : public AMarvelCueNotify_Actor
{
public:
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x0CC8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD0[0x28];                                     // 0x0CD0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_CharacterPlaneCut">();
	}
	static class ACue_CharacterPlaneCut* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_CharacterPlaneCut>();
	}
};

// Class Marvel.Ability_133
// 0x0288 (0x2808 - 0x2580)
class UAbility_133 : public UMarvelGameplayAbility
{
public:
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x2580(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2588[0x280];                                   // 0x2588(0x0280)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClampToMaxSpeedSync();
	void ClientSendFlyOverMaxDistanceEvent();
	void ClientSendMissileData(struct FHitResult& HitResult, bool bNeedSpecialMove, bool bIsHitGround);
	void ClientSendSimpleSwingData(const struct FSwingInfo& SwingInfo);
	void K2_OnNetSyncOnEdgeOffCliff(const struct FGameplayAbilityTargetDataHandle& Data);
	void K2_OnServerReceiveClientFlyOverMaxDistance();
	void K2_OnServerReceiveClientMissileData(const struct FHitResult& InHitResult, bool bNeedSpecialMove, bool bIsHitGround);
	void K2_OnServerReceiveClientSimpleSwingData(const struct FHitResult& InHitResult, const struct FVector& InOptimalPoint, bool InIsSwingToLeft);
	void K2_ReadySimpleSwing(const struct FSwingInfo& SwingInfo);
	void OnNetSyncOnEdgeOffCliff(const struct FGameplayAbilityTargetDataHandle& Data);
	void OnServerReceiveClientData(const struct FGameplayAbilityTargetDataHandle& Data);
	void ServerSetVelocity(const struct FVector& NewVelocity);
	bool TrySimpleSwing(const struct FSimpleSwingConfig& InSimpleSwingConfig);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_133">();
	}
	static class UAbility_133* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_133>();
	}
};

// Class Marvel.Config_134
// 0x00C8 (0x0160 - 0x0098)
class UConfig_134 : public UMarvelAbilityConfig
{
public:
	struct FRotator                               EnterSoulBodyTurnRate;                             // 0x0098(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TArray<ECollisionChannel>                     SoulIgnoreCollisionChannels;                       // 0x00B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShouldUseSpecialAction;                           // 0x00C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C1[0x7];                                       // 0x00C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAbilityBindInputConfig                CancelAction;                                      // 0x00C8(0x0098)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_134">();
	}
	static class UConfig_134* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_134>();
	}
};

// Class Marvel.TagAbilityStatisticsImpl
// 0x0018 (0x0048 - 0x0030)
class UTagAbilityStatisticsImpl : public UObject
{
public:
	struct FMarvelToRecordEffectIDs               SpecialRecord;                                     // 0x0030(0x000C)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityStatistics*                     OwnerStatistics;                                   // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void Initialize();
	void OnAbilityActivate(const struct FActionLogAbilityContext& AbilityInfoContext);
	void OnAbilityBreak(const struct FActionLogAbilityContext& AbilityInfoContext);
	void OnAbilityEnd(const struct FActionLogAbilityContext& AbilityInfoContext);
	void OnAbilityEndAgentTask(class AActor* Instigator, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, const struct FEndAgentTaskInfo& EndAgentTaskInfo);
	void OnAbilityHit(const struct FActionLogBattleContext& BattleContext, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnAbilityHitOnChaos(class AActor* Instigator, class AActor* Target, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnAbilityMissile(const struct FActionLogAbilityContext& AbilityInfoContext);
	void OnAbilityPostTraceSpec(class AActor* Instigator, const class FString& TraceID, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnAbilityProjectileBegin(class AActor* Instigator, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnAbilityRecycleAgentTask(class AActor* Instigator, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, const struct FEndAgentTaskInfo& EndAgentTaskInfo);
	void OnAbilityScopeBegin(class AActor* Instigator, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnAbilitySummonedBegin(class AActor* Instigator, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnAbilityWeaponAmmoEnd(class AActor* Instigator, class AActor* Target, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, int32 Count);
	void Shutdown();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TagAbilityStatisticsImpl">();
	}
	static class UTagAbilityStatisticsImpl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTagAbilityStatisticsImpl>();
	}
};

// Class Marvel.HitRateAbilityStatisticsImpl
// 0x00A8 (0x00F0 - 0x0048)
class UHitRateAbilityStatisticsImpl : public UTagAbilityStatisticsImpl
{
public:
	TMap<class FString, struct FAbilityUseInfo>   AbilityUseInfos;                                   // 0x0048(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, struct FVector>           AbilityMissileLocations;                           // 0x0098(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bInCD;                                             // 0x00E8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddHitInfo(const class FString& AbilityUniqueID, const class FString& HitUniqueID, const struct FActionLogBattleContext& BattleInfoContext, const struct FAttributeModifierParameter& ModifierParameter);
	void AddHitInfoOnChaos(const class FString& AbilityUniqueID, const class FString& HitUniqueID, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void ComputeHitInfo(const class FString& UniqueID);
	void RecordAbilityUseInfo(const class FString& UniqueID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HitRateAbilityStatisticsImpl">();
	}
	static class UHitRateAbilityStatisticsImpl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHitRateAbilityStatisticsImpl>();
	}
};

// Class Marvel.DerivativeAbilityStatisticsImpl
// 0x0058 (0x0148 - 0x00F0)
class UDerivativeAbilityStatisticsImpl final : public UHitRateAbilityStatisticsImpl
{
public:
	uint8                                         Pad_F0[0x50];                                      // 0x00F0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UTargetActorParentManager*              TargetActorManager;                                // 0x0140(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DerivativeAbilityStatisticsImpl">();
	}
	static class UDerivativeAbilityStatisticsImpl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDerivativeAbilityStatisticsImpl>();
	}
};

// Class Marvel.Ability_134
// 0x0298 (0x2820 - 0x2588)
class UAbility_134 : public UAbility_108
{
public:
	EAdamSoulStatus                               SoulStatus;                                        // 0x2588(0x0001)(Edit, Net, ZeroConstructor, Transient, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2589[0x7];                                     // 0x2589(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EAdamSoulStatus SoulStatus)> OnSoulStatusChanged;                               // 0x2590(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	EAdamSoulEndReason                            SoulEndReason;                                     // 0x25A0(0x0001)(BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A1[0x7];                                     // 0x25A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EAdamSoulEndReason SoulEndReason)> OnSoulEnd;                                         // 0x25A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                SoulEndLocation;                                   // 0x25B8(0x0018)(BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float DelayTime)> DelayRespawnDelegate;                              // 0x25D0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	float                                         DelayRespawnTime;                                  // 0x25E0(0x0004)(BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25E4[0x4];                                     // 0x25E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(float DelayTime)> CocoonRespawnDelegate;                             // 0x25E8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	class UCharacterMovementComponent*            CharacterMovement;                                 // 0x25F8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UConfig_134*                            AbilityConfig;                                     // 0x2600(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayerController*                      PlayerController;                                  // 0x2608(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2610[0x210];                                   // 0x2610(0x0210)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanActivateSelfWithCheck(const struct FAttributeModifierParameter& ModifierParameter, bool bIsServer);
	void ChangeSoulRotationRate(bool bSet);
	bool CheckForceKill();
	void EndPlayTimelineTask();
	void EnterDeathState(bool bPredict);
	void EnterSoul();
	bool IsBindToController(class AMarvelPlayerController* InPC);
	void OnActorDeath(class AActor* Killer, class AActor* Target, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void OnActorReborn(class AActor* TargetActor, const struct FCharacterRebornParam& Param);
	void OnRep_DelayRespawnTime();
	void OnRep_SoulEndReason();
	void OnRep_SoulStatus();
	void OnSpectatingStateChanged(bool InState);
	void SetRespawnTime(float InTime);
	void SetSoulEndInfo(EAdamSoulEndReason EndReason, const struct FVector& EndLocation);
	void SetSoulStatus(EAdamSoulStatus InStage);
	void TraceDestructionAfterResurrection();
	void TryInterruptDisguise();
	void TryOtherResurrectMethod();
	void TryResetCollisionAndMovementMode();

	void EnterSoulInternal(const struct FGameplayTag& InSoulCue) const;
	EAdamSoulStatus GetSoulStatus() const;
	bool IsSoulStatus() const;
	void RemoveDeathCue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_134">();
	}
	static class UAbility_134* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_134>();
	}
};

// Class Marvel.MarvelAttrReduceRegenAbility
// 0x00D0 (0x0E60 - 0x0D90)
class UMarvelAttrReduceRegenAbility : public UGameplayAbility
{
public:
	struct FGameplayAttribute                     ListenAttribute;                                   // 0x0D90(0x0040)(Edit, BlueprintVisible, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AttributeGameplayTag;                              // 0x0DD0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomUpdatePeriod;                                // 0x0DDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbilityEnergyState                           DefaultState;                                      // 0x0DE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DE1[0x7];                                      // 0x0DE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            RegenAttributeEffect;                              // 0x0DE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OngoingRegenTag;                                   // 0x0DF0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RegenValue;                                        // 0x0DFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RegenDelay;                                        // 0x0E00(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCostRestartRegen;                                 // 0x0E04(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E05[0x3];                                      // 0x0E05(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ReduceDelay;                                       // 0x0E08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BasicRegenValue;                                   // 0x0E0C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RegenValueScale;                                   // 0x0E10(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E14[0x4];                                      // 0x0E14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            ReduceAttributeEffect;                             // 0x0E18(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OngoingReduceTag;                                  // 0x0E20(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReduceValue;                                       // 0x0E2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActiveGameplayEffectHandle            RegenEffectHandle;                                 // 0x0E30(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FActiveGameplayEffectHandle            ReduceEffectHandle;                                // 0x0E38(0x0008)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E40[0x20];                                     // 0x0E40(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddUpdateDelayTime(float Duration);
	void ChangeRegenValueScale(float NewRegenValueScale);
	void CheckAtrributeChange();
	EAbilityEnergyState GetNowState(bool bContainWaiting);
	void InitReduceRegenAbility();
	void RefreshReduceRegenValue(float NewReduceValue, float NewRegenValue);
	void ReinitReduceRegenAbility();
	void StartReduce(float DelayTime);
	void StartRegen(float DelayTime);
	void StopReduce();
	void StopRegen();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAttrReduceRegenAbility">();
	}
	static class UMarvelAttrReduceRegenAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAttrReduceRegenAbility>();
	}
};

// Class Marvel.MarvelEnergyRegenAbility
// 0x0000 (0x0E60 - 0x0E60)
class UMarvelEnergyRegenAbility final : public UMarvelAttrReduceRegenAbility
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelEnergyRegenAbility">();
	}
	static class UMarvelEnergyRegenAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelEnergyRegenAbility>();
	}
};

// Class Marvel.EnvironmentActorTransitionComponent
// 0x01B8 (0x02A8 - 0x00F0)
class UEnvironmentActorTransitionComponent : public UActorComponent
{
public:
	TWeakObjectPtr<class AChaosClientDesActor>    ClientDestructionActorCache;                       // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AChaosDestructionActor>  DestructionActorCache;                             // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_100[0xC];                                      // 0x0100(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	EEnvironmentActorTransitionType               TransitionType;                                    // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransitionScaleTime;                               // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x1C];                                     // 0x0114(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHiddenEffectConfigParam>       TransitionEffects;                                 // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bNeedReset;                                        // 0x0140(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x7];                                      // 0x0141(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAblationMaterialParam                 TransitionAblationMaterial;                        // 0x0148(0x00C8)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_210[0x68];                                     // 0x0210(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 DestructionBreakIndexArray;                        // 0x0278(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bDoTransitionOnClientGCBreak;                      // 0x0288(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetTransitionOnClientGCReset;                   // 0x0289(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28A[0x6];                                      // 0x028A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   RootStaticMeshComponent;                           // 0x0290(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldHandleActorHiddenFlag;                      // 0x0298(0x0001)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_299[0xF];                                      // 0x0299(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AutoDoTransitionByClientDes();
	void AutoDoTransitionByDestruction(const struct FChaosBreakEvent& BreakEvent);
	void AutoDoTransitionByDestructionDeath(const int32& Index_0, const float& ServerTime);
	void AutoDoTransitionByInteract();
	void ClearAndReplaceNiagaraFunc(bool bIsClear);
	void DoAblationMaterialEffectExternal();
	void DoFinishAfterMatEffExternal();
	void DoTransition(class UChaosDestructionComponent* GCComponent);
	void GotoFinalEffect(class UChaosDestructionComponent* DestructionComponent);
	void ListenChaosDesReset();
	void ListenClientChaosDesReset();
	void ListenLevelReset();
	void PlayReplacedEffectsExternal();
	void PlayTransitionEffectExternal();
	void ResetTransition(class UChaosDestructionComponent* GCComponent, bool bIsForceReset);
	void SetOwnerActorHidden(bool bNewHidden);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvironmentActorTransitionComponent">();
	}
	static class UEnvironmentActorTransitionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEnvironmentActorTransitionComponent>();
	}
};

// Class Marvel.Cue_Death
// 0x0010 (0x0CD8 - 0x0CC8)
class ACue_Death : public AMarvelCueNotify_Actor
{
public:
	uint8                                         Pad_CC8[0x10];                                     // 0x0CC8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLivingStateChanged(EPlayerLivingState LivingState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Death">();
	}
	static class ACue_Death* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Death>();
	}
};

// Class Marvel.Cue_Death_134
// 0x0750 (0x1428 - 0x0CD8)
class ACue_Death_134 : public ACue_Death
{
public:
	struct FAttributeModifierParameter            ModifierParameter;                                 // 0x0CD8(0x06B8)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   CacheTarget;                                       // 0x1390(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TextureParamName;                                  // 0x1398(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     SoulMaterial;                                      // 0x13A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagContainer;                                      // 0x13B0(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         ResurrectAbilityID;                                // 0x1418(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141C[0xC];                                     // 0x141C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnterDeathState();
	void K2_OnGameplayFXEvent(const struct FGameplayTag& MatchingTag, const struct FGameplayEventData& Payload);
	void OnEquipStateChange(class AShootingWeapon* Weapon, const struct FMarvelEquipmentTable& WeaponInfo, bool bState);
	void OnWeaponStateChange();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Death_134">();
	}
	static class ACue_Death_134* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Death_134>();
	}
};

// Class Marvel.MarvelHeroVoiceData
// 0x0688 (0x06C0 - 0x0038)
class UMarvelHeroVoiceData final : public UPrimaryDataAsset
{
public:
	TArray<int32>                                 NoTranslationHeroes;                               // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSubclassOf<class UNPCAudioComponent>         NpcAudioComponentClass;                            // 0x0048(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTagContainer>          InterruptBetweenTags;                              // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InterruptWithinTags;                               // 0x0060(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         MaxVoiceNum;                                       // 0x00C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxVoiceDistance;                                  // 0x00CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VoiceFadeoutMs;                                    // 0x00D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VoiceEffectBusName;                                // 0x00D8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FMarvelAudioBusEffectSlots> SkinBusEffects;                                    // 0x00E8(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            ChooseHeroVoices;                                  // 0x0138(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         ChatVoDelay;                                       // 0x0188(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ChatVoTag;                                         // 0x018C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FChatMomentsInfo                       AssaultChatMomentsInfo;                            // 0x0198(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FChatMomentsInfo                       HybridChatMomentsInfo;                             // 0x01B8(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FChatMomentsInfo                       EscortChatMomentsInfo;                             // 0x01D8(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FChatMomentsInfo                       OccupyChatMomentsInfo;                             // 0x01F8(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CommunicationTag;                                  // 0x0218(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, struct FGameplayTagContainer> AbilityBuffTagMap;                                 // 0x0228(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FGameplayTagContainer> ExtraBuffTagMap;                                   // 0x0278(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         TakeBuffVoCooldown;                                // 0x02C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TakeBuffVoGlobalCooldown;                          // 0x02CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ControlledTime;                                    // 0x02D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ApplyShieldTime;                                   // 0x02D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FBannedAbilitiesSetting> AcceptBuffPannedAbilities;                         // 0x02D8(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsOfInterruptVoOnControlledNormal;               // 0x0328(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TagsOfInterruptVoOnControlledForce;                // 0x0390(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HealthPackVoTag;                                   // 0x03F8(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_404[0x4];                                      // 0x0404(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   PriorityOfKillVo;                                  // 0x0408(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         DelayToTryPlayKillVoiceAgain;                      // 0x0418(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RevengeTime;                                       // 0x041C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MultiKillStatInterval;                             // 0x0420(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelAmbientCooldown;                              // 0x0424(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FGameplayTag>        AmbientVoiceMapping;                               // 0x0428(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGameModeDisableVoTags> GameModeDisabledVoTags;                            // 0x0478(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         TargetUnderAttackCooldown;                         // 0x04C8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OccupyingTargetCooldown;                           // 0x04CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemindEscortCooldown;                              // 0x04D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscortingPayloadCooldown;                          // 0x04D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeRunningOutTime;                                // 0x04D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeThresholdForTipBattle;                         // 0x04DC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeNoOccupyForTipBattle;                          // 0x04E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeThresholdForTipAttack;                         // 0x04E4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeThresholdForTipDefend;                         // 0x04E8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeEnemyQuantityAdvantageVoices;                  // 0x04EC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeThresholdForTipCelebrate;                      // 0x04F0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyQuantityAdvantageTriggerRange;                // 0x04F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinEnemyQuantityAdvantageNum;                      // 0x04F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemySpottedCooldown;                              // 0x04FC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemySpottedDistance;                              // 0x0500(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SniperSpottedCooldown;                             // 0x0504(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FGameplayTag>              BuildingsMapping;                                  // 0x0508(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLevelNameContainer> MapsMapping;                                       // 0x0558(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         BuildingSpottedDistance;                           // 0x05A8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuildingSpottedCooldown;                           // 0x05AC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SawDamagedVoicesCooldown;                          // 0x05B0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuildingDestroyedCooldown;                         // 0x05B4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    BuildingHeroIdMapping;                             // 0x05B8(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FAudioTagMapParams>             TagMapWhiteList;                                   // 0x0608(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FAudioTagMapParams>             TagMapBlackList;                                   // 0x0618(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FAudioTagMapParams>             BlockTags;                                         // 0x0628(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 VoiceRadioRtpcName;                                // 0x0638(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VoiceRadioRtpcParamA;                              // 0x0648(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VoiceRadioRtpcParamB;                              // 0x064C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebug;                                            // 0x0650(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_651[0x7];                                      // 0x0651(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DisabledVoTags;                                    // 0x0658(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelHeroVoiceData">();
	}
	static class UMarvelHeroVoiceData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelHeroVoiceData>();
	}
};

// Class Marvel.Config_AeroBase
// 0x1068 (0x1100 - 0x0098)
#pragma pack(push, 0x1)
class alignas(0x10) UConfig_AeroBase : public UMarvelAbilityConfig
{
public:
	int32                                         DefaultFlyModeID;                                  // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDistinguishDefaultState;                          // 0x009C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxFlySpeed;                                       // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFlyingAcceleration;                             // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDecelerationFlying;                         // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC[0x4];                                       // 0x00AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             GroundTraceContext;                                // 0x00B0(0x0F90)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bOpenW;                                            // 0x1040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenA;                                            // 0x1041(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenS;                                            // 0x1042(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenD;                                            // 0x1043(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenSpace;                                        // 0x1044(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenCtrl;                                         // 0x1045(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenCamera;                                       // 0x1046(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFloatOnGround;                                    // 0x1047(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinFloatOnGroundHeight;                            // 0x1048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDistinguishAscendState;                           // 0x104C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104D[0x3];                                     // 0x104D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxAscendSpeedZ;                                   // 0x1050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAscendAccelerationZ;                            // 0x1054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AscendBrakingDecelerationZ;                        // 0x1058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AscendBrakingAccelerationZ;                        // 0x105C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAscendSpeed;                                    // 0x1060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAscendAcceleration;                             // 0x1064(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AscendBrakingDeceleration;                         // 0x1068(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDistinguishHoverState;                            // 0x106C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_106D[0x3];                                     // 0x106D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxHoverSpeed;                                     // 0x1070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHoverAcceleration;                              // 0x1074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoverBrakingDeceleration;                          // 0x1078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDistinguishDescendState;                          // 0x107C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_107D[0x3];                                     // 0x107D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDescendZVelocity;                               // 0x1080(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDescendAccelerationZ;                           // 0x1084(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DescendBrakingDecelerationZ;                       // 0x1088(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DescendBrakingAccelerationZ;                       // 0x108C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDescendXYVelocity;                              // 0x1090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDescendAcceleration;                            // 0x1094(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DescendBrakingDeceleration;                        // 0x1098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDescendHeight;                                  // 0x109C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityBuffId;                                     // 0x10A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTimeToStartFly;                               // 0x10A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FStateChangedTaskParam                 ActiveUserSetting;                                 // 0x10A8(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsDescendAbility;                                 // 0x10D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoEndAbilityOnDescendingEnd;                     // 0x10D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10D2[0x2];                                     // 0x10D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Velocity_Z;                                        // 0x10D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinHeight;                                         // 0x10D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DriverAbilityTag;                                  // 0x10DC(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AutoDescendKeyName;                                // 0x10E8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTimeForAutoDescend;                           // 0x10F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_AeroBase">();
	}
	static class UConfig_AeroBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_AeroBase>();
	}
};
#pragma pack(pop)

// Class Marvel.Config_134_Fly
// 0x0010 (0x1110 - 0x1100)
class UConfig_134_Fly final : public UConfig_AeroBase
{
public:
	float                                         EnterSoulBodyTurnRate;                             // 0x10F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ResurrectAbilityID;                                // 0x10FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FreeFlyModeID;                                     // 0x1100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1104[0xC];                                     // 0x1104(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_134_Fly">();
	}
	static class UConfig_134_Fly* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_134_Fly>();
	}
};

// Class Marvel.MarvelLevelAnimMoveTickManager
// 0x00A8 (0x00E0 - 0x0038)
class alignas(0x10) UMarvelLevelAnimMoveTickManager final : public UWorldSubsystem
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           FramingInitializeTimerHandle;                      // 0x0040(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           FramingDelayTimerHandle;                           // 0x0060(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_78[0x8];                                       // 0x0078(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<TWeakObjectPtr<class ULevelChaosAnimMoveComponent>> GlobalTickComponents;                              // 0x0080(0x0050)(ExportObject, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0[0x10];                                      // 0x00D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelLevelAnimMoveTickManager* GetAnimMoveTickManager(const class UObject* WorldContextObject);

	void DelayInitialFunc();
	void LevelManagerAnimMoveTick();
	void RegisterToDelayInitialGCState(TWeakObjectPtr<class ULevelChaosAnimMoveComponent> TickComp);
	bool RegisterToTick(TWeakObjectPtr<class ULevelChaosAnimMoveComponent> TickComp);
	void UnRegisterToTick(TWeakObjectPtr<class ULevelChaosAnimMoveComponent> TickComp);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelLevelAnimMoveTickManager">();
	}
	static class UMarvelLevelAnimMoveTickManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelLevelAnimMoveTickManager>();
	}
};

// Class Marvel.ModeFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UModeFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModeFunctionLibrary">();
	}
	static class UModeFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModeFunctionLibrary>();
	}
};

// Class Marvel.MarvelImage
// 0x0050 (0x0390 - 0x0340)
class UMarvelImage : public UImage
{
public:
	bool                                          bBrushLazyLoading;                                 // 0x0340(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAggressiveUnload;                                 // 0x0341(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_342[0x6];                                      // 0x0342(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UObject>                 SoftResourceObject;                                // 0x0348(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_378[0x18];                                     // 0x0378(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RequiresResourceLoad();
	void RequiresResourceLoadWithCallback(TDelegate<void(bool Result)> LoadCallback);
	void RequiresResourceUnload();
	void SetScalarParameterValueOnMaterials(const class FName& ParameterName, const float ParameterValue);
	void SetVectorParameterValueOnMaterials(const class FName& ParameterName, const struct FLinearColor& ParameterValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelImage">();
	}
	static class UMarvelImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelImage>();
	}
};

// Class Marvel.GalleryImage
// 0x0080 (0x0410 - 0x0390)
class UGalleryImage final : public UMarvelImage
{
public:
	struct FGalleryMaterialParam                  MaterialParam;                                     // 0x0390(0x0078)(Edit, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     BaseMaterial;                                      // 0x0408(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ResetDynamicMaterial();
	void SetMainTexture(class UTexture* InTexture);
	void UpdateMaterialParameters();
	void UpdateMaterialParameters_Transform();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GalleryImage">();
	}
	static class UGalleryImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGalleryImage>();
	}
};

// Class Marvel.MarvelAeroBaseAbility
// 0x3680 (0x5C00 - 0x2580)
class UMarvelAeroBaseAbility : public UMarvelGameplayAbility
{
public:
	uint8                                         Pad_2580[0x24];                                    // 0x2580(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UMarvelCharacterMovementComponent> CharacterMovement;                                 // 0x25A4(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UMarvelMoveLogicBaseComponent> MarvelMoveLogicComp;                               // 0x25AC(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UMarvelAbilitySystemCom> ASC;                                               // 0x25B4(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AMarvelBaseCharacter>    Owner;                                             // 0x25BC(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UConfig_AeroBase>        MarvelAeroConfig;                                  // 0x25C4(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFlyModeRepInfo                        FlyModeInfo;                                       // 0x25CC(0x0008)(Net, RepNotify, NoDestructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_25D4[0x4];                                     // 0x25D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InputDirectionWhenIntoFreeFly;                     // 0x25D8(0x0018)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_25F0[0x8];                                     // 0x25F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         StartFreeFlyMoveLogicKey;                          // 0x25F8(0x00A0)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_2698[0x18];                                    // 0x2698(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFreeFlyDataContext                    FreeFlyDataContext;                                // 0x26B0(0x1040)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FAscendDataContext                     AscendDataContext;                                 // 0x36F0(0x00B0)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FDescendDataContext                    DescendDataContext;                                // 0x37A0(0x1050)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHoverDataContext                      HoverDataContext;                                  // 0x47F0(0x00A8)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_4898[0x8];                                     // 0x4898(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFloatDataContext                      FloatDataContext;                                  // 0x48A0(0x1040)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bEnableMoveLogicFrame;                             // 0x58E0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOpenAeroTurnWhenActiveAbility;                    // 0x58E1(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCloseAeroTurnWhenEndAbility;                      // 0x58E2(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableMovementModeProtected;                      // 0x58E3(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_58E4[0x4];                                     // 0x58E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EAeroState AeroState)> OnAeroStateChangeDispatcher;                       // 0x58E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	struct FPredictionKey                         AeroStateKey;                                      // 0x58F8(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5998[0x18];                                    // 0x5998(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsMoveDownKeyPressed;                             // 0x59B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsMoveUpKeyPressed;                               // 0x59B1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_59B2[0x24E];                                   // 0x59B2(0x024E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AfterCharacterMovementUpdated(float DeltaSeconds, const struct FVector& OldLocation, const struct FVector& OldVelocity);
	void ApplyInputDirectionOnFloat(float DeltaTime, const float InFloatHeight, struct FVector& InputDirection, float MinFloatHeight);
	void AutoActivateDescend();
	void BeforeCharacterMovementTick(float DeltaSeconds);
	void CheckDescendingEnd(float DeltaTime, const struct FVector& OldLocation, const struct FVector& OldVelocity);
	struct FAeroDataContextBase GetCurrAeroDataContext();
	struct FVector GetFinalInputDirection(float DeltaTime, bool bIsFloating);
	struct FAscendDataContext GetInitedAscendAeroData(const int32 InFlyModeID);
	struct FDescendDataContext GetInitedDescendAeroData(const int32 InFlyModeID);
	struct FFloatDataContext GetInitedFloatAeroData(const int32 InFlyModeID);
	struct FFreeFlyDataContext GetInitedFreeFlyAeroData(const int32 InFlyModeID);
	struct FHoverDataContext GetInitedHoverAeroData(const int32 InFlyModeID);
	struct FVector GetInputDirection(bool bIsFloating);
	bool GroundHeightLessThan(const float InTraceLength, int32 TargetFlyModeID);
	bool IsFloatingOnGround(float InTolerance);
	void K2_OnAeroStateChanged(EAeroState NewAeroState);
	void K2_OnBeginDescendFailed(float Height);
	void K2_OnDescendingEnd(float Height);
	void OnActivateStateEnd(float Time);
	void OnDriverAbilityTagUpdate(const struct FGameplayTag& TagUpdated, bool TagExists);
	void OnMoveDownActionEnd();
	void OnMoveDownActionTrigger();
	void OnMoveForwardReceive(float ScaleValue);
	void OnMovementInputs(uint8 InMovementInputs, float DeltaTime);
	void OnMoveRightReceive(float ScaleValue);
	void OnMoveUPActionEnd();
	void OnMoveUpActionTrigger();
	void OnPostPhysFalling(float DeltaTime, int32 Iterations);
	void OnRep_FlyModeID();
	void RecoverFlyOnChangeAeroAbility();
	void ServerSetMovementInputs(uint8 InMovementInputs);
	void SetReadyToFly(const bool bInReadyToFly);
	void StartDefaultFly();
	void StartFly(int32 InFlyModeID);
	void StopFly(int32 ModeIDToStop);
	float TraceGroundHeight(const float InTraceLength, int32 TargetFlyModeID);

	EAeroState GetAeroStateByModeID(const int32 InFlyModeID) const;
	EAeroState GetCurrAeroState() const;
	int32 GetCurrFlyModeID() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAeroBaseAbility">();
	}
	static class UMarvelAeroBaseAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAeroBaseAbility>();
	}
};

// Class Marvel.MarvelDefaultPlayerController
// 0x0000 (0x0A98 - 0x0A98)
class AMarvelDefaultPlayerController : public APlayerController
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelDefaultPlayerController">();
	}
	static class AMarvelDefaultPlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelDefaultPlayerController>();
	}
};

// Class Marvel.Ability_134_Fly
// 0x00A0 (0x5CA0 - 0x5C00)
class UAbility_134_Fly : public UMarvelAeroBaseAbility
{
public:
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x5C00(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAbilityTask_WaitBindInput*       SpaceInputTask;                                    // 0x5C08(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UConfig_134_Fly*                        AbilityConfig;                                     // 0x5C10(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5C18[0x88];                                    // 0x5C18(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnOwnerStatusChanged(EAdamSoulStatus InStatus);
	void OnResurrectAbilityCocoon(float Delay);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_134_Fly">();
	}
	static class UAbility_134_Fly* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_134_Fly>();
	}
};

// Class Marvel.HeroVoiceManager
// 0x03C0 (0x0870 - 0x04B0)
class AHeroVoiceManager : public AMarvelActorBase
{
public:
	TMulticastInlineDelegate<void(class AActor* Value)> OnVoiceItemLoaded;                                 // 0x04B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FHeroVoiceBuffRequest& BuffRequest)> OnBuffAppliedDelegate;                             // 0x04C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FHeroVoiceBuffRequest& BuffRequest)> OnBuffTakenDelegate;                               // 0x04D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 HeroUID, int32 AbilityID, EAbilityVoiceStage AbilityStage)> OnAbilityStageNotifyDelegate;                      // 0x04E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameplayTag& SummonedTag, class AActor* KillSource, class UMarvelSummonedComponent* SummonedComponent)> OnSummonedDestroyedDelegate;                       // 0x04F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* DamageFrom, class AActor* DamageTo)> OnAudioTakeDamageDelegate;                         // 0x0500(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UHeroVoiceTableManager*                 VoiceTableManager;                                 // 0x0510(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AbilityBuffTags;                                   // 0x0518(0x0068)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ExtraBuffTags;                                     // 0x0580(0x0068)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	class UMarvelHeroVoiceData*                   HeroVoiceData;                                     // 0x05E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Value)> OnAudioCultureChangedDelegate;                     // 0x05F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<class FString, struct FGameplayTagContainer> VoToBuffTags;                                      // 0x0600(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TMap<struct FGameplayTag, struct FGameplayTagContainer> BuffToVoTags;                                      // 0x0650(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TMap<int32, struct FGameplayTag>              SummonedVoiceMapping;                              // 0x06A0(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	class UAudioGlobalSubSystem*                  CachedGlobalSystem;                                // 0x06F0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 CachedViewTarget;                                  // 0x06F8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCurrentActiveLevel;                               // 0x0700(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_701[0x7];                                      // 0x0701(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Value)>    ActiveStateChangedDelegate;                        // 0x0708(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TArray<class UNPCAudioComponent*>             CachedNpcComponents;                               // 0x0718(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TDelegate<void(class AActor* InActor)>        ViewCharacterChangedDelegate;                      // 0x0728(0x0014)(ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_73C[0x4];                                      // 0x073C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDeclarationHolder                     ViewCharacterChangedReceiver;                      // 0x0740(0x0010)(Transient, Protected, NativeAccessSpecifierProtected)
	class UHeroVoiceBuffWatcher*                  BuffWatcher;                                       // 0x0750(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_758[0x118];                                    // 0x0758(0x0118)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void SetVoiceCooldownEnabled(bool bEnabled);

	TArray<struct FHeroVoiceSummonedInfo> GetAllSummonedInfo();
	class UMarvelVoiceItem* GetVoiceItem(int32 InHeroID, int32 InSkinID, int32 InSculptID, class AActor* InActor);
	void GetVoiceRows(int32 HeroID, TMap<int32, struct FMarvelVoiceRow>* OutVoiceRows);
	bool IsCharacterUltimateActive(class AMarvelBaseCharacter* InCharacter);
	bool IsPostingVoice(class AMarvelBaseCharacter* Char);
	void OnEndCharacter(class AActor* InActor);
	void OnGameplayEffectApply(class UAbilitySystemComponent* Target, const struct FGameplayEffectSpecStackHandle& EffectSpecHandle, const struct FActiveGameplayEffectHandle& EffectHandle);
	void OnHeroVoiceItemLoaded(class AActor* InActor);
	void OnNativeAudioCultureChanged(const class FString& InCulture);
	void OnNewCharacter(class AActor* InActor);
	void OnReplayStateChanged(EMarvelAudioReplayState InState);
	void OnSummonedDeath(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnTakeDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar);
	void OnViewTargetChanged(class AActor* ViewTarget);
	void OnVoiceDataLoaded();
	void ReceiveInitialize();
	bool ReceivePostAbilityVoice(const class AMarvelBaseCharacter* Char, int32 AbilityID, EAbilityVoiceStage VoiceStage);
	bool SatisfyTagsConstraint(const class AMarvelBaseCharacter* Char, const class FName& VoiceTagName);
	void StopPostingVoice(class AMarvelBaseCharacter* Char);
	void UpdateHeroSkinBusEffects(class AMarvelBaseCharacter* InCharacter);

	class AActor* GetViewingCharacter() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroVoiceManager">();
	}
	static class AHeroVoiceManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHeroVoiceManager>();
	}
};

// Class Marvel.Config_135
// 0x1008 (0x10A0 - 0x0098)
class UConfig_135 : public UMarvelAbilityConfig
{
public:
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             TraceContext;                                      // 0x00A0(0x0F90)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         ClearWaitingAfterInvisible;                        // 0x1030(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1034[0x4];                                     // 0x1034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  BlockSpawnTags;                                    // 0x1038(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_135">();
	}
	static class UConfig_135* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_135>();
	}
};

// Class Marvel.Marvel3DWidget
// 0x02F8 (0x08A0 - 0x05A8)
#pragma pack(push, 0x1)
class alignas(0x10) UMarvel3DWidget : public UMarvelUserWidget
{
public:
	uint8                                         Pad_5A8[0x8];                                      // 0x05A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                WBP_Arrow;                                         // 0x05B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Anim_OutSight;                                     // 0x05B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetComponent*                       OwnerComponent;                                    // 0x05C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OwnerActor;                                        // 0x05C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 OwnerGameplayActor;                                // 0x05D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelCueNotify_Actor*                 OwnerCueActor;                                     // 0x05D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCueActive;                                        // 0x05E0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E1[0x27];                                     // 0x05E1(0x0027)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldLocation;                                     // 0x0608(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanEditWidgetStyle;                               // 0x0620(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_621[0x7];                                      // 0x0621(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetStyle_3DWidget                  Widget3DStyle;                                     // 0x0628(0x0078)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	struct FWidgetStyle_TransparentWhenNearScreenCenter WidgetStyle_TransparentWhenNearScreenCenter;       // 0x06A0(0x0090)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bAutoAddToWidgetManager;                           // 0x0730(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleConsiderDistanceAndScreenLocation;         // 0x0731(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateWorldLocationEvenWhenInvisible;             // 0x0732(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_733[0xD];                                      // 0x0733(0x000D)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetProjectionContext               CachedProjectionContext;                           // 0x0740(0x00E0)(BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FWidgetProjectionResult                CachedProjectionResult;                            // 0x0820(0x0038)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_858[0xC];                                      // 0x0858(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceToCameraSquared;                           // 0x0864(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWithinDistance;                                   // 0x0868(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleFromCamera;                                // 0x0869(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_86A[0x6];                                      // 0x086A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TraceTargetBones;                                  // 0x0870(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      TraceBlockTypes;                                   // 0x0880(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_890[0x8];                                      // 0x0890(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForceUpdateAddDeclaration();
	void K2_MainStyle();
	void K2_PostProjectionResultCalculated();
	void OwnerCueActiveChanged();
	void OwnerCueRecycled();
	void OwnerCueWhileActive();
	void OwnerGameplayActorChanged();
	void SetWidgetComponentOwner(class UWidgetComponent* InWidgetComponent);
	void UpdateCueActive();
	void UpdateVisibilityForCurrentWidgetStyle();

	bool UsingScreenSpace() const;
	bool UsingWorldSpace() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Marvel3DWidget">();
	}
	static class UMarvel3DWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvel3DWidget>();
	}
};
#pragma pack(pop)

// Class Marvel.Widget_CharacterInfo
// 0x10F0 (0x1990 - 0x08A0)
class UWidget_CharacterInfo : public UMarvel3DWidget
{
public:
	class UMarvelTextBlock*                       TextName;                                          // 0x0898(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 ImgIcon;                                           // 0x08A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget_HpBar*                          HpBarWidget_V3;                                    // 0x08A8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CloseToCameraDistanceThreshold;                    // 0x08B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HideDelay;                                         // 0x08B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerInfoColorAsset*                  OverridePlayerInfoColor;                           // 0x08B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HPDeductColorEnemy;                                // 0x08C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HPDeductColorAlly;                                 // 0x08D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomColorPreview;                               // 0x08E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomColorPreview_IsAlly;                        // 0x08E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E2[0x6];                                      // 0x08E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CustomColorPreview_PlayerName;                     // 0x08E8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   RegisterCueTags;                                   // 0x0900(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_910[0x18];                                     // 0x0910(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UImage*>              GameplayCueWidgets;                                // 0x0928(0x0050)(ExportObject, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<class FName, struct FSlateBrush>         GameplayCueBrushes;                                // 0x0978(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_9C8[0x8];                                      // 0x09C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ESelfSummonedHpBarVisibleRule                 SummonedHpBarVisibleRule;                          // 0x09D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9D1[0x7];                                      // 0x09D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UReactivePropertyComponent*             OwnerProperty;                                     // 0x09D8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTeamComponent*                         OwnerTeamComp;                                     // 0x09E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelPlayerView*                      CachedPlayerView;                                  // 0x09E8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 PreviousActor;                                     // 0x09F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9F8[0xF98];                                    // 0x09F8(0x0F98)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForceHpBarVisible(bool bInVisible);
	void ForceSetViewTargetIsAlly(bool bInIsAlly);
	void OnDeath(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnTagUpdated(const struct FGameplayTag& Tag, bool bInExist);
	void OnTakeDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void SetName(const class FText& InText);
	void SetRecentlyCloseToCamera(bool bClose);
	void SetRecentlyHurt(bool bHurt);
	void SetRecentlyHurtByViewTarget(bool bHurt);
	void UpdateCloseToCamera();
	void UpdateName();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_CharacterInfo">();
	}
	static class UWidget_CharacterInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_CharacterInfo>();
	}
};

// Class Marvel.MarvelEffectGameplayAbility
// 0x0008 (0x10F8 - 0x10F0)
class UMarvelEffectGameplayAbility : public UMarvelBaseGameplayAbility
{
public:
	bool                                          bEndRemoveEffect;                                  // 0x10F0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10F1[0x7];                                     // 0x10F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeginPlay();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelEffectGameplayAbility">();
	}
	static class UMarvelEffectGameplayAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelEffectGameplayAbility>();
	}
};

// Class Marvel.EventDelegateProxy
// 0x0010 (0x0040 - 0x0030)
class UEventDelegateProxy final : public UObject
{
public:
	TMulticastInlineDelegate<void(class UObjectEventType* EventData)> ObjectEventDelegate;                               // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventDelegateProxy">();
	}
	static class UEventDelegateProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventDelegateProxy>();
	}
};

// Class Marvel.Ability_136
// 0x0BF8 (0x1CF0 - 0x10F8)
class UAbility_136 final : public UMarvelEffectGameplayAbility
{
public:
	struct FDashAbilityInfo                       DashInfo;                                          // 0x10F8(0x0BA8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bDashInXYPlane;                                    // 0x1CA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CA1[0x7];                                     // 0x1CA1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetDir;                                         // 0x1CA8(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                TargetPosition;                                    // 0x1CC0(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 Instigator;                                        // 0x1CD8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 OwnerActor;                                        // 0x1CE0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAbilityTask_Dash*                DashTask;                                          // 0x1CE8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void GetDashDirPosition(struct FVector* InDir, struct FVector* InPosition);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_136">();
	}
	static class UAbility_136* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_136>();
	}
};

// Class Marvel.Ability_136_AddMovementInput
// 0x0038 (0x1130 - 0x10F8)
class UAbility_136_AddMovementInput : public UMarvelEffectGameplayAbility
{
public:
	bool                                          bMoveToInstigator;                                 // 0x10F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseHorizontalDir;                                 // 0x10F9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10FA[0x6];                                     // 0x10FA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DistAddInputCurve;                                 // 0x1100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFaceToInstigator;                                 // 0x1108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenDebugLogDraw;                                 // 0x1109(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_110A[0x2];                                     // 0x110A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceThreshold_Horizontal;                      // 0x110C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceThreshold_Vertical;                        // 0x1110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1114[0x4];                                     // 0x1114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  TargetChar;                                        // 0x1118(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APawn*                                  SourceChar;                                        // 0x1120(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 SourceActor;                                       // 0x1128(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AddAccToTarget();
	class AActor* GetSourceActor();
	class APawn* GetSourceCharacter();
	class APawn* GetTargetCharacter();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_136_AddMovementInput">();
	}
	static class UAbility_136_AddMovementInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_136_AddMovementInput>();
	}
};

// Class Marvel.HeroHighLightData
// 0x0018 (0x0048 - 0x0030)
class UHeroHighLightData : public UObject
{
public:
	class UHighLightDataComponent*                OwnerComponent;                                    // 0x0030(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   MarvelCharacter;                                   // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedHeroID;                                    // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerUID;                                         // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AchieveHighLight(int32 HighLightID);
	void Initialize();
	void K2_Initialize();
	void K2_Shutdown();
	void Shutdown();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroHighLightData">();
	}
	static class UHeroHighLightData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeroHighLightData>();
	}
};

// Class Marvel.HighLightData_1027
// 0x00B8 (0x0100 - 0x0048)
class UHighLightData_1027 : public UHeroHighLightData
{
public:
	int32                                         HitCount_102761;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighLightID_102761;                                // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FHitData_102761>   SessionHitInfos;                                   // 0x0050(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	class UMarvelGameplayEventManager*            GlobalEventManager;                                // 0x00A0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8[0x58];                                      // 0x00A8(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnBuffAppliedToTarget(class UAbilitySystemComponent* AbilitySystemCom, const struct FGameplayEffectSpecStackHandle& GameplayEffectSpecHandle, const struct FActiveGameplayEffectHandle& ActiveGameplayEffectHandle);
	void OnPostApplyDamage(class AActor* InSource, class AActor* InTarget, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnRecycleAgentTask(class AActor* SourceActor, class UMarvelGameplayAbility* SourceAbility, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, const struct FEndAgentTaskInfo& EndAgentTaskInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HighLightData_1027">();
	}
	static class UHighLightData_1027* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHighLightData_1027>();
	}
};

// Class Marvel.Config_200001
// 0x0008 (0x00A0 - 0x0098)
class UConfig_200001 final : public UMarvelAbilityConfig
{
public:
	int32                                         ScopeId;                                           // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_200001">();
	}
	static class UConfig_200001* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_200001>();
	}
};

// Class Marvel.Ability_200001
// 0x0000 (0x2580 - 0x2580)
class UAbility_200001 : public UMarvelGameplayAbility
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_200001">();
	}
	static class UAbility_200001* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_200001>();
	}
};

// Class Marvel.MarvelShutdownMgr
// 0x0038 (0x0070 - 0x0038)
class UMarvelShutdownMgr final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void(const class FString& ShutdownReason)> OnAskShutdownDispatcher;                           // 0x0038(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x28];                                      // 0x0048(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelShutdownMgr* GetMarvelShutdownMgr(const class UObject* WorldContextObject);

	void CallEngineQuit(const class FString& ShutdownReason, const int32& Flag);
	void CancelAskForShutdown();
	void NotReadyToShutDown(const class FString& Reason);
	void TryShutdown(const class FString& ShutdownReason, const int32& Flag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelShutdownMgr">();
	}
	static class UMarvelShutdownMgr* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelShutdownMgr>();
	}
};

// Class Marvel.MarvelVehicleAnimInstance
// 0x0050 (0x0480 - 0x0430)
#pragma pack(push, 0x1)
class alignas(0x10) UMarvelVehicleAnimInstance : public UAnimInstance
{
public:
	class UMarvelVehicleAnimData*                 VehicleAnimDataAsset;                              // 0x0428(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelVehicleDynamicAnimData*          VehicleAnimData;                                   // 0x0430(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AControlPointBase*                      PayloadOwner;                                      // 0x0438(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_440[0x38];                                     // 0x0440(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddHitCount(EStrikePartType StrikePart);
	void AddHitOnMesh(const struct FHitResult& InHit);
	void SetSplineIndex(const int32 InIndex);

	void OnFightEnd() const;
	void OnPrepareStart() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelVehicleAnimInstance">();
	}
	static class UMarvelVehicleAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelVehicleAnimInstance>();
	}
};
#pragma pack(pop)

// Class Marvel.Ability_200091
// 0x0000 (0x2580 - 0x2580)
class UAbility_200091 final : public UMarvelGameplayAbility
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_200091">();
	}
	static class UAbility_200091* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_200091>();
	}
};

// Class Marvel.MarvelTriggerEffect_Base
// 0x0018 (0x0048 - 0x0030)
class UMarvelTriggerEffect_Base : public UObject
{
public:
	ETriggerMask                                  TriggerMask;                                       // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTriggerEffectForThreshold;                     // 0x0031(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TriggerThreshold;                                  // 0x0032(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TriggerEffectMode;                                 // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTriggerEffect_Base">();
	}
	static class UMarvelTriggerEffect_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTriggerEffect_Base>();
	}
};

// Class Marvel.MarvelTriggerEffect_Weapon
// 0x0008 (0x0050 - 0x0048)
class UMarvelTriggerEffect_Weapon final : public UMarvelTriggerEffect_Base
{
public:
	uint8                                         StartPosition;                                     // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndPosition;                                       // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Strength;                                          // 0x004A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTriggerEffect_Weapon">();
	}
	static class UMarvelTriggerEffect_Weapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTriggerEffect_Weapon>();
	}
};

// Class Marvel.Ability_201
// 0x0058 (0x25D8 - 0x2580)
class UAbility_201 : public UMarvelGameplayAbility
{
public:
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x2580(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2588[0x50];                                    // 0x2588(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnClickShortcut(const int32 CommID);
	void UpdateInputBinding();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_201">();
	}
	static class UAbility_201* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_201>();
	}
};

// Class Marvel.HitReactAdditiveSubAnimInstance
// 0x03C0 (0x08C0 - 0x0500)
class UHitReactAdditiveSubAnimInstance final : public UMarvelMultiAssetsAnimInstanceBase
{
public:
	bool                                          bUseSpringHit;                                     // 0x0500(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseCustomHitAnimConfig;                           // 0x0501(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_502[0x2];                                      // 0x0502(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelHitAnimConfig                   CustomHitAnimConfig;                               // 0x0504(0x002C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UCurveVector*                           HitAlphaCurve;                                     // 0x0530(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TotalHitTime;                                      // 0x0538(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseSpecifiedFBIK;                                 // 0x053C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_53D[0x3];                                      // 0x053D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     HitBodySpringCurve;                                // 0x0540(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FRuntimeFloatCurve                     HitHeadSpringCurve;                                // 0x05C8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          bUseSimulateHit;                                   // 0x0650(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_651[0x7];                                      // 0x0651(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          HitHead_Seq;                                       // 0x0658(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SevereHitAlpha;                                    // 0x0660(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MediumHitAlpha;                                    // 0x0664(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LightHitAlpha;                                     // 0x0668(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LocalHitAlpha;                                     // 0x066C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          BeingRepulse;                                      // 0x0670(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsBehiting;                                       // 0x0671(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsBehitStart;                                     // 0x0672(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBeCriticalStrike;                                 // 0x0673(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BeHitDirection;                                    // 0x0674(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentBeHitAlpha;                                 // 0x0678(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldPlayHitHeadSeq;                             // 0x067C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          HitReactState_BeHitting_To_Sober;                  // 0x067D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_67E[0x2];                                      // 0x067E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActualHitHeadBodyAlpha;                            // 0x0680(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ActualHitHeadHeadAlpha;                            // 0x0684(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ActualHitBodyBodyAlpha;                            // 0x0688(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ActualHitBodyHeadAlpha;                            // 0x068C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FAnimGraphPBIKEffector>         SpringHitEffectors;                                // 0x0690(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          bShouldEnterSpringHit;                             // 0x06A0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A1[0x3];                                      // 0x06A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KnockOutDir;                                       // 0x06A4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBeingKnockOut;                                    // 0x06A8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A9[0x7];                                      // 0x06A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitAnimContainer                      HitAnims;                                          // 0x06B0(0x00F0)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	float                                         SpringValue;                                       // 0x07A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarvelHitAnimConfig                   HitAnimConfig;                                     // 0x07A4(0x002C)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_7D0[0xF0];                                     // 0x07D0(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBeCriticalStrike(bool Op);
	void SetIsBeHitStart(bool Op);
	void SetIsBeHitting(bool Op);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HitReactAdditiveSubAnimInstance">();
	}
	static class UHitReactAdditiveSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHitReactAdditiveSubAnimInstance>();
	}
};

// Class Marvel.MarvelGameplayTraceType
// 0x0000 (0x0030 - 0x0030)
class UMarvelGameplayTraceType : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayTraceType">();
	}
	static class UMarvelGameplayTraceType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayTraceType>();
	}
};

// Class Marvel.MarvelGameplayTask_Tick
// 0x0018 (0x0090 - 0x0078)
class UMarvelGameplayTask_Tick : public UGameplayTask
{
public:
	TMulticastInlineDelegate<void(float Value)>   OnTick;                                            // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelGameplayTask_Tick* GameplayTask_CustomTick(class UObject* TaskOwner, float Interval);

	void K2_EndTask();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayTask_Tick">();
	}
	static class UMarvelGameplayTask_Tick* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayTask_Tick>();
	}
};

// Class Marvel.MarvelAbilityTask_TickCheck
// 0x0028 (0x00B8 - 0x0090)
class UMarvelAbilityTask_TickCheck final : public UMarvelGameplayTask_Tick
{
public:
	uint8                                         Pad_90[0x18];                                      // 0x0090(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnFinished;                                        // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)

public:
	static class UMarvelAbilityTask_TickCheck* TickUntil(class UObject* TaskOwner, TDelegate<void(float DeltaTime)> TickUntilDelegate, float Interval);
	static class UMarvelAbilityTask_TickCheck* TickWhile(class UObject* TaskOwner, TDelegate<void(float DeltaTime)> TickWhileDelegate, float Interval);

	void CheckCondition(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_TickCheck">();
	}
	static class UMarvelAbilityTask_TickCheck* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_TickCheck>();
	}
};

// Class Marvel.MarvelGameplay_LineTraceType
// 0x0000 (0x0030 - 0x0030)
class UMarvelGameplay_LineTraceType : public UMarvelGameplayTraceType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplay_LineTraceType">();
	}
	static class UMarvelGameplay_LineTraceType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplay_LineTraceType>();
	}
};

// Class Marvel.FootIKSubAnimInstance
// 0x0090 (0x04C0 - 0x0430)
class UFootIKSubAnimInstance final : public UAnimInstance
{
public:
	class FName                                   LeftFootName;                                      // 0x0428(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RightFootName;                                     // 0x0434(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   LeftBallName;                                      // 0x0440(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RightBallName;                                     // 0x044C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InterpSpeed;                                       // 0x0458(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InterpRotationSpeed;                               // 0x045C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxRollAngle;                                      // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxPitchAngle;                                     // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LeftFootOffset;                                    // 0x0468(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RightFootOffset;                                   // 0x046C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PelvisOffset;                                      // 0x0470(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_474[0x4];                                      // 0x0474(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               LeftFootRotation;                                  // 0x0478(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               RightFootRotation;                                 // 0x0490(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         FootOffsetMin;                                     // 0x04A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FootOffsetMax;                                     // 0x04AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMovementMode                                 MovementMode;                                      // 0x04B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4B1[0x3];                                      // 0x04B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MoveSpeed3D;                                       // 0x04B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4B8[0x8];                                      // 0x04B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FootIKSubAnimInstance">();
	}
	static class UFootIKSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFootIKSubAnimInstance>();
	}
};

// Class Marvel.MarvelGameplayEffectSkillCost
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectSkillCost final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectSkillCost">();
	}
	static class UMarvelGameplayEffectSkillCost* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectSkillCost>();
	}
};

// Class Marvel.MarvelGameplay_PhysicsFrustumTraceType
// 0x0000 (0x0030 - 0x0030)
class UMarvelGameplay_PhysicsFrustumTraceType : public UMarvelGameplay_LineTraceType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplay_PhysicsFrustumTraceType">();
	}
	static class UMarvelGameplay_PhysicsFrustumTraceType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplay_PhysicsFrustumTraceType>();
	}
};

// Class Marvel.ChaosDestructionActor
// 0x08C0 (0x0E50 - 0x0590)
class alignas(0x10) AChaosDestructionActor : public AGeometryCollectionActor
{
public:
	uint8                                         Pad_590[0x18];                                     // 0x0590(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 BreakIndex, const struct FVector& ParticleLocation)> OnMarvelChaosDesBreakInfoDispatcher;               // 0x05A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float BrokenDegree)> OnMarvelChaosDesBrokenDegreeDispatcher;            // 0x05B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMarvelChaosDesTraceCacheEndDelegate;             // 0x05C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnTriggerCollapseEvent;                            // 0x05D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	ERendererCustomDepthPassType                  CustomDepthStencilType;                            // 0x05E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E9[0x3];                                      // 0x05E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RenderStencilValue;                                // 0x05EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GenImpulseFieldScale;                              // 0x05F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F4[0x4];                                      // 0x05F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AChaosFieldActor*                       FieldNodeActor;                                    // 0x05F8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<uint32, class AChaosFieldActor*>         ImpulseFieldNodeActors;                            // 0x0600(0x0050)(UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<int32, class UMaterialInterface*>        DesMatOriInstances;                                // 0x0650(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, struct FChangeDesMaterialParam>   ChangeDestructionMatParams;                        // 0x06A0(0x0050)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	bool                                          bIsUseNewPlaybackWay;                              // 0x06F0(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceCacheRunType                            TraceCacheMode;                                    // 0x06F1(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6F2[0x2];                                      // 0x06F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TraceRecordGap;                                    // 0x06F4(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceCacheMaxTime;                                 // 0x06F8(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseFinalSpeed;                                  // 0x06FC(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6FD[0x3];                                      // 0x06FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, EPlaybackEndObjType>              ParticleBreakToType;                               // 0x0700(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, struct FChaosTraceConfig>         TraceConfig;                                       // 0x0750(0x0050)(Edit, NativeAccessSpecifierPublic)
	float                                         EmitterPreEffectTime;                              // 0x07A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmitterEffectLowerTime;                            // 0x07A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FChaosGCPhysicsConstraintConfData> GCPhysicsConstraint;                               // 0x07A8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         EmitterPreStartFrame;                              // 0x07F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7FC[0x4];                                      // 0x07FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FChaosTraceRecordInfo>     TraceCacheData;                                    // 0x0800(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bForceMoveCharacterToPlatform;                     // 0x0850(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_851[0x3];                                      // 0x0851(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TraceCachePlayEndTime;                             // 0x0854(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TracePlatform;                                     // 0x0858(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TracePlatformDirection;                            // 0x0860(0x0018)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TracePlatformDist;                                 // 0x0878(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TracePlatformEscapeDistance;                       // 0x087C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceTeleportToPlatform;                          // 0x0880(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_881[0x3F];                                     // 0x0881(0x003F)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnClientOnlyActorBreak;                            // 0x08C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UAffectedStaticMeshComponent*           AffectSMComponent;                                 // 0x08D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<TWeakObjectPtr<class AAffectStaticMeshBaseActor>, struct FGCLinkInfo> GCLinkAffectSM;                                    // 0x08D8(0x0050)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TSet<int32>                                   CachePlayedItems;                                  // 0x0928(0x0050)(NativeAccessSpecifierPublic)
	bool                                          bIsClientOneBeatGC;                                // 0x0978(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOneBeatGCFlag;                                  // 0x0979(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_97A[0x6];                                      // 0x097A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AliveStage;                                        // 0x0980(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UChaosDestructionComponent*             ChaosDestructionComponent;                         // 0x0990(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 SubPartStaticMeshComponentName;                    // 0x0998(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A8[0x14];                                     // 0x09A8(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayerAttackInterval;                              // 0x09BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C0[0x50];                                     // 0x09C0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AChaosDestructionActor>> LinkGCTypes;                                       // 0x0A10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class AChaosClientDesActor*>           WeakLinkingClientDesActors;                        // 0x0A20(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A30[0x10];                                     // 0x0A30(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bMovable;                                          // 0x0A40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRenderOpSS;                                       // 0x0A41(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSyncFragmentVfxCulling;                           // 0x0A42(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A43[0x5];                                      // 0x0A43(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UChaosDesAchieveDataComponent*          AchieveDataSMComponent;                            // 0x0A48(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A50[0x38];                                     // 0x0A50(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class AChaosDestructionActor*                 SaveBPActor;                                       // 0x0A88(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FChaosTraceCacheRuntimeData>    TraceCacheRuntimeData;                             // 0x0A90(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FChaosTraceCPlaybackSyn>        TracePlaybackSynTimeStamp;                         // 0x0AA0(0x0010)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPrivate)
	TArray<struct FChaosTraceCPlaybackSyn>        TracePlaybackSynTimeStampCopy;                     // 0x0AB0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TSet<int32>                                   TraceDiffIDs;                                      // 0x0AC0(0x0050)(NativeAccessSpecifierPrivate)
	TMap<int32, struct FChaosRunTimeSubPhysicsConstraint> SubParticlePhysCons;                               // 0x0B10(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<struct FChaosEmitterEffectPreInfo>     EmitterEffectPreData;                              // 0x0B60(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B70[0x30];                                     // 0x0B70(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHasChaosParticleAnimationData;                    // 0x0BA0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_BA1[0x2AF];                                    // 0x0BA1(0x02AF)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitAutoGenAsyncFields();
	void InitAutoGenSyncFields();
	void MulticastLeaveAttachState();
	void OnCurrentStageChanged(const class FString& StageName);
	void OnLevelStateChanged();
	void OnLikeMapLoaded();
	void OnMatchStateChanged(EMatchState MatchState);
	void OnRep_TracePlaybackSynTimeStamp();
	void OnReplayGotoTimeFinished();
	void OnReplayStateChanged(EMarvelReplayState Value);
	void PlayEffectByField(const struct FVector& HitImpactPoint);
	void SetIsForceNeedPostProcess(bool bFlag);
	void SetIsImmunity(bool bFlag, bool bLock);
	void TryInitTraceCacheTestCaseData();
	void UnLockForceNeedPostProcess();
	void UnLockSetImmunity();
	void UpdateSmallParticleZone();

	bool CanBeValidDetailMode() const;
	void DisplayGeometryCollectionGroupInfo() const;
	void DisplayGeometryCollectionInfo() const;
	class UChaosDestructionComponent* GetChaosDestructionComponent() const;
	struct FGameplayTag GetHitImpactCueTag() const;
	bool HasBeenFractured() const;
	bool IsAlive() const;
	bool IsChaosDesImmunity() const;
	bool IsGeometryCollectionImmunity() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosDestructionActor">();
	}
	static class AChaosDestructionActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AChaosDestructionActor>();
	}
};

// Class Marvel.ChaosClientDesActor
// 0x0070 (0x0EC0 - 0x0E50)
class AChaosClientDesActor final : public AChaosDestructionActor
{
public:
	uint8                                         Pad_E50[0x4];                                      // 0x0E50(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CharacterOverlapImpulseFieldID;                    // 0x0E54(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleOverlapImpulseFieldID;                     // 0x0E58(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClientGCActorHitType                         ClientGCActorHitType;                              // 0x0E5C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttachBlood;                                       // 0x0E60(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E64[0x8];                                      // 0x0E64(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PossibleNumberOfHits;                              // 0x0E6C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E70[0x4];                                      // 0x0E70(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int16                                         ClientGCActorID;                                   // 0x0E74(0x0002)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceIgnoreGCPhysics;                             // 0x0E76(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E77[0x1];                                      // 0x0E77(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* InActor)> OnClientDesActorLeaveAttachEvent;                  // 0x0E78(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   ChaosAttachStaticMeshComponent;                    // 0x0E88(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E90[0x2];                                      // 0x0E90(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsClientOnly;                                     // 0x0E92(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanHitByAbilityRuntime;                           // 0x0E93(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsImmuneToAbility;                                // 0x0E94(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanHitByAbility;                                  // 0x0E95(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanBeCrashed;                                     // 0x0E96(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E97[0x19];                                     // 0x0E97(0x0019)(Fixing Size After Last Property [ Dumper-7 ])
	class UEnvironmentActorTransitionComponent*   OwningTransitionComponent;                         // 0x0EB0(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAttachState;                                      // 0x0EB8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EB9[0x7];                                      // 0x0EB9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CheckMeshVisibilityAndRepair();
	void ClientOnClientOnlyTakeDamage(class AActor* InSourceAvatar, float InDamage);
	void DoBreakSelf();
	void DoBreakSelfBySyncGC(bool bIsFromCollapse, class AChaosDestructionActor* SourceSyncGC);
	void DoHitGC(class AActor* InSourceAvatar);
	class UEnvironmentActorTransitionComponent* GetLocalTransitionComponent();
	void OnChaosAttachStaticMeshBeginOverlap(class UPrimitiveComponent* OverlappedComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnChaosAttachStaticMeshHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnHitByOtherParticle(class UPrimitiveComponent* OtherComp, const struct FHitResult& HitResult);
	void OnRep_AttachState();
	void ResetClientGCActor();
	void ResetLocalTransition();
	void ServerOnTakeDamage(class AActor* InSourceAvatar, float InDamage);
	void SetHitByAbilityRuntime(bool bInHitByAbility);
	void SetStaticMeshDisabled(bool bHiddenIn);
	void TriggerLocalTransition();

	bool CanBeCrashed() const;
	bool CanHitByAbility() const;
	bool CanHitByAbilityConfig() const;
	bool IsAttachMeshVisible() const;
	bool IsClientOnly() const;
	bool IsDamageValid(float InDamage) const;
	bool IsImmuneToAbility() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosClientDesActor">();
	}
	static class AChaosClientDesActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AChaosClientDesActor>();
	}
};

// Class Marvel.MarvelGameplay_SignalPhysicsFrustumTraceType
// 0x0000 (0x0030 - 0x0030)
class UMarvelGameplay_SignalPhysicsFrustumTraceType final : public UMarvelGameplay_PhysicsFrustumTraceType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplay_SignalPhysicsFrustumTraceType">();
	}
	static class UMarvelGameplay_SignalPhysicsFrustumTraceType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplay_SignalPhysicsFrustumTraceType>();
	}
};

// Class Marvel.MarvelAOInfoData
// 0x0030 (0x0060 - 0x0030)
class UMarvelAOInfoData final : public UAnimMetaData
{
public:
	int32                                         PieceCount;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        GridElements;                                      // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         NumX;                                              // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumY;                                              // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinX;                                              // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxX;                                              // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinY;                                              // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxY;                                              // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	struct FVector GetGridSamplesFromBlendInput(const struct FVector& BlendInput);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAOInfoData">();
	}
	static class UMarvelAOInfoData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAOInfoData>();
	}
};

// Class Marvel.MarvelGameplayEventManager
// 0x05A8 (0x05E0 - 0x0038)
class UMarvelGameplayEventManager final : public UWorldSubsystem
{
public:
	TMulticastInlineDelegate<void(class AActor* Objective, float Progress)> OnProgressChangedDispatcher;                       // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Instigator, class AActor* Target, struct FAttributeModifierHandle& ModifierParameterHandle, struct FGlobalEventExtraData& ExtraData)> OnActorTakeDamageDispatcher;                       // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Instigator, class AActor* Target, struct FAttributeModifierHandle& ModifierParameterHandle, struct FGlobalEventExtraData& ExtraData)> OnActorTakeDamageDispatcherOnChaos;                // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Instigator, class AActor* Target, struct FAttributeModifierHandle& ModifierParameterHandle, struct FGlobalEventExtraData& ExtraData)> OnActorTakeHealthDispatcher;                       // 0x0068(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_78[0x18];                                      // 0x0078(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FDataBaseHitInfoToPy& BattleContext)> OnAbilityLogHitDispatcher;                         // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Instigator, class AActor* Target, struct FAttributeModifierHandle& ModifierParameterHandle, struct FGlobalEventExtraData& ExtraData, int32 AbilityShieldID, int32 ShieldSessionID, int32 AbilitySourceID, int32 SourceSessionID)> OnActorDefendDamageDispatcher;                     // 0x00A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Killer, class AActor* Traget, struct FAttributeModifierHandle& ModifierParameterHandle, struct FGlobalEventExtraData& ExtraData)> OnActorWillDeathDispatcher;                        // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Killer, class AActor* Traget, struct FAttributeModifierHandle& ModifierParameterHandle, struct FGlobalEventExtraData& ExtraData)> OnActorDeathDispatcher;                            // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Killer, class AActor* Traget, struct FAttributeModifierHandle& ModifierParameterHandle, struct FGlobalEventExtraData& ExtraData)> OnActorDeathCueDispatcher;                         // 0x00D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Killer, class AActor* Traget, struct FAttributeModifierHandle& ModifierParameterHandle, struct FGlobalEventExtraData& ExtraData)> OnActorPreDeathDispatcher;                         // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility)> OnActorActivateAbilityDispatcher;                  // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility)> OnActorPreActivateAbilityDispatcher;               // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility)> OnActorAbilityMissileDispatcher;                   // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility)> OnActorAbilityBreakDispatcher;                     // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility)> OnActorAbilityCancelDispatcher;                    // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, int32 AbilityID, float NewCooldown, class UMarvelGameplayAbility* SourceAbility)> OnActorAbilityRefreshDispatcher;                   // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility)> OnActorEndAbilityDispatcher;                       // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, class AActor* Target, int32 AbilityID, bool bHit, bool bIsCritHit, struct FGlobalEventExtraData& ExtraData)> OnActorWeaponAmmoUseDispatcher;                    // 0x0160(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, class AActor* Causer, class AActor* Target, struct FGameplayEffectSpecStackHandle& EffectSpecHandle, const struct FActiveGameplayEffectHandle& EffectHandle)> OnActorGameplayEffectAppliedDispatcher;            // 0x0170(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UAbilitySystemComponent* ASC, struct FGameplayEffectSpecStackHandle& GameplayEffectSpecHandle, const struct FActiveGameplayEffectHandle& ActiveGameplayEffectHandle)> OnEffectAppliedDispatcher;                         // 0x0180(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, const class FString& HealPackName, int32 HealPackType, float ChargeTime, float HealPackTreat, float HealthBeforUse)> OnActorUseHealPackDispatcher;                      // 0x0190(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, struct FAttributeModifierHandle& ModifierParameterHandle, struct FGlobalEventExtraData& ExtraData)> OnActorEnergyChangedDispatcher;                    // 0x01A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, struct FAttributeModifierHandle& ModifierParameterHandle, struct FGlobalEventExtraData& ExtraData)> OnActorEnergyFullDispatcher;                       // 0x01B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, struct FAttributeModifierHandle& ModifierParameterHandle, struct FGlobalEventExtraData& ExtraData)> OnActorEnergyEmptyDispatcher;                      // 0x01C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Instigator, class AActor* RebornActor)> OnActorRebornDispatcher;                           // 0x01D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Instigator, class AActor* Causer, class AActor* Target, struct FGameplayEffectSpecStackHandle& EffectSpecHandle, const struct FActiveGameplayEffectHandle& ActiveHandle)> OnActorGameplayEffectRemovedDispatcher;            // 0x01E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F0[0x28];                                     // 0x01F0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UAbilitySystemComponent* ASC, struct FActiveGameplayEffect& Age)> OnAGERemoveDispatcher;                             // 0x0218(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* Killer, class AMarvelPlayerState* BeKiller, int32 SourceHeroID, int32 TargetHeroID, EMarvelKillReasonFlags KillReason)> OnPlayerKillDispatcher;                            // 0x0228(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* Killer, class AMarvelPlayerState* BeKiller, int32 SourceHeroID, int32 TargetHeroID, int32 ConsecutiveKillCount, EMarvelKillReasonFlags KillReason)> OnPlayerConsecutiveKillDispatcher;                 // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* SourceActor, class UMarvelGameplayAbility* SourceAbility, class AActor* Projectile, struct FMarvelTargetActorGenerateInfo& GenerateInfo)> OnProjectileBeginDispatcher;                       // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, struct FMarvelTargetActorGenerateInfo& GenerateInfo, ETargetActorType TargetActorType, int32 AbilityID)> OnActorPreForceChangedDispatcher;                  // 0x0258(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, struct FMarvelTargetActorGenerateInfo& GenerateInfo, ETargetActorType TargetActorType, int32 AbilityID)> OnActorPostForceChangedDispatcher;                 // 0x0268(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* SourceActor, class UMarvelGameplayAbility* SourceAbility, class AActor* Scope, struct FMarvelTargetActorGenerateInfo& GenerateInfo)> OnScopeBeginDispatcher;                            // 0x0278(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* SourceActor, class UMarvelGameplayAbility* SourceAbility, class AActor* Summoned, struct FMarvelTargetActorGenerateInfo& GenerateInfo)> OnSummonedBeginDispatcher;                         // 0x0288(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, struct FAttributeModifierHandle& ModifierParameterHandle)> OnShieldChangedDispatcher;                         // 0x0298(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, struct FAttributeModifierHandle& ModifierParameterHandle)> OnNotTreatShieldChangedDispatcher;                 // 0x02A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, struct FAttributeModifierHandle& ModifierParameterHandle)> OnArmorChangedDispatcher;                          // 0x02B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, struct FAttributeModifierHandle& ModifierParameterHandle, struct FNoTreatShieldChangeEventExtraData& ExtraData)> OnNotTreatArmorChangedDispatcher;                  // 0x02C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, struct FAttributeModifierHandle& ModifierParameterHandle)> OnHealthChangedDispatcher;                         // 0x02D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InstigateBuffActor, class AActor* TakeBuffActor, class AActor* Target, struct FBuffExtraAttributeData& BuffData)> OnBuffInstigateExtraAttributeChangeDispatcher;     // 0x02E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, struct FAttributeModifierHandle& ModifierParameterHandle, struct FNoTreatShieldChangeEventExtraData& ExtraData)> OnActorNoTreatShieldChangedDispatcher;             // 0x02F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source)> OnActorChangeToDispatcher;                         // 0x0308(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, class UMarvelGameplayAbility* SourceAbility, struct FMarvelTargetActorGenerateInfo& GenerateInfo, struct FEndAgentTaskInfo& EndAgentTaskInfo)> OnBaseTargetActorEndAgentTaskDispatcher;           // 0x0318(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PlayerState, class AMarvelBaseCharacter* Character)> OnPossessCharacterDispatcher;                      // 0x0328(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PlayerState, class AMarvelBaseCharacter* Character)> OnPossessCharacterPostDispatcher;                  // 0x0338(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, int32 NewSculptID)> OnActorSculptChangedDispatcher;                    // 0x0348(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, int32 OldSculptID, int32 NewSculptID)> OnActorSculptChangedDispatcherOld;                 // 0x0358(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, int32 AbilityID, struct FHitResult& HitResult, bool IsHit)> OnAbilityAdsorbResultDispatcher;                   // 0x0368(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, class UMarvelGameplayAbility* SourceAbility, struct FMarvelTargetActorGenerateInfo& GenerateInfo, struct FEndAgentTaskInfo& EndAgentTaskInfo)> OnTargetActorRecycleAgentTaskDispatcher;           // 0x0378(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, class AActor* Target, int32 AbilityID, float Value, float DamageValue)> OnActorDamageToCureDispatcher;                     // 0x0388(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Instigator, class AActor* Target, struct FAttributeModifierHandle& ModifierParameterHandle)> OnActorPostTakeDamageDispatcher;                   // 0x0398(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Instigator, class AActor* Target, class UGameplayAbility* SourceAbility, struct FMarvelTargetActorGenerateInfo& GenerateInfo)> OnActorPostTakeDamageOnChaosDispatcher;            // 0x03A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, class AActor* Weapon, class UGameplayAbility* SourceAbility, struct FMarvelTargetActorGenerateInfo& GenerateInfo, int32 Count)> OnWeaponAmmoEndDispatcher;                         // 0x03B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, class UMarvelGameplayAbility* SourceAbility, const class FString& TraceID, struct FMarvelTargetActorGenerateInfo& GenerateInfo)> OnPostTraceSpecDispatcher;                         // 0x03C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PlayerState, class AMarvelBaseCharacter* Character)> OnCharacterDestroyDispatcher;                      // 0x03D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Destruction, float FinalDamage, struct FAttributeModifierHandle& ModifierParameterHandle, struct FDestructionExtraInfo& DestructionExtraInfo)> OnDestructionTakeDamageDispatcher;                 // 0x03E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Destruction, const class FString& LastLevel, const class FString& CurrentLevel)> OnPresetDestructionLevelChangedDispatcher;         // 0x03F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UMarvelGameplayAbility* SourceAbility)> OnGiveAbilityDispatcher;                           // 0x0408(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UMarvelGameplayAbility* SourceAbility)> OnDestroyAbilityDispatcher;                        // 0x0418(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& HealPackName, class AActor* HealPackSpawner)> OnHealPackRefreshedDispatcher;                     // 0x0428(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FActionLogAbilityRecord& AbilityRecord)> OnHeroAbilityUseDispatcher;                        // 0x0438(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility)> OnNotHeroAbilityUseDispatcher;                     // 0x0448(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerUID, struct FAbilityExtraBaseInfo& BaseInfo, const class FString& ExtraKey, struct FAbilityExtraHitRate& ExtraHitRate)> OnAbilityExtraHitRateDispatcher;                   // 0x0458(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Instigator, class AActor* Target, struct FAttributeModifierParameter& ModifierParameter)> OnActorResurrectedDispatcher;                      // 0x0468(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerUID, int32 HeroID, class AActor* Target)> OnSpraySuccessDispatcher;                          // 0x0478(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, struct FGameplayEffectSpec& BlockedSpec)> OnSummonerProtectedDispatcher;                     // 0x0488(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, struct FGameplayEffectSpecStackHandle& BlockedSpec, float Damage)> OnBuffImmunityProtectedDispatcher;                 // 0x0498(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, float MaxLinkCount, float DisconnectCount)> OnVenomCorrosionBreakDispatcher;                   // 0x04A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, const TArray<class AMarvelBaseCharacter*>& Characters)> OnActorForceChangedByPortalDispatcher;             // 0x04B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, class AActor* Target)> OnActorBounceAnkaDamage;                           // 0x04C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, float Damage)> OnAbility103761AbsorbDamage;                       // 0x04D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, class AMarvelBaseCharacter* DeadCharacter, int32 KillUniqueID)> OnAbility104161Kill;                               // 0x04E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, int32 KillCount, int32 RefreshCount)> OnAbility104161KillEnd;                            // 0x04F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source, float Damage)> SpecialDamageTakenDispatcher;                      // 0x0508(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_518[0x10];                                     // 0x0518(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 IgnoreAbilityList;                                 // 0x0528(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TMap<class FString, struct FMarvelTargetActorGenerateInfo> GenerateMap;                                       // 0x0538(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_588[0x8];                                      // 0x0588(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TWeakObjectPtr<class AActor>, TMulticastInlineDelegate<void(class AActor* Source, struct FMarvelTargetActorGenerateInfo& GenerateInfo, ETargetActorType TargetActorType, int32 AbilityID)>> PostForceChangeDelegateMaps;                       // 0x0590(0x0050)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UMarvelGameplayEventManager* Get(class UObject* WCO);

	void K2_OnActorAttributeChanged(class AActor* Killer, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void K2_OnActorDeath(class AActor* Killer, class AActor* Traget, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void K2_OnActorDefendDamage(class AActor* Instigator, class AActor* Target, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData, int32 AbilityShieldID, int32 ShieldSessionID, int32 AbilitySourceID, int32 SourceSessionID);
	void K2_OnActorEnergeChange(class AActor* Source, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void K2_OnActorGameplayEffectRemoved(class AActor* Target, const struct FActiveGameplayEffect& ActiveGameplayEffect);
	void K2_OnActorPreDeath(class AActor* Killer, class AActor* Traget, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void K2_OnActorReborn(class AActor* Instigator, class AActor* RebornActor);
	void K2_OnActorTakeDamage(class AActor* Instigator, class AActor* Target, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void K2_OnActorTakeHealth(class AActor* Instigator, class AActor* Target, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void K2_OnHealPackUse(class AActor* Source, const class FString& HealPackName, int32 HealPackType, float ChargeTime, float HealPackTreat, float HealthBeforUse);
	void K2_OnPlayerConsecutiveKill(class AMarvelPlayerState* Killer, class AMarvelPlayerState* BeKiller, int32 SourceHeroID, int32 TargetHeroID, int32 ConsecutiveKillCount, EMarvelKillReasonFlags KillReason);
	void K2_OnPlayerKill(class AMarvelPlayerState* Killer, class AMarvelPlayerState* BeKiller, int32 SourceHeroID, int32 TargetHeroID, EMarvelKillReasonFlags KillReason);
	void K2_OnProgressChanged(class AActor* Objective, float Progress);
	void K2_OnWeaponAmmoUse(class AActor* Source, class AActor* Target, int32 AbilityID, bool bHit, bool bIsCritHit, const struct FGlobalEventExtraData& ExtraData);
	void OnAbilityExtraHitRate(int32 PlayerUID, const struct FAbilityExtraBaseInfo& BaseInfo, const class FString& String, const struct FAbilityExtraHitRate& ExtraHitRate);
	void OnActorAbilityAdsorbResult(class AActor* SourceActor, int32 AbilityID, const struct FHitResult& HitResult, bool IsHit);
	void OnActorChangeTo(class AActor* Source);
	void OnActorDamageToCure(class AActor* Source, class AActor* Target, int32 AbilityID, float Value, float DamageValue);
	void OnActorForceChangedByPortal(class AActor* Source, const TArray<class AMarvelBaseCharacter*>& Characters);
	void OnActorPostForceChanged(class AActor* SourceActor, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, ETargetActorType TargetActorType, int32 AbilityID);
	void OnActorPostTakeDamage(class AActor* Instigator, class AActor* Target, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnActorPostTakeDamageOnChaos(class AActor* Instigator, class AActor* Target, class UGameplayAbility* SourceAbility, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnActorPostTraceSpec(class AActor* Source, class UMarvelGameplayAbility* SourceAbility, const class FString& TraceUniqueID, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnActorPreForceChanged(class AActor* SourceActor, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, ETargetActorType TargetActorType, int32 AbilityID);
	void OnActorReborn(class AActor* Instigator, class AActor* RebornActor);
	void OnActorResurrected(class AActor* Instigator, class AActor* Target, const struct FAttributeModifierParameter& ModifierParameter);
	void OnActorSculptChanged(class AActor* Source, int32 SculptID);
	void OnActorSculptChangedOld(class AActor* Source, int32 OldSculptID, int32 SculptID);
	void OnActorWeaponAmmoEnd(class AActor* Source, class AActor* Target, class UGameplayAbility* SourceAbility, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, int32 Count);
	void OnBaseTargetActorEndAgentTask(class AActor* Source, class UMarvelGameplayAbility* SourceAbility, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, const struct FEndAgentTaskInfo& EndAgentTaskInfo);
	void OnBuffInstigateExtraAttributeChange(class AActor* InstigateBuffActor, class AActor* TakeBuffActor, class AActor* Target, struct FBuffExtraAttributeData* BuffData);
	void OnDestroyAbility(class UMarvelGameplayAbility* SourceAbility);
	void OnDestroyCharacter(class AMarvelPlayerState* PlayerState, class AMarvelBaseCharacter* Character);
	void OnGiveAbility(class UMarvelGameplayAbility* SourceAbility);
	void OnHealPackRefreshed(const class FString& HealPackName, class AActor* HealthPackSpawner);
	void OnHealPackUse(class AActor* Source, const class FString& HealPackName, int32 HealPackType, float ChargeTime, float HealPackTreat, float HealthBeforUse);
	void OnHeroAbilityUse(const struct FActionLogAbilityRecord& AbilityRecord);
	void OnNotHeroAbilityUse(class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility);
	void OnPlayerConsecutiveKill(class AMarvelPlayerState* Killer, class AMarvelPlayerState* BeKiller, int32 SourceHeroID, int32 TargetHeroID, int32 ConsecutiveKillCount, EMarvelKillReasonFlags KillReason);
	void OnPlayerKill(class AMarvelPlayerState* Killer, class AMarvelPlayerState* BeKiller, int32 SourceHeroID, int32 TargetHeroID, EMarvelKillReasonFlags KillReason);
	void OnPresetDestructionLevelChanged(class AActor* Destruction, const class FString& LastLevel, const class FString& CurrentLevel);
	void OnProgressChanged(class AActor* Objective, float Progress);
	void OnProjectileBegin(class AActor* SourceActor, class UMarvelGameplayAbility* SourceAbility, class AActor* Projectile, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnScopeBegin(class AActor* SourceActor, class UMarvelGameplayAbility* SourceAbility, class AActor* Scope, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnSpraySuccess(class AActor* SourceActor, class AActor* InActor);
	void OnSummonedBegin(class AActor* SourceActor, class UMarvelGameplayAbility* SourceAbility, class AActor* Summoned, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnSummonerProtected(class AActor* Source, const struct FGameplayEffectSpec& BlockedSpec);
	void OnTargetActorRecycleAgentTask(class AActor* Source, class UMarvelGameplayAbility* SourceAbility, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, const struct FEndAgentTaskInfo& EndAgentTaskInfo);
	void OnVenomCorrosionBreak(class AActor* Source, float MaxCount, float DisconnectCount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEventManager">();
	}
	static class UMarvelGameplayEventManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEventManager>();
	}
};

// Class Marvel.InstantAmmoTableFuncLibrary
// 0x0000 (0x0030 - 0x0030)
class UInstantAmmoTableFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static TArray<int32> GetAllInstantAmmoDataKey(const int32 HeroID);
	static struct FMarvelInstantAmmoTable GetInstantAmmoData(const int32 InstantAmmoID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InstantAmmoTableFuncLibrary">();
	}
	static class UInstantAmmoTableFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInstantAmmoTableFuncLibrary>();
	}
};

// Class Marvel.Ability_202
// 0x0010 (0x2590 - 0x2580)
class UAbility_202 : public UMarvelGameplayAbility
{
public:
	struct FGameplayTag                           IgnoreCDTag;                                       // 0x2580(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258C[0x4];                                     // 0x258C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateCommunication(const int32 CommID);
	void TryPlayMontage(const int32 RowID);
	void UpdateInputBinding();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_202">();
	}
	static class UAbility_202* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_202>();
	}
};

// Class Marvel.MarvelGameplay_SprayPaintLineTraceType
// 0x0000 (0x0030 - 0x0030)
class UMarvelGameplay_SprayPaintLineTraceType final : public UMarvelGameplay_LineTraceType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplay_SprayPaintLineTraceType">();
	}
	static class UMarvelGameplay_SprayPaintLineTraceType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplay_SprayPaintLineTraceType>();
	}
};

// Class Marvel.HeatMapAutoTestUtils
// 0x0010 (0x0040 - 0x0030)
class UHeatMapAutoTestUtils final : public UObject
{
public:
	TArray<struct FMarvelProfileData>             ProfileDataArray;                                  // 0x0030(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UHeatMapAutoTestUtils* GetInstance();

	void DumpSpecialCsvProfileData(int32 DataID, const TArray<class FString>& SpecialCategories);
	class FString GetCurLevelName();
	struct FVector GetCurPlayerPos();
	TArray<float> GetMapDiagonalPos();
	float GetProjectedNavigationPosByPoint(float X, float Y, float Z);
	TArray<struct FMarvelProfileData> GetSpecialCsvProfileData();
	bool IsLevelReady();
	bool IsPosCanStand(float X, float Y);
	void SetCurPlayerPos(float X, float Y, float Z);
	void SetCurPlayerRotate(int32 Angel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeatMapAutoTestUtils">();
	}
	static class UHeatMapAutoTestUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeatMapAutoTestUtils>();
	}
};

// Class Marvel.Config_211
// 0x0FC8 (0x1060 - 0x0098)
class UConfig_211 final : public UMarvelAbilityConfig
{
public:
	int32                                         DefaultSprayID;                                    // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SprayTestRadius;                                   // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SprayTestLayers;                                   // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SprayTestPointCount;                               // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SprayTestOutlierBase;                              // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SprayTestOutlierMultiplier;                        // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SprayTestOutlierAngle;                             // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SprayDistToSurface;                                // 0x00B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECollisionChannel                             CustomTraceChannel;                                // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             TraceContext;                                      // 0x00C0(0x0F90)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TSubclassOf<class ASprayPaintActor>           SprayPaintActorClass;                              // 0x1050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1058[0x8];                                     // 0x1058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_211">();
	}
	static class UConfig_211* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_211>();
	}
};

// Class Marvel.MarvelGameplayEffectCooldown
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectCooldown final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectCooldown">();
	}
	static class UMarvelGameplayEffectCooldown* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectCooldown>();
	}
};

// Class Marvel.ChaosDestructionLinkDegreeManager
// 0x01B8 (0x0648 - 0x0490)
class AChaosDestructionLinkDegreeManager final : public AActor
{
public:
	uint8                                         Pad_490[0x8];                                      // 0x0490(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class AChaosDestructionActor*>           GlobalLinkBrokenDegreeActors;                      // 0x0498(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TMap<class FString, bool>                     EnableEffectTags;                                  // 0x04E8(0x0050)(NativeAccessSpecifierPublic)
	bool                                          bIsAffectDesActorEffect;                           // 0x0538(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_539[0x7];                                      // 0x0539(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FChaosDesEffectParam> ChangeLinkDesActorsEffectParams;                   // 0x0540(0x0050)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIsNeedEffectTriggerActors;                        // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_591[0x7];                                      // 0x0591(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class AChaosDestructionActor*>           GlobalTriggerChaosCollapseActors;                  // 0x0598(0x0050)(Edit, BlueprintVisible, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TMap<float, struct FChaosGlobalDestructionEventParam> ChaosDestructionEventMaps;                         // 0x05E8(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float Degree)>  OnTriggerBrokenDegreeDelegate;                     // 0x0638(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void FindOrAddDestructionEffParams(const class FString& ParamKey);
	void ResetAllData();
	void TriggerChaosGlobalField(float InBrokenDegree);
	void TriggerDesActorsEnableEffect(bool bEnable, const class FString& StringTag);

	float GetGlobalBrokenDegree() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosDestructionLinkDegreeManager">();
	}
	static class AChaosDestructionLinkDegreeManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AChaosDestructionLinkDegreeManager>();
	}
};

// Class Marvel.Ability_211
// 0x0018 (0x2598 - 0x2580)
class UAbility_211 : public UMarvelGameplayAbility
{
public:
	TMulticastInlineDelegate<void(class UGameplayAbility* InAbility, class ASprayPaintActor* InActor)> OnSpraySuccessDelegate;                            // 0x2580(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UConfig_211*                            CachedMyConfig;                                    // 0x2590(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void DispatchSpraySuccess(class ASprayPaintActor* InActor);
	class UConfig_211* GetMyConfig();
	bool IsValidSprayHit(const struct FHitResult& InHitResult);
	bool TraceSpraySurface(struct FGameplayAbilityTargetData_PlacementInfo* OutPlacementInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_211">();
	}
	static class UAbility_211* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_211>();
	}
};

// Class Marvel.ExpressionAnimInstance
// 0x0000 (0x0430 - 0x0430)
class UExpressionAnimInstance final : public UAnimInstance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ExpressionAnimInstance">();
	}
	static class UExpressionAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UExpressionAnimInstance>();
	}
};

// Class Marvel.SprayPaintActor
// 0x00D0 (0x0560 - 0x0490)
class ASprayPaintActor final : public AActor
{
public:
	uint8                                         Pad_490[0x8];                                      // 0x0490(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ClientSocketName;                                  // 0x0498(0x000C)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A4[0xC];                                      // 0x04A4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             ClientLocalTransform;                              // 0x04B0(0x0060)(Edit, Net, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        ClientAttachedComponent;                           // 0x0510(0x0028)(Edit, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRepSprayPaint                         RepSprayPaint;                                     // 0x0538(0x0008)(Edit, Net, DisableEditOnTemplate, Transient, EditConst, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           SprayPaintCueTag;                                  // 0x0540(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_54C[0x14];                                     // 0x054C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindPivotToTarget(const struct FGameplayAbilityTargetData_PlacementInfo& InPlacementInfo);
	void OnClientDestructionActorLeaveAttach(class AActor* InActor);
	void OnRep_SprayPaint();
	void SetSprayID(int32 InSprayID);

	int32 GetSprayID() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SprayPaintActor">();
	}
	static class ASprayPaintActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASprayPaintActor>();
	}
};

// Class Marvel.MarvelTriggerEffect_MultiVibration
// 0x0018 (0x0060 - 0x0048)
class UMarvelTriggerEffect_MultiVibration final : public UMarvelTriggerEffect_Base
{
public:
	uint8                                         Frequency;                                         // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Amplitudes;                                        // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTriggerEffect_MultiVibration">();
	}
	static class UMarvelTriggerEffect_MultiVibration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTriggerEffect_MultiVibration>();
	}
};

// Class Marvel.MarvelCueNotify_SprayPaint
// 0x0040 (0x0620 - 0x05E0)
class AMarvelCueNotify_SprayPaint final : public AGameplayCueNotify_Actor
{
public:
	TDelegate<void(class UObject* LoadedAsset)>   SprayDataPtrLoaded;                                // 0x05E0(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F4[0x4];                                      // 0x05F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UArrowComponent*                        NormalComponent;                                   // 0x05F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDecalComponent*                        DecalComponent0;                                   // 0x0600(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextureParameterName;                              // 0x0608(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SprayAudioID;                                      // 0x0614(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          UISprayAudioEvent;                                 // 0x0618(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnSprayDataAssetLoaded(class UObject* InActionsAsset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_SprayPaint">();
	}
	static class AMarvelCueNotify_SprayPaint* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_SprayPaint>();
	}
};

// Class Marvel.GameplayAudioInterfaceSubsystem
// 0x0058 (0x00A0 - 0x0048)
class UGameplayAudioInterfaceSubsystem final : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_48[0x30];                                      // 0x0048(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CurrentViewTarget;                                 // 0x0078(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_80[0x20];                                      // 0x0080(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMatchState(EMatchState InMatchState);
	void OnViewTargetChanged(class AActor* InViewTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayAudioInterfaceSubsystem">();
	}
	static class UGameplayAudioInterfaceSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayAudioInterfaceSubsystem>();
	}
};

// Class Marvel.MarvelCueNotify_LoopNoRecycle
// 0x0000 (0x0EC8 - 0x0EC8)
class AMarvelCueNotify_LoopNoRecycle : public AMarvelCueNotify_Loop
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_LoopNoRecycle">();
	}
	static class AMarvelCueNotify_LoopNoRecycle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_LoopNoRecycle>();
	}
};

// Class Marvel.Config_212
// 0x0208 (0x02A0 - 0x0098)
class UConfig_212 final : public UMarvelAbilityConfig
{
public:
	int64                                         DefaultEmoteID;                                    // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultBreakTime;                                  // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 HeroAllowEmoteWhenFalling;                         // 0x00A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 HeroAlwaysEnterBattleState;                        // 0x00B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, struct FForceSwitchWeaponSpec>    HeroForceSwitchWeapons;                            // 0x00C8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bFlushMovementWhenMoving;                          // 0x0118(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           FlushAxesWhenMoving;                               // 0x0120(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           FlushActionsWhenMoving;                            // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bCancelEmoteWhenFlying;                            // 0x0140(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlushMovementWhenFlying;                          // 0x0141(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_142[0x6];                                      // 0x0142(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           FlushAxesWhenFlying;                               // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           FlushActionsWhenFlying;                            // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  CancelEmoteInFlyingState;                          // 0x0168(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  CancelEmoteByAbilityTags;                          // 0x01D0(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DynamicBlockWhenStarting;                          // 0x0238(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_212">();
	}
	static class UConfig_212* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_212>();
	}
};

// Class Marvel.ChaosDestructionStaticMeshActor
// 0x0000 (0x0490 - 0x0490)
class AChaosDestructionStaticMeshActor : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosDestructionStaticMeshActor">();
	}
	static class AChaosDestructionStaticMeshActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AChaosDestructionStaticMeshActor>();
	}
};

// Class Marvel.Ability_212
// 0x00E0 (0x2660 - 0x2580)
class UAbility_212 : public UMarvelGameplayAbility
{
public:
	struct FRepEmoteAnimInfo                      RepEmoteAnimInfo;                                  // 0x2580(0x0010)(Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bHasAeroAbility;                                   // 0x2590(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasMoveAbility;                                   // 0x2591(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasEnterBattleState;                              // 0x2592(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2593[0x5];                                     // 0x2593(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAeroBaseAbility*                 AeroAbility;                                       // 0x2598(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UConfig_212*                            CachedMyConfig;                                    // 0x25A0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         ForceSwitchWeaponKey;                              // 0x25A8(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2648[0x18];                                    // 0x2648(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UConfig_212* GetMyConfig();
	bool IsFlyingAnywhere();
	void OnAbilityActivated(class UGameplayAbility* InAbility);
	void OnMovementUpdated(float DeltaTime, const struct FVector& OldLocation, const struct FVector& OldVelocity);
	void OnRep_RepEmoteAnimInfo();
	void UpdateEmoteAnimInfo(int64 InEmoteID, bool bInIsStopped, bool bInHasWeaponAnim);

	float GetEmoteAnimPosition(class UAnimMontage* InMontage) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_212">();
	}
	static class UAbility_212* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_212>();
	}
};

// Class Marvel.MarvelMathUtil
// 0x0000 (0x0030 - 0x0030)
class UMarvelMathUtil final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelMathUtil">();
	}
	static class UMarvelMathUtil* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelMathUtil>();
	}
};

// Class Marvel.MarvelCueNotify_Weapon_Loop
// 0x03E0 (0x10A8 - 0x0CC8)
class AMarvelCueNotify_Weapon_Loop : public AMarvelCueNotify_Actor
{
public:
	TArray<struct FWeaponEventBasedAnimation>     WeaponEventBasedAnimations;                        // 0x0CC8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FWeaponEventBasedMaterial>      WeaponEventBasedMaterials;                         // 0x0CD8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bEnableWeaponMaterialTickLog;                      // 0x0CE8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CE9[0x1];                                      // 0x0CE9(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bSetMeshStopTickDisabled;                          // 0x0CEA(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedChangeReticleStyle;                           // 0x0CEB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FReticleStyle                          ReticleStyle;                                      // 0x0CEC(0x00E4)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class UMarvelMeshMaterialsFadeManagerComponent* WeaponMaterialsManager;                            // 0x0DD0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnWeaponEquipEvent;                                // 0x0DD8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnWeaponUnEquipEvent;                              // 0x0DE8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* NewOwner)> OnWeaponOwnerChanged;                              // 0x0DF8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnWeaponOwnerMeshInitialized;                      // 0x0E08(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_E18[0x40];                                     // 0x0E18(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        WeaponRoot;                                        // 0x0E58(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 Mesh3P;                                            // 0x0E60(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 SecondaryMesh3P;                                   // 0x0E68(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  GameplayTagWeaponStateUpdate;                      // 0x0E70(0x0068)(Edit, BlueprintVisible, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class AShootingWeapon*                        Weapon;                                            // 0x0ED8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaterialDuration;                                  // 0x0EE0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasExecuted;                                      // 0x0EE4(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EE5[0xF3];                                     // 0x0EE5(0x00F3)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeaponCueParams                       DefaultWeaponCue;                                  // 0x0FD8(0x00B0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bConditionCue;                                     // 0x1088(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1089[0x7];                                     // 0x1089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWeaponCueConditionParams>      ConditionalWeaponCues;                             // 0x1090(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UFXSystemComponent*                     FSC;                                               // 0x10A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ActivateReticle();
	void AttachWeaponMeshes();
	void CreateMaterialsFadeManager();
	void DeactivateReticle();
	void DetachWeaponMeshes();
	class AMarvelBaseCharacter* GetOwnerCharacter();
	class AShootingWeapon* GetOwnerWeapon();
	class USkeletalMeshComponent* GetWeaponMesh(EWeaponMeshType MeshType);
	void HandleWeaponAnimation(const struct FWeaponNotifyEvent& Event);
	void HandleWeaponFireEvent(int32 ModeIndex);
	void HandleWeaponFireStateEvent(int32 ModeIndex, bool bNewState);
	void HandleWeaponMaterials(const struct FWeaponNotifyEvent& Event);
	void HandleWeaponModeEvent(int32 ModeIndex, const struct FWeaponNotifyEvent& ModeEvent);
	void HandleWeaponOnEquipEvent();
	void HandleWeaponOnSimulatePhysicsEvent();
	void HandleWeaponUnEquipEvent();
	void HandleWeaponUnSimulatePhysicsEvent();
	void K2_HandleWeaponEvent(const struct FWeaponNotifyEvent& Event);
	void NativeHandleWeaponEvent(const struct FWeaponNotifyEvent& Event);
	void OnExecuteFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, const struct FWeaponCueParams& CueParams);
	void OnFireStateAudio(int32 ModeIndex, bool bNewState);
	void OnGenericHandleWeaponState(const struct FGameplayTag& Tag, int32 Count);
	void OnSecondaryWeaponMontageEnded(class UAnimMontage* InMontage, bool bInterrupted);
	void OnSecondaryWeaponMontageStarted(class UAnimMontage* InMontage);
	void OnWeaponMontageEnded(class UAnimMontage* InMontage, bool bInterrupted);
	void OnWeaponMontageStarted(class UAnimMontage* InMontage);
	void RefreshWhenCharacterSkinInitialize(int32 SculptID);
	void RegisterWeaponStateTagEvent(const struct FGameplayTagContainer& TagContainer, bool bAlways);
	void SetTickMaterials(ECueMeshType MeshType, int32 MeshIndex, const class FName& ParameterName, float StartValue, float EndValue, class UCurveFloat* ValueCurve, class FName SlotSuffix, float Duration);
	void UnRegisterWeaponStateTagEvent(const struct FGameplayTagContainer& TagContainer);

	class USceneComponent* GetAttachedMesh(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters) const;
	struct FWeaponCueParams GetCurrentCueParamsToPlay(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters) const;
	class UShootingLogic_Base* GetCurrentShootingLogic(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters) const;
	void OnExecuteAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, const struct FWeaponCueParams& CueParams) const;
	void OnPlayCameraShake(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, const struct FWeaponCueParams& CueParams) const;
	void OnPlayFireAnim(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, const struct FWeaponCueParams& CueParams) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_Weapon_Loop">();
	}
	static class AMarvelCueNotify_Weapon_Loop* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_Weapon_Loop>();
	}
};

// Class Marvel.MarvelCueNotify_Weapon_Loop_VoidMesh
// 0x0000 (0x10A8 - 0x10A8)
class AMarvelCueNotify_Weapon_Loop_VoidMesh final : public AMarvelCueNotify_Weapon_Loop
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_Weapon_Loop_VoidMesh">();
	}
	static class AMarvelCueNotify_Weapon_Loop_VoidMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_Weapon_Loop_VoidMesh>();
	}
};

// Class Marvel.FocusManager
// 0x0070 (0x00A0 - 0x0030)
class UFocusManager final : public UObject
{
public:
	TMulticastInlineDelegate<void(bool bIsFocusMode)> OnFocusModeChangeDelegate;                         // 0x0030(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x38];                                      // 0x0040(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                FocusingWidget;                                    // 0x0078(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            FocusingUserWidget;                                // 0x0080(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_88[0x18];                                      // 0x0088(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UFocusManager* Get(class UObject* WCO);

	void ClearFocusingWidget();
	bool FocusToTopLeftWidget(class UWidget* Widget);
	void HandleInputTypeChanged();
	void Init();
	bool IsFocusMode();
	bool IsWidgetFocusPosClickable(class UWidget* Widget);
	void SetFocusWidgetByInstance(class UWidget* NewFocusedWidget);
	void SetIsFocusMode(bool bInIsFocusMode);
	void SetLockFocusMode(bool bInLockFocusMode);
	void SetUEFocusWidgetAndUpdateLocation(class UWidget* NewFocusedWidget);
	void UpdateFocusModeEnable();

	class UUserWidget* GetFocusingUserWidget() const;
	class UWidget* GetFocusingWidget() const;
	bool IsFocusModeEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FocusManager">();
	}
	static class UFocusManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFocusManager>();
	}
};

// Class Marvel.Config_213
// 0x0010 (0x00A8 - 0x0098)
class UConfig_213 final : public UMarvelAbilityConfig
{
public:
	bool                                          bUseThrottleCooldown;                              // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ThrottleActivationCount;                           // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThrottleActivationPeriod;                          // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_213">();
	}
	static class UConfig_213* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_213>();
	}
};

// Class Marvel.Ability_213
// 0x0028 (0x25A8 - 0x2580)
class UAbility_213 : public UMarvelGameplayAbility
{
public:
	int32                                         SavedQuipID;                                       // 0x2580(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2584[0x4];                                     // 0x2584(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UConfig_213*                            CachedMyConfig;                                    // 0x2588(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2590[0x18];                                    // 0x2590(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 CheckThrottleCooldown();
	class UConfig_213* GetMyConfig();
	void TryActivateQuip(int32 InQuipID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_213">();
	}
	static class UAbility_213* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_213>();
	}
};

// Class Marvel.MarvelPenetrateSceneObjectInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelPenetrateSceneObjectInterface final : public IInterface
{
public:
	bool ShouldPenetrate();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPenetrateSceneObjectInterface">();
	}
	static class IMarvelPenetrateSceneObjectInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelPenetrateSceneObjectInterface>();
	}
};

// Class Marvel.Ability_222
// 0x0008 (0x2588 - 0x2580)
class UAbility_222 : public UMarvelGameplayAbility
{
public:
	uint8                                         Pad_2580[0x8];                                     // 0x2580(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_222">();
	}
	static class UAbility_222* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_222>();
	}
};

// Class Marvel.MarvelGameViewportClient
// 0x0118 (0x0530 - 0x0418)
class UMarvelGameViewportClient final : public UGameViewportClient
{
public:
	bool                                          bReceivedAnyInputThisTick;                         // 0x0418(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReceivedAnyInputLastTick;                         // 0x0419(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41A[0x2];                                      // 0x041A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastWorldTimeReceiveAnyInput;                      // 0x041C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_420[0x8];                                      // 0x0420(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnReceiveAnyKeyDelegate;                           // 0x0428(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnViewportSizeChanged;                             // 0x0438(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Value)>   OnMonitorChanged;                                  // 0x0448(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool Value)>    OnEnableCursorMode;                                // 0x0458(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnScreenCaptureDone;                               // 0x0468(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnViewingWorldContextHookedDelegate;               // 0x0478(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              PostViewingWorldContextHookedDelegate;             // 0x0488(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	bool                                          bTickCheckActiveMonitorMaxResolution;              // 0x0498(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_499[0x7];                                      // 0x0499(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(struct FIntPoint& ActiveSlateHostMonitorResolution)> OnActiveSlateHostMonitorResolutionChanged;         // 0x04A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B0[0x48];                                     // 0x04B0(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UStickMouseWidget>       CurrentCursorWidget;                               // 0x04F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_500[0x30];                                     // 0x0500(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelGameViewportClient* Get(class UObject* WCO);

	class UWidget* GetCurrentCursorWidget();
	void HideCursor();
	bool IsUsingSoftwareCursorWidgets();
	struct FVector2D K2_GetViewportSize();
	void SetCursorOpacity(float Opacity);
	void SetForceKeepCursorOpacity(bool bEnabled);
	void SetStickControllerEnabled(bool bEnabled);
	void ShowCursor();
	void ShowCursorWithoutResetPosition();

	class UWorld* GetViewingWorld() const;
	bool IsViewingAnExtraWorld() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameViewportClient">();
	}
	static class UMarvelGameViewportClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameViewportClient>();
	}
};

// Class Marvel.ChaosFieldComponent
// 0x0000 (0x00F0 - 0x00F0)
class UChaosFieldComponent final : public UActorComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosFieldComponent">();
	}
	static class UChaosFieldComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChaosFieldComponent>();
	}
};

// Class Marvel.UIC_Ability
// 0x0C30 (0x0C60 - 0x0030)
class UUIC_Ability : public UObject
{
public:
	bool                                          bIsWeapon;                                         // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsWeaponWidget;                                   // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AbilityID;                                         // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityCDID;                                       // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Slot;                                              // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, bool>               TagRequiredMap;                                    // 0x0040(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FAbilityUIAssetRow                     UIAsset;                                           // 0x0090(0x0A60)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FUICAbilityTickFunction                PrimaryUICTick;                                    // 0x0AF0(0x0038)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UMarvelGameplayAbility*                 Ability;                                           // 0x0B28(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIC_AbilityStatusPanel*                AbilityStatusPanel;                                // 0x0B30(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIC_AbilityStatusPanel*                UIC_Abilities;                                     // 0x0B38(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            ExtraWidget;                                       // 0x0B40(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            StatusWidget;                                      // 0x0B48(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityCommonExtraWidgets*             UIC_AbilityCommon;                                 // 0x0B50(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UUIC_AbilityUnit*>               UIC_Units;                                         // 0x0B58(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	class UWidget_AbilityActionTips*              Widget_ActionTips;                                 // 0x0B68(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget_AbilityEnergy_Charge*           Widget_Charge;                                     // 0x0B70(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBindingProxy_Ability*                  ProxyAbility;                                      // 0x0B78(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInited;                                           // 0x0B80(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B81[0xA7];                                     // 0x0B81(0x00A7)(Fixing Size After Last Property [ Dumper-7 ])
	class UBindingProxy_Weapon*                   ProxyWeapon;                                       // 0x0C28(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUIController_BattleHUD_AbilityDuration* UIC_AbilityDuration;                               // 0x0C30(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUIController_BattleHUD_AbilityTaskDuration* UIC_AbilityTaskDuration;                           // 0x0C38(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUIController_BattleHUD_AbilityEnergy*  UIC_AbilityEnergy;                                 // 0x0C40(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUIController_AeroAbilityActionTip*     UIC_AeroAbilityActionTip;                          // 0x0C48(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UUIController_ReticleModifier*>  ReticleModifiers;                                  // 0x0C50(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	bool CheckIfCharHasTag(const struct FGameplayTag& InTag);
	void Destruct();
	class UWidget_AbilityStatusPanel* GetAbilityPanel();
	class UUIController_BattleHUD_AbilityTaskDuration* GetAbilityTaskDurationController();
	class UUserWidget* GetAbilityWidgetByACDID(int32 InAbilityCDID);
	class UUserWidget* GetAbilityWidgetByAID(int32 InAbilityId);
	class UBindingProxy_Ability* GetBindingAbility();
	class UBindingProxy_Weapon* GetBindingWeapon();
	class UWidget_AbilityDuration* GetDurationWidget(EWidgetPosition BarPosition);
	class UWidget_AbilityEnergy* GetEnergyWidget(EEnergyWidgetType WidgetType);
	class UUIC_Ability* GetUICByACDID(int32 InAbilityCDID);
	class UUIC_Ability* GetUICByAID(int32 InAbilityId);
	void Init(class UUIC_AbilityStatusPanel* UIC_AbilityStatusPanel);
	bool IsAbilityRequiredTagsFit(const class UMarvelGameplayAbility* InAbility);
	void OnActivationRequiredTagUpdated(const struct FGameplayTag& Tag, bool bExist);
	void OnCharacterAbilityTagChange(const struct FGameplayTag& CallbackTag, int32 NewCount);
	void OnDestruct();
	void OnInit();
	void OnSwitchAbilityForNewController();
	void OnSwitchAbilityForOldController();
	void ReceiveTick(float DeltaTime);
	void RemoveExtraWidget(class UUserWidget* InExtraWidget);
	void SetAbility(int32 InAbilityId, class UGameplayAbility* InAbility);
	void SetEnable(bool bInEnable);
	void SetEnergyChargeCur(float InEnergyCur);
	void SetEnergyChargeMax(float InEnergyMax);
	void SetExtraWidgetExistence(bool bInExistence);
	void SetReady(bool bInReady);
	void SetStatusWidgetExistence(bool bInExistence);
	void SetUICTickEnable(bool bInEnable);
	void SetWeapon(class UBindingProxy_Weapon* Weapon, int32 InMagazineIndex);
	void UpdateAbilityRequiredTagMap();

	TArray<class UUIC_AbilityUnit*> GetUICUnit(TSubclassOf<class UUIC_AbilityUnit> SubClass) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIC_Ability">();
	}
	static class UUIC_Ability* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIC_Ability>();
	}
};

// Class Marvel.FXSystemStatics
// 0x0000 (0x0030 - 0x0030)
class UFXSystemStatics final : public UBlueprintFunctionLibrary
{
public:
	static ENCPoolMethod ConvertToToNCPoolMethod(EPSCPoolMethod PoolingMethod);
	static class UNiagaraComponent* FindNiagaraAndPlay(class UObject* WorldContextObject, const class FString& Path, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, bool bAutoDestroy);
	static bool IsCombineFXEnable();
	static bool IsLoopingFXSystem(class UFXSystemAsset* Template);
	static void ReinitializeFXSystem(class UFXSystemComponent* FXComponent);
	static void ReinitializeFXSystemWarmup(class UFXSystemComponent* FXComponent, float WarmupTime);
	static bool ReleaseFXSystem(class UFXSystemComponent*& InOutFXComponent, EFXSystemReleaseMethod ReleaseMethod);
	static void ResetFXSystem(class UFXSystemComponent* FXComponent, bool bEmptyInstances);
	static void ScaleFXByBodySize(class USceneComponent* InComponent, class AActor* InTarget, const struct FScaleByBodySizeConfig& InConfig);
	static void SetForceDestoryByTime(class UFXSystemComponent* InFXComponent, float InTime);
	static int32 SetTrajectoryEmittersEnable(class UFXSystemComponent* InFXComponent, bool bNewState);
	static bool SetUsingAbsolute(class USceneComponent* InFXComponent, bool bNewAbsoluteLocation, bool bNewAbsoluteRotation, bool bNewAbsoluteScale);
	static bool SetUsingAbsoluteLocation(class USceneComponent* InFXComponent, bool bNewState);
	static bool SetUsingAbsoluteRotation(class USceneComponent* InFXComponent, bool bNewState);
	static bool SetUsingAbsoluteScale(class USceneComponent* InFXComponent, bool bNewState);
	static class UFXSystemComponent* SpawnFXSystemAtLocation(const class UObject* WCO, class UFXSystemAsset* Template, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivate, bool bPreCullCheck);
	static class UFXSystemComponent* SpawnFXSystemAttached(class UFXSystemAsset* Template, class USceneComponent* AttachToComponent, class FName SocketName, const struct FVector& Location, const struct FRotator& Rotation, const struct FVector& Scale, EAttachLocation LocationType, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivate, bool bPreCullCheck);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FXSystemStatics">();
	}
	static class UFXSystemStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFXSystemStatics>();
	}
};

// Class Marvel.UIController_222
// 0x0020 (0x0C80 - 0x0C60)
class UUIController_222 final : public UUIC_Ability
{
public:
	uint8                                         Pad_C60[0x20];                                     // 0x0C60(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIController_222">();
	}
	static class UUIController_222* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIController_222>();
	}
};

// Class Marvel.MarvelGameplayEffectEnergyGenPer
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectEnergyGenPer final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectEnergyGenPer">();
	}
	static class UMarvelGameplayEffectEnergyGenPer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectEnergyGenPer>();
	}
};

// Class Marvel.Config_300102
// 0x0050 (0x00E8 - 0x0098)
class UConfig_300102 final : public UMarvelAbilityConfig
{
public:
	float                                         LandscapeDurationSeconds;                          // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LandscapeCameraTranslation;                        // 0x00A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterToLandscapeInterp;                        // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandscapeToCharacterInterp;                        // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<float>                                 CameraMovingMaxSpeeds;                             // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         DefaultSpeedLevel;                                 // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandscapeCullDistanceSquared;                      // 0x00D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TracePortalRadius;                                 // 0x00D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ACameraActor_300102>        CameraActorClass;                                  // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Config_300102">();
	}
	static class UConfig_300102* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConfig_300102>();
	}
};

// Class Marvel.GroundMotionSubAnimInstance
// 0x01B0 (0x06B0 - 0x0500)
class UGroundMotionSubAnimInstance : public UMarvelMultiAssetsAnimInstanceBase
{
public:
	uint8                                         Pad_500[0x1B0];                                    // 0x0500(0x01B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeAbilityStance(EMovementStance NewAbilityStance, float Duration);
	void ForceIntoAirStateWhenNextUpdate();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GroundMotionSubAnimInstance">();
	}
	static class UGroundMotionSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGroundMotionSubAnimInstance>();
	}
};

// Class Marvel.Ability_300102
// 0x0068 (0x25E8 - 0x2580)
class UAbility_300102 final : public UMarvelGameplayAbility
{
public:
	class UConfig_300102*                         Config;                                            // 0x2580(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ACameraActor_300102*                    CameraActor;                                       // 0x2588(0x0008)(Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAbilityTask_WaitBindInput*       EndTaskInput;                                      // 0x2590(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInLandscapeCameraMode;                          // 0x2598(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2599[0x4F];                                    // 0x2599(0x004F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivatePortalAbility();
	void EmptyEventOnPressOrReleaseInput(float TimeWaited);
	void OnPressCameraDrop(float TimeWaited);
	void OnPressCameraRise(float TimeWaited);
	void OnPressCameraSpeedDown(float TimeWaited);
	void OnPressCameraSpeedUp(float TimeWaited);
	void OnReleaseCameraDrop(float TimeWaited);
	void OnReleaseCameraRise(float TimeWaited);
	void OnReleaseEndAbility(float TimeWaited);
	void OnRep_CameraActor();
	void ToggleNetCullDistance(bool Enable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_300102">();
	}
	static class UAbility_300102* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_300102>();
	}
};

// Class Marvel.MovingCameraActor
// 0x0070 (0x0EA0 - 0x0E30)
#pragma pack(push, 0x1)
class alignas(0x10) AMovingCameraActor : public ACameraActor
{
public:
	class UCameraMovement*                        MovementComponent;                                 // 0x0E30(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCameraControlEnabled;                             // 0x0E38(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E39[0x3];                                      // 0x0E39(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CueTag;                                            // 0x0E3C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USphereComponent*                       SphereComponent;                                   // 0x0E48(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                ControlInputVector;                                // 0x0E50(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                ControlInputVectorFromPressing;                    // 0x0E68(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LastControlInputVectorFromPressing;                // 0x0E80(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class USphereComponent* GetSphereComponent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovingCameraActor">();
	}
	static class AMovingCameraActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMovingCameraActor>();
	}
};
#pragma pack(pop)

// Class Marvel.MarvelCueNotify_Projectile
// 0x0048 (0x0DB0 - 0x0D68)
class AMarvelCueNotify_Projectile : public AMarvelCueNotify_TargetActor
{
public:
	int32                                         TrajectoryAudioID;                                 // 0x0D68(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrajectoryAudibleDistance;                         // 0x0D6C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelAbilityTargetActor_Projectile*   MyProjectile;                                      // 0x0D70(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D78[0x8];                                      // 0x0D78(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bHideFXWhenTargetTurn : 1;                         // 0x0D80(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_D81[0x3];                                      // 0x0D81(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetTurnHideFXTime;                              // 0x0D84(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D88[0x18];                                     // 0x0D88(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNiagaraComponent*>              HiddenNSWhileTurn;                                 // 0x0DA0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	void CatchUpTailFX(const struct FVector& Location, const struct FVector& Direction);
	void TriggerCatchUpTailFX(const struct FVector& Location, const struct FVector& Direction);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_Projectile">();
	}
	static class AMarvelCueNotify_Projectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_Projectile>();
	}
};

// Class Marvel.CameraActor_300102
// 0x0040 (0x0EE0 - 0x0EA0)
class ACameraActor_300102 final : public AMovingCameraActor
{
public:
	uint8                                         Pad_E98[0x20];                                     // 0x0E98(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   MeshComp;                                          // 0x0EB8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UAbility_300102>         Weak_Ability;                                      // 0x0EC0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UConfig_300102>          Weak_Config;                                       // 0x0EC8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpringArmComponent*                    SpringArmComponent;                                // 0x0ED0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_ED8[0x8];                                      // 0x0ED8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraActor_300102">();
	}
	static class ACameraActor_300102* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACameraActor_300102>();
	}
};

// Class Marvel.AchievementActionBase
// 0x0050 (0x0080 - 0x0030)
class UAchievementActionBase final : public UObject
{
public:
	bool                                          bIsActive;                                         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCompleted;                                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x2];                                       // 0x0032(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UID;                                               // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Val;                                               // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelPlayerState*                     PlayerState;                                       // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   MarvelCharacter;                                   // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAchievementLimitCondition*>     SelfLimitConditions;                               // 0x0058(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAchievementLimitCondition*>     TargetLimitConditions;                             // 0x0068(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bOneMatchLimit;                                    // 0x0078(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RequireVal;                                        // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AddVal(float InVal);
	bool CheckProgress();
	bool InitFromConfig(class AMarvelPlayerState* InPlayerState, const struct FMarvelAchievementItemRow& InConfig, const struct FAchievementConfig& InOwnConfig);
	void K2_OnBuffAppliedToTarget(class AMarvelBaseCharacter* Source, class AMarvelBaseCharacter* Target, int32 BuffID, int32 AbilityID, const class FString& AbilitySessionID);
	void OnBuffAppliedToTarget(class UAbilitySystemComponent* Source, class UAbilitySystemComponent* Target, const struct FGameplayEffectSpecStackHandle& EffectSpecHandle, const struct FActiveGameplayEffectHandle& EffectHandle);
	void OnComplete();
	void OnStart();
	void OnStop();
	void OnTransfigurateIn(class AMarvelBaseCharacter* Character);
	void OnTransfigurateOut(class AMarvelBaseCharacter* Character);
	void PyPostEditChange();
	void Start(bool bIsSkipActive);
	void Stop(bool bIsSkipActive);

	EAchievementType GetAchievementType() const;
	bool IsActive() const;
	bool IsCompleted() const;
	bool IsMosAction() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AchievementActionBase">();
	}
	static class UAchievementActionBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAchievementActionBase>();
	}
};

// Class Marvel.MarvelGameplayEffectAmmo3Reduce
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectAmmo3Reduce final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectAmmo3Reduce">();
	}
	static class UMarvelGameplayEffectAmmo3Reduce* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectAmmo3Reduce>();
	}
};

// Class Marvel.PhysicsWeaponSubAnimInstanceBase
// 0x0010 (0x0440 - 0x0430)
class UPhysicsWeaponSubAnimInstanceBase : public UAnimInstance
{
public:
	EPhysicsWeaponType                            NowWeaponType;                                     // 0x0428(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsingPhysicsWeapon;                               // 0x0429(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42A[0x6];                                      // 0x042A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalInteractionComponent*          PhysicalInteractionComp;                           // 0x0430(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsWeaponData*                     PhysicsWeaponData;                                 // 0x0438(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnWeaponSummonerChanged(class APhysicsSummoner* NewWeapon);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsWeaponSubAnimInstanceBase">();
	}
	static class UPhysicsWeaponSubAnimInstanceBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsWeaponSubAnimInstanceBase>();
	}
};

// Class Marvel.HeroTableFuncLibrary
// 0x0000 (0x0030 - 0x0030)
class UHeroTableFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void CacheAllDefaultSkinAssetPack(class UObject* WorldContextObject);
	static int32 GetDefaultAimAssistEase(EAttackMethod AttackMethod);
	static int32 GetDefaultAimAssistStrength(EAttackMethod AttackMethod);
	static struct FPrimaryAssetId GetHeroAssetPack(const int32 HeroID, int32 SkinID, class UObject* WorldContextObject);
	static EAttackMethod GetHeroAttackMethod(int32 InHeroID);
	static struct FMarvelHeroTable GetHeroData(const int32 HeroID);
	static int32 GetHeroDefaultAimAssistEase(int32 InHeroID);
	static int32 GetHeroDefaultAimAssistStrength(int32 InHeroID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroTableFuncLibrary">();
	}
	static class UHeroTableFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeroTableFuncLibrary>();
	}
};

// Class Marvel.AchievementComponent
// 0x0000 (0x00F0 - 0x00F0)
class UAchievementComponent final : public UActorComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AchievementComponent">();
	}
	static class UAchievementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAchievementComponent>();
	}
};

// Class Marvel.MarvelReplicationHelper
// 0x0028 (0x0060 - 0x0038)
class UMarvelReplicationHelper final : public UWorldSubsystem
{
public:
	TArray<class AActor*>                         ForceReplicateActors;                              // 0x0038(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_48[0x18];                                      // 0x0048(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static int64 CreatePostActorTickTask(const class UObject* WCO, const TDelegate<void()>& InDelegate);
	static bool ForceNetUpdateFor(class AActor* Target);
	static bool ForceNetUpdateImmediatelyFor(class AActor* Target);
	static bool RemovePostActorTickTask(const class UObject* WCO, int64& InOutHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelReplicationHelper">();
	}
	static class UMarvelReplicationHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelReplicationHelper>();
	}
};

// Class Marvel.AchievementController
// 0x0158 (0x0188 - 0x0030)
class UAchievementController final : public UObject
{
public:
	class AMarvelPlayerState*                     PlayerState;                                       // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   Character;                                         // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   TransfigurateCharacter;                            // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class UAchievementActionBase*>    AchievementActions;                                // 0x0048(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            AchievementsResult;                                // 0x0098(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0xA0];                                      // 0x00E8(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	const TMap<EAchievementType, TSubclassOf<class UAchievementActionBase>> GetActionClasses();
	void InitFromPlayerState(class AMarvelPlayerState* InPlayerState);
	void OnAchievementUpdate(EAchievementType Type, int32 Count);
	void OnCharaterEndPlay(class AMarvelBaseCharacter* InCharacter);
	void OnPossessCharacter(class AMarvelPlayerState* InPlayerState, class AMarvelBaseCharacter* InCharacter);
	void Shutdown();
	void ToResult(TMap<int32, int32>* Result);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AchievementController">();
	}
	static class UAchievementController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAchievementController>();
	}
};

// Class Marvel.MarvelCueNotify_Ability
// 0x0188 (0x0E50 - 0x0CC8)
class AMarvelCueNotify_Ability : public AMarvelCueNotify_Actor
{
public:
	class FName                                   AttachedComponentName;                             // 0x0CC8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0CD4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCommonNiagaraInfo>             StartNiagaraInfos;                                 // 0x0CE0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FCommonNiagaraInfo>             EndNiagaraInfos;                                   // 0x0CF0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         StartAudioID;                                      // 0x0D00(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndAudioID;                                        // 0x0D04(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LoopAudioID;                                       // 0x0D08(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0C[0x4];                                      // 0x0D0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            AudioSwitchParams;                                 // 0x0D10(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         ActorDopplerSpeed;                                 // 0x0D60(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedChangeReticleStyle;                           // 0x0D64(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D65[0x3];                                      // 0x0D65(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FReticleStyle                          ReticleStyle;                                      // 0x0D68(0x00E4)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4C[0x4];                                      // 0x0E4C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateReticle();
	void DeactivateReticle();
	void OnActiveAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnActiveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnExecuteAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnExecuteFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnRemoveAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnRemoveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	class UFXSystemComponent* SpawnEndFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, const struct FCommonNiagaraInfo& InNigaraInfo);
	class UFXSystemComponent* SpawnStartFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, const struct FCommonNiagaraInfo& InNiagaraInfo);
	void WhileActiveAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void WhileActiveFX(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_Ability">();
	}
	static class AMarvelCueNotify_Ability* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_Ability>();
	}
};

// Class Marvel.AchievementManager
// 0x0080 (0x00B0 - 0x0030)
class UAchievementManager : public UObject
{
public:
	TDelegate<void(class UObject* LoadedAsset)>   LoadActionsDelegate;                               // 0x0030(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAchievementActionsAsset*         FamousActionsAsset;                                // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AMarvelPlayerState*>             WaitPlayerStateList;                               // 0x0050(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, class UAchievementController*>    AchievementControllers;                            // 0x0060(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void AddNewPlayer(class AMarvelPlayerState* InPlayerState);
	void Initialize();
	void OnActionsAssetLoaded(class UObject* InActionsAsset);
	void OnAddedPlayerState(class AMarvelPlayerState* InPlayerState);
	void OnRemovedPlayerState(class AMarvelPlayerState* InPlayerState);
	void RemovePlayer(int32 InUID);
	void Shutdown();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AchievementManager">();
	}
	static class UAchievementManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAchievementManager>();
	}
};

// Class Marvel.TestConfigItem
// 0x0008 (0x0038 - 0x0030)
class UTestConfigItem final : public UObject
{
public:
	ETestConfigNetCondition                       NetCondition;                                      // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ReceiveDeInit(class UDevTestConfigSubsystem* DevTestSystem);
	void ReceiveInit(class UDevTestConfigSubsystem* DevTestSystem);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TestConfigItem">();
	}
	static class UTestConfigItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTestConfigItem>();
	}
};

// Class Marvel.ActionLogConfig
// 0x0070 (0x00A0 - 0x0030)
class UActionLogConfig final : public UObject
{
public:
	TSubclassOf<class UActionLogRecorder>         ActionLogRecorderClass;                            // 0x0030(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ShieldSummonedTag;                                 // 0x0038(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NormalSummonedTag;                                 // 0x0044(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 IgnoreAbilityList;                                 // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 IgnoreBuffList;                                    // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         InstantPackHealthBuff;                             // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContinuousPackHealthBuff;                          // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PayloadHealBuffID;                                 // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFireDistance;                                   // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 VersionTag;                                        // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULevelStatisticsController> LevelStatisticsControllerClass;                    // 0x0090(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscortTraceDuration;                               // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionLogConfig">();
	}
	static class UActionLogConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionLogConfig>();
	}
};

// Class Marvel.HeroGalleryPlayerController
// 0x0000 (0x0A98 - 0x0A98)
class AHeroGalleryPlayerController final : public APlayerController
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroGalleryPlayerController">();
	}
	static class AHeroGalleryPlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHeroGalleryPlayerController>();
	}
};

// Class Marvel.MarvelAbilityTargetActor_Scope
// 0x00A0 (0x1700 - 0x1660)
class AMarvelAbilityTargetActor_Scope : public AMarvelAbilityTargetActor_Predict
{
public:
	uint8                                         Pad_1660[0x8];                                     // 0x1660(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarvelAgentTraceComponent> TraceComponentClass;                               // 0x1668(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMarvelAgentEffectiveComponent> EffectiveComponentClass;                           // 0x1670(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAgentTraceComponent*             TraceComponent;                                    // 0x1678(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAgentEffectiveComponent*         EffectiveComponent;                                // 0x1680(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(TArray<struct FHitResult>& HitResults)> OnTracedHitResults;                                // 0x1688(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(TArray<struct FHitResult>& HitResults)> OnTracedHitResultsNotEmpty;                        // 0x1698(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          bDispatchTargetDataEvenIfEmpty;                    // 0x16A8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_16A9[0x57];                                    // 0x16A9(0x0057)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AsyncTraceFinished();
	void AsyncTraceResults(class UObject* TraceSource, const TArray<struct FHitResult>& HitResults);
	void ExecuteTrace();
	void K2_ExecuteTrace();
	void K2_SetScopeData(const struct FMarvelScopeAgentTable& InData);
	void K2_StopTrace();
	void K2_ValidateTargetData(const struct FGameplayAbilityTargetDataHandle& Data);
	void OnLocalScopeResultCallback(const struct FGameplayAbilityTargetDataHandle& LocalDataHandle);
	void OnMergeScopeResultCallback(const struct FGameplayAbilityTargetDataHandle& RemoteDataHandle, const struct FGameplayAbilityTargetDataHandle& LocalDataHandle);
	void PreTraceSpec();
	void StopTrace();
	void TraceFinished();
	void TraceResults(class UObject* TraceSource, const TArray<struct FHitResult>& HitResults);

	struct FMarvelScopeAgentTable K2_GetScopeData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTargetActor_Scope">();
	}
	static class AMarvelAbilityTargetActor_Scope* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelAbilityTargetActor_Scope>();
	}
};

// Class Marvel.WeaponAmmoAbilityScope
// 0x0000 (0x1700 - 0x1700)
class AWeaponAmmoAbilityScope final : public AMarvelAbilityTargetActor_Scope
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WeaponAmmoAbilityScope">();
	}
	static class AWeaponAmmoAbilityScope* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWeaponAmmoAbilityScope>();
	}
};

// Class Marvel.ActionLogController
// 0x00B0 (0x00E0 - 0x0030)
class UActionLogController : public UObject
{
public:
	class UMarvelGameplayEventManager*            GlobalEventManager;                                // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameInstance*                    MarvelGameInstance;                                // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActionLogRecorder*                     ActionLogRecorder;                                 // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityStatisticsController*           AbilityStatisticsController;                       // 0x0048(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHeroStatisticsController*              HeroStatisticsController;                          // 0x0050(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBuffStatisticsController*              BuffStatisticsController;                          // 0x0058(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USummonedStatisticsController*          SummonedStatisticsController;                      // 0x0060(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                LevelStatisticsController;                         // 0x0068(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTeamStatisticsController*              TeamStatisticsController;                          // 0x0070(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActionLogConfig*                       ActionLogConfig;                                   // 0x0078(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& CurrentPartName)> OnPrePartNameChangeDispatcher;                     // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMap<class FString, struct FActionLogDamageMerge> CacheID2Struct;                                    // 0x0090(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UActionLogController* Get(class UObject* WCO);
	static class UActionLogConfig* GetConfig(class UObject* WCO);
	static class UActionLogRecorder* GetRecorder(class UObject* WCO);

	void CreateLevelStatisticsController();
	void DestroyLevelStatisticsController();
	EActionLogHealType GetActionLogHealType(const struct FAttributeModifierParameter& ModifierParameter);
	void Initialize();
	void OnActorPostTakeDamage(class AActor* InInstigator, class AActor* InTarget, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnActorTakeHealth(class AActor* InInstigator, class AActor* InTarget, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void OnInitialize();
	void OnSculptIDChange(class AActor* Instigator, const int32 SculptID);
	void OnShutdown();
	void PyOnActorTakeHealth(const struct FActionLogBattleContext& BattleContext, const struct FAttributeModifierParameter& ModifierParameter);
	void RecordMergedDamageInfo(const class FString& CacheID);
	void RecordMergedHealInfo(const class FString& CacheID, EActionLogHealType HealType);
	void Shutdown();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionLogController">();
	}
	static class UActionLogController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionLogController>();
	}
};

// Class Marvel.ActionLogFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UActionLogFunctionLibrary final : public UObject
{
public:
	static float ComputeFireDistance(class AActor* Source);
	static int32 GetAbilityType(int32 AbilityID);
	static struct FActionLogAbilityContext GetActionLogAbilityContext(class AActor* Instigator, int32 AbilityID, const class FString& SessionID);
	static struct FActionLogBattleContext GetActionLogBattleContext(class AActor* Instigator, class AActor* Target, const struct FAttributeModifierParameter& ModifierParameter);
	static struct FActionLogBattleContext GetActionLogBattleContextByBuff(class AActor* Instigator, class AActor* Target, const struct FGameplayEffectSpec& InEffectSpec);
	static struct FActionLogBuffContext GetActionLogBuffContext(class AActor* Instigator, class AActor* Target, class AActor* Causer, const struct FGameplayEffectSpec& InEffectSpec);
	static struct FActionLogDestructionDamage GetActionLogDestructionDamage(float Damage, const struct FAttributeModifierParameter& ModifierParameter);
	static int32 GetActorType(class AActor* Actor);
	static class AActor* GetFinalInstigator(class AActor* Instigator);
	static class UMarvelSummonedComponent* GetMarvelSummonedComponent(class AActor* Summoned);
	static float GetMaxFireDistance(class UObject* WCO);
	static int32 GetSelectedHeroID(class UObject* WCO, int32 PlayerUID, int32 HeroID);
	static bool IsNearDeathHeal(const struct FActionLogBattleContext& BattleContext, const struct FAttributeModifierHandle& ParamHandle);
	static bool IsPassiveSkill(int32 AbilityID);
	static bool IsPhantom(class AActor* Actor);
	static bool IsPlayer(class AActor* Actor);
	static struct FActionLogBattleContext PyGetActionLogBattleContext(class AActor* Instigator, class AActor* Target, const struct FAttributeModifierHandle& ParamHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionLogFunctionLibrary">();
	}
	static class UActionLogFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionLogFunctionLibrary>();
	}
};

// Class Marvel.CurveMouthShape
// 0x0880 (0x08B8 - 0x0038)
class UCurveMouthShape final : public UCurveBase
{
public:
	struct FRichCurve                             FloatCurves[0x11];                                 // 0x0038(0x0080)(NativeAccessSpecifierPrivate)

public:
	void AddKeyToCurve(int32 Index_0, float InTime, float InValue);
	void AddKeyToCurveByName(class FName CurveName, float InTime, float InValue);
	float GetValueFromCurve(int32 Index_0, float InTime);
	float GetValueFromCurveByName(class FName CurveName, float InTime);

	struct FMouthShape GetMouthShapeValue(float InTime) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CurveMouthShape">();
	}
	static class UCurveMouthShape* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCurveMouthShape>();
	}
};

// Class Marvel.PyObjectWrapper
// 0x0008 (0x00C8 - 0x00C0)
class UPyObjectWrapper final : public UStruct
{
public:
	uint8                                         Pad_C0[0x8];                                       // 0x00C0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UPyObjectWrapper* GetPyObject();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PyObjectWrapper">();
	}
	static class UPyObjectWrapper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPyObjectWrapper>();
	}
};

// Class Marvel.ActionLogRecorder
// 0x0010 (0x0040 - 0x0030)
class UActionLogRecorder : public UObject
{
public:
	class UActionLogController*                   ActionLogController;                               // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelGameState*                       MarvelGameState;                                   // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void Initialize(class UActionLogController* InLogController);
	void OnInitialize();
	void OnRecordAbilityExtraHitRate(const struct FAbilityExtraBaseInfo& BaseInfo, const class FString& ExtraKey, const struct FAbilityExtraHitRate& ExtraHitRate);
	void OnRecordAbilityExtraNormal(const struct FAbilityExtraBaseInfo& BaseInfo, const class FString& ExtraKey, float ExtraValue);
	void OnRecordAbilityUseInfo(class UPyObjectWrapper* AbilityUseInfo);
	void OnRecordActorDamage(const struct FActionLogBattleContext& BattleContext, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnRecordActorDamages(const struct FActionLogDamageMerge& DamageMerged);
	void OnRecordActorDeath(struct FActionLogDeathExtraInfo* DeathExtraInfo, struct FActionLogBattleContext* BattleContext, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnRecordActorHeal(EActionLogHealType HealType, bool IsNearDeathHeal, struct FActionLogBattleContext* BattleContext, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnRecordActorHeals(EActionLogHealType HealType, const struct FActionLogDamageMerge& DamageMerged);
	void OnRecordBuffInfo(struct FActionLogBuffRecord* BuffRecord);
	void OnRecordBuffInfoCVer(class UPyObjectWrapper* Buff);
	void OnRecordChaosBreak(const struct FActionLogChaosLogInfo& DestructionDamageInfo);
	void OnRecordChaosBreaks(const struct FActionLogChaosLogInfos& DestructionDamageInfo);
	void OnRecordChaosCollapse(const struct FActionLogChaosLogInfo& DestructionDamageInfo);
	void OnRecordChaosDamage(const struct FActionLogChaosLogInfo& DestructionDamageInfo);
	void OnRecordChaosDamages(const struct FActionLogChaosLogInfos& DestructionDamageInfo);
	void OnRecordChaosEndPlay(const struct FActionLogChaosLogInfo& DestructionDamageInfo);
	void OnRecordChaosRecover(const struct FActionLogChaosLogInfo& DestructionDamageInfo);
	void OnRecordCompetitionInfo(struct FActionLogCompetitionRecord* CompetitionRecord);
	void OnRecordDestructionDamage(struct FActionLogDestructionDamage* DestructionDamage, const struct FDestructionExtraInfo& DestructionExtraInfo);
	void OnRecordEnergyChanged(struct FActionLogEnergyChangeRecord* EnergyChangeRecord);
	void OnRecordEnergyChangedCVer(class UPyObjectWrapper* Change);
	void OnRecordFirstEnterBattle(struct FActionLogFirstEnterBattle* FirstEnterBattle);
	void OnRecordHealPackRefreshInfo(const class FString& HealPackName);
	void OnRecordHeroSculptIDChange(struct FActionLogHeroSculptIDChangeRecord* HeroSculptIDChangeRecord);
	void OnRecordHeroSwitchOut(struct FActionLogHeroUseRecord* HeroUseRecord);
	void OnRecordLevelTriggerInfo(struct FActionLogLevelTriggerInfo* LevelTriggerInfo);
	void OnRecordSummonedInfo(struct FActionLogSummonedRecord* SummonedRecord);
	void OnRecordTeamComposition(const struct FActionLogTeamComposition& TeamComposition);
	void OnRecordUltimateRelease(struct FActionLogUltimateRelease* ReleaseRecord);
	void OnRecordUnitUseInfo(class UPyObjectWrapper* AbilityUseInfo);
	void OnShutdown();
	void RecordBuffInfo(const struct FActionLogBuffRecord& BuffRecord);
	void RecordEnergyChanged(const struct FActionLogEnergyChangeRecord& BuffRecord);
	void Shutdown();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionLogRecorder">();
	}
	static class UActionLogRecorder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionLogRecorder>();
	}
};

// Class Marvel.MarvelTask_UpdateValue
// 0x0048 (0x00C0 - 0x0078)
class UMarvelTask_UpdateValue final : public UGameplayTask
{
public:
	TMulticastInlineDelegate<void(float Value)>   OnFinish;                                          // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float Value)>   OnUpdateValue;                                     // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_98[0x28];                                      // 0x0098(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelTask_UpdateValue* TaskUpdateValue_CurveFloat(TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner, class UCurveFloat* Curve, float BeginLocation, float EndLocation, float OverrideDuration);
	static class UMarvelTask_UpdateValue* TaskUpdateValue_CurveFloatWithCom(class UObject* TaskOwner, class UCurveFloat* Curve, float BeginLocation, float EndLocation, float OverrideDuration);
	static class UMarvelTask_UpdateValue* TaskUpdateValue_FloatWithCom(class UObject* TaskOwner, float BeginValue, float EndValue, float Duration);
	static class UMarvelTask_UpdateValue* TaskUpdateValue_LerpFloat(TScriptInterface<class IGameplayTaskOwnerInterface> TaskOwner, float BeginValue, float EndValue, float Duration);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTask_UpdateValue">();
	}
	static class UMarvelTask_UpdateValue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTask_UpdateValue>();
	}
};

// Class Marvel.HighLightDataComponent
// 0x0048 (0x0138 - 0x00F0)
class UHighLightDataComponent final : public UActorComponent
{
public:
	TArray<struct FCommonHighLightData>           CommonHighLightDatas;                              // 0x00F0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UHighLightDataMananger*                 HighLightDataMananger;                             // 0x0100(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelPlayerState*                     PlayerState;                                       // 0x0108(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecording;                                        // 0x0110(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UHeroHighLightData*                     HeroHighLightObject;                               // 0x0118(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 PlayerUID, int32 HighLightID)> AchieveHighLightDispatcher;                        // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	int32                                         SelectedHeroID;                                    // 0x0130(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MulticastAchieveHighLight(int32 HighLightID);
	void OnAchieveCommonHighLight(int32 HighLightID);
	void OnAchieveHeroHighLight(int32 HighLightID);
	void OnAchieveHighLight(int32 HighLightID);
	void OnAssistant();
	void OnCharacterAbilityStateChanged(class AMarvelPlayerState* InPlayerState, class AMarvelBaseCharacter* InCharacter, bool bFinished);
	void OnDeath();
	void OnInstigateHeal(float HealValue);
	void OnInstigateHeroDamage(float DamageValue);
	void OnKillOther();
	void OnMatchStateChange(EMatchState MatchState);
	void OnTakeDamage(float DamageValue);
	void OnUpdateHighLightValue(float Value, EHighLightStatisticsType StatisticsType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HighLightDataComponent">();
	}
	static class UHighLightDataComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHighLightDataComponent>();
	}
};

// Class Marvel.ActionTipsManager
// 0x0170 (0x01A0 - 0x0030)
class UActionTipsManager final : public UObject
{
public:
	struct FDeclarationHolder                     ViewCharacterChangedReceiver;                      // 0x0030(0x0010)(Transient, NativeAccessSpecifierPrivate)
	class UMarvelAbilitySystemCom*                CurrentASC;                                        // 0x0040(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarvelAbilitySystemCom*                LastASC;                                           // 0x0048(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 CurrentViewTarget;                                 // 0x0050(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<struct FAbilityWaitingInputParam, struct FActionTipsHandle> ActionTipsHandleDict;                              // 0x0058(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<int32, struct FActionTipsHandle>         CanActiveUITipsHandleDict;                         // 0x00A8(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TArray<int32>                                 CanActiveUIAbilityIDs;                             // 0x00F8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  RequiredTags;                                      // 0x0108(0x0068)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_170[0x30];                                     // 0x0170(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FActionTipsHandle AddActionTip(class UObject* WCO, int32 IndexID, const struct FActionTipsParam& TipsParam, int32 InputState);
	static struct FActionTipsHandle AddActionTipByBindIndex(class UObject* WCO, int32 AbilityID, int32 BindInputIndex, int32 InputState);
	static struct FActionTipsHandle AddActionTipByParam(class UObject* WCO, const struct FAbilityWaitingInputParam& WaitingInputParam);
	static class UActionTipsManager* Get(class UObject* WCO);
	static void RemoveActionTip(const struct FActionTipsHandle& ActionTipsHandle);

	void ClearActionTipsHandle();
	void ClearActiveAbilityUITips();
	void OnAbilityBlocked(const struct FGameplayTag& Tag, bool TagExists);
	void OnAbilityInit(int32 AbilityID);
	void OnRequiredTagsChanged(const struct FGameplayTag& TagUpdated, bool TagExists);
	void OnViewTargetChanged(class AActor* ViewTarget);
	void UpdateActionTips();
	void UpdateCanActiveUITipsByTimer();
	void UpdateCurrentAbilityUITips();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActionTipsManager">();
	}
	static class UActionTipsManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActionTipsManager>();
	}
};

// Class Marvel.LifeInfo_TraceComponent_Params
// 0x0040 (0x0088 - 0x0048)
class ULifeInfo_TraceComponent_Params final : public ULifeInfo_Params
{
public:
	uint8                                         Pad_48[0x40];                                      // 0x0048(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LifeInfo_TraceComponent_Params">();
	}
	static class ULifeInfo_TraceComponent_Params* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULifeInfo_TraceComponent_Params>();
	}
};

// Class Marvel.ActorKiller
// 0x0018 (0x0050 - 0x0038)
class UActorKiller final : public UWorldSubsystem
{
public:
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UActorKiller* Get(class UObject* WCO);

	bool Destroy(class AActor* InActor);
	bool UndoDestroy(class AActor* InActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActorKiller">();
	}
	static class UActorKiller* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorKiller>();
	}
};

// Class Marvel.InputTriggerPressedRelease
// 0x0000 (0x0058 - 0x0058)
class UInputTriggerPressedRelease final : public UInputTrigger
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputTriggerPressedRelease">();
	}
	static class UInputTriggerPressedRelease* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputTriggerPressedRelease>();
	}
};

// Class Marvel.ActorPoolable
// 0x0000 (0x0030 - 0x0030)
class IActorPoolable final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActorPoolable">();
	}
	static class IActorPoolable* GetDefaultObj()
	{
		return GetDefaultObjImpl<IActorPoolable>();
	}
};

// Class Marvel.CableHeadAnimInstance
// 0x0040 (0x0470 - 0x0430)
class UCableHeadAnimInstance final : public UAnimInstance
{
public:
	bool                                          bIsGrabbing;                                       // 0x0428(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_429[0x7];                                      // 0x0429(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               HandBoneRotator;                                   // 0x0430(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                HandBoneTranslation;                               // 0x0448(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandBoneRotateMaxAngle;                            // 0x0460(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandBoneRotateInterpSpeed;                         // 0x0464(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HandBoneTranslateScale;                            // 0x0468(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46C[0x4];                                      // 0x046C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CableHeadAnimInstance">();
	}
	static class UCableHeadAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCableHeadAnimInstance>();
	}
};

// Class Marvel.MarvelMontageData
// 0x00F8 (0x0128 - 0x0030)
class UMarvelMontageData final : public UAnimMetaData
{
public:
	EMontageType                                  UpperBodyType;                                     // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FUpperBodyBlendSwitch                  UpperBodySwitches;                                 // 0x0031(0x0009)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	EMontageBlendType                             MontageBlendType;                                  // 0x003A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B[0x5];                                       // 0x003B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUpperLayeredBlendConfig               UpperBodyConfig;                                   // 0x0040(0x0038)(Edit, NativeAccessSpecifierPublic)
	bool                                          bUseExternUpperBodyConfig;                         // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUpperLayeredBlendConfig               ExternUpperBodyConfig;                             // 0x0080(0x0038)(Edit, NativeAccessSpecifierPublic)
	bool                                          bUseMeleeTwistWhenLanding;                         // 0x00B8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           MovingUpperBodySections;                           // 0x00C0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           AlwaysUpperBodySections;                           // 0x00D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Lean_2D;                                           // 0x00E0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisableAO;                                        // 0x00E8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAO;                                            // 0x00E9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EA[0x6];                                       // 0x00EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAimOffsetBlendSpace*                   AimOffset;                                         // 0x00F0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTurninPlace;                                   // 0x00F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x7];                                       // 0x00F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           TurninPlaceAnimL90;                                // 0x0100(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           TurninPlaceAnimR90;                                // 0x0108(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetOrientation;                                 // 0x0110(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomBlendOutWhenMoving;                      // 0x0111(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_112[0x2];                                      // 0x0112(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendOutTriggerTimeWhenMoving;                     // 0x0114(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendOutTimeWhenMoving;                            // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseUpperBodyAfterLand;                            // 0x011C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceUpdateSourcePose;                            // 0x011D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E[0x2];                                      // 0x011E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraCurveBlendInTime;                            // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124[0x4];                                      // 0x0124(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelMontageData">();
	}
	static class UMarvelMontageData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelMontageData>();
	}
};

// Class Marvel.ActorPoolSubsystem
// 0x0060 (0x0098 - 0x0038)
class UActorPoolSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_38[0x60];                                      // 0x0038(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActorPoolSubsystem">();
	}
	static class UActorPoolSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorPoolSubsystem>();
	}
};

// Class Marvel.HeroStatisticsUnit
// 0x0640 (0x0670 - 0x0030)
class UHeroStatisticsUnit : public UObject
{
public:
	class UBattleStatisticsManager*               BattleStatisticsManager;                           // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class UHeroStatisticsUnit*>       HeroSculpts;                                       // 0x0038(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         PlayerUID;                                         // 0x0088(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedHeroID;                                    // 0x008C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentHeroID;                                     // 0x0090(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroUID;                                           // 0x0094(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConsecutiveKillTemp;                               // 0x0098(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 TheLastBlowDistance;                               // 0x00A0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         K;                                                 // 0x00B0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSingleSurvivalDamageTakenTemp;                  // 0x00B4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSingleSurvivalHealTemp;                         // 0x00B8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UAbilityStatisticsUnit*>    AbilityData;                                       // 0x00C0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, struct FBuffRecord>               BuffData;                                          // 0x0110(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMarvelBattleLogBuffUnit> PendingBuffDict;                                   // 0x0160(0x0050)(NativeAccessSpecifierPublic)
	TArray<struct FMarvelBattleLogBuffUnit>       TakeBuffList;                                      // 0x01B0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMarvelBattleLogDamageUnit>     TakeDamageList;                                    // 0x01C0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, class USummonedStatisticsUnit*> SummonerData;                                      // 0x01D0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, class USustainInfoUnit*>          SustainedHitInfo;                                  // 0x0220(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_270[0x68];                                     // 0x0270(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SculptName;                                        // 0x02D8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseTime;                                           // 0x02E8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         JoinKillHero;                                      // 0x02EC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalTerrainKill;                                  // 0x02F0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AssistantHero;                                     // 0x02F4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalDefendAssistant;                              // 0x02F8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalAttackAssistant;                              // 0x02FC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalDetectAssistant;                              // 0x0300(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalHealPackTreat;                                // 0x0304(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToHeroDamage;                                      // 0x0308(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeroDamageTaken;                                   // 0x030C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShieldSummonerDamageTaken;                         // 0x0310(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToHeroHeal;                                        // 0x0314(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToShieldSummonerHeal;                              // 0x0318(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToNormalSummonerHeal;                              // 0x031C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToSelfHeal;                                        // 0x0320(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HomicideDead;                                      // 0x0324(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalAliveTime;                                    // 0x0328(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainAttackCnt;                                     // 0x032C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SoloKill;                                          // 0x0330(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeadKill;                                          // 0x0334(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UltimateRelease;                                   // 0x0338(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalFullEnergyDuration;                           // 0x033C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalFullEnergyTimes;                              // 0x0340(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToShieldSummonerDamage;                            // 0x0344(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ToNormalsummonerDamage;                            // 0x0348(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearDeathTakeHeal;                                 // 0x034C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NearDeathInstigateHeal;                            // 0x0350(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainAttackNormalSummonerHitCnt;                    // 0x0354(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainAttackShieldSummonerHitCnt;                    // 0x0358(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MainAttackHeroHitCnt;                              // 0x035C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CriticalHeroHitCnt;                                // 0x0360(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalLastBlowDamage;                               // 0x0364(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TheLastBlowHero;                                   // 0x0368(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSingleSurvivalHeal;                             // 0x036C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSingleSurvivalDamageTaken;                      // 0x0370(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSingleSurvivalDamage;                           // 0x0374(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FastestFullEnergy;                                 // 0x0378(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalKill;                                         // 0x037C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TotalDead;                                         // 0x0380(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDamage;                                       // 0x0384(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalHeal;                                         // 0x0388(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDamageTaken;                                  // 0x038C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalHealTaken;                                    // 0x0390(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_394[0x4];                                      // 0x0394(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, float>                    MainAttackDistanceDict;                            // 0x0398(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         MainAttackDestructionHitCnt;                       // 0x03E8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CompetitionTime;                                   // 0x03EC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalTerrainKillDamage;                            // 0x03F0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SingleSurvivalTimeStart;                           // 0x03F4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UseTimeStart;                                      // 0x03F8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FastestFullEnergyStart;                            // 0x03FC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnterCampStart;                                    // 0x0400(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsEnterCamp;                                       // 0x0404(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_405[0xB];                                      // 0x0405(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FDistanceStruct>           LastBlowKillByDistanceDict;                        // 0x0410(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, struct FDistanceStruct>           MainAttackUseByDistanceDict;                       // 0x0460(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, struct FDistanceStruct>           MainAttackHitByDistanceDict;                       // 0x04B0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, struct FDistanceStruct>           MainAttackSummonedByDistanceDict;                  // 0x0500(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    IntervalMap;                                       // 0x0550(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            TargetActorSessionsForDestruct;                    // 0x05A0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         MaxSingleSurvivalDamageTemp;                       // 0x05F0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeathTime;                                         // 0x05F4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastKillTime;                                      // 0x05F8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KillTime;                                          // 0x05FC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastRebornTime;                                    // 0x0600(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastEnterBattleTime;                               // 0x0604(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstEnterBattle;                                 // 0x0608(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_609[0x3];                                      // 0x0609(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PresetDestructionDamage;                           // 0x060C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlastDestructionDamage;                            // 0x0610(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLastDeathIsFromEnemy;                             // 0x0614(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_615[0x3];                                      // 0x0615(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelEventSubsystem*                   LevelEventSubsystem;                               // 0x0618(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_620[0x50];                                     // 0x0620(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AbilityHitHero(int32 AbilityID, float HitDistance, int32 Count, bool IsCrit);
	void AbilityHitNormalSummoned(int32 AbilityID, float HitDistance, int32 Count);
	void AbilityHitShieldSummoned(int32 AbilityID, float HitDistance, int32 Count);
	void AddHealValue(int32 HealType, const struct FBattleInfoContext& BattleInfoContext);
	void AddInstigateDamageValue(int32 DamageType, const struct FBattleInfoContext& BattleInfoContext);
	void AddTakeDamageValue(const struct FBattleInfoContext& BattleInfoContext);
	void AddTotalDamage(float Value, int32 SculptID);
	void AddTotalHeal(float Value);
	void ClearCacheInfo();
	void ComputeLastBlowKillByDistance(float HitDistance);
	void ComputeMainAttackDistance(float HitDistance, int32 SculptID);
	void ComputeMainAttackHitByDistance(float HitDistance, int32 SculptID, int32 Count);
	void ComputeMainAttackSummonedByDistance(float HitDistance, int32 SculptID, int32 Count);
	void ComputeMainAttackUseByDistance(float FireDistacne, int32 Count, int32 SculptID);
	void ComputeSustainHitRate(const struct FBattleInfoContext& BattleInfoContext);
	class FString GetSculptName(int32 SculptID);
	void Initialize(class UBattleStatisticsManager* InBattleStatisticsManager, int32 InPlayerUID, int32 InSelectedHeroID, int32 InCurrentHeroID, int32 InHeroUID);
	void OnAbilityExtraHitRate(int32 AbilityID, const class FString& Key, float LaunchCnt, float HitCnt, float CritCnt);
	void OnAbilityExtraNormal(int32 AbilityID, const TMap<class FString, float>& Data);
	void OnActivateUltimateAbility(const struct FBattleInfoContext& BattleInfoContext);
	void OnActorAbilityBreak(class AActor* Source, int32 AbilityID, const class FString& SessionID);
	void OnActorAbilityMissile(const struct FBattleInfoContext& BattleInfoContext);
	void OnActorAbilityProjectileBegin(int32 AbilityID, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, class AActor* Instigator);
	void OnActorAbilityScopeBegin(int32 AbilityID, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, class AActor* Instigator);
	void OnActorActivateAbility(const struct FBattleInfoContext& BattleInfoContext);
	void OnActorAssistOther(int32 KillType, const struct FKillInfoContext& KillInfoContext);
	void OnActorBeKill(const struct FKillInfoContext& KillInfoContext);
	void OnActorEndAbility(const struct FBattleInfoContext& BattleInfoContext);
	void OnActorInstigateArmor(const struct FBattleInfoContext& BattleInfoContext);
	void OnActorInstigateDamage(const struct FBattleInfoContext& BattleInfoContext);
	void OnActorInstigateDestructionDamage(const struct FDestructionDamageInfoContext& DestructionDamageInfoContext, const struct FAttributeModifierParameter& ModifierParameter, const struct FDestructionExtraInfo& DestructionExtraInfo);
	void OnActorInstigateHeal(const struct FBattleInfoContext& BattleInfoContext);
	void OnActorInstigateNoTreatShield(const struct FBattleInfoContext& BattleInfoContext, const struct FNoTreatShieldChangeEventExtraData& ExtraData);
	void OnActorInstigateNotTreatArmor(const struct FBattleInfoContext& BattleInfoContext, const struct FNoTreatShieldChangeEventExtraData& ExtraData);
	void OnActorJoinKill(const struct FKillInfoContext& KillInfoContext);
	void OnActorKillOther(const struct FKillInfoContext& KillInfoContext);
	void OnActorPreActivateAbility(const struct FBattleInfoContext& BattleInfoContext);
	void OnActorTakeArmor(const struct FBattleInfoContext& BattleInfoContext);
	void OnActorTakeDamage(const struct FBattleInfoContext& BattleInfoContext);
	void OnActorTakeNoTreatShield(const struct FBattleInfoContext& BattleInfoContext, const struct FNoTreatShieldChangeEventExtraData& ExtraData);
	void OnActorTakeNotTreatArmor(const struct FBattleInfoContext& BattleInfoContext, const struct FNoTreatShieldChangeEventExtraData& ExtraData);
	void OnActorWeaponAmmoUse(const struct FWeaponAmmoInfoContext& AmmoContext);
	void OnBaseTargetActorEndAgentTask(const struct FBattleInfoContext& BattleInfoContext, const struct FEndAgentTaskInfo& EndAgentTaskInfo);
	void OnCriticalHitHero(int32 Count, int32 CurHeroId, int32 SculptID);
	void OnEndUltimateAbility(const struct FBattleInfoContext& BattleInfoContext);
	void OnEnergyChanged(const struct FBattleInfoContext& BattleInfoContext);
	void OnEnergyEmpty();
	void OnEnergyFull(int32 InControlHeroID, int32 InSelectedHeroID);
	void OnHealthFull();
	void OnHeroSpecialLog(int32 CoverType, int32 StatisticsType, int32 Value);
	void OnInstigateBuff(const struct FBuffInfoContext& BuffInfoContext);
	void OnInstigateBuffExtraDamage(int32 BuffID, float DeltaValue);
	void OnInstigateBuffExtraHeal(int32 BuffID, float DeltaValue);
	void OnInstigateBuffRemoved(const struct FBuffInfoContext& BuffInfoContext);
	void OnMainAttackHitHero(int32 Count, float HitDistance, int32 CurHeroId, int32 SculptID);
	void OnMainAttackHitNormalSummoned(int32 Count, float HitDistance, int32 CurHeroId, int32 SculptID);
	void OnMainAttackHitShieldSummoned(int32 Count, float HitDistance, int32 CurHeroId, int32 SculptID);
	void OnMainAttackUse(float FireDistance, int32 CurHeroId, int32 Count, int32 SculptID);
	void OnProjectileBegin(class AActor* Instigator, int32 AbilityID, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, float FireDistance);
	void OnQuitGame();
	void OnReborn(class AActor* Instigator, class AActor* Target);
	void OnRebornOther(class AActor* FinalInstigator, class AActor* FinalTarget);
	void OnScopeBegin(class AActor* Instigator, int32 AbilityID, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, float FireDistance);
	void OnSummonerTakeBuff(const struct FBuffInfoContext& BuffInfoContext);
	void OnSummonerTakeBuffRemoved(const struct FBuffInfoContext& BuffInfoContext);
	void OnSwitchIn();
	void OnSwitchOut();
	void OnTakeBuff(const struct FBuffInfoContext& BuffInfoContext);
	void OnTakeBuffRemoved(const struct FBuffInfoContext& BuffInfoContext);
	void OnTakeHeal(const struct FBattleInfoContext& BattleInfoContext);
	void PyInitialize();
	void PyOnTakePayloadHeal(const float HealValue);
	void ResetProperty();
	void SaveUseTime();
	void StartSustainHitRate(int32 AbilityID);
	void UpdateCurrentHeroID(int32 InCurrentHeroID);
	void UpdateLifeProperty();
	void UpdateSingleSurvivalTime(const struct FKillInfoContext& KillInfoContext, bool killother);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroStatisticsUnit">();
	}
	static class UHeroStatisticsUnit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeroStatisticsUnit>();
	}
};

// Class Marvel.MarvelGameStateBase
// 0x0010 (0x0508 - 0x04F8)
class AMarvelGameStateBase : public AGameStateBase
{
public:
	TMulticastInlineDelegate<void(EMarvelVoiceType VoiceType, class AActor* Character, int32 VoiceID, class FText VoiceLine, class AActor* ToCharacter)> OnVoicePostedDispatcher;                           // 0x04F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameStateBase">();
	}
	static class AMarvelGameStateBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelGameStateBase>();
	}
};

// Class Marvel.MarvelGameState
// 0x06A0 (0x0BA8 - 0x0508)
class AMarvelGameState : public AMarvelGameStateBase
{
public:
	TMulticastInlineDelegate<void(class AMarvelBaseCharacter* MarvelBaseCharacter, ESpawnMethod SpawnMethod)> OnSpawnCharacterDispatcher;                        // 0x0508(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FCharacterRebornParam& Param)> OnRebornDispatcher;                                // 0x0518(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FCharacterRebornParam& Param)> OnRebornCueDispatcher;                             // 0x0528(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_538[0x18];                                     // 0x0538(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PlayerState)> PlayerStateAddedDispatcher;                        // 0x0550(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PlayerState)> PlayerStateRemovedDispatcher;                      // 0x0560(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PlayerState, class AMarvelBaseCharacter* Character)> OnPossessCharacterDispatcher;                      // 0x0570(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PlayerState, int32 HeroID)> OnPlayerHeroIdChangedDispatcher;                   // 0x0580(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 KillerUID, int32 VictimUID)> OnPlayerKillDispatcher;                            // 0x0590(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FAttributeModifierParameter& Param)> OnPlayerKill_NextFrame_Dispatcher;                 // 0x05A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PlayerState)> OnPlayerDeathDispatcher;                           // 0x05B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PlayerState)> ResurrectionFailedDispatcher;                      // 0x05C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FUIKillInfo& KillInfo)> UIKillInfoDelegate;                                // 0x05D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FUIRebornInfo& RebornInfo)> UIRebornInfoDelegate;                              // 0x05E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 KillerUID, int32 VictimUID, struct FMarvelSingleSurvivalDamageUnit& DamageUnit)> OnPlayerKillDamageDispatcher;                      // 0x05F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              EnterRoundDispatcher;                              // 0x0600(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ExitRoundDispatcher;                               // 0x0610(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              EndBattleDispatcher;                               // 0x0620(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Value)> OnCharacterRegister;                               // 0x0630(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Value)> OnCharacterUnregister;                             // 0x0640(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	EDeadzoneSwitchTiming                         DeadzoneSwitchTiming;                              // 0x0650(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_651[0x3];                                      // 0x0651(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ThresholdToNotifyServerTimeDeltaChange;            // 0x0654(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_658[0x8];                                      // 0x0658(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnServerTimeDeltaChanged;                          // 0x0660(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnServerTimeDeltaChanged_InDuplicateLevel;         // 0x0670(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMap<int32, class AMarvelPlayerState*>        PlayerStateMap;                                    // 0x0680(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         ModeID;                                            // 0x06D0(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D4[0x4];                                      // 0x06D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AThreatValueAdmin>          ThreatValueAdminClass;                             // 0x06D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UBattleStatisticsManager>   BattleStatisticsManagerClass;                      // 0x06E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AVirtualActorManager>       VirtualActorManagerClass;                          // 0x06E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AThreatValueAdmin*                      ThreatValueAdmin;                                  // 0x06F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AHeroVoiceManager>          HeroVoiceManagerClass;                             // 0x06F8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AHeroVoiceManager*                      HeroVoiceManager;                                  // 0x0700(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBattleStatisticsManager*               BattleStatisticsManager;                           // 0x0708(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AVirtualActorManager*                   VirtualActorManager;                               // 0x0710(0x0008)(BlueprintVisible, Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            CureEffectClass;                                   // 0x0718(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            TerrainKillEffectClass;                            // 0x0720(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            WizardKillEffectClass;                             // 0x0728(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            WizardDamageEffectClass;                           // 0x0730(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AMarvelBaseCharacter*>           AllCharacters;                                     // 0x0738(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class AMarvelTeamState>           TeamStateClass;                                    // 0x0748(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class APlayerState*>                   BlueTeamArray;                                     // 0x0750(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class APlayerState*>                   RedTeamArray;                                      // 0x0760(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class APlayerState*>                   ReplayPlayerArray;                                 // 0x0770(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TSubclassOf<class UHighLightDataMananger>     HighLightDataManangerClass;                        // 0x0780(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHighLightDataMananger*                 HighLightDataMananger;                             // 0x0788(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_790[0x40];                                     // 0x0790(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FServerAttributeModifierRPCBatch> LocalServerAttributeModifierRPCBatchData;          // 0x07D0(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_7E0[0xB0];                                     // 0x07E0(0x00B0)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsEnableSnapshot;                                 // 0x0890(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_891[0x7];                                      // 0x0891(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UCareerInfoController>      CareerInfoControllerClass;                         // 0x0898(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCareerInfoController*                  CareerInfoController;                              // 0x08A0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataBaseManager*                       DataBaseManager;                                   // 0x08A8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DesDamageMul;                                      // 0x08B0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8B4[0x4];                                      // 0x08B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UActionLogController>       ActionLogControllerClass;                          // 0x08B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActionLogController*                   ActionLogController;                               // 0x08C0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAchievementManager>        AchievementManagerClass;                           // 0x08C8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAchievementManager*                    AchievementManager;                                // 0x08D0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelReplayConfig                    ReplayConfig;                                      // 0x08D8(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 SessionName;                                       // 0x08F0(0x0010)(BlueprintVisible, Net, ZeroConstructor, RepNotify, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DemoDisplayID;                                     // 0x0900(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecordStartTime;                                   // 0x0910(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_914[0x4];                                      // 0x0914(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEpicMomentReplicationInfo             EpicMomentInfo;                                    // 0x0918(0x0120)(Net, NativeAccessSpecifierPublic)
	TArray<int32>                                 LockedHeroIDs;                                     // 0x0A38(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FPlayerStateArray>              BattleSidePlayerStateArray;                        // 0x0A48(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FTeammateCollisionSpec>         RedTeammate;                                       // 0x0A58(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FTeammateCollisionSpec>         BlueTeammate;                                      // 0x0A68(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bShowThreatValue;                                  // 0x0A78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A79[0x3];                                      // 0x0A79(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGuid                                  PlaySessionGuid;                                   // 0x0A7C(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A8C[0x4];                                      // 0x0A8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBlueprint*>                     PreLoadBPClass;                                    // 0x0A90(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<int32, class AMarvelTeamState*>          TeamStateMap;                                      // 0x0AA0(0x0050)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_AF0[0x60];                                     // 0x0AF0(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSurvivalDamageParam>           WaitSendSurvivals;                                 // 0x0B50(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAttributeEventParam>           WaitSendAttributeEvents;                           // 0x0B60(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FCameraInfoParam>               WaitSendCameraInfoParams;                          // 0x0B70(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         CharAoiDist;                                       // 0x0B80(0x0004)(Edit, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B84[0x4];                                      // 0x0B84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        ConsistentRandSeed;                                // 0x0B88(0x0008)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FTeamSharedAbilityCacheData>    TeamSharedAbilityCacheData;                        // 0x0B90(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class AMarvelBondManager*                     BondManager;                                       // 0x0BA0(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static struct FServerDeltaTimeBindHandle BindServerDeltaTimeChanged(class UObject* WCO, TDelegate<void()> Callback);
	static class AMarvelGameState* GetGameStateInSameLevelCollection(class UObject* WCO);
	static void MarvelGetAllyCharacters(class AMarvelBaseCharacter* Character, bool bInNeedAlive, TArray<class AActor*>* OutAllies);
	static void MarvelGetEnemyCharacters(class AMarvelBaseCharacter* Character, bool bInNeedAlive, TArray<class AActor*>* OutEnemies);
	static void MarvelGetTwoSideCharacters(class AMarvelBaseCharacter* Character, bool bInNeedAlive, TArray<class AActor*>* OutCharaters);
	static void UnbindServerDeltaTimeChanged(struct FServerDeltaTimeBindHandle& Handle);

	void AddPlayerStateToTeamArray(class APlayerState* PlayerState);
	void AddResurrectHandler(TDelegate<void(class AActor* TargetActor)> ResurrectHandler, int32 InPriority);
	void CheckPhysicsPerformance();
	void CreateAchievementManager();
	void CreateActionLogController();
	void CreateBattleStatisticsManager();
	void CreateCareerInfoController();
	void CreateDataBaseManager();
	void CreateHighLightDataManager();
	void DestroyAchievementManager();
	void DestroyActionLogController();
	void DestroyBattleStatisticsManager();
	void DestroyCareerInfoController();
	void DestroyDataBaseManager();
	void DestroyHighLightDataManager();
	bool FindAndTryResurrectMethod(class UMarvelBaseAbilitySystemComponent* TargetAbilitySystemComponent, int32 MaxConsiderPriority);
	void GetAllyCharacters(class AMarvelBaseCharacter* Character, bool bInNeedAlive, TArray<class AActor*>* OutAllies);
	void GetCharactersByGroup(TArray<class AActor*>* OutRedGroup, TArray<class AActor*>* OutBlueGroup);
	void GetEnemyCharacters(class AMarvelBaseCharacter* Character, bool bInNeedAlive, TArray<class AActor*>* OutEnemies);
	class AMarvelLevelCtrlPawn* GetLevelCtrlPawn();
	class AMarvelBaseCharacter* GetPlayerCharacterByUID(int32 TargetUID);
	class AMarvelPlayerState* GetPlayerState(int32 UID);
	class AMarvelPlayerState* GetPlayPlayerState(int32 UID);
	int32 GetRandomTestHeroSkinId(int32 HeroID);
	const int32 GetTeamPlayerCount(const int32 InTeamID);
	class AMarvelTeamState* GetTeamState(int32 TeamID);
	void GetTwoSideCharacters(class AMarvelBaseCharacter* Character, bool bInNeedAlive, TArray<class AActor*>* OutCharaters);
	bool HasRoundStarted();
	void MulticastAttributeEvent_Merge(const TArray<struct FAttributeEventParam>& ParamEvents);
	void MulticastDamageEvent(class UAbilitySystemComponent* SourceASC, class UAbilitySystemComponent* TargetASC, const struct FAttributesModifierParameter& ModifierParam);
	void MulticastDeathEvent(class UAbilitySystemComponent* SourceASC, class UAbilitySystemComponent* TargetASC, const struct FAttributesModifierParameter& ModifierParam);
	void MulticastRebornEvent(class UAbilitySystemComponent* SourceComp, const struct FCharacterRebornParam& RebornParam);
	void MulticastSpawnCharacter(class AMarvelBaseCharacter* MarvelBaseCharacter, ESpawnMethod Method);
	void MulticastSurvivalDamageEvent(int32 KillerUID, int32 VictimUID, const struct FMarvelSingleSurvivalDamageUnit& DamageUnit);
	void MulticastSurvivalDamageEvent_Merge(const TArray<struct FSurvivalDamageParam>& SurvivalPrams);
	void MulticastTreatEvent(class UAbilitySystemComponent* SourceASC, class UAbilitySystemComponent* TargetASC, const struct FAttributesModifierParameter& ModifierParam);
	void MulticastUIRebornInfo(const struct FUIRebornInfo& RebornInfo);
	bool NeedsEpicMomentForMatch();
	void OnCreateRHIChecker();
	void OnPlayerHeroIdChanged(class AMarvelPlayerState* PS, int32 HeroID);
	void OnPlayerPossessPawn(class AMarvelPlayerState* PlayerState, class AMarvelBaseCharacter* Character);
	void OnRep_CharAoiDist();
	void OnRep_ConsistentRandSeed();
	void OnRep_SessionName();
	void PullAttributeModifierRPCBatch();
	void ReceiveReplayIDChanged();
	void RegisterCharacter(class AMarvelBaseCharacter* InCharacter);
	void RemoveResurrectHandler(TDelegate<void(class AActor* TargetActor)> ResurrectHandler);
	void SendCameraInfoRpc(const TArray<struct FCameraInfoParam>& CameraInfos);
	void SetLockedHeroIDs(const TArray<int32>& InLockedHeroIDs);
	void SetReplayPlayerArray(const TArray<class APlayerState*>& inArray);
	void SubsystemInitialize();
	void UnregisterCharacter(class AMarvelBaseCharacter* InCharacter);
	void UpdateMarvelPlayerStateBattleSide(class AMarvelPlayerState* MarvelPS, EBattleSide OldSide);

	float GetServerWorldTimeSecondsDelta() const;
	bool IsLockedHero(int32 HeroID) const;
	void UpdateCharactersAoiInWorld() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameState">();
	}
	static class AMarvelGameState* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelGameState>();
	}
};

// Class Marvel.AbilityAdaptiveTriggerData
// 0x0018 (0x0050 - 0x0038)
class UAbilityAdaptiveTriggerData final : public UPrimaryDataAsset
{
public:
	uint8                                         Threshold;                                         // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FInputHapticFeedBackEffect>     HapticFeedBackEffects;                             // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityAdaptiveTriggerData">();
	}
	static class UAbilityAdaptiveTriggerData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityAdaptiveTriggerData>();
	}
};

// Class Marvel.AdaptiveTriggerLibrary
// 0x0000 (0x0030 - 0x0030)
class UAdaptiveTriggerLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool GetAbilityAdaptiveTrigger(int32 AbilityID, TArray<struct FInputHapticFeedBackEffect>* AbilityAdaptiveTrigger, uint8* Threshold);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AdaptiveTriggerLibrary">();
	}
	static class UAdaptiveTriggerLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAdaptiveTriggerLibrary>();
	}
};

// Class Marvel.MarvelPlayerView
// 0x0E38 (0x0E68 - 0x0030)
class UMarvelPlayerView final : public UObject
{
public:
	uint8                                         Pad_30[0x7E0];                                     // 0x0030(0x07E0)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnSpectationModeChanged;                           // 0x0810(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_820[0x648];                                    // 0x0820(0x0648)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class AMarvelBaseCharacter* ClientGetViewingCharacter(class UObject* WCO, EGetPlayerView GetPlayerView);
	static class UMarvelPlayerView* Get(const class UObject* WCO, EGetPlayerView GetPlayerView);

	class AMarvelBaseCharacter* GetViewingCharacter();
	EPlayerViewMode GetViewMode();
	void SetTrueSightEnable(bool bInEnable);
	void UpdateViewMode();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPlayerView">();
	}
	static class UMarvelPlayerView* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelPlayerView>();
	}
};

// Class Marvel.MarvelGlobals
// 0x0060 (0x0090 - 0x0030)
class UMarvelGlobals final : public UObject
{
public:
	uint8                                         Pad_30[0x30];                                      // 0x0030(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        GameDataRef;                                       // 0x0060(0x0028)(Edit, ZeroConstructor, Config, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelGameData*                        GameData;                                          // 0x0088(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGlobals">();
	}
	static class UMarvelGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGlobals>();
	}
};

// Class Marvel.HeroAudioStateManager
// 0x00D0 (0x0100 - 0x0030)
class UHeroAudioStateManager final : public UObject
{
public:
	uint8                                         Pad_30[0xD0];                                      // 0x0030(0x00D0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnViewCharacterChanged(class AActor* ViewTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroAudioStateManager">();
	}
	static class UHeroAudioStateManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeroAudioStateManager>();
	}
};

// Class Marvel.MarvelAeroAudioMetaData
// 0x0088 (0x00C0 - 0x0038)
class UMarvelAeroAudioMetaData final : public UDataAsset
{
public:
	TMap<class FString, struct FAeroAudioStateMetaData> AeroMetaData;                                      // 0x0038(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         MoveDirThreshold;                                  // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAeroAudioStateRTPC                    AeroStateRTPC;                                     // 0x008C(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAeroAudioMetaData">();
	}
	static class UMarvelAeroAudioMetaData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAeroAudioMetaData>();
	}
};

// Class Marvel.MarvelAeroAudioData
// 0x0080 (0x00B8 - 0x0038)
class UMarvelAeroAudioData final : public UDataAsset
{
public:
	class UAkAudioEvent*                          AeroIdle;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AeroIdleTurn;                                      // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AeroGroundLoop;                                    // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AeroGroundStart;                                   // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AeroGroundStop;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AeroJumpStart;                                     // 0x0060(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AeroJumpFalling;                                   // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AeroJumpLand;                                      // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AeroFreeFlyLoop;                                   // 0x0078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AeroFreeFlyStart;                                  // 0x0080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AeroFreeFlyStop;                                   // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AeroDescendStart;                                  // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AeroDescendLoop;                                   // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AeroAscendStart;                                   // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AeroAscendLoop;                                    // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AeroDirChange;                                     // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAeroAudioData">();
	}
	static class UMarvelAeroAudioData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAeroAudioData>();
	}
};

// Class Marvel.HydraDoorA
// 0x00F8 (0x05E0 - 0x04E8)
class AHydraDoorA final : public ADatasmithSceneActor
{
public:
	struct FVector                                TargetLocation;                                    // 0x04E8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeConsume;                                       // 0x0500(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_504[0x4];                                      // 0x0504(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0508(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_510[0x8];                                      // 0x0510(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 AudioBP;                                           // 0x0518(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickInterval;                                      // 0x0520(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_524[0x4];                                      // 0x0524(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         OpenDoorEffect;                                    // 0x0528(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OpenDoorEffectTime;                                // 0x0530(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_534[0xC];                                      // 0x0534(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OpenDoorEffectTransform;                           // 0x0540(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A0[0x40];                                     // 0x05A0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void StartOpen();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HydraDoorA">();
	}
	static class AHydraDoorA* GetDefaultObj()
	{
		return GetDefaultObjImpl<AHydraDoorA>();
	}
};

// Class Marvel.AeroAudioInterface
// 0x0000 (0x0030 - 0x0030)
class IAeroAudioInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AeroAudioInterface">();
	}
	static class IAeroAudioInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAeroAudioInterface>();
	}
};

// Class Marvel.DestructionDamageType
// 0x0008 (0x0050 - 0x0048)
class UDestructionDamageType : public UDamageType
{
public:
	EDamageTypeForDestruction                     DestructionDamageType;                             // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DestructionDamageType">();
	}
	static class UDestructionDamageType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDestructionDamageType>();
	}
};

// Class Marvel.LowDestructionDamage
// 0x0000 (0x0050 - 0x0050)
class ULowDestructionDamage final : public UDestructionDamageType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LowDestructionDamage">();
	}
	static class ULowDestructionDamage* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULowDestructionDamage>();
	}
};

// Class Marvel.MarvelAnimInstance
// 0x04E0 (0x0910 - 0x0430)
class UMarvelAnimInstance : public UAnimInstance
{
public:
	uint8                                         Pad_428[0x40];                                     // 0x0428(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     HitBodyCurve;                                      // 0x0468(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FRuntimeFloatCurve                     HitHeadCurve;                                      // 0x04F0(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class FString>                         HitIKBonesArray;                                   // 0x0578(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  UpdateFlyTags;                                     // 0x0588(0x0068)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  BlockGroundMotionTags;                             // 0x05F0(0x0068)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  UpdateHeroStateTags;                               // 0x0658(0x0068)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMontageCurveEnhance                   MontageCurveEnhance;                               // 0x06C0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FMarvelAnimOffsetParams                OffsetParams;                                      // 0x06E8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMarvelAnimWeaponParams                WeaponParams;                                      // 0x0700(0x0080)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bSlidingZipline;                                   // 0x0780(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInAirBase;                                       // 0x0781(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsBattling;                                       // 0x0782(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_783[0x1];                                      // 0x0783(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DirectionBase;                                     // 0x0784(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AccelerationDirectionBase;                         // 0x0788(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpeedBase;                                         // 0x078C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         MovementModeBase;                                  // 0x0790(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsAcceleratingBase;                                // 0x0791(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_792[0x6];                                      // 0x0792(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               LookingRotationBase;                               // 0x0798(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         Pitch;                                             // 0x07B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Yaw;                                               // 0x07B4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                Velocity;                                          // 0x07B8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         GroundMotionAnimIndex;                             // 0x07D0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GroundMotionSwitchBlendTime;                       // 0x07D4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AeroAnimIndex;                                     // 0x07D8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsLeftHandIKEnabled;                              // 0x07DC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7DD[0x3];                                      // 0x07DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   OwningCharacter;                                   // 0x07E0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7E8[0xD0];                                     // 0x07E8(0x00D0)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelMoveLogicBaseComponent*          MoveLogicCom;                                      // 0x08B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPhysicalInteractionComponent*          PhysicalInteractionComp;                           // 0x08C0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UEquipComponent*                        EquipComponent;                                    // 0x08C8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAimOffsetSubAnimInstance*              AimOffsetAnimInstanceCached;                       // 0x08D0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGroundMotionSubAnimInstance*           GroundMotionSubAnimInstanceCached;                 // 0x08D8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 ActorMesh;                                         // 0x08E0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8E8[0x28];                                     // 0x08E8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DetermineGroundMotionAnim(int32* AnimIndex) const;
	bool IsLeftHandIKEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAnimInstance">();
	}
	static class UMarvelAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAnimInstance>();
	}
};

// Class Marvel.AeroLocoMotionSubAnimInstance
// 0x0160 (0x0A70 - 0x0910)
class UAeroLocoMotionSubAnimInstance final : public UMarvelAnimInstance
{
public:
	uint8                                         bUseGroundMotion : 1;                              // 0x0910(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_911[0x3];                                      // 0x0911(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         IdleIndex;                                         // 0x0914(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentIdleIndex;                                  // 0x0918(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIdleChanged;                                      // 0x091C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91D[0x3];                                      // 0x091D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            Idle2IdleData0_1;                                  // 0x0920(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Idle2IdleData1_0;                                  // 0x0928(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_930[0x4];                                      // 0x0930(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsSpecialIdleEnabled;                             // 0x0934(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_935[0x3];                                      // 0x0935(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToIdleSpecial;                                 // 0x0938(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTimeToIdleSpecial;                          // 0x093C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bIsSpecialIdle : 1;                                // 0x0940(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_941[0x3];                                      // 0x0941(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AeroIndex;                                         // 0x0944(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentAeroIndex;                                  // 0x0948(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAeroChanged;                                      // 0x094C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94D[0x3];                                      // 0x094D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            LastAero2AeroData;                                 // 0x0950(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Aero2AeroData0_1;                                  // 0x0958(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Aero2AeroData1_0;                                  // 0x0960(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_968[0x4];                                      // 0x0968(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LandIndex;                                         // 0x096C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentLandIndex;                                  // 0x0970(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLandChanged;                                      // 0x0974(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_975[0x3];                                      // 0x0975(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            Land2LandData0_1;                                  // 0x0978(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Land2LandData1_0;                                  // 0x0980(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_988[0x8];                                      // 0x0988(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            CurrentTransition;                                 // 0x0990(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAeroLocotionTransitionVector          CurrentTransitionKey;                              // 0x0998(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoAccelerateRemainingTimeDelta;                    // 0x09A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NoAccelerateRemaining;                             // 0x09AC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsAccelerating;                                    // 0x09AD(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9AE[0x2];                                      // 0x09AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InputsVector;                                      // 0x09B0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C8[0x8];                                      // 0x09C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bIsAscending : 1;                                  // 0x09D0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsDescending : 1;                                 // 0x09D0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsHovering : 1;                                   // 0x09D0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsEntryAeroing : 1;                               // 0x09D0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsEntryLanding : 1;                               // 0x09D0(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsIdle2Land : 1;                                  // 0x09D0(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Idle2Land : 1;                                     // 0x09D0(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Idle2LandManual : 1;                               // 0x09D0(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9D1[0x7];                                      // 0x09D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            Idle2LandData;                                     // 0x09D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BitPad_9E0_0 : 1;                                  // 0x09E0(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bIsIdle2Aero : 1;                                  // 0x09E0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Idle2Aero : 1;                                     // 0x09E0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Idle2AeroManual : 1;                               // 0x09E0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9E1[0x7];                                      // 0x09E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            Idle2AeroData;                                     // 0x09E8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BitPad_9F0_0 : 1;                                  // 0x09F0(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bIsLand2Idle : 1;                                  // 0x09F0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Land2Idle : 1;                                     // 0x09F0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Land2IdleManual : 1;                               // 0x09F0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_9F1[0x7];                                      // 0x09F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            Land2IdleData;                                     // 0x09F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BitPad_A00_0 : 1;                                  // 0x0A00(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bIsLand2Aero : 1;                                  // 0x0A00(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Land2Aero : 1;                                     // 0x0A00(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Land2AeroManual : 1;                               // 0x0A00(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A01[0x7];                                      // 0x0A01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            Land2AeroData;                                     // 0x0A08(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BitPad_A10_0 : 1;                                  // 0x0A10(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bIsAero2Idle : 1;                                  // 0x0A10(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Aero2Idle : 1;                                     // 0x0A10(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Aero2IdleManual : 1;                               // 0x0A10(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A11[0x7];                                      // 0x0A11(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            Aero2IdleData;                                     // 0x0A18(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BitPad_A20_0 : 1;                                  // 0x0A20(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bIsAero2Land : 1;                                  // 0x0A20(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Aero2Land : 1;                                     // 0x0A20(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Aero2LandManual : 1;                               // 0x0A20(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_A21[0x7];                                      // 0x0A21(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            Aero2LandData;                                     // 0x0A28(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A30[0x4];                                      // 0x0A30(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LookingYawRateLimit;                               // 0x0A34(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnYaw2StopRThreshold;                            // 0x0A38(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnYaw2StopLThreshold;                            // 0x0A3C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrunYaw2StopDeltaThreshold;                        // 0x0A40(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrunYaw2StopBreakThreshold;                        // 0x0A44(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnBlendSpaceScale;                               // 0x0A48(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookingYawRate;                                    // 0x0A4C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothInterpSpeed;                                 // 0x0A50(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         YawRateAbsoluteDelta;                              // 0x0A54(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmoothYawRate;                                     // 0x0A58(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NoTurnRemaining;                                   // 0x0A5C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsTurning;                                         // 0x0A5D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A5E[0x2];                                      // 0x0A5E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NoTurnRemainingTimeDelta;                          // 0x0A60(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A64[0xC];                                      // 0x0A64(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AeroLocoMotionSubAnimInstance">();
	}
	static class UAeroLocoMotionSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAeroLocoMotionSubAnimInstance>();
	}
};

// Class Marvel.MarvelListenCharacterTranslatedInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelListenCharacterTranslatedInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelListenCharacterTranslatedInterface">();
	}
	static class IMarvelListenCharacterTranslatedInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelListenCharacterTranslatedInterface>();
	}
};

// Class Marvel.HeroVoiceAbilityWatcher
// 0x0300 (0x03F0 - 0x00F0)
class UHeroVoiceAbilityWatcher final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(int32 Value)>   OnAbilityInitDelegate;                             // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(int32 AbilityID, EAbilityVoiceStage AbilityStage)> OnAbilityStageDelegate;                            // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(int32 AbilityID)> OnAbilityCancelDelegate;                           // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnCharacterControlledDelegate;                     // 0x0120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnForceControlledDelegate;                         // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_140[0xB8];                                     // 0x0140(0x00B8)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UVoiceStageWatcher*>        AbilityStageWatchers;                              // 0x01F8(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_248[0x140];                                    // 0x0248(0x0140)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           EnsureTimerHandle;                                 // 0x0388(0x0018)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<int32, double>                           AbilityVoPostedTime;                               // 0x03A0(0x0050)(Transient, NativeAccessSpecifierPrivate)

public:
	void InnerAbilityCancel(int32 AbilityID);
	void InnerAbilityCommit(class UMarvelGameplayAbility* Ability, float CostValue, const struct FGameplayTag& CostTag);
	void InnerAbilityInitialize(int32 AbilityID);
	void InnerAbilityStage(int32 AbilityID, EMarvelAbilityStage Stage);
	void MarkAbilityVoSucceed(int32 AbilityID, EAbilityVoiceStage AbilityStage);
	void OnAbilityStageChangeReceived(int32 HeroUID, int32 AbilityID, EAbilityVoiceStage AbilityStage);
	void OnBindTagUpdated(const struct FGameplayTag& TagUpdated, bool bTagExists);
	void Watch();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroVoiceAbilityWatcher">();
	}
	static class UHeroVoiceAbilityWatcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeroVoiceAbilityWatcher>();
	}
};

// Class Marvel.EffectAbility_BlockFly
// 0x0098 (0x1190 - 0x10F8)
class UEffectAbility_BlockFly : public UMarvelEffectGameplayAbility
{
public:
	uint8                                         Pad_10F8[0x14];                                    // 0x10F8(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FlyModeID;                                         // 0x110C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1110[0x80];                                    // 0x1110(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void OnTagUpdated(const struct FGameplayTag& InTag, bool bInExists);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EffectAbility_BlockFly">();
	}
	static class UEffectAbility_BlockFly* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEffectAbility_BlockFly>();
	}
};

// Class Marvel.AeroLocoMotionSubAnimInstanceV2
// 0x0AC0 (0x0FC0 - 0x0500)
class UAeroLocoMotionSubAnimInstanceV2 final : public UMarvelMultiAssetsAnimInstanceBase
{
public:
	EAeroState                                    DefaultAeroState;                                  // 0x0500(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoUseTransition;                                // 0x0501(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseGroundMotion;                                  // 0x0502(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_503[0x1];                                      // 0x0503(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MovingDelta;                                       // 0x0504(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LookingYawRateLimit;                               // 0x0508(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurnYaw2StopRThreshold;                            // 0x050C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurnYaw2StopLThreshold;                            // 0x0510(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TrunYaw2StopDeltaThreshold;                        // 0x0514(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TrunYaw2StopBreakThreshold;                        // 0x0518(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurnBlendSpaceScale;                               // 0x051C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SmoothInterpSpeed;                                 // 0x0520(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NoTurnRemainingTimeDelta;                          // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NoAccelerateRemainingTimeDelta;                    // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PivotReamingTime;                                  // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         UpDownAbs;                                         // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PitchRate;                                         // 0x0534(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PitchRateClamp;                                    // 0x0538(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PitchRateInterpSpeed;                              // 0x053C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PitchInterpSpeed;                                  // 0x0540(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NoCrookedInputRemainingTime;                       // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxPtichRate;                                      // 0x0548(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MovingVelocityNormalInterpSpeed;                   // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseAeroJump;                                      // 0x0550(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_551[0x7];                                      // 0x0551(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            LandBlendCurve;                                    // 0x0558(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   MaskLandBlendFactorCurveName;                      // 0x0560(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsLanding;                                         // 0x056C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsAscending;                                       // 0x056D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsDescending;                                      // 0x056E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsFreeFlying;                                      // 0x056F(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsHovering;                                        // 0x0570(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsFlyBlocked;                                      // 0x0571(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsAccelerating;                                    // 0x0572(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_573[0x5];                                      // 0x0573(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InputsVector;                                      // 0x0578(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                MoveInputsVector;                                  // 0x0590(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                CurrAccASSquare;                                   // 0x05A8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                MovingVelocityNormal;                              // 0x05C0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          NoCrookedInputRemaining;                           // 0x05D8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5D9[0x3];                                      // 0x05D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StopDirection;                                     // 0x05DC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SubIsInAir;                                        // 0x05E0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bNeedJumpStart;                                    // 0x05E1(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bNeedGround2Falling;                               // 0x05E2(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5E3[0x1];                                      // 0x05E3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         JumpLandBlendAlpha;                                // 0x05E4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Idle_InTurning;                                    // 0x05E8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Idle_Turn2Idle;                                    // 0x05E9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Idle_Stop2Turn;                                    // 0x05EA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Idle_Turn2LStop;                                   // 0x05EB(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Idle_Turn2RStop;                                   // 0x05EC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5ED[0x3];                                      // 0x05ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Idle_TurnRate;                                     // 0x05F0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Ground_Entry2Idle;                                 // 0x05F4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Ground_Entry2Loop;                                 // 0x05F5(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Ground_Loop2Idle;                                  // 0x05F6(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Ground_Loop2Stop;                                  // 0x05F7(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Ground_Acc1ToAcc2;                                 // 0x05F8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Ground_Acc2ToAcc1;                                 // 0x05F9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Ground_Loop2Acc;                                   // 0x05FA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FreeFly_InAscending;                               // 0x05FB(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FreeFly_InDescending;                              // 0x05FC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FreeFly_InHovering;                                // 0x05FD(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FreeFly_Acc1ToAcc2;                                // 0x05FE(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FreeFly_Acc2ToAcc1;                                // 0x05FF(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FreeFly_Loop2ACC;                                  // 0x0600(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FreeFly_Loop2UpDown;                               // 0x0601(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FreeFly_UpDown1ToUpDown2;                          // 0x0602(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FreeFly_UpDown2ToUpDown1;                          // 0x0603(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FreeFly_Entry2AddUp;                               // 0x0604(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FreeFly_Entry2AddDown;                             // 0x0605(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FreeFly_InBUp;                                     // 0x0606(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FreeFly_InFUp;                                     // 0x0607(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FreeFly_InFDown;                                   // 0x0608(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FreeFly_InStop;                                    // 0x0609(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FreeFly_InIdle;                                    // 0x060A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          FreeFly_HasFBInputs;                               // 0x060B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FreeFly_UpOrDownBlendRate;                         // 0x060C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Ascend_Entry2Start;                                // 0x0610(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Descend_Entry2Start;                               // 0x0611(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Trans_F2D;                                         // 0x0612(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Trans_D2F;                                         // 0x0613(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Trans_F2G;                                         // 0x0614(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Trans_G2F;                                         // 0x0615(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Trans_D2G;                                         // 0x0616(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_617[0x1];                                      // 0x0617(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAeroAnimContainer                     AeroAnims;                                         // 0x0618(0x0118)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FAeroAnimContainer                     AeroAnims_Other;                                   // 0x0730(0x0118)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FAeroAnimContainer                     AeroAnims_AutoBlend;                               // 0x0848(0x0118)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UAnimSequence*                          AutoBlendIdleAnim;                                 // 0x0960(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                Velocity;                                          // 0x0968(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_980[0x598];                                    // 0x0980(0x0598)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelMoveLogicBaseComponent*          MoveLogicCom;                                      // 0x0F18(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F20[0xA0];                                     // 0x0F20(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AeroLocoMotionSubAnimInstanceV2">();
	}
	static class UAeroLocoMotionSubAnimInstanceV2* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAeroLocoMotionSubAnimInstanceV2>();
	}
};

// Class Marvel.AeroStateSubAnimInstance
// 0x0000 (0x0910 - 0x0910)
class UAeroStateSubAnimInstance final : public UMarvelAnimInstance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AeroStateSubAnimInstance">();
	}
	static class UAeroStateSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAeroStateSubAnimInstance>();
	}
};

// Class Marvel.MarvelGameplayEffectSkillEnergy3Regen
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectSkillEnergy3Regen final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectSkillEnergy3Regen">();
	}
	static class UMarvelGameplayEffectSkillEnergy3Regen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectSkillEnergy3Regen>();
	}
};

// Class Marvel.MarvelFastRepInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelFastRepInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelFastRepInterface">();
	}
	static class IMarvelFastRepInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelFastRepInterface>();
	}
};

// Class Marvel.HeroStatisticsController
// 0x0070 (0x00A0 - 0x0030)
class UHeroStatisticsController final : public UObject
{
public:
	class UActionLogController*                   LogController;                                     // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelGameState*                       MarvelGameState;                                   // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayEventManager*            GlobalEventManager;                                // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelEventSubsystem*                   LevelEventSubsystem;                               // 0x0048(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class UPlayerStatistics*>         PlayerToStatistics;                                // 0x0050(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void BindEvents();
	TSubclassOf<class UHeroStatistics> GetHeroStatisticsClass(int32 HeroID);
	void Initialize(class UActionLogController* InLogController);
	void OccupyOrCompetitionPlayerAdd(int32 UID);
	void OccupyOrCompetitionPlayerRemove(int32 UID);
	void OnActorAbilityEnd(class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility);
	void OnActorAbilityPreActivate(class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility);
	void OnActorDeath(class AActor* Source, class AActor* Target, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void OnActorEnergyChanged(class AActor* Source, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void OnActorEnergyFull(class AActor* Source, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void OnActorPostTakeDamage(class AActor* InInstigator, class AActor* InTarget, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnActorReborn(class AActor* Instigator, class AActor* RebornActor);
	void OnAddPlayerState(class AMarvelPlayerState* PlayerState);
	void OnDelPlayerState(class AMarvelPlayerState* PlayerState);
	void OnPossessCharacter(class AMarvelPlayerState* PlayerState, class AMarvelBaseCharacter* Character);
	void OnPrePartNameChange(const class FString& CurrentPartName);
	void OnRecordCompetitionInfo(struct FActionLogCompetitionRecord* CompetitionRecord);
	void OnRecordEnergyChanged(const struct FActionLogEnergyChangeRecord& EnergyChangeRecord);
	void OnRecordFirstEnterBattle(struct FActionLogFirstEnterBattle* FirstEnterBattle);
	void OnRecordHeroSculptIDChange(struct FActionLogHeroSculptIDChangeRecord* HeroSculptIDChangeRecord);
	void OnRecordHeroSwitchOut(struct FActionLogHeroUseRecord* HeroUseRecord);
	void OnRecordPlayerLogoutBattle(const int32 UID, const int32 HeroID);
	void OnRecordUltimateRelease(struct FActionLogUltimateRelease* ReleaseRecord);
	void OnRoundBattleEnd();
	void OnRoundBattleStart();
	void OnTransitionStart();
	void RecordHeroSculptIDChange(class AActor* Source, const int32 SculptID);
	void Shutdown();
	void UnbindEvents();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroStatisticsController">();
	}
	static class UHeroStatisticsController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeroStatisticsController>();
	}
};

// Class Marvel.AeroMotionSubAnimInstance
// 0x0050 (0x0960 - 0x0910)
class UAeroMotionSubAnimInstance final : public UMarvelAnimInstance
{
public:
	uint8                                         CurrentAssetIndex;                                 // 0x0910(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_911[0x1];                                      // 0x0911(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          AeroMotionAnimDataChanged;                         // 0x0912(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_913[0x5];                                      // 0x0913(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           SpecialIdleTimer;                                  // 0x0918(0x0018)(BlueprintVisible, BlueprintReadOnly, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LookingYawRateLimit;                               // 0x0930(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LookingYawRate;                                    // 0x0934(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentTimeToIdleSpecial;                          // 0x0938(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSpecialIdleEnabled;                             // 0x093C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_93D[0x3];                                      // 0x093D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeToIdleSpecial;                                 // 0x0940(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bUseGroundMotion : 1;                              // 0x0944(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIdleInAir : 1;                                    // 0x0944(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSpecialIdle : 1;                                // 0x0944(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsAscending : 1;                                  // 0x0944(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsNotAscending : 1;                               // 0x0944(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsDescending : 1;                                 // 0x0944(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsNotDescending : 1;                              // 0x0944(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasLandAeroTransitions : 1;                       // 0x0944(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsLand2Aero : 1;                                  // 0x0945(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsAero2Land : 1;                                  // 0x0945(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasAeroSpecialTransitions : 1;                    // 0x0945(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsAero2Special : 1;                               // 0x0945(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSpecial2Aero : 1;                               // 0x0945(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHasLandSpecialTransitions : 1;                    // 0x0945(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsLand2Special : 1;                               // 0x0945(0x0001)(BitIndex: 0x06, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bIsSpecial2Land : 1;                               // 0x0945(0x0001)(BitIndex: 0x07, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_946[0x2];                                      // 0x0946(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NoAccelerateRemainingTimeDelta;                    // 0x0948(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NoAccelerateRemaining;                             // 0x094C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94D[0x13];                                     // 0x094D(0x0013)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AeroMotionSubAnimInstance">();
	}
	static class UAeroMotionSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAeroMotionSubAnimInstance>();
	}
};

// Class Marvel.AffectedStaticMeshBaseComponent
// 0x0010 (0x0940 - 0x0930)
class UAffectedStaticMeshBaseComponent : public UStaticMeshComponent
{
public:
	EClientGCActorHitType                         HitType;                                           // 0x0930(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttachBlood;                                       // 0x0934(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PossibleNumberOfHits;                              // 0x0938(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_93C[0x4];                                      // 0x093C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AffectedStaticMeshBaseComponent">();
	}
	static class UAffectedStaticMeshBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAffectedStaticMeshBaseComponent>();
	}
};

// Class Marvel.MarvelReplicationGraphNode_DynamicSpatialFrequency
// 0x0010 (0x0138 - 0x0128)
class UMarvelReplicationGraphNode_DynamicSpatialFrequency final : public UReplicationGraphNode_DynamicSpatialFrequency
{
public:
	uint8                                         Pad_128[0x10];                                     // 0x0128(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelReplicationGraphNode_DynamicSpatialFrequency">();
	}
	static class UMarvelReplicationGraphNode_DynamicSpatialFrequency* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelReplicationGraphNode_DynamicSpatialFrequency>();
	}
};

// Class Marvel.StencilFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UStencilFunctionLibrary final : public UObject
{
public:
	static void ForceUpdateActorStencil(class AActor* Actor);
	static int32 GetActorStencilValue(class AActor* Actor);
	static int32 GetFillColorStencilValue(const struct FFillColorConfig& Config);
	static int32 GetPrimitiveStencilValue(class UPrimitiveComponent* Primitive);
	static bool IsActorWallHacked(class AActor* Actor);
	static bool IsDitheringSwitchOn(class UPrimitiveComponent* MeshComp);
	static void SetActorStencilValue(class AActor* Actor, int32 StencilValue, int32 WriteMask, bool bPropagateToChildren);
	static void SetActorTeamOutline(class AActor* Actor, const struct FOutlineConfig& Config);
	static void SetPrimitiveFillColor(class UPrimitiveComponent* Primitive, const struct FFillColorConfig& Config);
	static void SetPrimitivePPOpacity(class UPrimitiveComponent* MeshComp, float Opacity);
	static void SetPrimitiveStencilValue(class UPrimitiveComponent* Primitive, int32 StencilValue, int32 WriteMask, bool bEnableStencilEvenIfValueIsZero);
	static void SetPrimitiveTeamOutline(class UPrimitiveComponent* Primitive, const struct FOutlineConfig& Config);
	static void UpdateTeamOutlinePPSettings(const class UObject* WCO, struct FPostProcessSettings* OutPPSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StencilFunctionLibrary">();
	}
	static class UStencilFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStencilFunctionLibrary>();
	}
};

// Class Marvel.FlipbookImage
// 0x0118 (0x02D0 - 0x01B8)
class UFlipbookImage final : public UWidget
{
public:
	uint8                                         Pad_1B8[0x8];                                      // 0x01B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            FlipbookBrush;                                     // 0x01C0(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bLoop;                                             // 0x0290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_291[0x3];                                      // 0x0291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Speed;                                             // 0x0294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrameRate;                                         // 0x0298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UFlipbookImage* flipbook)> PlayEndDispatcher;                                 // 0x02A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          bAutoPlay;                                         // 0x02B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlaying;                                          // 0x02B1(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B2[0x1E];                                     // 0x02B2(0x001E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAutoPlay(bool bInAutoPlay);
	void SetFlipbookBrush(const struct FSlateBrush& InFlipbookBrush);
	void SetFrameRate(float InFrameRate);
	void SetLoop(bool bInLoop);
	void SetSpeed(float InSpeed);
	void StartPlaying();
	void StopPlaying();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FlipbookImage">();
	}
	static class UFlipbookImage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFlipbookImage>();
	}
};

// Class Marvel.AffectedStaticMeshComponent
// 0x0090 (0x09D0 - 0x0940)
class UAffectedStaticMeshComponent final : public UAffectedStaticMeshBaseComponent
{
public:
	uint8                                         Pad_940[0xC];                                      // 0x0940(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsFracture;                                       // 0x094C(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94D[0x3];                                      // 0x094D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AChaosDestructionActor>  DestructionActorCache;                             // 0x0950(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelChaosAnimMoveComponent*           ChaosAnimMoveComp;                                 // 0x0958(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             OriComponentTransform;                             // 0x0960(0x0060)(IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GCInitialCollisionProfileName;                     // 0x09C0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9CC[0x4];                                      // 0x09CC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FinishAffectState();
	void FinishAffectState_External();
	void FinishAffectState_NextFrame();
	void HideStaticMeshAndShowGC();
	void OnLikeMapLoaded();
	void OnRep_bIsFracture();
	void OnReplayFracture_External();
	void OnReplayFracture_NextFrame();
	void OnReplayUnFracture_External();
	void ResetDamageDataDelegate();
	void TriggerHitIndicatorMulticast(class AMarvelBaseCharacter* Character, const struct FHitResult& HitInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AffectedStaticMeshComponent">();
	}
	static class UAffectedStaticMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAffectedStaticMeshComponent>();
	}
};

// Class Marvel.MarvelMeshMaterialsFadeManagerComponent
// 0x0028 (0x0118 - 0x00F0)
class UMarvelMeshMaterialsFadeManagerComponent : public UActorComponent
{
public:
	TArray<struct FMeshMaterialFadeRuntimeData>   MaterialDatas;                                     // 0x00F0(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FMeshMaterialFadeConfig>        AutoFadeConfigs;                                   // 0x0100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_110[0x8];                                      // 0x0110(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class USkeletalMeshComponent* GetMeshMaterialFadeTarget(ECueMeshType MeshType, int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelMeshMaterialsFadeManagerComponent">();
	}
	static class UMarvelMeshMaterialsFadeManagerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelMeshMaterialsFadeManagerComponent>();
	}
};

// Class Marvel.AffectStaticMeshBaseActor
// 0x00D0 (0x0560 - 0x0490)
class AAffectStaticMeshBaseActor : public AActor
{
public:
	uint8                                         Pad_490[0x38];                                     // 0x0490(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x04C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreMatchState;                                 // 0x04D0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D1[0x7];                                      // 0x04D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AliveStage;                                        // 0x04D8(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EClientGCActorHitType                         HitType;                                           // 0x04E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AttachBlood;                                       // 0x04EC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PossibleNumberOfHits;                              // 0x04F0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyDestructionPost;                             // 0x04F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERendererCustomDepthPassType                  CustomDepthStencilType;                            // 0x04F5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F6[0x2];                                      // 0x04F6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         RenderStencilValue;                                // 0x04F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4FC[0x4];                                      // 0x04FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AffectAudio;                                       // 0x0500(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerAttackInterval;                              // 0x0508(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50C[0x54];                                     // 0x050C(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMatchStateChanged(const EMatchState& MatchState);
	void SetCurrentStage(const class FString& StageName);
	void SetPostProcessEnabled(bool bEnablePostProcess);

	struct FGameplayTag GetHitImpactCueTag(const struct FHitResult& HitInfo) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AffectStaticMeshBaseActor">();
	}
	static class AAffectStaticMeshBaseActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAffectStaticMeshBaseActor>();
	}
};

// Class Marvel.HeroStatistics
// 0x00A0 (0x00D0 - 0x0030)
class UHeroStatistics : public UObject
{
public:
	float                                         UseTimeStart;                                      // 0x0030(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecord;                                           // 0x0034(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerStatistics*                      OwnerPlayerStatistics;                             // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerUID;                                         // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectedHeroID;                                    // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentHeroID;                                     // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentHeroUID;                                    // 0x004C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SculptID;                                          // 0x0050(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEnergyFullInfo                        EnergyFullInfo;                                    // 0x0054(0x000C)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bInOccupyOrCompetitionState;                       // 0x0060(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OccupyOrCompetitionEnterTime;                      // 0x0064(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnergyUsed;                                       // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69[0x3];                                       // 0x0069(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeroAliveTimeStart;                                // 0x006C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastRebornTime;                                    // 0x0070(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastHeroKillTime;                                  // 0x0074(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFirstEnterBattle;                                 // 0x0078(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInPayloadState;                                   // 0x0079(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PayloadEnterTime;                                  // 0x007C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FActionLogEnergyChangeRecord> CacheID2EnergyRecord;                              // 0x0080(0x0050)(NativeAccessSpecifierPublic)

public:
	void Initialize(class UPlayerStatistics* InPlayerStatistics, int32 InPlayerUID, int32 InSelectedHeroID, int32 InCurrentHeroUID, int32 InCurrentHeroID);
	void OccupyOrCompetitionChanged();
	void OccupyOrCompetitionEnter();
	void OccupyOrCompetitionLeave();
	void OnBattleEnd();
	void OnBattleStart();
	void OnFirstEnterBattle();
	void OnHeroAbilityEnd(const struct FActionLogAbilityContext& AbilityInfoContext);
	void OnHeroAbilityPreActivate(const struct FActionLogAbilityContext& AbilityInfoContext);
	void OnHeroDeath(struct FActionLogDeathExtraInfo* DeathExtraInfo, struct FActionLogBattleContext* BattleContext, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnHeroEnergyChanged(class AActor* Instigator, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnHeroEnergyFull(class AActor* Instigator, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnHeroReborn(class AActor* Instigator, class AMarvelBaseCharacter* RebornActor);
	void OnHeroSculptChanged(class AActor* Instigator, int32 InSculptID);
	void OnKillHero(struct FActionLogDeathExtraInfo* DeathExtraInfo, struct FActionLogBattleContext* BattleContext, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnLeaveGame();
	void OnPrePartNameChange(const class FString& CurrentPartName);
	void OnResetData();
	void OnSwitchIn();
	void OnSwitchOut();
	void OnTransitionStart();
	void OnUpdateHeroID(int32 InHeroID, int32 InHeroUID);
	void RecordCompetitionTime(float DeltaTime);
	void RecordEnergyChanged(int32 AbilityID, float DeltaValue, int32 FullEnergyCount);
	void RecordMergedEnergyInfo(const class FString& CacheID);
	void RecordUltimateRelease(int32 AbilityID, int32 UseCount);

	void RecordEnergyFull(float MaxEnerge, int32 FullEnergyCount, float FullEnergyDuration) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroStatistics">();
	}
	static class UHeroStatistics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeroStatistics>();
	}
};

// Class Marvel.HeroStatistics_1016
// 0x0000 (0x00D0 - 0x00D0)
class UHeroStatistics_1016 final : public UHeroStatistics
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroStatistics_1016">();
	}
	static class UHeroStatistics_1016* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeroStatistics_1016>();
	}
};

// Class Marvel.AimAssistTableFuncLibrary
// 0x0000 (0x0030 - 0x0030)
class UAimAssistTableFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AimAssistTableFuncLibrary">();
	}
	static class UAimAssistTableFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAimAssistTableFuncLibrary>();
	}
};

// Class Marvel.HighDestructionDamage
// 0x0000 (0x0050 - 0x0050)
class UHighDestructionDamage final : public UDestructionDamageType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HighDestructionDamage">();
	}
	static class UHighDestructionDamage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHighDestructionDamage>();
	}
};

// Class Marvel.AimOffsetSubAnimInstance
// 0x01E0 (0x06E0 - 0x0500)
class UAimOffsetSubAnimInstance final : public UMarvelMultiAssetsAnimInstanceBase
{
public:
	struct FMarvelAnimWeaponIKParam               WeaponIKParam;                                     // 0x0500(0x0070)(Edit, BlueprintVisible, DisableEditOnTemplate, EditConst, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bIsLeftHandIKEabled;                               // 0x0570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyUpperBodyAO;                                  // 0x0571(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_572[0x2];                                      // 0x0572(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxAOYaw;                                          // 0x0574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAOYaw;                                          // 0x0578(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAOPitch;                                        // 0x057C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAOPitch;                                        // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldUseAO;                                      // 0x0584(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsBattling;                                       // 0x0585(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_586[0x2];                                      // 0x0586(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicsWeaponData*                     PhysicsWeaponData;                                 // 0x0588(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               RightHandAdditiveRotation;                         // 0x0590(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FAimIKCameraAimInfo                    CameraAimInfo;                                     // 0x05A8(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FAimOffsetAnimContainer                AimOffsetAnims;                                    // 0x05E8(0x0018)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMarvelAnimWeaponIKParam               WeaponIKParams;                                    // 0x0600(0x0070)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UAimOffsetBlendSpace*                   CurrentAimOffset;                                  // 0x0670(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUsingWithAimOffset;                               // 0x0678(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUsingHandIK;                                      // 0x0679(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_67A[0x2];                                      // 0x067A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AOYaw;                                             // 0x067C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AOPitch;                                           // 0x0680(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldUseIdleAO;                                  // 0x0684(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUsingCombatIdleAO;                                // 0x0685(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_686[0x2];                                      // 0x0686(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UAimOffsetBlendSpace*                   CustomIdleAimOffset_2D;                            // 0x0688(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseCustomIdleAO;                                  // 0x0690(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_691[0x7];                                      // 0x0691(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAimOffsetBlendSpace*                   MontageAimOffset_2D;                               // 0x0698(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUsingMontageAO;                                   // 0x06A0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A1[0x7];                                      // 0x06A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAimOffsetBlendSpace*                   NowPhysicsWeaponAimOffset_2D;                      // 0x06A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUsingPhysicsWeaponAO;                             // 0x06B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6B1[0x7];                                      // 0x06B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UPhysicalInteractionComponent*          PhysicalInteractionComp;                           // 0x06B8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6C0[0x20];                                     // 0x06C0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetAOPitch();
	float GetAOYaw();
	bool IsMontageDisableAO(const class UAnimMontage* InAnimMontage);
	bool IsMontageWithAO(class UAnimMontage* InAnimMontage, class UAimOffsetBlendSpace** OutAimOffset);
	bool IsUseAbilityMontageAO(class UAimOffsetBlendSpace** OutAimOffset);
	bool IsUseGroundMotionMontageAO(class UAimOffsetBlendSpace** OutAimOffset);
	void LoadWeaponIKParams();
	void OnPhysicsWeaponSummonerChanged(class APhysicsSummoner* NewWeapon);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AimOffsetSubAnimInstance">();
	}
	static class UAimOffsetSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAimOffsetSubAnimInstance>();
	}
};

// Class Marvel.HitImpactCueOverrideModifier
// 0x0010 (0x0040 - 0x0030)
class UHitImpactCueOverrideModifier : public UObject
{
public:
	uint8                                         bOverrideOnExecuteFX : 1;                          // 0x0030(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bOverrideOnExecuteUI : 1;                          // 0x0030(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bOverrideOnExecuteAudio : 1;                       // 0x0030(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bOverrideOnExecuteCameraShake : 1;                 // 0x0030(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bOverrideSpawnHitParticle : 1;                     // 0x0030(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bOverrideSpawnNiagaraComponent : 1;                // 0x0030(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_31[0xF];                                       // 0x0031(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UNiagaraComponent* SpawnNiagaraComponent_Override(const class UMarvelCueNotify_HitImpact* HitImpactCue, const class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, const struct FCueNiagaraSpawnParam& NiagaraParams);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HitImpactCueOverrideModifier">();
	}
	static class UHitImpactCueOverrideModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHitImpactCueOverrideModifier>();
	}
};

// Class Marvel.AirlabTestFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UAirlabTestFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static int64 GetDerivedDataCacheBuildCount();
	static bool GetEditorHighLevelTimeAndStrByLabel(const class FString& InLabel, class FString* OutStr, double* OutTime);
	static double GetEditorHighLevelTimeByLabel(const class FString& InLabel);
	static bool IsRunningAutoTest();
	static void MarkGPM(const class FString& InMessage);
	static void PostX20TestManageWeb(const class FString& InAPIName, const class FString& InResName, const class FString& JsonParams);
	static void QueryDerivedDataCacheUsageStats();
	static TMap<class FString, class FString> ReadVars();
	static void RenderDocCaptureFrame(const class FString& RdcName);
	static void ReportVersion(const class FString& branch, const class FString& Changelist);
	static void ResetVars();
	static void SaveFilePath(const TArray<class FString>& Files);
	static void SendMsgToGPM(const class FString& Type);
	static void SetBool(const class FString& InVarName, bool InValue);
	static void SetEditorTestStage(int32 Stage);
	static void SetFloat(const class FString& InVarName, float InValue);
	static void SetInt(const class FString& InVarName, int32 InValue);
	static void SetStr(const class FString& InVarName, const class FString& InValue);
	static void SetVar(const class FString& InVarName, const class FString& InValue);
	static void StartReplayTest(class UObject* WorldContextObject);
	static void TestShutDown(class UWorld* World, float Delay);
	static void UploadFilePath(const TArray<class FString>& Files);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AirlabTestFunctionLibrary">();
	}
	static class UAirlabTestFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAirlabTestFunctionLibrary>();
	}
};

// Class Marvel.BlueprintVisitor
// 0x0008 (0x0038 - 0x0030)
class UBlueprintVisitor final : public UObject
{
public:
	bool                                          bCompileBeforeSave;                                // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckoutBeforeSave;                               // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FindBlueprintsByClass(class UClass* ParentClass, bool bRecursive, const struct FTopLevelAssetPath& PackagePath);
	void SaveBlueprint(class UBlueprint* Blueprint);
	bool VisitBlueprint(class UBlueprint* Blueprint);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlueprintVisitor">();
	}
	static class UBlueprintVisitor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueprintVisitor>();
	}
};

// Class Marvel.MotionSubAnimInstance
// 0x0040 (0x0470 - 0x0430)
#pragma pack(push, 0x1)
class alignas(0x10) UMotionSubAnimInstance : public UAnimInstance
{
public:
	bool                                          bUseSixDirAnimData;                                // 0x0428(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedUpdateBlendTime;                              // 0x0429(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42A[0x2];                                      // 0x042A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Anim1BlendTime;                                    // 0x042C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Anim2BlendTime;                                    // 0x0430(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Anim3BlendTime;                                    // 0x0434(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Anim4BlendTime;                                    // 0x0438(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Anim5BlendTime;                                    // 0x043C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AnimIndex;                                         // 0x0440(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseStrideWarping;                                 // 0x0444(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUsingOther;                                     // 0x0445(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_446[0x2];                                      // 0x0446(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 BlendTimeList;                                     // 0x0448(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         CurrentMotionIndex;                                // 0x0458(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CurrentIdleIndex;                                  // 0x045C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NextBlendTime;                                     // 0x0460(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseIdleUpperBody;                                 // 0x0464(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseStrideWithWalkEnabled;                         // 0x0465(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_466[0x2];                                      // 0x0466(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SwitchIdle(int32 NewIndex);
	void SwitchMotion(int32 NewIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MotionSubAnimInstance">();
	}
	static class UMotionSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMotionSubAnimInstance>();
	}
};
#pragma pack(pop)

// Class Marvel.AirMotionSubAnimInstance
// 0x0050 (0x04C0 - 0x0470)
class UAirMotionSubAnimInstance final : public UMotionSubAnimInstance
{
public:
	class UAnimSequence*                          Fly_Up;                                            // 0x0468(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Fly_Up_2D;                                         // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          Turn_1D_C;                                         // 0x0478(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          Turn_1D_N;                                         // 0x0480(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace*                            Fly_2D;                                            // 0x0488(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Fly_Down;                                          // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBattling;                                       // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_499[0x3];                                      // 0x0499(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LookingYawRateLimit;                               // 0x049C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookingYawRate;                                    // 0x04A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A4[0x4];                                      // 0x04A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          Idle_Seq;                                          // 0x04A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4B0[0x10];                                     // 0x04B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AirMotionSubAnimInstance">();
	}
	static class UAirMotionSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAirMotionSubAnimInstance>();
	}
};

// Class Marvel.CameraMovement
// 0x0008 (0x01F8 - 0x01F0)
class UCameraMovement : public UFloatingPawnMovement
{
public:
	class AMovingCameraActor*                     CameraOwner;                                       // 0x01F0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraMovement">();
	}
	static class UCameraMovement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraMovement>();
	}
};

// Class Marvel.BindingProxy_Ability
// 0x0080 (0x00B0 - 0x0030)
class UBindingProxy_Ability final : public UObject
{
public:
	class UMarvelGameplayAbility*                 Ability;                                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x78];                                      // 0x0038(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBlocked(bool bInBlocked);
	void SetCooldown(float Cooldown);
	void UpdateActive();
	void UpdateBlock();
	void UpdateCooldown();
	void UpdateCost();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BindingProxy_Ability">();
	}
	static class UBindingProxy_Ability* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBindingProxy_Ability>();
	}
};

// Class Marvel.AmbientAudioComponent
// 0x00E0 (0x0550 - 0x0470)
class UAmbientAudioComponent final : public USceneComponent
{
public:
	uint8                                         Pad_470[0x18];                                     // 0x0470(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	EMatchState                                   ActiveMatchState;                                  // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchState                                   EndMatchState;                                     // 0x0489(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndByViewTarget;                                  // 0x048A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48B[0x5];                                      // 0x048B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0490(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDisFilter;                                  // 0x0498(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_499[0x3];                                      // 0x0499(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeoutTime;                                       // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DisFilter;                                         // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AmbOcclusion;                                      // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOneShot;                                          // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A9[0xA7];                                     // 0x04A9(0x00A7)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEnterArea(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& OverlapInfo);
	void OnLeaveArea(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void SetAmbientEnabled(bool bInEnabled);

	bool IsAmbientEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmbientAudioComponent">();
	}
	static class UAmbientAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmbientAudioComponent>();
	}
};

// Class Marvel.MarvelProjectileComponent
// 0x1CA0 (0x1FF0 - 0x0350)
#pragma pack(push, 0x1)
class alignas(0x10) UMarvelProjectileComponent : public UProjectileMovementComponent
{
public:
	uint8                                         Pad_350[0x8];                                      // 0x0350(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bUnwalkableSlide : 1;                              // 0x0358(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bSlideAnyHow : 1;                                  // 0x0358(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bHomingForceCollision : 1;                         // 0x0358(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_359[0x3];                                      // 0x0359(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HomingMaxTangentSpeed;                             // 0x035C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            HomingAccelerationCurve;                           // 0x0360(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            HomingCaptureFactorCurve;                          // 0x0368(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMidPointAsHomingCapture;                       // 0x0370(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelCollisionRule                   ConfigBounceRule;                                  // 0x0378(0x0388)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         BounceCountStopSimulatingThreshold;                // 0x0700(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_704[0x187C];                                   // 0x0704(0x187C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OldVelocity;                                       // 0x1F80(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F98[0x48];                                    // 0x1F98(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelAbilityTargetActor_Base*         MyTargetActor;                                     // 0x1FE0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	bool GetSimulation();
	void ResetFlyDistance();
	void ResetFlyDuration();
	void ResumeUpdateComponent();
	void SetGravityScale(float InValue);
	void SetGravityScaleCurve(class UCurveFloat* InCurve);
	void SetMarvelCollisionRule(const struct FMarvelCollisionRule& CollisionRule);
	void SetSimulation(bool IsEnabled);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelProjectileComponent">();
	}
	static class UMarvelProjectileComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelProjectileComponent>();
	}
};
#pragma pack(pop)

// Class Marvel.MarvelCueNotify_Shadow
// 0x0108 (0x1140 - 0x1038)
class AMarvelCueNotify_Shadow final : public AMarvelCueNotify_Buff
{
public:
	int32                                         TotalShadowNum;                                    // 0x1038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SimulatedShadowNum;                                // 0x103C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstance*                      ShadowMaterial;                                    // 0x1040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInterface*>             ShadowSlotMaterials;                               // 0x1048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FShadowMeshInfo>                ChildrenMeshInfo;                                  // 0x1058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<float>                                 ShadowShowTime;                                    // 0x1068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UCurveVector*                           ShadowScaleCurve;                                  // 0x1078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            ShadowOpacityCurve;                                // 0x1080(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   OpacityName;                                       // 0x1088(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MovePositionName;                                  // 0x1094(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveOffset;                                        // 0x10A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A4[0x4];                                     // 0x10A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         ShadowFX;                                          // 0x10A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ShadowFXSocket;                                    // 0x10B0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10BC[0x4];                                     // 0x10BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ShadowRelativeLocation;                            // 0x10C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               ShadowRelativeRotation;                            // 0x10D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FVector                                ShadowRelativeScale;                               // 0x10F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPoseableMeshComponent*>         ShadowMeshComponents;                              // 0x1108(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1118[0x28];                                    // 0x1118(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitShadowMeshAndChildMesh();
	void ResetShowTime();
	void UpdateShadowMeshParams(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_Shadow">();
	}
	static class AMarvelCueNotify_Shadow* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_Shadow>();
	}
};

// Class Marvel.BuffTableFuncLibrary
// 0x0000 (0x0030 - 0x0030)
class UBuffTableFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FMarvelBuffSpec GetBuffData(const int32 BuffID);
	static bool GetBuffDatas(const int32 BuffID, TArray<struct FMarvelBuffSpec>* OutBuffSpecs);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuffTableFuncLibrary">();
	}
	static class UBuffTableFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuffTableFuncLibrary>();
	}
};

// Class Marvel.AmmoAbilityStatisticsImpl
// 0x0000 (0x00F0 - 0x00F0)
class UAmmoAbilityStatisticsImpl final : public UHitRateAbilityStatisticsImpl
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmmoAbilityStatisticsImpl">();
	}
	static class UAmmoAbilityStatisticsImpl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmmoAbilityStatisticsImpl>();
	}
};

// Class Marvel.ChatMsg
// 0x0030 (0x0060 - 0x0030)
class UChatMsg final : public UObject
{
public:
	class FText                                   Text;                                              // 0x0030(0x0018)(Edit, BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)
	EChatMsgType                                  MsgType;                                           // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            CustomColor;                                       // 0x004C(0x0014)(Edit, BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChatMsg">();
	}
	static class UChatMsg* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChatMsg>();
	}
};

// Class Marvel.MarvelAudioComponent
// 0x03B8 (0x04A8 - 0x00F0)
class UMarvelAudioComponent : public UActorComponent
{
public:
	TMap<class FName, class UAkComponent*>        BoneAkComponents;                                  // 0x00F0(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_140[0x50];                                     // 0x0140(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UMarvelAudioData>        AudioConfig;                                       // 0x0190(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> PostSoundCallback;                                 // 0x0198(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> FireAudioEventCallback;                            // 0x01AC(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1C0[0x8];                                      // 0x01C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAkOccObsService*                 OccObsService;                                     // 0x01C8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D0[0x8];                                      // 0x01D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActorDopplerSpeed;                                 // 0x01D8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UAudioWorldSubSystem>    AudioSystem;                                       // 0x01DC(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x01E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F0[0x250];                                    // 0x01F0(0x0250)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDeclarationHolder                     DeclareViewTargetHolder;                           // 0x0440(0x0010)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_450[0x8];                                      // 0x0450(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            PendingSwitches;                                   // 0x0458(0x0050)(Transient, NativeAccessSpecifierPrivate)

public:
	void AkPostSoundCallback(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
	void AttachAkComponentTo(class USceneComponent* InSceneComp, class FName InBoneName);
	void DeInit();
	class UAkComponent* GetDefaultAkComponent(class USceneComponent* AttachToComponent);
	class AMarvelBaseCharacter* GetOwnerCharacter();
	void Init();
	void OnAbilityActivate(int32 AbilityID);
	void OnAbilityEnds(int32 AbilityID);
	void OnOwnerMontageBlendingOut(class UAnimMontage* Montage, bool bInterrupted);
	void OnOwnerMontageEnd(class UAnimMontage* Montage, int32 MontageInstanceID, bool bInterrupted);
	void OnViewTargetChanged(class AActor* InViewTarget);
	void OnViewTargetChangedNextFrame();
	int32 PostAbilityAudio(int32 AudioID, class USceneComponent* AttachComponent, class AMarvelBaseCharacter* InstigatorCharacter, bool bCritical);
	int32 PostAbilityAudioWithConfig(const struct FMarvelAbilityAudioPack& Config, class USceneComponent* AttachComponent, class AMarvelBaseCharacter* InstigatorCharacter, bool bCritical);
	int32 PostFireAudio(int32 AudioID, const struct FMarvelWeaponExternAmmoInfo& AmmoInfo, float TimeBetweenShoot, int32 AbilityID);
	int32 PostFireAudioWithConfig(const struct FMarvelAbilityAudioPack& Config, const struct FMarvelWeaponExternAmmoInfo& AmmoInfo, float TimeBetweenShoot, int32 AbilityID);
	void ReattachAkComponent();
	void RegisterMontageDelegates(class UAnimInstance* AnimInst);
	void SetAmmoRemainPercentRTPC(const struct FOnAttributeChangeDataExtend& Data);
	void SetEnabled(bool bInEnabled, bool StopImmediately);
	void StopAbilityAudio(int32 AbilityID, bool bStopAll);
	void StopAllMontageSounds();
	void StopAudioEvents(int32 AudioID, bool bStopAll, float FadeOutIncr);
	void StopFireAudio(int32 AudioID);

	bool IsEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAudioComponent">();
	}
	static class UMarvelAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAudioComponent>();
	}
};

// Class Marvel.AmmoAudioComponent
// 0x01E0 (0x0688 - 0x04A8)
class UAmmoAudioComponent final : public UMarvelAudioComponent
{
public:
	class AOneShotAudioActor*                     OneShotAudio;                                      // 0x04A8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AMarvelAbilityTargetActor_Projectile*   Projectile;                                        // 0x04B0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AMarvelAbilityTargetActor_Scope*        LaserScope;                                        // 0x04B8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarvelAudioAdmin*                      AudioAdmin;                                        // 0x04C0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class ACharacter>              CachedViewTarget;                                  // 0x04C8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4D0[0x1B8];                                    // 0x04D0(0x01B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeTrajectoryEvent(int32 InTrajectoryAudioID, float AudibleDistance, int32 InLoopAudioID);
	void OnAmmoRecycled(class AActor* InAmmo);
	void OnAmmoStopped(const struct FHitResult& InHitResult);
	void SetDopplerEnabled(bool bEnable);
	void StopTrajectorySound(bool bCanReactivate, bool bForceStop, bool bFadeOut);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AmmoAudioComponent">();
	}
	static class UAmmoAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAmmoAudioComponent>();
	}
};

// Class Marvel.MarvelSpringArmComponent
// 0x0AD0 (0x10A0 - 0x05D0)
#pragma pack(push, 0x1)
class alignas(0x10) UMarvelSpringArmComponent : public USpringArmComponent
{
public:
	TMulticastInlineDelegate<void(float CurrentFOV)> OnFOVChanged;                                      // 0x05D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         bEnableCameraLagBySelf : 1;                        // 0x05E0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_5E1[0x3];                                      // 0x05E1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bRemoteEnableCameraLag;                            // 0x05E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E5[0x3];                                      // 0x05E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RemoteCameraLagSpeed;                              // 0x05E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemoteCameraLagMaxDistance;                        // 0x05EC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDistSpeedLagInterpMode;                           // 0x05F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F1[0x3];                                      // 0x05F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDistLagSpeed;                                   // 0x05F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RemoteDesiredRotationStart;                        // 0x05F8(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RemoteDesiredRotationTarget;                       // 0x0610(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               RemoteDesiredRotationCurrent;                      // 0x0628(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         RemoteRotateCatchUpTime;                           // 0x0640(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_644[0x4];                                      // 0x0644(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAIAimCharacter;                                   // 0x0648(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_649[0xB];                                      // 0x0649(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CharacterHitMinDistance;                           // 0x0654(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CharacterHitMaxDistance;                           // 0x0658(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAjustOrientationWhenDoLocationLag;                // 0x065C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65D[0x3];                                      // 0x065D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotationOffsetInterpSpeedWhenDoLocationLag;        // 0x0660(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoFromOriginLag;                                  // 0x0664(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_665[0x3];                                      // 0x0665(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FromOriginLagSpeed;                                // 0x0668(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FromOriginLagDis;                                  // 0x066C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraLagRestoreSpeed;                             // 0x0670(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugSpringArm;                                   // 0x0674(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDrawDebugCameraPos;                               // 0x0675(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_676[0x2];                                      // 0x0676(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LookupArmLength;                                   // 0x0678(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookdownArmLength;                                 // 0x067C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LookupCameraOffset;                                // 0x0680(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LookdownCameraOffset;                              // 0x0698(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CollisionCameraOffset;                             // 0x06B0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMeshTransparentParam                  MeshTransparentParam;                              // 0x06C8(0x0008)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class AActor>>          SweepIgnoreActors;                                 // 0x06D0(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UPrimitiveComponent>> SweepIgnoreComponents;                             // 0x06E0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bEnableFakeAICameraLocInPlayback;                  // 0x06F0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6F1[0x17];                                     // 0x06F1(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bNeedUpdateInServer;                               // 0x0708(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_709[0x7];                                      // 0x0709(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CurrentViewLocationOffset;                         // 0x0710(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               CurrentViewRotationOffset;                         // 0x0728(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                CustomLocationOffset;                              // 0x0740(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               CustomRotationOffset;                              // 0x0758(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                OriginCustomLocationOffset;                        // 0x0770(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               OriginCustomRotationOffset;                        // 0x0788(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVector                                TargetCustomLocationOffset;                        // 0x07A0(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               TargetCustomRotationOffset;                        // 0x07B8(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         CustomInterpSpeed;                                 // 0x07D0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CustomInterpAlpha;                                 // 0x07D4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultArmLength;                                  // 0x07D8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7DC[0x4];                                      // 0x07DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DefaultArmSocketOffset;                            // 0x07E0(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseAttachParentCameraSocket;                      // 0x07F8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7F9[0x3];                                      // 0x07F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachParentCameraSocketName;                      // 0x07FC(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDefaultEnableCameraLag;                           // 0x0808(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_809[0x3];                                      // 0x0809(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultCameraLagSpeed;                             // 0x080C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultCameraLagMaxDistance;                       // 0x0810(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ArmLengthInterpOrigin;                             // 0x0814(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ArmLengthInterpTarget;                             // 0x0818(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ArmLengthInterpSpeed;                              // 0x081C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ArmLengthInterpTargetSpeed;                        // 0x0820(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ArmLengthInterpAcceleration;                       // 0x0824(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ArmLengthInterpAlpha;                              // 0x0828(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RestoreArmLengthInterpSpeed;                       // 0x082C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RestoreArmLengthInterpMaxSpeed;                    // 0x0830(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RestoreArmLengthInterAcceleration;                 // 0x0834(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                SocketOffsetInterpTarget;                          // 0x0838(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SocketOffsetInterpSpeed;                           // 0x0850(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RestoreSocketOffsetInterpSpeed;                    // 0x0854(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSocketOffsetRelativeToCharacter;                  // 0x0858(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_859[0x3];                                      // 0x0859(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraLagMaxDistanceInterpTarget;                  // 0x085C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CameraLagMaxDistanceInterpSpeed;                   // 0x0860(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CameraLagSpeedInterpTarget;                        // 0x0864(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CameraLagSpeedInterpSpeed;                         // 0x0868(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RestoreCameraLagInterpSpeed;                       // 0x086C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RestoreFOVInterpSpeed;                             // 0x0870(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DefaultFOV;                                        // 0x0874(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AvoidCharacterOccludeDistance;                     // 0x0878(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_87C[0x4];                                      // 0x087C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RotationOffsetWhenDoLocationLag;                   // 0x0880(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsAnimCurveValid;                                 // 0x0898(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_899[0x587];                                    // 0x0899(0x0587)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OwningActor;                                       // 0x0E20(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelBaseCharacter*                   OwningCharacter;                                   // 0x0E28(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCameraComponent*                       Camera;                                            // 0x0E30(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FOVTargetOffset;                                   // 0x0E38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FOVTargetSpeed;                                    // 0x0E3C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E40[0x258];                                    // 0x0E40(0x0258)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearInterpFOVHeap();
	void ClearInterpLengthHeap();
	void ClearInterpOffsetHeap();
	struct FVector DoTraceAfterApplyCameraShake(const struct FVector& DesiredLoc);
	void ExecuteCameraInterp(class UCameraInterp* CameraInterp, struct FSpringArmControlHandler& Handler);
	void ForceUpadateComponent();
	struct FVector GetCurrentViewLocationOffset();
	struct FRotator GetCurrentViewRotationOffset();
	float GetDefaultArmLength();
	struct FVector GetDefaultArmSocketOffset();
	float GetDefaultCameraLagMaxDistance();
	float GetDefaultCameraLagSpeed();
	bool GetDefaultEnableCameraLag();
	float GetDefaultFOV();
	void GetPreviousParams(struct FVector* DesiredLoc, struct FRotator* DesiredRot, struct FVector* ArmOrigin, struct FVector* FromOrigin);
	struct FRotator GetRemoteDesiredRotation(float DeltaTime);
	void HoldCurrentCameraPosition();
	void InterpToArmLength(float InterpTargetLength, const float OrignSpeed, const float TargetSpeed, const float InterpAcceleration);
	void InterpToArmSocketOffset(const struct FVector& InterpSocketOffset, const float TargetSpeed, bool UseRelativeToCharacter);
	void InterpToCameraLagMaxDistance(const float MaxDistance, const float InterpSpeed);
	void InterpToCameraLagSpeed(const float TargetCameraLagSpeed, const float InterpSpeed);
	void InterpToCustomViewOffset(const struct FVector& TargetLocationOffset, const struct FRotator& TargetRotationOffset, float InterpSpeed);
	void InterpToFOV(float TargetFOV, float InterpSpeed);
	void InterpToRelativeLocationAndRotation(const struct FVector& TargetRelativeLocation, const struct FRotator& TargetRelativeRotation, float InterpSpeed);
	void LerpCustomViewOffset(const struct FVector& CurrentLocationOffset, const struct FRotator& CurrentRotationOffset, const struct FVector& TargetLocationOffset, const struct FRotator& TargetRotationOffset, float Alpha);
	void OnCameraCurveInfoHeapTopChanged();
	void OnInterpCameraMaxDistanceHeapChanged();
	void OnInterpCameraSpeedHeapChanged();
	void OnInterpFOVHeapChanged();
	void OnInterpLengthHeapTopChanged();
	void OnInterpOffsetHeapTopChanged();
	void OnLagToggleHeapChanged();
	void PostMeshEvaluate();
	void RecoverCameraInterp(class UCameraInterp* CameraInterp, struct FSpringArmControlHandler& Handler);
	int32 RequireInterpToArmLength(int32 Priority, float Length, float OriginSpeed, float TargetSpeed, float Acceleration);
	int32 RequireInterpToArmSocketOffset(int32 Priority, const struct FVector& InterpSocketOffset, const float TargetSpeed, bool UseRelativeToCharacter);
	int32 RequireInterpToCameraLagMaxDistance(int32 Priority, const float TargetCameraLagMaxDistance, const float InterpSpeed);
	int32 RequireInterpToCameraLagSpeed(int32 Priority, const float TargetCameraLagSpeed, const float InterpSpeed);
	int32 RequireInterpToFOV(int32 Priority, const float TargetFOV, const float InterpSpeed);
	int32 RequireToggleLag(int32 Priority, const bool bEnableLag);
	void ResetArmLengthInterpData();
	void ResetArmSocketOffsetData();
	void ResetArmSocketOffsetImmediately();
	void ResetCameraLagMaxDistanceData();
	void ResetCustomViewOffset();
	void ResetRemoteRotationPara(const struct FRotator& RemoteRotation);
	void RestoreArmLength(int32 Handler, float InitSpeed, float MaxSpeed, float Acceleration);
	void RestoreArmSocketOffset(int32 Handler, float Speed);
	void RestoreCameraLagMaxDistance(int32 Handler, float Speed);
	void RestoreCameraLagSpeed(int32 Handler, float Speed);
	void RestoreFOV(int32 Handler, float Speed);
	void RestoreToggleLag(int32 Handler);
	void SetArmSocketOffsetImmediately(const struct FVector& InTargetOffset);
	void SetCameraRotCorrActive(bool bInActive, const struct FCameraCorrParam& InCameraCorrParam);
	void SetFOVTargetOffset(float InOffset);
	void SetFOVTargetSpeed(float InSpeed);
	void SetIgnoreParentChangeBeforeNextUpdate(bool Ignore);
	void SetIsDecoupledFromCharacter(bool IsDecoupled);
	void SetNeedUpdateInServer(bool NeedUpdate);
	void SetPreviousParams(const struct FVector& DesiredLoc, const struct FRotator& DesiredRot, const struct FVector& ArmOrigin, const struct FVector& FromOrigin);
	void SetUseAttachParentCameraSocket(bool bNewState, class FName InCameraSocketName);
	void UpdateSocketArmOffset(float DeltaTime);
	void UpdateTickEnable();

	class FName GetAttachParentCameraSocketName() const;
	void GetCameraAdditiveOffset(struct FTransform* OutAdditiveOffset, float* OutAdditiveFOVOffset) const;
	float GetFOVTargetOffset() const;
	float GetFOVTargetSpeed() const;
	float GetModifiedArmLengthWithPitch(float PitchInDegree) const;
	bool GetNeedUpdateInServer() const;
	bool GetUseAttachParentCameraSocket() const;
	void LookAtTargetPosition(const struct FVector& InAimLocation) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSpringArmComponent">();
	}
	static class UMarvelSpringArmComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSpringArmComponent>();
	}
};
#pragma pack(pop)

// Class Marvel.MarvelComposerSpringArmComponent
// 0x00F0 (0x1190 - 0x10A0)
#pragma pack(push, 0x1)
class alignas(0x10) UMarvelComposerSpringArmComponent : public UMarvelSpringArmComponent
{
public:
	bool                                          bDebugComposer;                                    // 0x1098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1099[0x3];                                     // 0x1099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           DebugDeadZoneColor;                                // 0x109C(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           DebugSoftZoneColor;                                // 0x10AC(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DebugLineThickness;                                // 0x10BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUsingTransposer;                                  // 0x10C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUsingComposer;                                    // 0x10C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDefaultUsingTransposer;                           // 0x10C2(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10C3[0x5];                                     // 0x10C3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              DeadZoneLeftUpPoint;                               // 0x10C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              DeadZoneSize;                                      // 0x10D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DeadZoneDepth;                                     // 0x10E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10EC[0x4];                                     // 0x10EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Damping;                                           // 0x10F0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLimitedSoftZone;                                  // 0x1108(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1109[0x7];                                     // 0x1109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              SoftZoneLeftUpPoint;                               // 0x1110(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              SoftZoneSize;                                      // 0x1120(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SoftZoneDepth;                                     // 0x1130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         kLogNegligibleResidual;                            // 0x1134(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                DampingDeltaTimes;                                 // 0x1138(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelPlayerController*                OwnPC;                                             // 0x1150(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1158[0x30];                                    // 0x1158(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FRotator ApplyCameraRotation(const struct FRotator& Orient, const struct FVector2D& rot);
	void DrawDebugZone(class AHUD* HUD, const struct FVector2D& ZoneLeftUpPointRatio, const struct FVector2D& ZoneScreenRatioSize, const struct FVector2D& ScreenSize, const struct FLinearColor& DebugLineColor);
	float FloatDamp(float Initial, float DampTime, float DeltaTime);
	struct FVector2D GetCameraRotationToTarget(const struct FRotator& Orient, const struct FVector& TargetDir, const struct FVector& Up);
	struct FVector GetOrientationUp(const struct FVector& Orient);
	void OnDeadZoneToggleHeapChanged();
	struct FVector2D OrthoOffsetToScreenBounds(const struct FVector2D& TargetPos2D, const struct FBox2D& ScreenRect);
	int32 RequireToggleDeadZone(int32 Priority, const bool bEnableDeadZone);
	void RestoreToggleDeadZone(int32 Handler);
	struct FRotator RotateToScreenBounds(const struct FTransform& CameraWorldTransform, const struct FBox2D& ScreenRect, const struct FVector& TrackedPoint, float FOV_H, float FOV_V, float DeltaTime);
	struct FBox2D ScreenToOrtho(const struct FBox2D& ScreenRect, float OrthoSizeH, float Aspect);
	void SetSpringArmSocketOffset(double Delta);
	void SetUsingTransposer(bool bInUsing);
	float SignedAngle(const struct FVector& v1, const struct FVector& v2, const struct FVector& Up);
	struct FVector VectorDamp(const struct FVector& Initial, const struct FVector& DampTime, float DeltaTime);

	bool GetDefaultUsingTransposer() const;
	bool GetUsingTransposer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelComposerSpringArmComponent">();
	}
	static class UMarvelComposerSpringArmComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelComposerSpringArmComponent>();
	}
};
#pragma pack(pop)

// Class Marvel.CameraActorSpringArmComponent
// 0x0000 (0x1190 - 0x1190)
class UCameraActorSpringArmComponent final : public UMarvelComposerSpringArmComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraActorSpringArmComponent">();
	}
	static class UCameraActorSpringArmComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraActorSpringArmComponent>();
	}
};

// Class Marvel.MarvelUserWidgetExtension
// 0x0000 (0x0030 - 0x0030)
class UMarvelUserWidgetExtension : public UUserWidgetExtension
{
public:
	void BP_Construct();
	void BP_Destruct();
	void BP_OnCascadingVisibleChanged(bool bNewVisible);
	void BP_OnInitialize();
	void BP_Tick(const struct FGeometry& MyGeometry, float InDeltaTime);

	bool BP_RequiresTick() const;
	class UMarvelSimpleUserWidget* GetMarvelUserWidget() const;
	class FString GetUserWidgetName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelUserWidgetExtension">();
	}
	static class UMarvelUserWidgetExtension* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelUserWidgetExtension>();
	}
};

// Class Marvel.AnimationlUserWidgetExtension
// 0x0038 (0x0068 - 0x0030)
class UAnimationlUserWidgetExtension final : public UMarvelUserWidgetExtension
{
public:
	class UWidgetAnimation*                       Anim_FadeIn;                                       // 0x0030(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Anim_FadeOut;                                      // 0x0038(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Anim_Loop;                                         // 0x0040(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       PlayingAnim_Fade;                                  // 0x0048(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FMarvelPendingAnimation>        PendingAnimations;                                 // 0x0050(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bQueuePlaying;                                     // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void TickNextSyncAnimation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimationlUserWidgetExtension">();
	}
	static class UAnimationlUserWidgetExtension* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimationlUserWidgetExtension>();
	}
};

// Class Marvel.BlueprintArchetypeCheck
// 0x0008 (0x0038 - 0x0030)
class UBlueprintArchetypeCheck final : public UObject
{
public:
	bool                                          bCompileBeforeSave;                                // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckoutBeforeSave;                               // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CompileBlueprintsByPaths(const TArray<class FString>& BlueprintPaths, const struct FTopLevelAssetPath& PackagePath);
	void FindArchetypesByClass(class UClass* ParentClass, const struct FTopLevelAssetPath& PackagePath);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlueprintArchetypeCheck">();
	}
	static class UBlueprintArchetypeCheck* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueprintArchetypeCheck>();
	}
};

// Class Marvel.AnimNotifyState_CameraInterp
// 0x0060 (0x0098 - 0x0038)
class UAnimNotifyState_CameraInterp : public UAnimNotifyState
{
public:
	bool                                          IsLocal;                                           // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraInterp*                          CameraInterpAsset;                                 // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class AActor*, struct FSpringArmControlHandler> SpringArmHandlers;                                 // 0x0048(0x0050)(BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	void ExecuteCameraInterp(class AActor* Owner) const;
	void RecoverCameraInterp(class AActor* Owner) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_CameraInterp">();
	}
	static class UAnimNotifyState_CameraInterp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_CameraInterp>();
	}
};

// Class Marvel.AnimNotifyState_CameraInterp_Sequence
// 0x0000 (0x0098 - 0x0098)
class UAnimNotifyState_CameraInterp_Sequence final : public UAnimNotifyState_CameraInterp
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_CameraInterp_Sequence">();
	}
	static class UAnimNotifyState_CameraInterp_Sequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_CameraInterp_Sequence>();
	}
};

// Class Marvel.PhantomStaticMeshComponent
// 0x0080 (0x09B0 - 0x0930)
class UPhantomStaticMeshComponent final : public UStaticMeshComponent
{
public:
	uint8                                         Pad_930[0x80];                                     // 0x0930(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhantomStaticMeshComponent">();
	}
	static class UPhantomStaticMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhantomStaticMeshComponent>();
	}
};

// Class Marvel.CareerInfoController
// 0x0010 (0x0040 - 0x0030)
class UCareerInfoController : public UObject
{
public:
	class AMarvelGameState*                       MarvelGameState;                                   // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayEventManager*            GlobalEventManager;                                // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UCareerInfoController* Get(class UObject* WCO);

	void BindEvents();
	void Initialize();
	void OnAbilityExtraHitRate(int32 PlayerUID, const struct FAbilityExtraBaseInfo& BaseInfo, const class FString& ExtraKey, const struct FAbilityExtraHitRate& ExtraHitRate);
	void OnActorDeath(class AActor* Killer, class AActor* Target, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void OnActorPostTakeDamage(class AActor* InInstigator, class AActor* InTarget, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void OnActorReborn(class AActor* InInstigator, class AActor* InTarget);
	void OnActorTakeHealth(class AActor* InInstigator, class AActor* InTarget, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void OnActorUseHealPack(class AActor* Source, const class FString& HealPackName, int32 HealPackType, float ChargeTime, float HealPackTreat, float HealthBeforUse);
	void OnDestructionTakeDamage(class AActor* Destruction, float FinalDamage, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FDestructionExtraInfo& DestructionExtraInfo);
	void OnHeroAbilityUse(const struct FActionLogAbilityRecord& AbilityRecord);
	void OnInitialize();
	void OnNotHeroAbilityUse(class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility);
	void OnShutdown();
	void OnSpraySuccess(int32 PlayerUID, int32 HeroID, class AActor* InActor);
	void PyCharacterSelectIDChanged(class AMarvelPlayerState* PlayerState, int32 HeroID);
	void PyOnAbilityExtraHitRate(int32 PlayerUID, const struct FAbilityExtraBaseInfo& BaseInfo, const class FString& ExtraKey, const struct FAbilityExtraHitRate& ExtraHitRate);
	void PyOnActorAssistOther(int32 PlayerUID, int32 HeroID);
	void PyOnActorBeKill(int32 PlayerUID, int32 HeroID);
	void PyOnActorInstigateDamage(int32 PlayerUID, int32 HeroID, float Value, bool IsHeroDamage);
	void PyOnActorInstigateHeal(int32 PlayerUID, int32 HeroID, float HealValue, bool IsToSelf, bool IsHeroHeal, bool IsNearDeath);
	void PyOnActorKillOther(int32 PlayerUID, int32 HeroID, bool IsSoloKill, bool IsHeadKill, bool IsLastKill, bool IsTerrainKill, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void PyOnActorTakeDamage(int32 PlayerUID, int32 HeroID, float Value, bool IsHeroDamage);
	void PyOnActorUseHealPack(int32 PlayerUID, int32 HealPackType);
	void PyOnAddPlayerState(class AMarvelPlayerState* PlayerState);
	void PyOnDelPlayerState(class AMarvelPlayerState* PlayerState);
	void PyOnDestructionTakeDamage(int32 PlayerUID, float Value);
	void PyOnHeroAbilityUse(const struct FActionLogAbilityRecord& AbilityRecord);
	void PyOnHeroAttackSummonerHit(int32 PlayerUID, int32 HeroID);
	void PyOnHeroMainAttackHit(int32 PlayerUID, int32 HeroID);
	void PyOnHeroMainAttackUse(int32 PlayerUID, int32 HeroID, int32 Count);
	void PyOnNotHeroAbilityUse(int32 PlayerUID, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility);
	void PyOnPossessNewCharacter(class AMarvelPlayerState* PlayerState, class AMarvelBaseCharacter* Character);
	void PyOnRebornOther(int32 PlayerUID, int32 HeroID);
	void PyOnSpraySuccess(int32 PlayerUID, int32 HeroID, class AActor* InActor);
	void Shutdown();
	void UnbindEvents();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CareerInfoController">();
	}
	static class UCareerInfoController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCareerInfoController>();
	}
};

// Class Marvel.AnimNotifyState_Cue
// 0x0010 (0x0048 - 0x0038)
class UAnimNotifyState_Cue final : public UAnimNotifyState
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0038(0x000C)(Edit, BlueprintReadOnly, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoAddCue;                                       // 0x0044(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoRemoveCue;                                    // 0x0045(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_Cue">();
	}
	static class UAnimNotifyState_Cue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_Cue>();
	}
};

// Class Marvel.AnimNotifyState_EnableAnimatedIK
// 0x0048 (0x0080 - 0x0038)
class UAnimNotifyState_EnableAnimatedIK final : public UAnimNotifyState
{
public:
	uint8                                         bAutoSampling : 1;                                 // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MachineName;                                       // 0x003C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   IKBoneName;                                        // 0x0048(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   EffectorTargetName;                                // 0x0054(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBoneControlSpace                             EffectorLocationSpace;                             // 0x0060(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NotifyDuration;                                    // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NotifyBeginTime;                                   // 0x0068(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SamplingInterval;                                  // 0x006C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FVector>                        EffectorLocationSamples;                           // 0x0070(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_EnableAnimatedIK">();
	}
	static class UAnimNotifyState_EnableAnimatedIK* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_EnableAnimatedIK>();
	}
};

// Class Marvel.MarvelInteractableActor_Movable
// 0x0000 (0x0540 - 0x0540)
class AMarvelInteractableActor_Movable final : public AMarvelInteractableActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelInteractableActor_Movable">();
	}
	static class AMarvelInteractableActor_Movable* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelInteractableActor_Movable>();
	}
};

// Class Marvel.BattleStatisticsManagerBase
// 0x0260 (0x0290 - 0x0030)
class UBattleStatisticsManagerBase : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 VersionTag;                                        // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscortTraceDuration;                               // 0x0048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EscortTraceLogDuration;                            // 0x004C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitDistanceInterval;                               // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireDistanceInterval;                              // 0x0054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LastBlowDistanceInterval;                          // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireDistanceMaxTime;                               // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireDistanceMaxDistance;                           // 0x0060(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableStatistics;                                 // 0x0064(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BattleID;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TreatmentTag;                                      // 0x0078(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DamageTag;                                         // 0x0084(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           MainAttackTag;                                     // 0x0090(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ShootWeaponTag;                                    // 0x009C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           UltimateAbilityTag;                                // 0x00A8(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SustainedTag;                                      // 0x00B4(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ProjectileGunTag;                                  // 0x00C0(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ScopeTag;                                          // 0x00CC(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OtherDamageStatTag;                                // 0x00D8(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OtherHealStatTag;                                  // 0x00E4(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ShieldSummonedTag;                                 // 0x00F0(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NormalSummonedTag;                                 // 0x00FC(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ReleasesTag;                                       // 0x0108(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 MorphNotStatisticsHeroIDList;                      // 0x0118(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ForbiddenHeroIDList;                               // 0x0128(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 IgnoreAbilityList;                                 // 0x0138(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         LogPositionDuration;                               // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, class FString>      ModeStrDict;                                       // 0x0150(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PositiveEffectType;                                // 0x01A0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  NegativeEffectType;                                // 0x0208(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         DestructionDamageDuration;                         // 0x0270(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestructionPercentageDuration;                     // 0x0274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DestructionPerFrameLogCount;                       // 0x0278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AMarvelPlayerState>         MarvelPlayerStateClass;                            // 0x0280(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RedirectAbilityID;                                 // 0x0288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_28C[0x4];                                      // 0x028C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AbilityCritHitLog(int32 PlayerUID, int32 HeroID, int32 AbilityID, const class FString& Key, float CritHit);
	void AbilityHitLog(int32 PlayerUID, int32 HeroID, int32 AbilityID, const class FString& Key, float HitCnt);
	void AbilityHitRateLog(int32 PlayerUID, int32 HeroID, int32 AbilityID, const class FString& Key, float LaunchCnt, float HitCnt, float CritCnt);
	void AbilityLaunchLog(int32 PlayerUID, int32 HeroID, int32 AbilityID, const class FString& Key, float LaunchCnt);
	void AbilityNormalLog(int32 PlayerUID, int32 HeroID, int32 AbilityID, const TMap<class FString, float>& KeyValue);
	struct FMarvelAbilityStatisticsUnit GetAbilityStatisticsUnit(int32 PlayerUID, int32 HeroID, int32 AbilityID);
	struct FMarvelBuffStatisticsUnit GetBuffStatisticsUnit(int32 PlayerUID, int32 HeroID, int32 BuffID);
	struct FMarvelHeroStatisticsUnit GetHeroStatisticsUnit(int32 PlayerUID, int32 HeroID);
	struct FMarvelPlayerStatisticsUnit GetPlayerStatisticsUnit(int32 PlayerUID);
	void HeroSpecialLog(int32 PlayerUID, int32 HeroID, int32 LogID, float Value);
	void K2_AbilityHitRateLog(int32 PlayerUID, int32 HeroID, int32 AbilityID, const class FString& Key, float LaunchCnt, float HitCnt, float CritCnt);
	void K2_AbilityNormalLog(int32 PlayerUID, int32 HeroID, int32 AbilityID, const TMap<class FString, float>& KeyValue);
	void K2_ClearStatistics();
	struct FMarvelAbilityStatisticsUnit K2_GetAbilityStatisticsUnit(int32 PlayerUID, int32 HeroID, int32 AbilityID);
	struct FMarvelBuffStatisticsUnit K2_GetBuffStatisticsUnit(int32 PlayerUID, int32 HeroID, int32 BuffID);
	struct FMarvelHeroStatisticsUnit K2_GetHeroStatisticsUnit(int32 PlayerUID, int32 HeroID);
	struct FMarvelPlayerStatisticsUnit K2_GetPlayerStatisticsUnit(int32 PlayerUID);
	void K2_HeroSpecialLog(int32 PlayerUID, int32 HeroID, int32 LogID, float Value);
	void ReceiveTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattleStatisticsManagerBase">();
	}
	static class UBattleStatisticsManagerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattleStatisticsManagerBase>();
	}
};

// Class Marvel.UIController_BattleHUD_Duration
// 0x01A0 (0x01D0 - 0x0030)
class UUIController_BattleHUD_Duration : public UObject
{
public:
	uint8                                         Pad_30[0x198];                                     // 0x0030(0x0198)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget_AbilityDuration*                Widget;                                            // 0x01C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIController_BattleHUD_Duration">();
	}
	static class UUIController_BattleHUD_Duration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIController_BattleHUD_Duration>();
	}
};

// Class Marvel.AnimNotifyState_MeshSlotGroup
// 0x0030 (0x0068 - 0x0038)
class UAnimNotifyState_MeshSlotGroup final : public UAnimNotifyState
{
public:
	TArray<struct FSetMeshSlotGroupSpec>          SetMeshSlotGroupsOnBegin;                          // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FSetMeshSlotGroupSpec>          SetMeshSlotGroupsOnEnd;                            // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FUpdateMeshSlotGroupSpec>       UpdateMeshSlotGroups;                              // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_MeshSlotGroup">();
	}
	static class UAnimNotifyState_MeshSlotGroup* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_MeshSlotGroup>();
	}
};

// Class Marvel.MarvelInputComponent
// 0x0108 (0x02B8 - 0x01B0)
class UMarvelInputComponent final : public UEnhancedInputComponent
{
public:
	class UMarvelUserSetting*                     CurrentUserSettingModule;                          // 0x01B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B8[0x100];                                    // 0x01B8(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ListenForInputAction(class FName ActionName, TDelegate<void()> Callback, EInputEvent EventType, bool bConsume);
	void ListenForInputActionEvent(const class UInputAction* Action, TDelegate<void()> Callback, ETriggerEvent TriggerEvent);
	void StopListeningForInputAction(class FName ActionName, EInputEvent EventType);
	void StopListeningForInputActionEvent(const class UInputAction* Action, ETriggerEvent TriggerEvent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelInputComponent">();
	}
	static class UMarvelInputComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelInputComponent>();
	}
};

// Class Marvel.AnimNotifyState_TimedFXWithAO
// 0x0308 (0x0340 - 0x0038)
class alignas(0x10) UAnimNotifyState_TimedFXWithAO : public UAnimNotifyState
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bBlockOnTagsOrActiveTags;                          // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  BlockTags;                                         // 0x0048(0x0068)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActiveTags;                                        // 0x00B0(0x0068)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UFXSystemAsset>          FXSystemAsset;                                     // 0x0118(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpawnLocationSocket;                               // 0x0148(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AOReferenceSocket;                                 // 0x0154(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              UpDownFactor;                                      // 0x0160(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              LeftRightFactor;                                   // 0x0170(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLeanCompensate;                                   // 0x0180(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateTransform;                                  // 0x0181(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateLocation;                                   // 0x0182(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRenderCustomDepthPass : 1;                        // 0x0183(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bToBeTriggered;                                    // 0x0184(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFXSlomo;                                    // 0x0185(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_186[0x2];                                      // 0x0186(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SlomoTimeScale;                                    // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0xEC];                                     // 0x018C(0x00EC)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UMeshComponent*, struct FInstanceProgressInfo> ProgressInfoMap;                                   // 0x0278(0x0050)(BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C8[0x10];                                     // 0x02C8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace*                            AimOffsetBlendSpace;                               // 0x02D8(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          NotifyLinkedSeq;                                   // 0x02E0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class UAnimSequence*, struct FCachedAnimationData> CachedAnimationDataMap;                            // 0x02E8(0x0050)(BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_338[0x8];                                      // 0x0338(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FTransform CalculateAimOffsetTransform(class AMarvelBaseCharacter* OwnerCharacter, class USkeletalMeshComponent* AttachComponent, class UAnimSequenceBase* Animation) const;
	struct FVector GetRelativeLoctionOfSocket(class USceneComponent* InComponent, class FName TargetSocketName, class FName ReferenceSocketName, ERelativeTransformSpace TransformSpace) const;
	struct FRotator LeanCompensate(class AMarvelBaseCharacter* OwnerCharacter, class USkeletalMeshComponent* AttachComponent, struct FVector* OutLocation, struct FRotator* OutRotation) const;
	void LocationCompensate(class USkeletalMeshComponent* AttachComponent, float SeqTimeOffset, struct FVector* OutLocation) const;
	class UFXSystemComponent* SpawnFXComponent(class UFXSystemAsset* InFXAsset, class USkeletalMeshComponent* AttachComponent, class UAnimSequenceBase* Animation, struct FVector* InDefaultLocation, struct FRotator* LeanRotation) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_TimedFXWithAO">();
	}
	static class UAnimNotifyState_TimedFXWithAO* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_TimedFXWithAO>();
	}
};

// Class Marvel.CueData_Base
// 0x0010 (0x0040 - 0x0030)
class UCueData_Base : public UAssetUserData
{
public:
	bool                                          bDebugMode;                                        // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0xF];                                       // 0x0031(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueData_Base">();
	}
	static class UCueData_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueData_Base>();
	}
};

// Class Marvel.CueUserData_ActiveManager
// 0x00A0 (0x00E0 - 0x0040)
class UCueUserData_ActiveManager final : public UCueData_Base
{
public:
	bool                                          bAutoActivate;                                     // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCueEventSubscriberInfo_StandardCueEvent ActiveSubscriberData;                              // 0x0048(0x0038)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FInstancedStruct                       ActiveEventSubscriberInfo;                         // 0x0080(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bAutoDeactivate;                                   // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCueEventSubscriberInfo_StandardCueEvent DeactivateSubscriberData;                          // 0x0098(0x0038)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FInstancedStruct                       DeactivateEventSubscriberInfo;                     // 0x00D0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	bool IsActiveInfoValid() const;
	bool IsDeactiveInfoValid() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueUserData_ActiveManager">();
	}
	static class UCueUserData_ActiveManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueUserData_ActiveManager>();
	}
};

// Class Marvel.AnimNotifyState_SelfTimedFXWithAO
// 0x0000 (0x0340 - 0x0340)
class UAnimNotifyState_SelfTimedFXWithAO final : public UAnimNotifyState_TimedFXWithAO
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_SelfTimedFXWithAO">();
	}
	static class UAnimNotifyState_SelfTimedFXWithAO* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_SelfTimedFXWithAO>();
	}
};

// Class Marvel.MarvelReplayDataRequest
// 0x0020 (0x0050 - 0x0030)
class UMarvelReplayDataRequest final : public UObject
{
public:
	uint8                                         Pad_30[0x20];                                      // 0x0030(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelReplayDataRequest">();
	}
	static class UMarvelReplayDataRequest* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelReplayDataRequest>();
	}
};

// Class Marvel.AnimNotifyState_SetAllBodiesBelowSimulatePhysics
// 0x0018 (0x0050 - 0x0038)
class UAnimNotifyState_SetAllBodiesBelowSimulatePhysics final : public UAnimNotifyState
{
public:
	TArray<struct FANS_SetAllBodiesBelowSimulatePhysics_BoneName> BoneNames;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSimulatePhysics;                                  // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIncludeSelf;                                      // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverseWhenEnd;                                   // 0x004A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_SetAllBodiesBelowSimulatePhysics">();
	}
	static class UAnimNotifyState_SetAllBodiesBelowSimulatePhysics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_SetAllBodiesBelowSimulatePhysics>();
	}
};

// Class Marvel.SimpleSpherePlayerCheckComponent
// 0x0090 (0x0920 - 0x0890)
class USimpleSpherePlayerCheckComponent final : public USphereComponent
{
public:
	int32                                         CheckFrequency;                                    // 0x0888(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88C[0x4];                                      // 0x088C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ACharacter* Character)> OnPlayerEnter;                                     // 0x0890(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ACharacter* Character)> OnPlayerExit;                                      // 0x08A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSet<class ACharacter*>                       InsidePlayerList;                                  // 0x08B0(0x0050)(NativeAccessSpecifierPrivate)
	class AMarvelGameState*                       CurrentGameState;                                  // 0x0900(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_908[0x18];                                     // 0x0908(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleSpherePlayerCheckComponent">();
	}
	static class USimpleSpherePlayerCheckComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleSpherePlayerCheckComponent>();
	}
};

// Class Marvel.AnimNotifyState_TimedAttachment
// 0x0028 (0x0060 - 0x0038)
class UAnimNotifyState_TimedAttachment : public UAnimNotifyState
{
public:
	class FName                                   ComponentTag;                                      // 0x0038(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimedVisibility                              TimedVisibility;                                   // 0x0044(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETimedAttachment                              TimedAttachment;                                   // 0x0045(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46[0x2];                                       // 0x0046(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachmentSocketName;                              // 0x0048(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWeldSimulatedBodies;                              // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoPlayAnimation;                                // 0x0055(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               AttachmentLocationRule;                            // 0x0056(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               AttachmentRotationRule;                            // 0x0057(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttachmentRule                               AttachmentScaleRule;                               // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_TimedAttachment">();
	}
	static class UAnimNotifyState_TimedAttachment* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_TimedAttachment>();
	}
};

// Class Marvel.AnimNotify_RemoveBlockTags
// 0x0068 (0x00A8 - 0x0040)
class UAnimNotify_RemoveBlockTags final : public UAnimNotify
{
public:
	struct FGameplayTagContainer                  AbilityBlockTags;                                  // 0x0040(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_RemoveBlockTags">();
	}
	static class UAnimNotify_RemoveBlockTags* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_RemoveBlockTags>();
	}
};

// Class Marvel.MarvelHittedDisplayInterfaceUtils
// 0x0000 (0x0030 - 0x0030)
class UMarvelHittedDisplayInterfaceUtils final : public UBlueprintFunctionLibrary
{
public:
	static void ExecuteTargetHittedDisplay(class UObject* SelfObj, class AActor* InSource, const struct FHitResult& InHit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelHittedDisplayInterfaceUtils">();
	}
	static class UMarvelHittedDisplayInterfaceUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelHittedDisplayInterfaceUtils>();
	}
};

// Class Marvel.CueUserData_FixedValue
// 0x0058 (0x0098 - 0x0040)
class UCueUserData_FixedValue final : public UCueData_Base
{
public:
	float                                         FixedValue;                                        // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCueEventSubscriberInfo_StandardCueEvent AutoActiveSubscriberData;                          // 0x0048(0x0038)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FInstancedStruct                       AutoActiveEventSubscriberInfo;                     // 0x0080(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UCueDataCurveAction_Base*               CurveAction;                                       // 0x0090(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueUserData_FixedValue">();
	}
	static class UCueUserData_FixedValue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueUserData_FixedValue>();
	}
};

// Class Marvel.AnimNotifyState_TimedBlockTags
// 0x00D0 (0x0108 - 0x0038)
class UAnimNotifyState_TimedBlockTags final : public UAnimNotifyState
{
public:
	struct FGameplayTagContainer                  AbilityBlockTags;                                  // 0x0038(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AbilityCancelTags;                                 // 0x00A0(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_TimedBlockTags">();
	}
	static class UAnimNotifyState_TimedBlockTags* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_TimedBlockTags>();
	}
};

// Class Marvel.AnimNotifyState_TimedHideBones
// 0x0010 (0x0048 - 0x0038)
class UAnimNotifyState_TimedHideBones final : public UAnimNotifyState
{
public:
	TArray<class FName>                           HideBoneNames;                                     // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_TimedHideBones">();
	}
	static class UAnimNotifyState_TimedHideBones* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_TimedHideBones>();
	}
};

// Class Marvel.MarvelCue_SegmentInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelCue_SegmentInterface final : public IInterface
{
public:
	const struct FPortalSegments GetCurrentSegments();
	struct FTransform GetMatchTransform(class UNiagaraComponent* TargetComp);
	void SetCurrentSegments(const struct FPortalSegments& InSegments);
	TArray<class UNiagaraComponent*> SetupSegmentFXSystemsAtLocation(class UNiagaraComponent* TemplateComp, bool bClearHistory, const struct FVector& Scale, bool bAutoDestroy, EPSCPoolMethod PoolingMethod, bool bAutoActivate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCue_SegmentInterface">();
	}
	static class IMarvelCue_SegmentInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelCue_SegmentInterface>();
	}
};

// Class Marvel.GameplayActorBase
// 0x0030 (0x04E0 - 0x04B0)
class AGameplayActorBase : public AMarvelActorBase
{
public:
	uint8                                         Pad_4B0[0x8];                                      // 0x04B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AGameplayActorBase* Actor, bool Active)> OnActiveChanged;                                   // 0x04B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x04C8(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsServer;                                         // 0x04C9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsDedicatedServer;                                // 0x04CA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4CB[0x5];                                      // 0x04CB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelGameMode*                        MarvelGameMode;                                    // 0x04D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelGameState*                       MarvelGameState;                                   // 0x04D8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	struct FVector CalculateAssistingVector(class AActor* AssistingTarget, float DeltaSeconds);
	void Initialize();
	void OnActivate();
	void OnDeactivate();
	void OnRep_Active();

	bool IsActive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayActorBase">();
	}
	static class AGameplayActorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameplayActorBase>();
	}
};

// Class Marvel.MarvelSkeletalMeshComponent
// 0x0000 (0x1700 - 0x1700)
class UMarvelSkeletalMeshComponent : public USkeletalMeshComponentBudgeted
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSkeletalMeshComponent">();
	}
	static class UMarvelSkeletalMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSkeletalMeshComponent>();
	}
};

// Class Marvel.PhantomSkeletalMeshComponent
// 0x0080 (0x1780 - 0x1700)
class UPhantomSkeletalMeshComponent final : public UMarvelSkeletalMeshComponent
{
public:
	uint8                                         Pad_1700[0x80];                                    // 0x1700(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhantomSkeletalMeshComponent">();
	}
	static class UPhantomSkeletalMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhantomSkeletalMeshComponent>();
	}
};

// Class Marvel.AnimNotifyState_TimedHideMaterial
// 0x0028 (0x0060 - 0x0038)
class UAnimNotifyState_TimedHideMaterial final : public UAnimNotifyState
{
public:
	bool                                          bHideAllSections;                                  // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 HideMaterialIDArray;                               // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           HideMaterialSlotSuffixes;                          // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_TimedHideMaterial">();
	}
	static class UAnimNotifyState_TimedHideMaterial* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_TimedHideMaterial>();
	}
};

// Class Marvel.MarvelGameplayEffectAmmo3Regen
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectAmmo3Regen final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectAmmo3Regen">();
	}
	static class UMarvelGameplayEffectAmmo3Regen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectAmmo3Regen>();
	}
};

// Class Marvel.AnimNotifyState_TimedHideWeapons
// 0x0008 (0x0040 - 0x0038)
class UAnimNotifyState_TimedHideWeapons final : public UAnimNotifyState
{
public:
	bool                                          bShoworHideWeapon;                                 // 0x0038(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHideWeapn                                    HideWeapn;                                         // 0x0039(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x2];                                       // 0x003A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EquipID;                                           // 0x003C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_TimedHideWeapons">();
	}
	static class UAnimNotifyState_TimedHideWeapons* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_TimedHideWeapons>();
	}
};

// Class Marvel.CueDataCurveAction_Base
// 0x0018 (0x0048 - 0x0030)
class UCueDataCurveAction_Base : public UObject
{
public:
	bool                                          bDebugMode;                                        // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UCueDataProcessor_FloatCurve> OwnerProcessor;                                    // 0x0034(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UCueDataProcessor_FixedValue> FixedValueProcessor;                               // 0x003C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyCachedValueIfRendered(bool bForce);
	class UActorComponent* GetTargetComponent();
	void OnEnd();
	void OnStart();
	void OnUpdate(class FName TrackName, class FName PropertyName, float Output);
	bool ShouldUpdate(float Output);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueDataCurveAction_Base">();
	}
	static class UCueDataCurveAction_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueDataCurveAction_Base>();
	}
};

// Class Marvel.AnimNotifyState_TimedNiagaraEffectEx
// 0x0108 (0x01D8 - 0x00D0)
class UAnimNotifyState_TimedNiagaraEffectEx : public UAnimNotifyState_TimedNiagaraEffect
{
public:
	uint8                                         bDoNotUpdateRotation : 1;                          // 0x00D0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDoNotUpdateScale : 1;                             // 0x00D0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCastShadow : 1;                                   // 0x00D0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRenderCustomDepthPass : 1;                        // 0x00D0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         BitPad_D0_4 : 4;                                   // 0x00D0(0x0001)(Fixing Bit-Field Size For New Byte [ Dumper-7 ])
	uint8                                         Pad_D1[0x3];                                       // 0x00D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bUsedCustomStencil : 1;                            // 0x00D4(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CustomStencilValue;                                // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, float>                      FloatUserParameterValues;                          // 0x00E0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVector>             VectorUserParameterValues;                         // 0x0130(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, struct FLinearColor>        ColorUserParameterValues;                          // 0x0180(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	ENotifyEffectViewSide                         NotifyViewSide;                                    // 0x01D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreCullCheck;                                     // 0x01D1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2[0x6];                                      // 0x01D2(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_TimedNiagaraEffectEx">();
	}
	static class UAnimNotifyState_TimedNiagaraEffectEx* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_TimedNiagaraEffectEx>();
	}
};

// Class Marvel.MarvelReplicationGraphNode_ForceNetUpdate
// 0x0000 (0x00F8 - 0x00F8)
class UMarvelReplicationGraphNode_ForceNetUpdate final : public UReplicationGraphNode_ActorList
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelReplicationGraphNode_ForceNetUpdate">();
	}
	static class UMarvelReplicationGraphNode_ForceNetUpdate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelReplicationGraphNode_ForceNetUpdate>();
	}
};

// Class Marvel.MarvelGameplayEffectSkill3Cost
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectSkill3Cost final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectSkill3Cost">();
	}
	static class UMarvelGameplayEffectSkill3Cost* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectSkill3Cost>();
	}
};

// Class Marvel.AnimNotifyState_TimedNiagaraEffectExWithSpeed
// 0x0010 (0x01E8 - 0x01D8)
class UAnimNotifyState_TimedNiagaraEffectExWithSpeed final : public UAnimNotifyState_TimedNiagaraEffectEx
{
public:
	class UCurveFloat*                            SpeedCurve;                                        // 0x01D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0[0x8];                                      // 0x01E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_TimedNiagaraEffectExWithSpeed">();
	}
	static class UAnimNotifyState_TimedNiagaraEffectExWithSpeed* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_TimedNiagaraEffectExWithSpeed>();
	}
};

// Class Marvel.MarvelSummonedComponent
// 0x0BB0 (0x0CA0 - 0x00F0)
class UMarvelSummonedComponent : public UActorComponent
{
public:
	uint8                                         Pad_F0[0x30];                                      // 0x00F0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UStencilComponent*                      CachedStencilComponent;                            // 0x0120(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoRegisterWhenBegin;                            // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OwnerSummoned;                                     // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetId;                                          // 0x0138(0x0004)(Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x013C(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SourceActor;                                       // 0x0140(0x0008)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UGameplayAbility>        OwningAbility;                                     // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedCheckLevelPenetration;                        // 0x0150(0x0001)(Edit, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_151[0x7];                                      // 0x0151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAgentOriginInfo                 SummonedOriginInfo;                                // 0x0158(0x0018)(BlueprintVisible, BlueprintReadOnly, Net, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelTargetActorGenerateInfo         GenerateInfo;                                      // 0x0170(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B8[0x18];                                     // 0x01B8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilitySourceLocationInfo       StartLocationInfo;                                 // 0x01D0(0x0140)(BlueprintVisible, Net, NoDestructor, ContainsInstancedReference, ExposeOnSpawn, NativeAccessSpecifierPublic)
	uint8                                         Pad_310[0x40];                                     // 0x0310(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelQuoteContext                    QuoteContext;                                      // 0x0350(0x00F0)(BlueprintVisible, BlueprintReadOnly, Net, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Value)> OnBeginTask;                                       // 0x0440(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Value)> OnEndTask;                                         // 0x0450(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Value)> OnRecycleTask;                                     // 0x0460(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Value)> OnDeath;                                           // 0x0470(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_480[0x38];                                     // 0x0480(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class USummonedAbilitySystemComponent*        AbilitySystemComponent;                            // 0x04B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, Net, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinID;                                            // 0x04C0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C4[0x4];                                      // 0x04C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelPlayerState*                     PlayerState;                                       // 0x04C8(0x0008)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerStateUID;                                    // 0x04D0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D4[0x2];                                      // 0x04D4(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bBeginAgentTask;                                   // 0x04D6(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndAgentTask;                                     // 0x04D7(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecycleAgentTask;                                 // 0x04D8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D9[0x3];                                      // 0x04D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FServerSummonedEndInfo                 ServerSummonedEndInfo;                             // 0x04DC(0x0008)(Net, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E4[0x4];                                      // 0x04E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ServerSpawnWorldTime;                              // 0x04E8(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETargetActorBeginReason                       BeginReason;                                       // 0x04EC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETargetActorDestroyReason                     DestroyReason;                                     // 0x04ED(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4EE[0x2];                                      // 0x04EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAIStimuliSourceComponentBase*    StimuliComp;                                       // 0x04F0(0x0008)(Edit, ExportObject, ZeroConstructor, Transient, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 AttachParent;                                      // 0x04F8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelAbilityContextHandle            AbilityContextHandle;                              // 0x0500(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_540[0x6B8];                                    // 0x0540(0x06B8)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         SpawnPredictionKey;                                // 0x0BF8(0x00A0)(Net, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedSpawnFake;                                    // 0x0C98(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C99[0x7];                                      // 0x0C99(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateSpawnChildAbility();
	void AddGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	void ExecuteGameplayCueEvent(const struct FGameplayTag& CheckTag, int32 DurationPolicy, const struct FVector& Location, bool bAdd);
	void ExecuteGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	float GetSummonedLifeSpan();
	float GetSummonedLifeSpanRemaining();
	void K2_BeginAgentTask();
	void K2_EndAgentTask();
	bool K2_IsSummonedInLifeSpan();
	void K2_OnBeginAgentTask();
	void K2_OnEndAgentTask();
	void K2_OnIncreaseEnergy(float IncreaseEnergy);
	void K2_OnRecycleAgentTask();
	void K2_OnSummonedDeath(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void K2_OnSummonedTakeDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void K2_OnSummonedTakeTreat(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void K2_SetSummonedData(const struct FMarvelSummonerAgentTable& InData);
	const struct FMarvelAgentOriginInfo MakeOriginInfo();
	void NetMulticast_SetPlaceInLevelSummonedBattleSide(EBattleSide InBattleSide);
	void OnAttachmentChanged();
	void OnAttachParentTagUpdated(const struct FGameplayTag& Tag, bool TagExists);
	void OnQuoteSourceEndAgentTask(class AActor* InActor);
	void OnRep_EndAgentTask();
	void OnSummonedDeath(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnSummonedTagUpdated(const struct FGameplayTag& Tag, bool TagExists);
	void OnSummonedTakeDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnSummonedTakeTreat(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void RegisterSummoned();
	void RemoveGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	void SetPlaceInLevelSummonedBattleSide(EBattleSide InBattleSide);
	void SetSummonedLifeSpan(float InLifeTime);
	void SpawnBeginAgentTaskScopeQuote();
	void SpawnDeathScopeQuote();
	void SpawnEndAgentTaskScopeQuote();
	class UMarvelAbilityTask_Projectile* SpawnProjectile(int32 ID, const struct FMarvelAbilitySocketInfo& SocketInfo, bool bActivateNow);
	class UMarvelAbilityTask_Projectile* SpawnProjectileEx(int32 ID, const struct FMarvelAbilitySourceLocationInfo& LocationInfo, bool bActivateNow);
	class UMarvelAbilityTask_Projectile* SpawnScope(int32 ID, const struct FMarvelAbilitySocketInfo& SocketInfo, bool bActivateNow);
	class UMarvelAbilityTask_Projectile* SpawnScopeEx(int32 ID, const struct FMarvelAbilitySourceLocationInfo& LocationInfo, bool bActivateNow);
	class UMarvelAbilityTask_SpawnSummoner* SpawnSummoner(int32 ID, const struct FMarvelAbilitySocketInfo& SocketInfo, ESummonedPredictMode InMode, bool bActivateNow);
	class UMarvelAbilityTask_SpawnSummoner* SpawnSummonerEx(int32 ID, const struct FMarvelAbilitySourceLocationInfo& LocationInfo, ESummonedPredictMode InMode, bool bActivateNow);
	void StartLifeSpan();

	class UMarvelBaseGameplayAbility* GetCurrentOwningAbility() const;
	class APawn* GetCurrentSummonedInstigator() const;
	class AActor* GetCurrentSummonedOwner() const;
	class UMarvelBaseGameplayAbility* GetOriginOwningAbility() const;
	class UMarvelAbilityItem* GetOriginOwningAbilityAsset() const;
	class UMarvelAbilityConfig* GetOriginOwningAbilityConfig() const;
	class APawn* GetOriginSummonedInstigator() const;
	class AActor* GetOriginSummonedOwner() const;
	class UMarvelAbilitySystemCom* GetPredictASC() const;
	class AActor* GetSummoned() const;
	float GetSurvivalTime() const;
	struct FMarvelSummonerAgentTable K2_GetSummonedData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSummonedComponent">();
	}
	static class UMarvelSummonedComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSummonedComponent>();
	}
};

// Class Marvel.SummonedComp_10186101
// 0x0000 (0x0CA0 - 0x0CA0)
class USummonedComp_10186101 : public UMarvelSummonedComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SummonedComp_10186101">();
	}
	static class USummonedComp_10186101* GetDefaultObj()
	{
		return GetDefaultObjImpl<USummonedComp_10186101>();
	}
};

// Class Marvel.AnimNotifyState_TimedOwnedTags
// 0x0068 (0x00A0 - 0x0038)
class UAnimNotifyState_TimedOwnedTags : public UAnimNotifyState
{
public:
	struct FGameplayTagContainer                  GameplayTags;                                      // 0x0038(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_TimedOwnedTags">();
	}
	static class UAnimNotifyState_TimedOwnedTags* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_TimedOwnedTags>();
	}
};

// Class Marvel.AnimNotifyState_MontageTimedOwnedTags
// 0x0000 (0x00A0 - 0x00A0)
class UAnimNotifyState_MontageTimedOwnedTags final : public UAnimNotifyState_TimedOwnedTags
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_MontageTimedOwnedTags">();
	}
	static class UAnimNotifyState_MontageTimedOwnedTags* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_MontageTimedOwnedTags>();
	}
};

// Class Marvel.MarvelLifeTimeBindPool
// 0x0018 (0x0050 - 0x0038)
class UMarvelLifeTimeBindPool final : public UWorldSubsystem
{
public:
	TArray<class ULifeInfo_Params*>               LifeInfoParams;                                    // 0x0038(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PrintLifeInfo_Params() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelLifeTimeBindPool">();
	}
	static class UMarvelLifeTimeBindPool* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelLifeTimeBindPool>();
	}
};

// Class Marvel.CueDataCurveAction_CharacterMaterial
// 0x0050 (0x0098 - 0x0048)
class UCueDataCurveAction_CharacterMaterial : public UCueDataCurveAction_Base
{
public:
	TArray<int32>                                 MaterialIndex;                                     // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           MaterialSlotName;                                  // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0068(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetOnOverlayMaterial;                             // 0x0074(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetOnBothMaterial;                                // 0x0075(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_76[0x22];                                      // 0x0076(0x0022)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueDataCurveAction_CharacterMaterial">();
	}
	static class UCueDataCurveAction_CharacterMaterial* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueDataCurveAction_CharacterMaterial>();
	}
};

// Class Marvel.AnimNotifyState_TimedOwnedTags_AI
// 0x0008 (0x00A8 - 0x00A0)
class UAnimNotifyState_TimedOwnedTags_AI final : public UAnimNotifyState_TimedOwnedTags
{
public:
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_TimedOwnedTags_AI">();
	}
	static class UAnimNotifyState_TimedOwnedTags_AI* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_TimedOwnedTags_AI>();
	}
};

// Class Marvel.AnimNotifyState_TimedParticleOnWeapon
// 0x0030 (0x00F0 - 0x00C0)
class UAnimNotifyState_TimedParticleOnWeapon final : public UAnimNotifyState_TimedParticleEffect
{
public:
	uint8                                         bUseExisting : 1;                                  // 0x00C0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAttached : 1;                                     // 0x00C0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_C1[0x3];                                       // 0x00C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EquipID;                                           // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PSComponentTag;                                    // 0x00C8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Scale;                                             // 0x00D8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class USkeletalMeshComponent* GetMeshComponentOverride(class USkeletalMeshComponent* MeshComp) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_TimedParticleOnWeapon">();
	}
	static class UAnimNotifyState_TimedParticleOnWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_TimedParticleOnWeapon>();
	}
};

// Class Marvel.BreathAudioManager
// 0x0050 (0x0080 - 0x0030)
class UBreathAudioManager final : public UObject
{
public:
	uint8                                         Pad_30[0x50];                                      // 0x0030(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BreathAudioManager">();
	}
	static class UBreathAudioManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBreathAudioManager>();
	}
};

// Class Marvel.MarvelHorizontalBox
// 0x0040 (0x0240 - 0x0200)
class UMarvelHorizontalBox final : public UHorizontalBox
{
public:
	bool                                          bKeepPriority;                                     // 0x0200(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToSamePriorityFront;                              // 0x0201(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_202[0x2];                                      // 0x0202(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FGeometry& MyGeometry, EUINavigation Direction)> OnNavigationDelegate;                              // 0x0204(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_218[0x28];                                     // 0x0218(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UHorizontalBoxSlot* AddChildWithIndex(class UWidget* Content, int32 InIndex);
	class UHorizontalBoxSlot* AddChildWithPriority(class UWidget* Content, int32 InPriority);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelHorizontalBox">();
	}
	static class UMarvelHorizontalBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelHorizontalBox>();
	}
};

// Class Marvel.AnimNotifyState_TimedSkeletonAnimation
// 0x0130 (0x0168 - 0x0038)
class UAnimNotifyState_TimedSkeletonAnimation final : public UAnimNotifyState
{
public:
	TSoftObjectPtr<class USkeletalMesh>           SkeletalMeshTemplate;                              // 0x0038(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMaterialInterface>> OverrideMaterials;                                 // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0078(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationOffset;                                    // 0x0088(0x0018)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationOffset;                                    // 0x00A0(0x0018)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         bDoNotAttach : 1;                                  // 0x00B8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDoNotUpdateLocation : 1;                          // 0x00B8(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDoNotUpdateRotation : 1;                          // 0x00B8(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDoNotUpdateScale : 1;                             // 0x00B8(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bIsRenderCustomDepth;                              // 0x00B9(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVisibilityBasedAnimTickOption                VisibilityBasedAnimTickOption;                     // 0x00BA(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BB[0x5];                                       // 0x00BB(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAnimationAsset>         AnimToPlay;                                        // 0x00C0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLoop;                                           // 0x00F0(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimStartPos;                                      // 0x00F4(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkeletalUseAttachParentBound;                     // 0x00F8(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F9[0x6F];                                      // 0x00F9(0x006F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_TimedSkeletonAnimation">();
	}
	static class UAnimNotifyState_TimedSkeletonAnimation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_TimedSkeletonAnimation>();
	}
};

// Class Marvel.MarvelCueNotify_CustomDynamicEvent
// 0x0000 (0x0288 - 0x0288)
class UMarvelCueNotify_CustomDynamicEvent : public UMarvelCueNotify_Static
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_CustomDynamicEvent">();
	}
	static class UMarvelCueNotify_CustomDynamicEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCueNotify_CustomDynamicEvent>();
	}
};

// Class Marvel.AnimNotifyState_TimedSummoned
// 0x0038 (0x0070 - 0x0038)
class UAnimNotifyState_TimedSummoned final : public UAnimNotifyState
{
public:
	int32                                         SummonerId;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLocation;                                 // 0x003C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelScopeQuoteType                         InitLocationType;                                  // 0x003D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E[0x2];                                       // 0x003E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitLocationOffset;                                // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomSocket;                                  // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAnimationSocket;                               // 0x0059(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x005C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 Summoned;                                          // 0x0068(0x0008)(BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnSummonedSpawn(class AActor* SummonedActor) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_TimedSummoned">();
	}
	static class UAnimNotifyState_TimedSummoned* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_TimedSummoned>();
	}
};

// Class Marvel.ChaosTestTriggerActor
// 0x00F8 (0x0588 - 0x0490)
class AChaosTestTriggerActor final : public AActor
{
public:
	uint8                                         Pad_490[0x8];                                      // 0x0490(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGeometryCollectionRepData             RepData;                                           // 0x0498(0x0068)(Net, RepNotify, NativeAccessSpecifierPublic)
	class AChaosDestructionActor*                 TargetChaosActor;                                  // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordOriginPosition;                             // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_509[0x3];                                      // 0x0509(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CheckMoveDistance;                                 // 0x050C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveRatio;                                         // 0x0510(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_514[0x6C];                                     // 0x0514(0x006C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PositionPrecision;                                 // 0x0580(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnglePrecision;                                    // 0x0584(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AutoBreakGC();
	void AutoBreakGCBP();
	bool CheckGCPositionAsync();
	bool CheckParticlePosition(class AActor* Actor);
	class AChaosDestructionActor* GetTargetChaosActor();
	bool GetTestResult();
	bool IsBomb();
	void MulticastAutoBreakGC();
	void MulticastParticlePosition(const struct FGeometryCollectionRepData& frameRepData);
	void MulticastRecoveryGC();
	void OnRep_RepData();
	void PrintParticleInfo();
	void RecoveryGC();
	void SetResult(bool bRet);
	void SetResultBP(bool bRet);
	void SetTestResult(bool bRet);
	void TestBP();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosTestTriggerActor">();
	}
	static class AChaosTestTriggerActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AChaosTestTriggerActor>();
	}
};

// Class Marvel.AnimNotifyState_TimedScope
// 0x0058 (0x0090 - 0x0038)
class UAnimNotifyState_TimedScope final : public UAnimNotifyState
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseCustomSocket;                                  // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAnimationSocket;                               // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0044(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ScopeId;                                           // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLocation;                                 // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelScopeQuoteType                         InitLocationType;                                  // 0x0055(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56[0x2];                                       // 0x0056(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitLocationOffset;                                // 0x0058(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InitRotationOffset;                                // 0x0070(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class AMarvelAbilityTargetActor_Scope*        ScopeActor;                                        // 0x0088(0x0008)(BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnScopeSpawnSuccess(class AActor* InScopeActor, const struct FGameplayAbilityTargetDataHandle& TargetDataHandle) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_TimedScope">();
	}
	static class UAnimNotifyState_TimedScope* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_TimedScope>();
	}
};

// Class Marvel.GameplayAbilityTargetTypesLibrary
// 0x0000 (0x0030 - 0x0030)
class UGameplayAbilityTargetTypesLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FHitResult GetSingleTargetHitFromTargetDataHandle(const struct FGameplayAbilityTargetDataHandle& TargetDataHandle);
	static struct FGameplayAbilityTargetDataHandle MakeTargetDataHandle_SingleTargetHit(const struct FHitResult& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayAbilityTargetTypesLibrary">();
	}
	static class UGameplayAbilityTargetTypesLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayAbilityTargetTypesLibrary>();
	}
};

// Class Marvel.AnimNotifyState_TimedWeaponEventBase
// 0x0040 (0x0078 - 0x0038)
class UAnimNotifyState_TimedWeaponEventBase : public UAnimNotifyState
{
public:
	uint8                                         bUseModeEvent : 1;                                 // 0x0038(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EquipID;                                           // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeaponModeIndex;                                   // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WeaponEventBeginTag;                               // 0x0044(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WeaponEventEndTag;                                 // 0x0050(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeaponNotifyEvent                     WeaponEvent;                                       // 0x0060(0x0018)(BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_TimedWeaponEventBase">();
	}
	static class UAnimNotifyState_TimedWeaponEventBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_TimedWeaponEventBase>();
	}
};

// Class Marvel.ChaosDestructionManager
// 0x0478 (0x04C0 - 0x0048)
class alignas(0x10) UChaosDestructionManager final : public UTickableWorldSubsystem
{
public:
	TSet<TWeakObjectPtr<class AChaosDestructionActor>> LevelChaosDesActors;                               // 0x0048(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	TSet<TWeakObjectPtr<class AChaosDestructionActor>> DelayAsyncFieldsActors;                            // 0x0098(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	TSet<TWeakObjectPtr<class AChaosDestructionActor>> LoopThreeSecDesActors;                             // 0x00E8(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	TSet<TWeakObjectPtr<class AChaosDestructionActor>> LevelChaosSyncDesActors;                           // 0x0138(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	TSet<TWeakObjectPtr<class AChaosClientDesActor>> LevelChaosClientGCActors;                          // 0x0188(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	TSet<TWeakObjectPtr<class AActor>>            AffectSMActors;                                    // 0x01D8(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	TSet<class ABackTrackManagerActor*>           BackTrackManagerActors;                            // 0x0228(0x0050)(NativeAccessSpecifierPrivate)
	TMap<int32, struct FChaosDestructPair>        RuntimeTagPairData;                                // 0x0278(0x0050)(NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class AActor>>          LevelAllActors;                                    // 0x02C8(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           ChaosDesAsyncLinkEnvironmentActorDelayTimer;       // 0x02D8(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSet<TWeakObjectPtr<class AChaosDestructionActor>> ChaosLinkTaskQueue;                                // 0x02F0(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_340[0x18];                                     // 0x0340(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           EffectMeshTimerHandle;                             // 0x0358(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           ChaosDesAsyncFieldsDelayTimer;                     // 0x0370(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FTimerHandle                           ChaosDesLoopThreeSecTickTimer;                     // 0x0388(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsAsyncFieldsDelayTimerRunning;                   // 0x03A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsLoopThreeSecTimerRunning;                       // 0x03A1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A2[0x2];                                      // 0x03A2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	uint32                                        DelayAsyncFrame;                                   // 0x03A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3A8[0xB0];                                     // 0x03A8(0x00B0)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnResetTransitionComponentsDelegate;               // 0x0458(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMultiTurnSwitchResetDelegate;                    // 0x0468(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bEnablePostProcess)> OnDestructionPostProcessDelegate;                  // 0x0478(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnTriggerOptFieldDelegate;                         // 0x0488(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bIsFieldEnabled;                                   // 0x0498(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_499[0x27];                                     // 0x0499(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UChaosDestructionManager* GetChaosDestructionManager(const class UObject* WorldContextObject);

	void BeginPlayWithDeal();
	void BreakAllClientGC();
	void DealArtLevelSMBP(bool bIsDeathReplay);
	void ForceUpdateSyncGCRenderState();
	void OnCurrentStageChanged(const class FString& StageName);
	void OnLevelAddedToWorld(class ULevel* InLevel, class UWorld* InWorld);
	void OnLikeMapLoaded();
	void OnMatchStateChanged(EMatchState MatchState);
	void OnReplayGotoTimeFinished();
	void OnReplayScrubComplete(class UWorld* World);
	void OnReplayStateChanged(EMarvelReplayState Value);
	void OnViewingWorldChanged();
	bool RegisterActor(class AChaosDestructionActor* AddActor);
	bool RegisterAffectSMActor(class AActor* AddActor);
	bool RegisterClientGCActor(class AChaosClientDesActor* AddActor);
	bool RegisterForDelayFieldsTimer(class AChaosDestructionActor* AddActor);
	bool RegisterLoopThreeSecTimer(class AChaosDestructionActor* AddActor);
	void ResetActorWithTransitionComponent();
	void ResetAllChaosDestruction(const class UObject* WCO);
	void ResetAllLevelAnimActor(const class UObject* WCO);
	void SetISMCLoaderState();
	bool UnregisterActor(class AChaosDestructionActor* RemoveActor);
	bool UnregisterAffectSMActor(class AActor* RemoveActor);
	bool UnregisterClientGCActor(class AChaosClientDesActor* RemoveActor);
	bool UnregisterForDelayFieldsTimer(class AChaosDestructionActor* RemoveActor);
	bool UnregisterLoopThreeSecTimer(class AChaosDestructionActor* RemoveActor);

	const TSet<TWeakObjectPtr<class AActor>> GetAffectSMActors() const;
	const TSet<TWeakObjectPtr<class AChaosClientDesActor>> GetAllChaosClientGCActors() const;
	const TSet<TWeakObjectPtr<class AChaosDestructionActor>> GetAllChaosDesActors() const;
	const TSet<TWeakObjectPtr<class AChaosDestructionActor>> GetAllChaosSyncDesActors() const;
	bool GetOptFieldEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosDestructionManager">();
	}
	static class UChaosDestructionManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChaosDestructionManager>();
	}
};

// Class Marvel.MarvelRollbackSubsystem
// 0x0128 (0x0170 - 0x0048)
class UMarvelRollbackSubsystem final : public UTickableWorldSubsystem
{
public:
	TMap<uint32, class AActor*>                   ObjectMap;                                         // 0x0048(0x0050)(NativeAccessSpecifierPublic)
	TSet<class AActor*>                           ObjectSet;                                         // 0x0098(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_E8[0x8];                                       // 0x00E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class AActor*, uint64>                   RemoteDrawFrame;                                   // 0x00F0(0x0050)(NativeAccessSpecifierPublic)
	TArray<uint32>                                ActorUniqueIDs;                                    // 0x0140(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_150[0x20];                                     // 0x0150(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelRollbackSubsystem">();
	}
	static class UMarvelRollbackSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelRollbackSubsystem>();
	}
};

// Class Marvel.AnimNotifyState_TimedWeaponEvent
// 0x0000 (0x0078 - 0x0078)
class UAnimNotifyState_TimedWeaponEvent final : public UAnimNotifyState_TimedWeaponEventBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_TimedWeaponEvent">();
	}
	static class UAnimNotifyState_TimedWeaponEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_TimedWeaponEvent>();
	}
};

// Class Marvel.MarvelHitShape_Sphere
// 0x0000 (0x0890 - 0x0890)
class UMarvelHitShape_Sphere final : public USphereComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelHitShape_Sphere">();
	}
	static class UMarvelHitShape_Sphere* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelHitShape_Sphere>();
	}
};

// Class Marvel.AnimNotifyState_TimedClientWeaponEvent
// 0x0000 (0x0078 - 0x0078)
class UAnimNotifyState_TimedClientWeaponEvent final : public UAnimNotifyState_TimedWeaponEventBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_TimedClientWeaponEvent">();
	}
	static class UAnimNotifyState_TimedClientWeaponEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_TimedClientWeaponEvent>();
	}
};

// Class Marvel.EffectTemplateLogic_Block_Falling
// 0x0000 (0x0030 - 0x0030)
class UEffectTemplateLogic_Block_Falling final : public UMarvelEffectTemplateLogicTypes
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EffectTemplateLogic_Block_Falling">();
	}
	static class UEffectTemplateLogic_Block_Falling* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEffectTemplateLogic_Block_Falling>();
	}
};

// Class Marvel.CharacterHitShapesInfo
// 0x0010 (0x0048 - 0x0038)
class UCharacterHitShapesInfo final : public UDataAsset
{
public:
	TArray<struct FHitShapeInfo>                  HitShapes;                                         // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterHitShapesInfo">();
	}
	static class UCharacterHitShapesInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterHitShapesInfo>();
	}
};

// Class Marvel.AnimNotifyState_UpdateMaterial
// 0x0048 (0x0080 - 0x0038)
class UAnimNotifyState_UpdateMaterial final : public UAnimNotifyState
{
public:
	class FName                                   MachineName;                                       // 0x0038(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StateName;                                         // 0x0044(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAnimationMaterialCurveParam>   SingleMaterialCurve;                               // 0x0050(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   ParameterName;                                     // 0x0060(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            Curve;                                             // 0x0070(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRecoverDefaultValue;                              // 0x0078(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_UpdateMaterial">();
	}
	static class UAnimNotifyState_UpdateMaterial* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_UpdateMaterial>();
	}
};

// Class Marvel.GameplayEffectFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UGameplayEffectFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UAbilitySystemComponent* GetInstigatorASCByActiveEffectHandle(const struct FActiveGameplayEffectHandle& Handle);
	static float GetSetByCallerMagnitudeByActiveEffectHandle(const struct FActiveGameplayEffectHandle& Handle, const struct FGameplayTag& DataTag, float DefaultIfNotFound);
	static float GetSetByCallerMagnitudeByEffectSpecHandle(const struct FGameplayEffectSpecHandle& Handle, const struct FGameplayTag& DataTag, float DefaultIfNotFound);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayEffectFunctionLibrary">();
	}
	static class UGameplayEffectFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayEffectFunctionLibrary>();
	}
};

// Class Marvel.AnimNotifyState_UpperBodyBlend
// 0x0048 (0x0080 - 0x0038)
class UAnimNotifyState_UpperBodyBlend final : public UAnimNotifyState
{
public:
	EMontageType                                  UpperBodyType;                                     // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FUpperBodyBlendSwitch                  UpperBodySwitches;                                 // 0x0039(0x0009)(Edit, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUpperLayeredBlendConfig               UpperBodyConfig;                                   // 0x0048(0x0038)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_UpperBodyBlend">();
	}
	static class UAnimNotifyState_UpperBodyBlend* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_UpperBodyBlend>();
	}
};

// Class Marvel.WeaponCrosshairSpec
// 0x0130 (0x0160 - 0x0030)
class UWeaponCrosshairSpec final : public UObject
{
public:
	struct FGameplayTagContainer                  BoundModes;                                        // 0x0030(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         CrosshairRadius;                                   // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCrosshairExtras                       CrosshairExtras;                                   // 0x009C(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCrosshairShakeParamsV2                CrosshairShake;                                    // 0x00A8(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCrosshairShakeParamsV3                CrosshairShakeV3_X;                                // 0x00E0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCrosshairShakeParamsV3                CrosshairShakeV3_Y;                                // 0x0100(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FCrosshairSpreadParamsV2               CrosshairSpread;                                   // 0x0120(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WeaponCrosshairSpec">();
	}
	static class UWeaponCrosshairSpec* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponCrosshairSpec>();
	}
};

// Class Marvel.AnimNotify_AbilityChangeStance
// 0x0008 (0x0048 - 0x0040)
class UAnimNotify_AbilityChangeStance final : public UAnimNotify
{
public:
	float                                         Duration;                                          // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMovementStance                               MovementStance;                                    // 0x0044(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_AbilityChangeStance">();
	}
	static class UAnimNotify_AbilityChangeStance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_AbilityChangeStance>();
	}
};

// Class Marvel.AnimNotify_SocketBase
// 0x0010 (0x0050 - 0x0040)
class UAnimNotify_SocketBase : public UAnimNotify
{
public:
	bool                                          bUseCustomSocket;                                  // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAnimationSocket;                               // 0x0041(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x2];                                       // 0x0042(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0044(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_SocketBase">();
	}
	static class UAnimNotify_SocketBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_SocketBase>();
	}
};

// Class Marvel.MarvelCharacterMovementComponent
// 0x0400 (0x1B60 - 0x1760)
class UMarvelCharacterMovementComponent : public UCharacterMovementComponent
{
public:
	float                                         JumpOffJumpXYFactor;                               // 0x1760(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetJumpOffZ;                                    // 0x1764(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseMoveableStepUp;                                // 0x1765(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1766[0x5A];                                    // 0x1766(0x005A)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PenetrationOverlapCheckInflation;                  // 0x17C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17C4[0x50];                                    // 0x17C4(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxFallingSpeed;                                   // 0x1814(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentServerMoveTime;                             // 0x1818(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_181C[0x4];                                     // 0x181C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SimulatedVelocity;                                 // 0x1820(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TotalMoveLocation;                                 // 0x1838(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldActorLocation;                                  // 0x1850(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1868[0x10];                                    // 0x1868(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMarvelMultiCapsuleComponent*>   AdditionalUpdatedComponents;                       // 0x1878(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1888[0x8];                                     // 0x1888(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FVector& OriginDashVelocity, const struct FVector& AdditiveDashVelocity)> OnApplyInputAccelerationToDashingVelocityDelegate_ThreadSafe; // 0x1890(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	struct FVector                                InputAccumulateAccelerationForDashing;             // 0x18A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InputForwardAccelerationForDashingSize;            // 0x18B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InputRightAccelerationForDashingSize;              // 0x18BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableInputAccelerationForDashing;                // 0x18C0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bReduceInputAccelerationForDashing;                // 0x18C1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18C2[0x6];                                     // 0x18C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelMoveLogicBaseComponent*          MoveLogicBaseComponent;                            // 0x18C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<float>                                 UpdateIntervalForCharacterLODs;                    // 0x18D0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_18E0[0x4];                                     // 0x18E0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bTickMoveLogic;                                    // 0x18E4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18E5[0x3];                                     // 0x18E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LevelPenetrationDeltaScale;                        // 0x18E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsZiplineSlidingMovement;                         // 0x18EC(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18ED[0x3];                                     // 0x18ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  SpecialMoveAbilityTag;                             // 0x18F0(0x0068)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_1958[0x48];                                    // 0x1958(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class URideOnCharacterManagementComponent*    RideOnCharacterManagementComponent;                // 0x19A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(class AActor* Source, const struct FVector& Delta)> DisplacementCalculationDelegate;                   // 0x19A8(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19BC[0x4];                                     // 0x19BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnPhysFallingStuckDispatcher;                      // 0x19C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FVector& LocationDelta)> OnLevelPenetrationSolvedDispatcher_Async;          // 0x19D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         StuckDuration;                                     // 0x19E0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19E4[0x4];                                     // 0x19E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             LastTimePhysFallingHit;                            // 0x19E8(0x0170)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	int32                                         IgnoreCheckPriorityMoveCount;                      // 0x1B58(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B5C[0x4];                                     // 0x1B5C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void K2_UpdateComponentVelocity();
	float MarvelGetAcceleration();
	void ServerForceClientUpdate();
	void SetApplyInputAccelerationToDashingVelocityEnabled(bool bEnable, bool bResetInputAcceleration, float InForwardAcceleration, float InRightAcceleration);

	bool AutonomousMovementModeIsCorrectByAuthority() const;
	struct FVector GetTotalMoveLocation() const;
	struct FVector TraceTeleportSpotByProfile(const struct FVector& PlaceLocation, const struct FRotator& PlaceRotation, const TArray<float>& HeightTests, class FName ProfileName, EDrawDebugTrace DrawType, float DrawTime) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCharacterMovementComponent">();
	}
	static class UMarvelCharacterMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCharacterMovementComponent>();
	}
};

// Class Marvel.AnimNotify_AbilitySocketInfo
// 0x0040 (0x0090 - 0x0050)
class UAnimNotify_AbilitySocketInfo final : public UAnimNotify_SocketBase
{
public:
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ID;                                                // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelPawnBodyType                           LocationType;                                      // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationOffset;                                    // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CustomLocation;                                    // 0x0078(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_AbilitySocketInfo">();
	}
	static class UAnimNotify_AbilitySocketInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_AbilitySocketInfo>();
	}
};

// Class Marvel.GradientActor
// 0x0018 (0x04A8 - 0x0490)
class AGradientActor final : public AActor
{
public:
	class USceneComponent*                        RootSceneComponent;                                // 0x0490(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USphereComponent*                       SphereMesh;                                        // 0x0498(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Angle;                                             // 0x04A0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A4[0x4];                                      // 0x04A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GradientActor">();
	}
	static class AGradientActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGradientActor>();
	}
};

// Class Marvel.AnimNotify_ActiveAnimFrameFreeze
// 0x0020 (0x0060 - 0x0040)
class UAnimNotify_ActiveAnimFrameFreeze final : public UAnimNotify
{
public:
	float                                         HitEnemyFreezeRate;                                // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitSceneFreezeRate;                                // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitEnemyFreezeDuration;                            // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitSceneFreezeDuration;                            // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x0050(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_ActiveAnimFrameFreeze">();
	}
	static class UAnimNotify_ActiveAnimFrameFreeze* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_ActiveAnimFrameFreeze>();
	}
};

// Class Marvel.ChaosFieldFuncLibrary
// 0x0000 (0x0030 - 0x0030)
class UChaosFieldFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class AChaosFieldActor* ApplyField(const struct FFieldParams& InParams);
	static void ApplyStaticFieldAtLocation(const struct FFieldParams& InParams);
	static void ApplyStaticFieldForHits(const struct FFieldParams& InParams);
	static void CreateContextByField(struct FMarvelGameplayEffectContext* EffectContext, const struct FFieldParams& InParams, float InAbilityDamage);
	static struct FFieldParams GetDamageFieldParamsFromTable(EChaosFieldType FieldType, int32 FieldId);
	static struct FFieldParams GetImpulseFieldParamsFromTable(EChaosFieldType FieldType, int32 FieldId);
	static class AChaosFieldActorLoop* SpawnLoopField(class UObject* WOC, const struct FFieldParams& InParams);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosFieldFuncLibrary">();
	}
	static class UChaosFieldFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChaosFieldFuncLibrary>();
	}
};

// Class Marvel.EffectFrameFreezeInterface
// 0x0000 (0x0030 - 0x0030)
class IEffectFrameFreezeInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EffectFrameFreezeInterface">();
	}
	static class IEffectFrameFreezeInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IEffectFrameFreezeInterface>();
	}
};

// Class Marvel.AnimNotify_ApplyBuff
// 0x0018 (0x0058 - 0x0040)
class UAnimNotify_ApplyBuff final : public UAnimNotify
{
public:
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BuffID;                                            // 0x0048(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueOverride;                                     // 0x004C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DurationOverride;                                  // 0x0050(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_ApplyBuff">();
	}
	static class UAnimNotify_ApplyBuff* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_ApplyBuff>();
	}
};

// Class Marvel.MarvelReplicationGraphNode_PlayerStateFrequencyLimiter
// 0x0028 (0x0080 - 0x0058)
class UMarvelReplicationGraphNode_PlayerStateFrequencyLimiter final : public UReplicationGraphNode
{
public:
	uint8                                         Pad_58[0x28];                                      // 0x0058(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelReplicationGraphNode_PlayerStateFrequencyLimiter">();
	}
	static class UMarvelReplicationGraphNode_PlayerStateFrequencyLimiter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelReplicationGraphNode_PlayerStateFrequencyLimiter>();
	}
};

// Class Marvel.ClientInteractionSphereComponent
// 0x0000 (0x0890 - 0x0890)
class UClientInteractionSphereComponent final : public USphereComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ClientInteractionSphereComponent">();
	}
	static class UClientInteractionSphereComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UClientInteractionSphereComponent>();
	}
};

// Class Marvel.AnimNotify_RemoveBuff
// 0x0008 (0x0048 - 0x0040)
class UAnimNotify_RemoveBuff final : public UAnimNotify
{
public:
	int32                                         BuffID;                                            // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_RemoveBuff">();
	}
	static class UAnimNotify_RemoveBuff* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_RemoveBuff>();
	}
};

// Class Marvel.GroundMotionSubAnimInstanceV2
// 0x0C60 (0x1310 - 0x06B0)
#pragma pack(push, 0x1)
class alignas(0x10) UGroundMotionSubAnimInstanceV2 : public UGroundMotionSubAnimInstance
{
public:
	bool                                          bUsingRelevantStopNode;                            // 0x06B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B1[0x3];                                      // 0x06B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FallingIdleBlendTime;                              // 0x06B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpStartToFallingBlendTime;                       // 0x06B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandMovementToGround;                              // 0x06BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StopToIdleBlendTime;                               // 0x06C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C4[0x4];                                      // 0x06C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UAnimInstance>              LinkedAnimLayerInstanceClass;                      // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseExternLayerClass;                              // 0x06D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6D1[0x3];                                      // 0x06D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ExternLayerType;                                   // 0x06D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseExternLayerClass_GroundMotion;                 // 0x06D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseExternLayerClass_Jump;                         // 0x06D9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseExternLayerClass_GroundDetail_Post;            // 0x06DA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseExternLayerClass_Turning_Post;                 // 0x06DB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HipOrientationOffset;                              // 0x06DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            LandBlendCurve;                                    // 0x06E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   MaskLandBlendFactorCurveName;                      // 0x06E8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LandTraceFrequency;                                // 0x06F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SubJumpLandAnimStartHeight;                        // 0x06F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SubTargetStopThreshold;                            // 0x06FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseSixDirAnimData;                                // 0x0700(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseStrideWarping;                                 // 0x0701(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseNewJump;                                       // 0x0702(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_703[0x1];                                      // 0x0703(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IsPivotingDuration;                                // 0x0704(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULegacyCameraShake>         CameraShakeLight;                                  // 0x0708(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULegacyCameraShake>         CameraShakeHeavy;                                  // 0x0710(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CameraShakeSpeedThreshold;                         // 0x0718(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CameraShakeLandDelay;                              // 0x071C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RunToStopThreshold;                                // 0x0720(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkToIdleThreshold;                               // 0x0724(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         JumpMoveThreshold;                                 // 0x0728(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   FeetCrossingCurveName;                             // 0x072C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HipSwitchDelay;                                    // 0x0738(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MoveStateBlendTime;                                // 0x073C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         VelocityInterpSpeed;                               // 0x0740(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MeleeTwistRotateSpeed;                             // 0x0744(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MeleeTwistRestoreSpeed;                            // 0x0748(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TimeOutFrameCountForJumpStart;                     // 0x074C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FX20LocomotionConfig                   LocomotionConfigs;                                 // 0x0750(0x0040)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FGroundMotionTransitionFlagsV2         GroundMotionTransitionFlags;                       // 0x0790(0x0013)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_7A3[0x5];                                      // 0x07A3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGroundMotionCharacterInfoV2           GroundMotionCharacterInfo;                         // 0x07A8(0x01A0)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FPivotHipBlend                         HipBlendFactor;                                    // 0x0948(0x0010)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         JumpDirectionFwd;                                  // 0x0958(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         JumpDirectionBwd;                                  // 0x095C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StopDirection;                                     // 0x0960(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsForwardStop;                                    // 0x0964(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_965[0x3];                                      // 0x0965(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LandBlendFactor;                                   // 0x0968(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkSpeed;                                         // 0x096C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkSpeedRatio;                                    // 0x0970(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         JumpLandWalkBlendRatio;                            // 0x0974(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SubIsAccelerating;                                 // 0x0978(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SubNeedJumpStart;                                  // 0x0979(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_97A[0x2];                                      // 0x097A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SubDirection;                                      // 0x097C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SubAccelerationDirection;                          // 0x0980(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseStrideWithWalkEnabled;                         // 0x0984(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_985[0x3];                                      // 0x0985(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSixDirGroundMotionAnimContainer       GroundMotionAnims;                                 // 0x0988(0x01A8)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	struct FSixDirGroundMotionAnimContainer       GroundMotionAnims_Other;                           // 0x0B30(0x01A8)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	struct FSixDirGroundMotionAnimContainer       GroundMotionAnims_AutoBlend;                       // 0x0CD8(0x01A8)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	class UBlendSpace1D*                          StopAnim;                                          // 0x0E80(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          SpeicalStopAnim;                                   // 0x0E88(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUsingSpeicalStopAnim;                             // 0x0E90(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasRunF_BS;                                       // 0x0E91(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasRunB_BS;                                       // 0x0E92(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasRunLF_BS;                                      // 0x0E93(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasRunLB_BS;                                      // 0x0E94(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasRunRF_BS;                                      // 0x0E95(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasRunRB_BS;                                      // 0x0E96(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E97[0x1];                                      // 0x0E97(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StrideDirection;                                   // 0x0E98(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StrideScale;                                       // 0x0EB0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StrideAlpha;                                       // 0x0EB4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LocomotionPlayRate;                                // 0x0EB8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LandWalkBlendRatio;                                // 0x0EBC(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EC0[0x1C0];                                    // 0x0EC0(0x01C0)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UMarvelUserSetting>      UserSettings;                                      // 0x1080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1088[0x10];                                    // 0x1088(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, class USixDirGroundMotionAnimData*> SixDirGroundMotionAnimDataMap;                     // 0x1098(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_10E8[0x10];                                    // 0x10E8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSixDirGroundMotionAnimContainer       CachedGroundMotionAnims;                           // 0x10F8(0x01A8)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	bool                                          CachedbUsedOther;                                  // 0x12A0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A1[0x7];                                     // 0x12A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, struct FBlendModfiyData> BlendModfiyDataMap;                                // 0x12A8(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_12F8[0x10];                                    // 0x12F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AnimNotify_EnterGround();
	void AnimNotify_EnterJumpStart();
	void AnimNotify_EnterLoop();
	void AnimNotify_OnLand();
	void AnimNotify_OnLandMovement();
	void AnimNotify_Pivot();
	void AnimNotify_StartRun();
	void NativeGatherLocomotionInfo();
	void NativePlayLandCameraAnim();
	void OnForceChangedByPortal(class APortalViewActor* InPortal);
	void OnJumpFallingBecomeRelevant(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void OnMoveModeChange(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void PlayCameraShake();
	void RelevantStopNode(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void SetIsPivoting();
	void SetPivotFlag();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GroundMotionSubAnimInstanceV2">();
	}
	static class UGroundMotionSubAnimInstanceV2* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGroundMotionSubAnimInstanceV2>();
	}
};
#pragma pack(pop)

// Class Marvel.AnimNotifyState_ApplyBuff
// 0x0060 (0x0098 - 0x0038)
class UAnimNotifyState_ApplyBuff final : public UAnimNotifyState
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BuffID;                                            // 0x0040(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x54];                                      // 0x0044(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_ApplyBuff">();
	}
	static class UAnimNotifyState_ApplyBuff* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_ApplyBuff>();
	}
};

// Class Marvel.MarvelGameplayEffectAmmo1Cost
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectAmmo1Cost final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectAmmo1Cost">();
	}
	static class UMarvelGameplayEffectAmmo1Cost* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectAmmo1Cost>();
	}
};

// Class Marvel.ChaosDesAchieveDataComponent
// 0x0060 (0x0150 - 0x00F0)
class UChaosDesAchieveDataComponent final : public UActorComponent
{
public:
	TWeakObjectPtr<class AChaosDestructionActor>  DestructionActorCache;                             // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FChaosAchieveDamageMap                 CharToDamageData;                                  // 0x00F8(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x8];                                      // 0x0148(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnChaosTakeDamage(const struct FChaosDamageEvent& DamageEvent);
	void OnTakeDamage(class AActor* InSourceAvatar, const float InDamage);
	void ResetDamageData();
	void TriggerCollapsedEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosDesAchieveDataComponent">();
	}
	static class UChaosDesAchieveDataComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChaosDesAchieveDataComponent>();
	}
};

// Class Marvel.HeroVoiceTableManager
// 0x00B0 (0x00E0 - 0x0030)
class UHeroVoiceTableManager final : public UObject
{
public:
	TMap<int32, TWeakObjectPtr<class UDataTable>> CachedVoiceTables;                                 // 0x0030(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<int64, TWeakObjectPtr<class UMarvelVoiceItem>> CachedVoiceItems;                                  // 0x0080(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	class UDataTable*                             CommonVoiceTable;                                  // 0x00D0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UMarvelAudioData>        AudioData;                                         // 0x00D8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroVoiceTableManager">();
	}
	static class UHeroVoiceTableManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeroVoiceTableManager>();
	}
};

// Class Marvel.AnimNotify_ApplyDash
// 0x0BA8 (0x0BE8 - 0x0040)
class UAnimNotify_ApplyDash final : public UAnimNotify
{
public:
	struct FDashAbilityInfo                       DashInfo;                                          // 0x0040(0x0BA8)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_ApplyDash">();
	}
	static class UAnimNotify_ApplyDash* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_ApplyDash>();
	}
};

// Class Marvel.AnimNotify_CameraShake
// 0x0008 (0x0048 - 0x0040)
class UAnimNotify_CameraShake final : public UAnimNotify
{
public:
	TSubclassOf<class ULegacyCameraShake>         ShakeClass;                                        // 0x0040(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_CameraShake">();
	}
	static class UAnimNotify_CameraShake* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_CameraShake>();
	}
};

// Class Marvel.BattleStatisticsFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UBattleStatisticsFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool ActorIsPhantom(class AActor* Actor);
	static bool ContextCauserIsPlayer(const struct FBattleInfoContext& Context);
	static bool ContextCauserIsProjectile(const struct FBattleInfoContext& Context);
	static bool ContextCauserIsScope(const struct FBattleInfoContext& Context);
	static bool ContextCauserIsSummoned(const struct FBattleInfoContext& Context);
	static bool ContextFinalInstigatorIsFinalTarget(const struct FBattleInfoContext& Context);
	static bool ContextFinalInstigatorTargetIsSameTeam(const struct FBattleInfoContext& Context);
	static bool ContextHasValidFinalInstigator(const struct FBattleInfoContext& Context);
	static bool ContextHasValidFinalInstigatorTarget(const struct FBattleInfoContext& Context);
	static bool ContextHasValidFinalTarget(const struct FBattleInfoContext& Context);
	static bool ContextHasValidInstigatorTarget(const struct FBattleInfoContext& Context);
	static bool ContextInstigatorIsPhantom(const struct FBattleInfoContext& Context);
	static bool ContextInstigatorIsPlayer(const struct FBattleInfoContext& Context);
	static bool ContextInstigatorIsSummoner(const struct FBattleInfoContext& Context);
	static bool ContextInstigatorIsTarget(const struct FBattleInfoContext& Context);
	static bool ContextInstigatorTargetIsSameTeam(const struct FBattleInfoContext& Context);
	static bool ContextTargetIsCharacter(const struct FBattleInfoContext& Context);
	static bool ContextTargetIsDestruction(const struct FBattleInfoContext& Context);
	static bool ContextTargetIsNormalSummoned(const struct FBattleInfoContext& Context);
	static bool ContextTargetIsPhantom(const struct FBattleInfoContext& Context);
	static bool ContextTargetIsPlayer(const struct FBattleInfoContext& Context);
	static bool ContextTargetIsShieldSummoned(const struct FBattleInfoContext& Context);
	static bool ContextTargetIsSummoned(const struct FBattleInfoContext& Context);
	static struct FMarvelAbilityStatisticsUnit GetAbilityStatisticsUnit(class UObject* WCO, int32 PlayerUID, int32 HeroID, int32 AbilityID);
	static struct FBattleInfoContext GetBattleInfoContextCopy(const struct FBattleInfoContext& InContext);
	static class UBattleStatisticsManager* GetBattleStatisticsManager(class UObject* WCO);
	static struct FMarvelBuffStatisticsUnit GetBuffStatisticsUnit(class UObject* WCO, int32 PlayerUID, int32 HeroID, int32 BuffID);
	static struct FMarvelHeroStatisticsUnit GetHeroStatisticsUnit(class UObject* WCO, int32 PlayerUID, int32 HeroID);
	static struct FKillInfoContext GetKillInfoContextCopy(const struct FKillInfoContext& InContext);
	static struct FMarvelPlayerStatisticsUnit GetPlayerStatisticsUnit(class UObject* WCO, int32 PlayerUID);
	static const struct FMarvelSummonerAgentTable GetSummonedData(class AActor* Actor);
	static int32 GetSummonedID(class AActor* Actor);
	static class UMarvelBaseGameplayAbility* GetSummonedOwningAbility(class AActor* Actor);
	static class FString GetTargetActorParentID(class UObject* WCO, const class FString& UniqueID);
	static class FString GetTargetActorRootID(class UObject* WCO, const class FString& UniqueID);
	static ETargetActorType GetTargetActorRootType(class UObject* WCO, const class FString& UniqueID);
	static int32 GetTrueHeroID(class UObject* WCO, int32 PlayerUID, int32 HeroID);
	static int32 GetTrueHeroSculptID(class UObject* WCO, int32 PlayerUID);
	static TArray<int32> GetUidHeroID(class AMarvelBaseCharacter* Target);
	static bool IsIgnoreStatistics(class UObject* WCO, int32 CurrentHeroID, int32 SelectedHeroID);
	static int32 IsNegativeBuff(class UObject* WCO, int32 BuffID);
	static int32 IsPositiveBuff(class UObject* WCO, int32 BuffID);
	static bool IsSummoned(class AActor* Actor);
	static bool ModifierIsHeadStrike(class UObject* WCO, const struct FAttributeModifierParameter& ModifierParameter);
	static void StaticAbilityCritLog(class UObject* WCO, const class FString& Key, float CritCnt, int32 PlayerUID, int32 HeroID, int32 AbilityID);
	static void StaticAbilityHitLog(class UObject* WCO, const class FString& Key, float HitCnt, int32 PlayerUID, int32 HeroID, int32 AbilityID);
	static void StaticAbilityHitRateLog(class UObject* WCO, const class FString& Key, float LaunchCnt, float HitCnt, float CritCnt, int32 PlayerUID, int32 HeroID, int32 AbilityID);
	static void StaticAbilityLaunchLog(class UObject* WCO, const class FString& Key, float LaunchCnt, int32 PlayerUID, int32 HeroID, int32 AbilityID);
	static void StaticAbilityNormalLog(class UObject* WCO, const TMap<class FString, float>& KeyValue, int32 PlayerUID, int32 HeroID, int32 AbilityID);
	static void StaticHeroSpecialLog(class UObject* WCO, int32 CoverLogID, float Value, int32 PlayerUID, int32 HeroID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattleStatisticsFunctionLibrary">();
	}
	static class UBattleStatisticsFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattleStatisticsFunctionLibrary>();
	}
};

// Class Marvel.AnimNotifyState_CameraShake
// 0x0058 (0x0090 - 0x0038)
class UAnimNotifyState_CameraShake final : public UAnimNotifyState
{
public:
	TSubclassOf<class ULegacyCameraShake>         ShakeClass;                                        // 0x0038(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class AActor*, class ULegacyCameraShake*> ShakePtrMap;                                       // 0x0040(0x0050)(BlueprintReadOnly, Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_CameraShake">();
	}
	static class UAnimNotifyState_CameraShake* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_CameraShake>();
	}
};

// Class Marvel.MarvelCurveEquations
// 0x0040 (0x0070 - 0x0030)
class UMarvelCurveEquations : public UObject
{
public:
	float                                         MinX;                                              // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxX;                                              // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SampleIntervalX;                                   // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        SampleIntervalY;                                   // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FVector2D>                      AnchorPoint;                                       // 0x0048(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bCacheSamplingPoints;                              // 0x0058(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x17];                                      // 0x0059(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddAnchorsKey(const float X);
	float GetFloatValue(const float X);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCurveEquations">();
	}
	static class UMarvelCurveEquations* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCurveEquations>();
	}
};

// Class Marvel.VertexStyleCurveEquation
// 0x0010 (0x0080 - 0x0070)
class UVertexStyleCurveEquation final : public UMarvelCurveEquations
{
public:
	TArray<struct FVector2D>                      VertexArray;                                       // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VertexStyleCurveEquation">();
	}
	static class UVertexStyleCurveEquation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVertexStyleCurveEquation>();
	}
};

// Class Marvel.AnimNotify_CameraShake_Sequence
// 0x0008 (0x0048 - 0x0040)
class UAnimNotify_CameraShake_Sequence final : public UAnimNotify
{
public:
	TSubclassOf<class ULegacyCameraShake>         ShakeClass;                                        // 0x0040(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_CameraShake_Sequence">();
	}
	static class UAnimNotify_CameraShake_Sequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_CameraShake_Sequence>();
	}
};

// Class Marvel.SummonedStatisticsController
// 0x0060 (0x0090 - 0x0030)
class USummonedStatisticsController final : public UObject
{
public:
	class UActionLogController*                   LogController;                                     // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayEventManager*            GlobalEventManager;                                // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x50];                                      // 0x0040(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BindEvents();
	void Initialize(class UActionLogController* InLogController);
	void OnActorEndAgentTask(class AActor* SourceActor, class UMarvelGameplayAbility* SourceAbility, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, const struct FEndAgentTaskInfo& EndAgentTaskInfo);
	void OnActorSummonedBegin(class AActor* SourceActor, class UMarvelGameplayAbility* SourceAbility, class AActor* Summoned, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void RecordSummonedInfo(class AActor* Instigator, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void Shutdown();
	void UnbindEvents();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SummonedStatisticsController">();
	}
	static class USummonedStatisticsController* GetDefaultObj()
	{
		return GetDefaultObjImpl<USummonedStatisticsController>();
	}
};

// Class Marvel.ReactivePropertyComponent
// 0x1748 (0x1838 - 0x00F0)
class UReactivePropertyComponent final : public UActorComponent
{
public:
	uint8                                         Pad_F0[0x1730];                                    // 0x00F0(0x1730)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelBaseAttributeSet*                CachedAttributeSet;                                // 0x1820(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelBaseAbilitySystemComponent*      CachedASC;                                         // 0x1828(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1830[0x8];                                     // 0x1830(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UReactivePropertyComponent* GetFromActor(const class AActor* InActor);

	bool GetBoolValue(const class FString& PropertyName);
	float GetFloatValue(const class FString& PropertyName);
	bool IsDying();
	bool IsFullHp();
	void OnLivingStateChanged(EPlayerLivingState InLivingState);
	void OnOwnerAttributeChanged(const struct FOnAttributeChangeDataExtend& AttributeChangeData);
	void SetBoolValue(const class FString& PropertyName, bool bInValue);
	void UpdateAllAbilitySystemAttribute();
	void UpdatePropertyValue(EMarvelAttributeType AttrType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReactivePropertyComponent">();
	}
	static class UReactivePropertyComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReactivePropertyComponent>();
	}
};

// Class Marvel.AnimNotifyState_CameraShake_Sequence
// 0x0058 (0x0090 - 0x0038)
class UAnimNotifyState_CameraShake_Sequence final : public UAnimNotifyState
{
public:
	TSubclassOf<class ULegacyCameraShake>         ShakeClass;                                        // 0x0038(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class AActor*, class ULegacyCameraShake*> ShakePtrMap;                                       // 0x0040(0x0050)(BlueprintReadOnly, Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_CameraShake_Sequence">();
	}
	static class UAnimNotifyState_CameraShake_Sequence* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_CameraShake_Sequence>();
	}
};

// Class Marvel.AnimNotify_ChaosField
// 0x0020 (0x0060 - 0x0040)
class UAnimNotify_ChaosField final : public UAnimNotify
{
public:
	EChaosFieldType                               FieldType;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ChaosFieldID;                                      // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CustomLocationOffset;                              // 0x0048(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_ChaosField">();
	}
	static class UAnimNotify_ChaosField* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_ChaosField>();
	}
};

// Class Marvel.MarvelLevelActorBase
// 0x0000 (0x0490 - 0x0490)
class AMarvelLevelActorBase : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelLevelActorBase">();
	}
	static class AMarvelLevelActorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelLevelActorBase>();
	}
};

// Class Marvel.MarvelLevelMoveActor
// 0x0000 (0x0490 - 0x0490)
class AMarvelLevelMoveActor final : public AMarvelLevelActorBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelLevelMoveActor">();
	}
	static class AMarvelLevelMoveActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelLevelMoveActor>();
	}
};

// Class Marvel.BattleStatisticsUnitTestEventTrigger
// 0x0000 (0x0030 - 0x0030)
class UBattleStatisticsUnitTestEventTrigger final : public UBlueprintFunctionLibrary
{
public:
	static void TriggerAbilityActiveEvent(class UObject* WCO, class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility);
	static void TriggerAbilityBreakEvent(class UObject* WCO, class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility);
	static void TriggerAbilityEndEvent(class UObject* WCO, class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility);
	static void TriggerAbilityMissileEvent(class UObject* WCO, class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility);
	static void TriggerActorDeathEvent(class UObject* WCO, class AActor* Instigator, class AActor* Target, const struct FAttributeModifierParameter& ModifierParameter, const struct FGlobalEventExtraData& ExtraData);
	static void TriggerActorPreDeathEvent(class UObject* WCO, class AActor* Instigator, class AActor* Target, const struct FAttributeModifierParameter& ModifierParameter, const struct FGlobalEventExtraData& ExtraData);
	static void TriggerActorRebornEvent(class UObject* WCO, class AActor* Instigator, class AActor* Target);
	static void TriggerActorWeaponAmmoUseEvent(class UObject* WCO, class AActor* Source, class AActor* Target, int32 AbilityID, bool bHit, bool bCritHit, const struct FGlobalEventExtraData& ExtraData);
	static void TriggerBaseTargetActorEndAgentTask(class UObject* WCO, class UMarvelGameplayAbility* SourceAbility, class AActor* Source, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, const struct FEndAgentTaskInfo& EndAgentTaskInfo);
	static void TriggerProjectileLaunchEvent(class UObject* WCO, class AActor* Source, class UMarvelGameplayAbility* SourceAbility, class AActor* Projectile, const class FString& AbilitySessionID, const class FString& ProjectileUniqueID, const class FString& ParentUniqueID);
	static void TriggerScopeLaunchEvent(class UObject* WCO, class AActor* Source, class UMarvelGameplayAbility* SourceAbility, class AActor* Scope, const class FString& AbilitySessionID, const class FString& ScopeUniqueID, const class FString& ParentUniqueID);
	static void TriggerTakeDamageEvent(class UObject* WCO, class AActor* Instigator, class AActor* Target, const struct FAttributeModifierParameter& ModifierParameter, const struct FGlobalEventExtraData& ExtraData);
	static void TriggerTakeHealEvent(class UObject* WCO, class AActor* Instigator, class AActor* Target, const struct FAttributeModifierParameter& ModifierParameter, const struct FGlobalEventExtraData& ExtraData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattleStatisticsUnitTestEventTrigger">();
	}
	static class UBattleStatisticsUnitTestEventTrigger* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattleStatisticsUnitTestEventTrigger>();
	}
};

// Class Marvel.ChaosParticleAnimNotifyInterface
// 0x0000 (0x0030 - 0x0030)
class IChaosParticleAnimNotifyInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosParticleAnimNotifyInterface">();
	}
	static class IChaosParticleAnimNotifyInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IChaosParticleAnimNotifyInterface>();
	}
};

// Class Marvel.AnimNotify_Cue
// 0x0010 (0x0050 - 0x0040)
class UAnimNotify_Cue final : public UAnimNotify
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0040(0x000C)(Edit, BlueprintReadOnly, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAnimNotifyCueEvent                           EventType;                                         // 0x004C(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_Cue">();
	}
	static class UAnimNotify_Cue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_Cue>();
	}
};

// Class Marvel.MarvelGameInstance
// 0x0278 (0x04E8 - 0x0270)
class UMarvelGameInstance : public UGameInstance
{
public:
	uint8                                         Pad_270[0x8];                                      // 0x0270(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIManager*                             UIManager;                                         // 0x0278(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Value)> OnMapLoaded;                                       // 0x0280(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Value)> OnPreloadContentForURL;                            // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	class UMultiWorldManager*                     MultiWorldManager;                                 // 0x02A0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelDedicatedServerConfigure*        DedicatedServerConfigure;                          // 0x02A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B0[0x38];                                     // 0x02B0(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelUserSetting*                     UserSettingModule;                                 // 0x02E8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameUserSettings*                GameUserSettings;                                  // 0x02F0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReplayServerURL;                                   // 0x02F8(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReplayServerAuth;                                  // 0x0308(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_318[0x30];                                     // 0x0318(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReplaySessionName;                                 // 0x0348(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Whitelist;                                         // 0x0358(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         DemoRecordBattleType;                              // 0x0368(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_369[0x7];                                      // 0x0369(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReplayGRPCAddr;                                    // 0x0370(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ReplayGRPCTlsAddr;                                 // 0x0380(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BattleServerRegion;                                // 0x0390(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReplaySeasonVersion;                               // 0x03A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A1[0x3];                                      // 0x03A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ReplayMinPlayVersion;                              // 0x03A4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ShippingDefaultServerURL;                          // 0x03A8(0x0010)(BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CertificationServerURL;                            // 0x03B8(0x0010)(BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ProductionServerURL;                               // 0x03C8(0x0010)(BlueprintVisible, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UID;                                               // 0x03D8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReplayOpen;                                        // 0x03DC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         ReplayAutoSaveType;                                // 0x03DD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3DE[0x12];                                     // 0x03DE(0x0012)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SocialMatrixToken;                                 // 0x03F0(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_400[0x1];                                      // 0x0400(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsInner;                                          // 0x0401(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_402[0x6];                                      // 0x0402(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BuildGameID;                                       // 0x0408(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_418[0x18];                                     // 0x0418(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        StartFrameNum;                                     // 0x0430(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<uint8>                                 ServerFrameData;                                   // 0x0438(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          bStartRecordingFramedata;                          // 0x0448(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_449[0x7];                                      // 0x0449(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 NetSummary;                                        // 0x0450(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<int32>                                 NetUids;                                           // 0x0460(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          bEnableNetSummary;                                 // 0x0470(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_471[0xF];                                      // 0x0471(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              ApplicationWillDeactivateDelegate;                 // 0x0480(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ApplicationHasReactivatedDelegate;                 // 0x0490(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ApplicationWillEnterBackgroundDelegate;            // 0x04A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ApplicationHasEnteredForegroundDelegate;           // 0x04B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ApplicationWillTerminateDelegate;                  // 0x04C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bInLowPowerMode)> OnLowPowerModeDelegate;                            // 0x04D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E0[0x8];                                      // 0x04E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelGameInstance* Get(class UObject* WCO);

	bool AutoPlayDemoReplay(const class FString& ReplayName, EDemoPlayType DemoPlayType);
	void CallEngineQuit(const class FString& ShutdownReason);
	void CheckPlayAutoCycle();
	void ClearReplayCache();
	void CreateMultiWorldManager();
	void DeleteDemoReplay(const class FString& VarReplayName);
	void EnableAOIReplication(bool bEnable);
	void EnableNetSummary(bool bEnable);
	void EnableUEGC(bool bEnable);
	int64 GetCurrentMemSize();
	class UMarvelDedicatedServerConfigure* GetDedicatedServerConfigure();
	class UMarvelGameViewportClient* GetMarvelViewportClient();
	int32 GetReplayPlayVersion();
	TArray<class UWorld*> GetWorldList();
	bool IsSystemSwitchOpenedByID(int32 RowID);
	void OnAfterForkInChild();
	void OnDDosChecked(const class FString& Error);
	void OnFrameEnd(float FrameTime);
	void OnPostGC();
	void OnPreGarbageCollect();
	void OnRealFrameEnd(float FrameTime);
	void OnSearchDemoReplaysComplete(const TArray<struct FDemoReplayInfo>& AllReplays);
	void OnTestFuncCall(const class FString& msg, int32 uNum);
	bool PlayDemoReplay(const class FString& ReplayName, EDemoPlayType DemoPlayType);
	void PlayJarvisDemo(const TArray<class FString>& Params_0);
	void ProcessReplayLoadingInfo(const class FString& SpecificData, class FString* Error);
	bool PyIsSystemSwitchOpenedByID(int32 RowID);
	void ReceiveDemoPlaybackFailure(const class FString& Error);
	void ReceiveNetworkReplayVersion(const class FString& Error);
	void ReceiveOnAfterForkInChild();
	void ReceiveOnLoadComplete(const float LoadTime, const class FString& MapName);
	void ReceiveOnStart();
	void ReceiveSwitchEnvFailure(const class FString& Error);
	void RequestReplayAuthTokenWithEnv(const class FString& ServerURL, const class FString& Env);
	void ReturnToMainMenu();
	void SearchAllReplays();
	void SetBuildGameID(const class FString& NewBuildGameID);
	void SetDDoSState(const int32 Index_0, const int32 EscalateQuotaPacketsPerSec, const int32 EscalateQuotaDisconnPacketsPerSec, const int32 EscalateQuotaBadPacketsPerSec, const int32 EscalateTimeQuotaMSPerFrame, const int32 PacketLimitPerFrame, const int32 PacketTimeLimitMSPerFrame);
	void SetIsInner(bool NewIsInner);
	void SetLoginKey(const class FString& VarLoginKey);
	void SetServerAddr(const TArray<class FString>& Params_0);
	void ShowServerAddr();
	void StartJarvisDemoRecording(const TArray<class FString>& Params_0);
	void StartRecordingFramedata();
	void StopJarvisDemoRecording(const TArray<class FString>& Params_0);
	void UpdateReplayEnv();
	void UploadDrpfData(const class FString& DrpfType, const class FString& DrpfData);
	class FString WriteReplayLoadingInfo();

	class UMarvelDemoNetDriver* GetMarvelDemoNetDriver() const;
	class UMultiWorldManager* GetMultiWorldManager() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameInstance">();
	}
	static class UMarvelGameInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameInstance>();
	}
};

// Class Marvel.ChaosFieldActor
// 0x0008 (0x04A0 - 0x0498)
class AChaosFieldActor : public AFieldSystemActor
{
public:
	class UChaosFieldComponent*                   ChaosFieldComponent;                               // 0x0498(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnTriggerEvent();
	void OnTriggerParticleFieldEvent(int32 ParticleIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosFieldActor">();
	}
	static class AChaosFieldActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AChaosFieldActor>();
	}
};

// Class Marvel.ChaosFieldActorLoop
// 0x02D8 (0x0778 - 0x04A0)
class AChaosFieldActorLoop final : public AChaosFieldActor
{
public:
	uint8                                         Pad_4A0[0x38];                                     // 0x04A0(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelActorPoolComponent*              ActorPoolComponent;                                // 0x04D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeginPlayIdx;                                      // 0x04E0(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetId;                                          // 0x04E4(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayAbility*                       OwningAbility;                                     // 0x04E8(0x0008)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFieldParams                           FieldParams;                                       // 0x04F0(0x0280)(NativeAccessSpecifierPublic)
	uint8                                         Pad_770[0x8];                                      // 0x0770(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_ActorPoolBeginPlayChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosFieldActorLoop">();
	}
	static class AChaosFieldActorLoop* GetDefaultObj()
	{
		return GetDefaultObjImpl<AChaosFieldActorLoop>();
	}
};

// Class Marvel.MarvelReplicationGraphNode_SameTeam
// 0x0010 (0x0108 - 0x00F8)
class UMarvelReplicationGraphNode_SameTeam final : public UReplicationGraphNode_ActorList
{
public:
	uint8                                         Pad_F8[0x10];                                      // 0x00F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelReplicationGraphNode_SameTeam">();
	}
	static class UMarvelReplicationGraphNode_SameTeam* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelReplicationGraphNode_SameTeam>();
	}
};

// Class Marvel.AnimNotify_Dash
// 0x0BA8 (0x0BE8 - 0x0040)
class UAnimNotify_Dash final : public UAnimNotify
{
public:
	struct FDashAbilityInfo                       DashInfo;                                          // 0x0040(0x0BA8)(BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_Dash">();
	}
	static class UAnimNotify_Dash* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_Dash>();
	}
};

// Class Marvel.MarvelGameplay_PenetratedSceneTraceType
// 0x0000 (0x0030 - 0x0030)
class UMarvelGameplay_PenetratedSceneTraceType final : public UMarvelGameplay_LineTraceType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplay_PenetratedSceneTraceType">();
	}
	static class UMarvelGameplay_PenetratedSceneTraceType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplay_PenetratedSceneTraceType>();
	}
};

// Class Marvel.AnimNotify_HideMaterial
// 0x0020 (0x0060 - 0x0040)
class UAnimNotify_HideMaterial final : public UAnimNotify
{
public:
	TArray<int32>                                 HideMaterialIDArray;                               // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<int32>                                 ShowMaterialIDArray;                               // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_HideMaterial">();
	}
	static class UAnimNotify_HideMaterial* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_HideMaterial>();
	}
};

// Class Marvel.BindingProxy_CharacterAbilities
// 0x0188 (0x01B8 - 0x0030)
class UBindingProxy_CharacterAbilities final : public UObject
{
public:
	uint8                                         Pad_30[0x120];                                     // 0x0030(0x0120)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UBindingProxy_Weapon*>           Weapons;                                           // 0x0150(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UBindingProxy_Ability*>          Abilities;                                         // 0x0160(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   Character;                                         // 0x0170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEquipComponent*                        EquipComponent;                                    // 0x0178(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_180[0x38];                                     // 0x0180(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddAbility(int32 AbilityID);
	void AddWeapon(class AShootingWeapon* Weapon, const struct FMarvelEquipmentTable& WeaponInfo);
	class UBindingProxy_Ability* GetProxyAbilityByID(int32 AbilityID);
	void RemoveAbility(int32 AbilityID);
	void SetWeaponEquipping(class AShootingWeapon* Weapon, const struct FMarvelEquipmentTable& WeaponInfo, bool bInEquipping);
	void SetWeaponUsable(class AShootingWeapon* Weapon, bool bInUsable);
	void SwitchAbility(int32 AbilityBind, int32 OldAbilityID, int32 NewAbilityID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BindingProxy_CharacterAbilities">();
	}
	static class UBindingProxy_CharacterAbilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBindingProxy_CharacterAbilities>();
	}
};

// Class Marvel.AnimNotify_PlayAnimWithMeshByName
// 0x0018 (0x0058 - 0x0040)
class UAnimNotify_PlayAnimWithMeshByName final : public UAnimNotify
{
public:
	class FString                                 TargetComponentName;                               // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequenceBase*                      TargetAnimation;                                   // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_PlayAnimWithMeshByName">();
	}
	static class UAnimNotify_PlayAnimWithMeshByName* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_PlayAnimWithMeshByName>();
	}
};

// Class Marvel.MarvelTriggerEffect_SlopeFeedback
// 0x0008 (0x0050 - 0x0048)
class UMarvelTriggerEffect_SlopeFeedback final : public UMarvelTriggerEffect_Base
{
public:
	uint8                                         StartPosition;                                     // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StartStrength;                                     // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndPosition;                                       // 0x004A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndStrength;                                       // 0x004B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTriggerEffect_SlopeFeedback">();
	}
	static class UMarvelTriggerEffect_SlopeFeedback* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTriggerEffect_SlopeFeedback>();
	}
};

// Class Marvel.MarvelGameUserSettingsCustomDefaultLogic
// 0x0000 (0x0030 - 0x0030)
class UMarvelGameUserSettingsCustomDefaultLogic : public UObject
{
public:
	void BP_OnSetToDefault();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameUserSettingsCustomDefaultLogic">();
	}
	static class UMarvelGameUserSettingsCustomDefaultLogic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameUserSettingsCustomDefaultLogic>();
	}
};

// Class Marvel.AnimNotify_PlayDecal
// 0x0088 (0x00C8 - 0x0040)
class UAnimNotify_PlayDecal final : public UAnimNotify
{
public:
	bool                                          bReplicated;                                       // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     DecalMaterial;                                     // 0x0048(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Attached;                                          // 0x0050(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECommonPlayDir                                DecalDir;                                          // 0x0051(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52[0x2];                                       // 0x0052(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LineLength;                                        // 0x0054(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0058(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecalLifeTime;                                     // 0x0064(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DecalFadeOut;                                      // 0x0068(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DecalSizeMin;                                      // 0x0070(0x0018)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DecalSizeMax;                                      // 0x0088(0x0018)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAddOwnerRotation;                                 // 0x00A0(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RandomRot_Min;                                     // 0x00A4(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomRot_Max;                                     // 0x00A8(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawTraceType;                                     // 0x00AC(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD[0x3];                                       // 0x00AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationOffset;                                    // 0x00B0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_PlayDecal">();
	}
	static class UAnimNotify_PlayDecal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_PlayDecal>();
	}
};

// Class Marvel.UIController_ReticleModifier
// 0x01E0 (0x0210 - 0x0030)
class UUIController_ReticleModifier final : public UObject
{
public:
	struct FReticleModifierConfig                 Config;                                            // 0x0030(0x01C8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   Character;                                         // 0x01F8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_200[0x8];                                      // 0x0200(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelBaseAbilitySystemComponent*      CachedASC;                                         // 0x0208(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnTagUpdate(const struct FGameplayTag& InTag, bool bExists);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIController_ReticleModifier">();
	}
	static class UUIController_ReticleModifier* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIController_ReticleModifier>();
	}
};

// Class Marvel.ClimbWallFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UClimbWallFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool CheckIfWallClimbable(const struct FHitResult& HitResult);
	static struct FHitResult K2_LineTraceWall(const class UMarvelCharacterMovementComponent* MoveComp, const struct FVector& StartPos, const struct FVector& EndPos, bool EnableDebugDraw);
	static struct FHitResult K2_SphereSweepWall(const class UMarvelCharacterMovementComponent* MoveComp, const struct FVector& StartPos, const struct FVector& EndPos, float Radius, bool EnableDebugDraw);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ClimbWallFunctionLibrary">();
	}
	static class UClimbWallFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UClimbWallFunctionLibrary>();
	}
};

// Class Marvel.AnimNotify_PlayNiagaraEffectEx
// 0x0100 (0x0360 - 0x0260)
#pragma pack(push, 0x1)
class alignas(0x10) UAnimNotify_PlayNiagaraEffectEx : public UAnimNotify_PlayNiagaraEffect
{
public:
	uint8                                         Pad_258[0x8];                                      // 0x0258(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bCastShadow : 1;                                   // 0x0260(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRenderCustomDepthPass : 1;                        // 0x0260(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDoNotUpdateRotation : 1;                          // 0x0260(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAutoPossessAttachment : 1;                        // 0x0260(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_261[0x7];                                      // 0x0261(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NiagaraTags;                                       // 0x0268(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bBlockOnTagsOrActiveTags : 1;                      // 0x0278(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  BlockTags;                                         // 0x0280(0x0068)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActiveTags;                                        // 0x02E8(0x0068)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bEnableFXSlomo;                                    // 0x0350(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_351[0x3];                                      // 0x0351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SlomoTimeScale;                                    // 0x0354(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_PlayNiagaraEffectEx">();
	}
	static class UAnimNotify_PlayNiagaraEffectEx* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_PlayNiagaraEffectEx>();
	}
};
#pragma pack(pop)

// Class Marvel.AnimNotify_PlayEffectBasedOnViewTarget
// 0x0000 (0x0360 - 0x0360)
class UAnimNotify_PlayEffectBasedOnViewTarget final : public UAnimNotify_PlayNiagaraEffectEx
{
public:
	EPlayEffectViewSide                           EffectPlaySide;                                    // 0x0358(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_359[0x7];                                      // 0x0359(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_PlayEffectBasedOnViewTarget">();
	}
	static class UAnimNotify_PlayEffectBasedOnViewTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_PlayEffectBasedOnViewTarget>();
	}
};

// Class Marvel.MarvelGameplayEffectSkillEnergyReduce
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectSkillEnergyReduce final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectSkillEnergyReduce">();
	}
	static class UMarvelGameplayEffectSkillEnergyReduce* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectSkillEnergyReduce>();
	}
};

// Class Marvel.BirthDoor
// 0x0010 (0x04A0 - 0x0490)
class ABirthDoor : public AActor
{
public:
	uint8                                         Pad_490[0x8];                                      // 0x0490(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UTeamComponent*                         TeamComponent;                                     // 0x0498(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void UpdateMaskFilter();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BirthDoor">();
	}
	static class ABirthDoor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABirthDoor>();
	}
};

// Class Marvel.AnimNotify_PlayFXOnGroundWithAO
// 0x00D0 (0x0110 - 0x0040)
class UAnimNotify_PlayFXOnGroundWithAO final : public UAnimNotify
{
public:
	uint8                                         bCastShadow : 1;                                   // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRenderCustomDepthPass : 1;                        // 0x0040(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bGroundTraceDestructible : 1;                      // 0x0040(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UFXSystemAsset>          FXSystemAsset;                                     // 0x0048(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0078(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0xC];                                       // 0x0084(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             BoneSpaceOffset;                                   // 0x0090(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundTraceStartZ;                                 // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundTraceEndZ;                                   // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x18];                                      // 0x00F8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayFX(class USkeletalMeshComponent* Mesh, class UFXSystemAsset* InFXAsset) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_PlayFXOnGroundWithAO">();
	}
	static class UAnimNotify_PlayFXOnGroundWithAO* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_PlayFXOnGroundWithAO>();
	}
};

// Class Marvel.AnimNotify_PlayFXWithAO
// 0x0150 (0x0190 - 0x0040)
class UAnimNotify_PlayFXWithAO final : public UAnimNotify
{
public:
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   BoneName;                                          // 0x0048(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsAttached;                                       // 0x0054(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseBoneLocationOnly;                              // 0x0055(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDoNotUpdateRotation;                              // 0x0056(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57[0x9];                                       // 0x0057(0x0009)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OffsetTransform;                                   // 0x0060(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UNiagaraSystem>          NiagaraParticle;                                   // 0x00C0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UParticleSystem>         CascadeParticle;                                   // 0x00F0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPitch;                                          // 0x0120(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinPitch;                                          // 0x0124(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLerpWithAO;                                    // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePitchAOOnly;                                   // 0x0129(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x6];                                      // 0x012A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LerpStart;                                         // 0x0130(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LerpEnd;                                           // 0x0148(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bRenderCustomDepthPass : 1;                        // 0x0160(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_161[0x3];                                      // 0x0161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EffectLastTime;                                    // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFXSlomo;                                    // 0x0168(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SlomoTimeScale;                                    // 0x016C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 OwnerMeshComp;                                     // 0x0170(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_178[0x18];                                     // 0x0178(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayFX(class USkeletalMeshComponent* Mesh, class UFXSystemAsset* InFXAsset) const;
	void SetOwnerMesh(class USkeletalMeshComponent* Mesh) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_PlayFXWithAO">();
	}
	static class UAnimNotify_PlayFXWithAO* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_PlayFXWithAO>();
	}
};

// Class Marvel.CharacterCollisionComponent
// 0x1FA0 (0x2830 - 0x0890)
class UCharacterCollisionComponent final : public UCapsuleComponent
{
public:
	TMulticastInlineDelegate<void(bool bIsDash)>  OnDashStateChangedDispatcher;                      // 0x0888(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnSetCapsuleSizeDispatcher;                        // 0x0898(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A8[0x10];                                     // 0x08A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBoxSphereBounds                       CachedBounds;                                      // 0x08B8(0x0038)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_8F0[0x1F40];                                   // 0x08F0(0x1F40)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterCollisionComponent">();
	}
	static class UCharacterCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterCollisionComponent>();
	}
};

// Class Marvel.MarvelLevelPhysicsInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelLevelPhysicsInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelLevelPhysicsInterface">();
	}
	static class IMarvelLevelPhysicsInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelLevelPhysicsInterface>();
	}
};

// Class Marvel.AnimNotify_PlayMontageTask
// 0x0010 (0x0050 - 0x0040)
class UAnimNotify_PlayMontageTask final : public UAnimNotify
{
public:
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           Montage;                                           // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_PlayMontageTask">();
	}
	static class UAnimNotify_PlayMontageTask* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_PlayMontageTask>();
	}
};

// Class Marvel.MarvelPredesData
// 0x0008 (0x0040 - 0x0038)
class UMarvelPredesData final : public UDataAsset
{
public:
	class UAkAudioEvent*                          AkHitControlPointAudioEvent;                       // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPredesData">();
	}
	static class UMarvelPredesData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelPredesData>();
	}
};

// Class Marvel.AnimNotify_PlayNiagaraCombineEffect
// 0x0000 (0x0260 - 0x0260)
#pragma pack(push, 0x1)
class alignas(0x10) UAnimNotify_PlayNiagaraCombineEffect : public UAnimNotify_PlayNiagaraEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_PlayNiagaraCombineEffect">();
	}
	static class UAnimNotify_PlayNiagaraCombineEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_PlayNiagaraCombineEffect>();
	}
};
#pragma pack(pop)

// Class Marvel.CueData_ManageVisible
// 0x0020 (0x0060 - 0x0040)
class UCueData_ManageVisible final : public UCueData_Base
{
public:
	struct FInstancedStruct                       DisplayEventSubscriberInfo;                        // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FInstancedStruct                       HideEventSubscriberInfo;                           // 0x0050(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueData_ManageVisible">();
	}
	static class UCueData_ManageVisible* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueData_ManageVisible>();
	}
};

// Class Marvel.AnimNotify_PlayNiagaraCombineEffectEx
// 0x00F0 (0x0350 - 0x0260)
class UAnimNotify_PlayNiagaraCombineEffectEx : public UAnimNotify_PlayNiagaraCombineEffect
{
public:
	uint8                                         bCastShadow : 1;                                   // 0x0258(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRenderCustomDepthPass : 1;                        // 0x0258(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDoNotUpdateRotation : 1;                          // 0x0258(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAutoPossessAttachment : 1;                        // 0x0258(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_259[0x7];                                      // 0x0259(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           NiagaraTags;                                       // 0x0260(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bBlockOnTagsOrActiveTags : 1;                      // 0x0270(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_271[0x7];                                      // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  BlockTags;                                         // 0x0278(0x0068)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ActiveTags;                                        // 0x02E0(0x0068)(Edit, BlueprintReadOnly, NativeAccessSpecifierPublic)
	uint8                                         Pad_348[0x8];                                      // 0x0348(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_PlayNiagaraCombineEffectEx">();
	}
	static class UAnimNotify_PlayNiagaraCombineEffectEx* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_PlayNiagaraCombineEffectEx>();
	}
};

// Class Marvel.AnimNotify_PlayNiagaraOnWeapon
// 0x0000 (0x0360 - 0x0360)
class UAnimNotify_PlayNiagaraOnWeapon final : public UAnimNotify_PlayNiagaraEffectEx
{
public:
	int32                                         EquipID;                                           // 0x0358(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponMeshType                               WeaponMeshType;                                    // 0x035C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_35D[0x3];                                      // 0x035D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class USkeletalMeshComponent* GetMeshComponentOverride(class USkeletalMeshComponent* MeshComp) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_PlayNiagaraOnWeapon">();
	}
	static class UAnimNotify_PlayNiagaraOnWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_PlayNiagaraOnWeapon>();
	}
};

// Class Marvel.RandomFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class URandomFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void GenerateFireDirection(struct FMtRandomStream& InRandomStream, struct FVector& InOutDirection, float InSpread);
	static void GenerateFireDirections(struct FMtRandomStream& InRandomStream, TArray<struct FVector>* OutDirections, int32 InNumFire, float InSpread, const struct FVector& InDirection, const class UWeaponCrosshairSpec* InCrosshairSpec);
	static void GenerateFireDirectionsWithDistance(struct FMtRandomStream& InRandomStream, TArray<struct FVector>* OutDirections, int32 InNumFire, float InSpread, float CrossHairDistance, const struct FVector& InDirection);
	static void GenerateFireDirectionWithSpread(struct FMtRandomStream& InRandomStream, struct FVector& InOutDirection, float MinSpread, float MaxSpread);
	static void GenerateFixedFireDirections(TArray<struct FVector>* OutDirections, int32 InNumFire, float InSpread, const struct FRotator& InRotation, const TArray<struct FAmmoFixedSpread>& InFixedSpreads);
	static int32 MakeNetworkSeed(const class UObject* WCO, bool bNoRandomOffset);
	static struct FMtRandomStream MakeRandomStream(int32 InRandomSeed, float* OutRandomValue0);
	static int32 SaltNetworkSeed(const class AActor* WCO, int32 InNetworkSeed);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RandomFunctionLibrary">();
	}
	static class URandomFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<URandomFunctionLibrary>();
	}
};

// Class Marvel.CueAudioAbilityMove
// 0x0018 (0x0CE0 - 0x0CC8)
class ACueAudioAbilityMove : public AMarvelCueNotify_Actor
{
public:
	int32                                         MoveStartAudioId;                                  // 0x0CC8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoveLoopAudioId;                                   // 0x0CCC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MoveStopAudioId;                                   // 0x0CD0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SquareSpeedThreshold;                              // 0x0CD4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD8[0x8];                                      // 0x0CD8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateMoveSound(float InSquareSpeed);

	bool IsLoopAudioPlaying() const;
	bool IsStartAudioPlayed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueAudioAbilityMove">();
	}
	static class ACueAudioAbilityMove* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACueAudioAbilityMove>();
	}
};

// Class Marvel.AnimNotify_PlayParticleByTag
// 0x0080 (0x0180 - 0x0100)
class UAnimNotify_PlayParticleByTag final : public UAnimNotify_PlayParticleEffect
{
public:
	TSoftObjectPtr<class UParticleSystem>         DefaultPSTemplate;                                 // 0x0100(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x0130(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13C[0x4];                                      // 0x013C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UParticleSystem>         TagPSTemplate;                                     // 0x0140(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCastShadow : 1;                                   // 0x0170(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRenderCustomDepthPass : 1;                        // 0x0170(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_171[0xF];                                      // 0x0171(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_PlayParticleByTag">();
	}
	static class UAnimNotify_PlayParticleByTag* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_PlayParticleByTag>();
	}
};

// Class Marvel.AnimNotify_PlayParticleEffectEx
// 0x0010 (0x0110 - 0x0100)
class UAnimNotify_PlayParticleEffectEx final : public UAnimNotify_PlayParticleEffect
{
public:
	uint8                                         bAutoPossessAttachment : 1;                        // 0x0100(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bAttachToLocalCamera : 1;                          // 0x0100(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bRettachToCharacterRootComponent : 1;              // 0x0100(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_101[0xF];                                      // 0x0101(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_PlayParticleEffectEx">();
	}
	static class UAnimNotify_PlayParticleEffectEx* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_PlayParticleEffectEx>();
	}
};

// Class Marvel.MarvelGameplayEffectCost
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectCost final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectCost">();
	}
	static class UMarvelGameplayEffectCost* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectCost>();
	}
};

// Class Marvel.CueData_PlayAnim
// 0x0018 (0x0058 - 0x0040)
class UCueData_PlayAnim final : public UCueData_Base
{
public:
	class UAnimSequenceBase*                      AnimSequence;                                      // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FInstancedStruct                       PlayEventBindInfo;                                 // 0x0048(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueData_PlayAnim">();
	}
	static class UCueData_PlayAnim* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueData_PlayAnim>();
	}
};

// Class Marvel.AnimNotify_PlayParticleOnWeapon
// 0x0020 (0x0120 - 0x0100)
class UAnimNotify_PlayParticleOnWeapon final : public UAnimNotify_PlayParticleEffect
{
public:
	uint8                                         bUseExisting : 1;                                  // 0x0100(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_101[0x3];                                      // 0x0101(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EquipID;                                           // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PSComponentTag;                                    // 0x0108(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0xC];                                      // 0x0114(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class USkeletalMeshComponent* GetMeshComponentOverride(class USkeletalMeshComponent* MeshComp) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_PlayParticleOnWeapon">();
	}
	static class UAnimNotify_PlayParticleOnWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_PlayParticleOnWeapon>();
	}
};

// Class Marvel.AnimNotify_PlayWeaponMaterial
// 0x0070 (0x00A8 - 0x0038)
class UAnimNotify_PlayWeaponMaterial final : public UAnimNotifyState
{
public:
	bool                                          ShowOrHideWeapon;                                  // 0x0038(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EquipID;                                           // 0x003C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ParamerName;                                       // 0x0040(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndValue;                                          // 0x004C(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class AActor*, float>                    BeginTimeMap;                                      // 0x0050(0x0050)(BlueprintReadOnly, NativeAccessSpecifierPrivate)
	uint8                                         Pad_A0[0x8];                                       // 0x00A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_PlayWeaponMaterial">();
	}
	static class UAnimNotify_PlayWeaponMaterial* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_PlayWeaponMaterial>();
	}
};

// Class Marvel.Cue_Buff_1118
// 0x0000 (0x1038 - 0x1038)
class ACue_Buff_1118 final : public AMarvelCueNotify_Buff
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Buff_1118">();
	}
	static class ACue_Buff_1118* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Buff_1118>();
	}
};

// Class Marvel.AnimNotify_PresetDestruction
// 0x0058 (0x0098 - 0x0040)
class UAnimNotify_PresetDestruction final : public UAnimNotify
{
public:
	bool                                          bCreateSummonerWithEff;                            // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SpawnSocketName;                                   // 0x0044(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 SummonerIDs;                                       // 0x0050(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	bool                                          bStopJudgeDamage;                                  // 0x0060(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0064(0x000C)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyBuffSpec;                                    // 0x0070(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BuffSpecId;                                        // 0x0074(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0078(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyDestructibleDamage;                          // 0x007C(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DestructibleDamage;                                // 0x0080(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestructibleRadius;                                // 0x0084(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DestructibleImpluse;                               // 0x0088(0x0004)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C[0x4];                                       // 0x008C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UDamageType>                DestructibleDamageType;                            // 0x0090(0x0008)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_PresetDestruction">();
	}
	static class UAnimNotify_PresetDestruction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_PresetDestruction>();
	}
};

// Class Marvel.AnimNotify_RagdollSimulation
// 0x0068 (0x00A8 - 0x0040)
class UAnimNotify_RagdollSimulation final : public UAnimNotify
{
public:
	class FName                                   ConstraintProfileName;                             // 0x0040(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlendScale;                                        // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenSimulation;                                   // 0x0050(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, bool>                       RagdollBones;                                      // 0x0058(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_RagdollSimulation">();
	}
	static class UAnimNotify_RagdollSimulation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_RagdollSimulation>();
	}
};

// Class Marvel.CueData_UnarmedWeapon
// 0x0010 (0x0050 - 0x0040)
class UCueData_UnarmedWeapon final : public UCueData_Base
{
public:
	class FName                                   SocketName;                                        // 0x0040(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueData_UnarmedWeapon">();
	}
	static class UCueData_UnarmedWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueData_UnarmedWeapon>();
	}
};

// Class Marvel.AnimNotify_RecoveryCost
// 0x0008 (0x0048 - 0x0040)
class UAnimNotify_RecoveryCost final : public UAnimNotify
{
public:
	struct FRecoveryCostConfig                    RecoveryCostConfig;                                // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_RecoveryCost">();
	}
	static class UAnimNotify_RecoveryCost* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_RecoveryCost>();
	}
};

// Class Marvel.MarvelDiffusionFactorCalculation2
// 0x0000 (0x0048 - 0x0048)
class UMarvelDiffusionFactorCalculation2 final : public UGameplayModMagnitudeCalculation
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelDiffusionFactorCalculation2">();
	}
	static class UMarvelDiffusionFactorCalculation2* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelDiffusionFactorCalculation2>();
	}
};

// Class Marvel.AnimNotify_RefreshCooldown
// 0x0010 (0x0050 - 0x0040)
class UAnimNotify_RefreshCooldown final : public UAnimNotify
{
public:
	TArray<struct FRefreshCooldownParams>         RefreshCDParams;                                   // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_RefreshCooldown">();
	}
	static class UAnimNotify_RefreshCooldown* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_RefreshCooldown>();
	}
};

// Class Marvel.MarvelDiffusionFactorCalculation
// 0x0000 (0x0048 - 0x0048)
class UMarvelDiffusionFactorCalculation final : public UGameplayModMagnitudeCalculation
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelDiffusionFactorCalculation">();
	}
	static class UMarvelDiffusionFactorCalculation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelDiffusionFactorCalculation>();
	}
};

// Class Marvel.CueDataProcessor_AttachCharacter
// 0x0070 (0x00C0 - 0x0050)
class UCueDataProcessor_AttachCharacter : public UCueDataProcessor_Base
{
public:
	uint8                                         Pad_50[0x70];                                      // 0x0050(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AttachToTarget();
	void DetachFromTarget();
	void OnCharacterSkinInitialized(int32 SculptID);
	void ReattachToTarget(int32 SculptID);

	class FName GetAttachSocketName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueDataProcessor_AttachCharacter">();
	}
	static class UCueDataProcessor_AttachCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueDataProcessor_AttachCharacter>();
	}
};

// Class Marvel.CueDataProcessor_AttachCharacter_WithOffset
// 0x0000 (0x00C0 - 0x00C0)
class UCueDataProcessor_AttachCharacter_WithOffset final : public UCueDataProcessor_AttachCharacter
{
public:
	struct FTransform GetRelativeOffset() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueDataProcessor_AttachCharacter_WithOffset">();
	}
	static class UCueDataProcessor_AttachCharacter_WithOffset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueDataProcessor_AttachCharacter_WithOffset>();
	}
};

// Class Marvel.AnimNotify_SetPSCVisibility
// 0x0010 (0x0050 - 0x0040)
class UAnimNotify_SetPSCVisibility final : public UAnimNotify
{
public:
	class FName                                   PSComponentTag;                                    // 0x0040(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisiblity;                                        // 0x004C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_SetPSCVisibility">();
	}
	static class UAnimNotify_SetPSCVisibility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_SetPSCVisibility>();
	}
};

// Class Marvel.AnimNotify_ShakeHUD
// 0x0008 (0x0048 - 0x0040)
class UAnimNotify_ShakeHUD final : public UAnimNotify
{
public:
	EMarvelAbilityUIHudAnim                       ShakeHUDType;                                      // 0x0040(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_ShakeHUD">();
	}
	static class UAnimNotify_ShakeHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_ShakeHUD>();
	}
};

// Class Marvel.MarvelCueNotify_FX_Trajectory
// 0x0188 (0x0E50 - 0x0CC8)
class AMarvelCueNotify_FX_Trajectory : public AMarvelCueNotify_Actor
{
public:
	class UFXSystemAsset*                         TrajectoryFX;                                      // 0x0CC8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartAttachName;                                   // 0x0CD0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetAttachName;                                  // 0x0CDC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFixedTimeOtherwiseFixSpeed;                    // 0x0CE8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CE9[0x3];                                      // 0x0CE9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LifeTime;                                          // 0x0CEC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FlySpeed;                                          // 0x0CF0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDistance;                                       // 0x0CF4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         TrajectoryStartFX;                                 // 0x0CF8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachSource;                                     // 0x0D00(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D01[0x7];                                      // 0x0D01(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         TrajectoryEndFX;                                   // 0x0D08(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachTarget;                                     // 0x0D10(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D11[0x3];                                      // 0x0D11(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TrajectoryAudioID;                                 // 0x0D14(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D18[0x8];                                      // 0x0D18(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGenericTargetingLocationInfo          SourceEndPoint;                                    // 0x0D20(0x0090)(NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FGenericTargetingLocationInfo          TargetEndPoint;                                    // 0x0DB0(0x0090)(NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UFXSystemComponent*                     TrajectoryLoopFXComp;                              // 0x0E40(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E48[0x8];                                      // 0x0E48(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FGenericTargetingLocationInfo CalculateSource(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	struct FGenericTargetingLocationInfo CalculateTarget(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnTrajectoryFXEnd();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_FX_Trajectory">();
	}
	static class AMarvelCueNotify_FX_Trajectory* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_FX_Trajectory>();
	}
};

// Class Marvel.MarvelCueNotify_FX_Trajectory_EX
// 0x0000 (0x0E50 - 0x0E50)
class AMarvelCueNotify_FX_Trajectory_EX final : public AMarvelCueNotify_FX_Trajectory
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_FX_Trajectory_EX">();
	}
	static class AMarvelCueNotify_FX_Trajectory_EX* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_FX_Trajectory_EX>();
	}
};

// Class Marvel.CueNiagaraAssetLibrary
// 0x0000 (0x0030 - 0x0030)
class UCueNiagaraAssetLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UNiagaraSystem* Execute_CueNiagaraAsset_Hit(class UMarvelCueNotify_Static* Cue, class AActor* MyTarget, const struct FGameplayCueParameters& CueParameters, const struct FCue_NiagaraAsset_Hit& CueNiagaraAsset);
	static class UNiagaraSystem* Execute_CueNiagaraAsset_Single(class UMarvelCueNotify_Static* Cue, class AActor* MyTarget, const struct FGameplayCueParameters& CueParameters, const struct FCue_NiagaraAsset_Single& CueNiagaraAsset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueNiagaraAssetLibrary">();
	}
	static class UCueNiagaraAssetLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueNiagaraAssetLibrary>();
	}
};

// Class Marvel.AnimNotify_SpawnProjectile
// 0x0028 (0x0078 - 0x0050)
class UAnimNotify_SpawnProjectile : public UAnimNotify_SocketBase
{
public:
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ProjectileID;                                      // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLocation;                                 // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelPawnBodyType                           InitLocationType;                                  // 0x005D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitLocationOffset;                                // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_SpawnProjectile">();
	}
	static class UAnimNotify_SpawnProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_SpawnProjectile>();
	}
};

// Class Marvel.AnimNotify_SpawnScope
// 0x0048 (0x0098 - 0x0050)
class UAnimNotify_SpawnScope final : public UAnimNotify_SocketBase
{
public:
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScopeId;                                           // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLocation;                                 // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelScopeQuoteType                         InitLocationType;                                  // 0x005D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitLocationOffset;                                // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               InitRotationOffset;                                // 0x0078(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bShouldPredict;                                    // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_SpawnScope">();
	}
	static class UAnimNotify_SpawnScope* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_SpawnScope>();
	}
};

// Class Marvel.MarvelPlayerSubsystem
// 0x0000 (0x0038 - 0x0038)
class UMarvelPlayerSubsystem final : public ULocalPlayerSubsystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPlayerSubsystem">();
	}
	static class UMarvelPlayerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelPlayerSubsystem>();
	}
};

// Class Marvel.ConsistentRandUtil
// 0x0000 (0x0030 - 0x0030)
class UConsistentRandUtil final : public UBlueprintFunctionLibrary
{
public:
	static TArray<int32> GetShuffleIndexArr(class UObject* WCO, int32 N);
	static float Rand(class UObject* WCO);
	static int32 RandChoose(class UObject* WCO, int32 N);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ConsistentRandUtil">();
	}
	static class UConsistentRandUtil* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConsistentRandUtil>();
	}
};

// Class Marvel.SelectTargetUIManager
// 0x0268 (0x0298 - 0x0030)
class USelectTargetUIManager final : public UObject
{
public:
	struct FSelectTargetManagerTickFunction       PrimaryTick;                                       // 0x0030(0x0038)(NativeAccessSpecifierPublic)
	TMap<int32, class UUIC_SelectTarget*>         AID2UIC;                                           // 0x0068(0x0050)(NativeAccessSpecifierPublic)
	TMap<int32, struct FUISelectedTargets>        AID2Targets;                                       // 0x00B8(0x0050)(NativeAccessSpecifierPublic)
	TMap<TWeakObjectPtr<class AActor>, TWeakObjectPtr<class UUserWidget>> Target2Widget;                                     // 0x0108(0x0050)(ExportObject, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)
	TMap<TWeakObjectPtr<class AActor>, struct FUISelectedTargetAbilityIDs> Target2AIDs;                                       // 0x0158(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8[0x50];                                     // 0x01A8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<TWeakObjectPtr<class AActor>>            DeltaTargets;                                      // 0x01F8(0x0050)(UObjectWrapper, NativeAccessSpecifierPublic)
	TSet<class UUIC_SelectTarget*>                PendingUpdateUIC;                                  // 0x0248(0x0050)(NativeAccessSpecifierPublic)

public:
	static class USelectTargetUIManager* Get(class UObject* WCO);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SelectTargetUIManager">();
	}
	static class USelectTargetUIManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<USelectTargetUIManager>();
	}
};

// Class Marvel.AnimNotify_SpawnSummoner
// 0x0028 (0x0078 - 0x0050)
class UAnimNotify_SpawnSummoner final : public UAnimNotify_SocketBase
{
public:
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SummonerId;                                        // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOverrideLocation;                                 // 0x005C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelScopeQuoteType                         InitLocationType;                                  // 0x005D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E[0x2];                                       // 0x005E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                InitLocationOffset;                                // 0x0060(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_SpawnSummoner">();
	}
	static class UAnimNotify_SpawnSummoner* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_SpawnSummoner>();
	}
};

// Class Marvel.MarvelPaybackCoolDownAbility
// 0x0020 (0x1118 - 0x10F8)
class UMarvelPaybackCoolDownAbility final : public UMarvelEffectGameplayAbility
{
public:
	TArray<int32>                                 TargetAbilities;                                   // 0x10F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bApplyForCharge;                                   // 0x1108(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1109[0x3];                                     // 0x1109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SubDuration;                                       // 0x110C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SubPercent;                                        // 0x1110(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoDoPaybck;                                     // 0x1114(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1115[0x3];                                     // 0x1115(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DoPaybackCoolDown();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPaybackCoolDownAbility">();
	}
	static class UMarvelPaybackCoolDownAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelPaybackCoolDownAbility>();
	}
};

// Class Marvel.AnimNotify_StopParticleOnWeapon
// 0x0018 (0x0058 - 0x0040)
class UAnimNotify_StopParticleOnWeapon final : public UAnimNotify
{
public:
	uint8                                         bDestroyComponent : 1;                             // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EquipID;                                           // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PSComponentTag;                                    // 0x0048(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class USkeletalMeshComponent* GetMeshComponentOverride(class USkeletalMeshComponent* MeshComp) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_StopParticleOnWeapon">();
	}
	static class UAnimNotify_StopParticleOnWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_StopParticleOnWeapon>();
	}
};

// Class Marvel.InputModifierSen
// 0x0008 (0x0038 - 0x0030)
class UInputModifierSen final : public UInputModifier
{
public:
	EInputSenType                                 CurrentSenType;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputModifierSen">();
	}
	static class UInputModifierSen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputModifierSen>();
	}
};

// Class Marvel.MarvelPlayerController
// 0x06D0 (0x1168 - 0x0A98)
class AMarvelPlayerController : public APlayerController
{
public:
	uint8                                         Pad_A98[0x38];                                     // 0x0A98(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastPingCalcTime;                                  // 0x0AD0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PredictionFudgeFactor;                             // 0x0AD4(0x0004)(Edit, Net, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxPredictionPing;                                 // 0x0AD8(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsReconnect;                                       // 0x0ADC(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ADD[0x3];                                      // 0x0ADD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FHeroSkinMapInfo>               HeroSkinInfo;                                      // 0x0AE0(0x0010)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            HeroSkinInfoMap;                                   // 0x0AF0(0x0050)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	bool                                          bIsLockMouseCenter;                                // 0x0B40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B41[0x3];                                      // 0x0B41(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DesiredPredictionPing;                             // 0x0B44(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, GlobalConfig, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B48[0x40];                                     // 0x0B48(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DynamicInterpRotationSpeed;                        // 0x0B88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B8C[0x4];                                      // 0x0B8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DynamicInterpRotationSpeedCurve;                   // 0x0B90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DynamicInterpRotationMaxAngle;                     // 0x0B98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9C[0x24];                                     // 0x0B9C(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Toogle)>   BlockPawnInputDelegate;                            // 0x0BC0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UInputMappingContext*                   CurrentSculptIMC;                                  // 0x0BD0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BD8[0x4];                                      // 0x0BD8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BlockPawnInputCnt;                                 // 0x0BDC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 FinalViewTarget;                                   // 0x0BE0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastSpectatedPlayerId;                             // 0x0BE8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_BEC[0x4];                                      // 0x0BEC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelPlayerState*                     LastSpectatedPlayerState;                          // 0x0BF0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(bool Value)>    OnSpectatingChanged;                               // 0x0BF8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class APawn* Value)> OnSpectatorPawnChanged;                            // 0x0C08(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class APlayerState* Value)> OnSpectatingPlayerStateChangedDelegate;            // 0x0C18(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AMarvelPlayerCameraManager*             MarvelPlayerCameraManager;                         // 0x0C28(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAlwaysRelevantActorForConnectionInfo> AlwaysRelevantActors;                              // 0x0C30(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bRecreateHUD;                                      // 0x0C40(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoLeavePawn;                                    // 0x0C41(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysNewStates;                                  // 0x0C42(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoSpectatorCam;                                 // 0x0C43(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockHeroVoice;                                   // 0x0C44(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C45[0x33];                                     // 0x0C45(0x0033)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AController* InController, const class FString& Key, const class FString& JsonStr)> OnControllerReceiveJson;                           // 0x0C78(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class APawn* Value)> OnPossessNewPawnDispatcher;                        // 0x0C88(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPlayerStateChanged;                              // 0x0C98(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCameraManagerSpawned;                            // 0x0CA8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnReceiveAnyInputInThisFrame;                      // 0x0CB8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& KickReason)> OnBeKickedDispatcher;                              // 0x0CC8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            QA_ChangeHeroHealthAttribute;                      // 0x0CD8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            QA_ChangeHeroEnergyAttribute;                      // 0x0CE0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugListener;                                    // 0x0CE8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CE9[0x7];                                      // 0x0CE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAgentHandleCom*                  AbilityAgentComponent;                             // 0x0CF0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_CF8[0x10];                                     // 0x0CF8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseCustomCullDistancePerPlayer;                   // 0x0D08(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D09[0x3];                                      // 0x0D09(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CustomCullDistanceSquared;                         // 0x0D0C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               CurrentAdditiveRotation;                           // 0x0D10(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	struct FRotator                               TargetAdditiveRotation;                            // 0x0D28(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
	float                                         AdditiveRotInterpSpeed;                            // 0x0D40(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D44[0x4];                                      // 0x0D44(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<uint32, class AMarvelAIControllerBase*>  ControllerMap;                                     // 0x0D48(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_D98[0x1B8];                                    // 0x0D98(0x01B8)(Fixing Size After Last Property [ Dumper-7 ])
	class UTriggerHapticFeedbackComponent*        TriggerHapticFeedbackComponent;                    // 0x0F50(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTriggerHapticFeedbackEffect_Base*> CurrentRightHapticFeedbackEffects;                 // 0x0F58(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UTriggerHapticFeedbackEffect_Base*> CurrentLeftHapticFeedbackEffects;                  // 0x0F68(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShouldPlayHapticFeedBackEffect;                   // 0x0F78(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F79[0x7];                                      // 0x0F79(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnShouldPlayHapticFeedBackEffectDelegate;          // 0x0F80(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UObject>>         AimAssistCachedTarget;                             // 0x0F90(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_FA0[0x1B0];                                    // 0x0FA0(0x01B0)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CheckTagArray;                                     // 0x1150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1160[0x8];                                     // 0x1160(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void MarvelBlockPawnInput(class UObject* WCO);
	static void MarvelUnblockPawnInput(class UObject* WCO);

	bool AddAlwaysRelevantActor(class AActor* RelevantActor);
	void AlignSpectatorToCurrentView();
	void BlockPawnInput();
	void BroadcastWizcmd(const class FString& Command);
	void ChangeAttributeValue(const class FString& AttributeName, float NewValue);
	void CheckMediaPlayerNum();
	void ClientCheckTag(const TArray<int32>& CheckTagNum);
	void ClientDisplayChaosServerInfo(const TArray<class FString>& ChaosServerName, const TArray<float>& ChaosServerValue);
	void ClientFindPath(uint32 ID, const struct FVector& StartLocation, const struct FVector& EndLocation, const struct FNavAgentProperties& NavAgentProperties);
	void ClientPlayKillcam(const struct FMarvelSpectatorInfo& SpectatorInfo);
	void ClientReturnPing(float Timestamp);
	void ClientStartSpectating();
	void ClientStopKillcam(class AActor* Victim);
	void ClientViewSpectatorPawn(const struct FViewTargetTransitionParams& TransitionParams);
	void DisableCustomCullDistance();
	void DisplayChaosServerInfo(float Display);
	void EnableCustomCullDistance(float InCullDistanceSquared);
	void EndSpectation();
	void ForcePlayerControllerTick(float DeltaSeconds);
	int32 GetHeroSkinID(int32 HeroID);
	struct FVector GetLastSpectatorSyncLocation();
	struct FRotator GetLastSpectatorSyncRotation();
	TArray<class FString> GetLevelInfo(int32 InfoType, int32 Threshold, const struct FVector& v1, const struct FVector& v2);
	void GetPacketsLost(float* InPacketsLost, float* OutPacketsLost);
	class FString GetStatsSavePath(int32 DataLength, bool IsHistory);
	int32 GetUID();
	bool IsClientAIActive();
	bool IsInSpectation();
	void K2_GetPlayerViewPoint(struct FVector* Location, struct FRotator* Rotation);
	class FName K2_GetStateName();
	void MarvelCommandExecute(const class FString& Name_0, const class FString& Arg, bool Toogle);
	void OnCheckTag(const TArray<int32>& ServerCheckTagNum, const TArray<int32>& ClientCheckTagNum);
	void OnDeath(class AActor* Killer, class AActor* Victim, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnGameMatchEvent(EMatchState MatchState);
	void OnPostReplaceController(class AController* old_controller);
	void OnPreDelegateByAI();
	void OnPreReplaceController(class AController* new_controller);
	void OnReborn(class AActor* TargetActor, const struct FCharacterRebornParam& Param);
	void OnReconnectPostLogin();
	void OnRep_HeroSkinInfo();
	void OnSculptChanged(int32 InSculptID);
	void OnSpectatingPlayerStateChanged(class APlayerState* InPlayerState);
	void ParseWizcmd(const class FString& Command, bool bClient, bool bServer);
	void Predict(float NewPredictionPing);
	void Print(const class FString& Message);
	void PrintDebug();
	void QueryServerOptimizationStat(const class FString& Item);
	bool RemoveAlwaysRelevantActor(class AActor* RelevantActor);
	void ReplaySessionName();
	void S_SetControlRotation(const struct FRotator& NewRotation);
	void SendClientWizcmd(const class FString& Command);
	void SendCmdToPython(const class FString& Command);
	void SendJson(const class FString& Key, const class FString& JsonStr);
	void Server_PredictionPing(float NewPredictionPing);
	void ServerBouncePing(float Timestamp);
	void ServerChangeState(class FName InStateName);
	void ServerCheckTag();
	void ServerDesFieldEnabled(bool bIsOptFieldEnabled);
	void ServerDestructionDamageMultiplier(float Multiplier);
	void ServerDisplayChaosServerInfo(bool Display);
	void ServerEndDemoMemoryStreamimg();
	void ServerFindPathResult(uint32 ID, const TArray<struct FVector>& Points);
	void ServerKillTarget(class AActor* Source, class AActor* Target);
	void ServerParseWizcmd(const class FString& Command);
	void ServerQueryServerOptimizationStat(const class FString& Item);
	void ServerReceiveStatsData(const bool IsHistory, const TArray<uint8>& gzStatsData);
	void ServerSendClientStateData(uint32 Data0, uint32 Data1, uint32 Data2, uint32 Data3, uint32 Data4, int64 AnalogData, const struct FVector_NetQuantize100& Tilt, const struct FVector_NetQuantize100& RotationRate, const struct FVector_NetQuantize100& Acceleration, float LSScore, float RSScore, float LTScore, float RTScore);
	void ServerSetAnimTickOption(int32 Option);
	void ServerSetMoveCompReconnecting(const bool bInIsReconnecting);
	void ServerStartDemoMemoryStreamimg(const float GotoStartSeconds, const float GotoEndSeconds);
	void ServerUpdatePing(float ExactPing);
	void ServerViewPawn(class APawn* PawnToView);
	void ServerViewPlayerState(class APlayerState* PS);
	void SetClientAIActive(bool bFlag);
	void SetClientAIController(class AMarvelAIControllerBase* Controller);
	void SetCurrentClickTraceChannel(ECollisionChannel NewClickTraceChannel);
	void SetDesFieldEnabled(bool bIsOptFieldEnabled);
	void SetDestructionDamageMultiplier(float Multiplier);
	void SetDynamicDynamicInterpRotation(bool InDynamicInterpRotation);
	void SetHeroSkin(int32 HeroID, int32 SkinID);
	void SetHeroSkinInfo(const TArray<struct FHeroSkinMapInfo>& SkinMap);
	void SetInstantiateAISystemOnClient(bool bFlag);
	void ShouldSpectate(const bool bFlag);
	void ShowMessageToChatPanel(const class FString& Message);
	void ShowMessageToChatPanelWithType(const class FString& Message, int32 Type);
	void StartKillSpectating();
	void StartSpectating(bool bSpectateInReviving, bool bIgnoreDelay);
	void StartSpectation();
	void TellClientMessage(const class FString& Message);
	void TellClientMessageWithType(const class FString& Message, int32 Type);
	void TestAbility(const class FString& Cmd);
	void TestEnterCombatScene(const class FString& InKey);
	void TestEnterWorld(class FString* Name_0);
	void TestEnterWorldWithType(class FString* Name_0, EDemoPlayType DemoPlayType);
	void TestGetObj(const class FString& Cmd);
	void TestLeaveCombatInfo();
	void TestShowProjFrameInfo(const class FString& InKey, const int32& InfoType, uint8 ShowFlags, bool bOpenNewLevel, bool bEnterSpectating, bool bAutoShowInfo);
	void ToggleClientCameraPOVUpdateToServer(bool bClientCameraPOVUpdateToServer);
	void ToggleSpectation();
	void TriggerCrash(const class FString& ErrorDesc);
	void UnblockPawnInput();
	void UpdatePawnInput();
	bool UploadHistoryStatsData(const class FString& FilePath);
	void UploadSimpleStatsData(const class FString& strHead, int32 maxStackCount);

	void ClientReceivedAIMessage(const class FString& UserName, const class FString& Message, int32 MessageSide, int32 Timestamp, int32 ChannelType, int32 SpecialType) const;
	class AMarvelAIControllerBase* GetClientAIController() const;
	float GetCustomCullDistanceSquared() const;
	class UMarvelAgentHandleCom* GetMarvelAgentHandleCom() const;
	bool IsBlockPawnInput() const;
	void SendMessageToChatPanel(const class FString& Name_0, const class FString& Message, int32 MessageSide, int32 Timestamp, int32 ChannelType, int32 SpecialType) const;
	void TellClientToDrawRollbackBox(const TArray<struct FDebugDrawBox>& Boxes, float Duration) const;
	void TellClientToDrawRollbackCapsule(const TArray<struct FDebugDrawCapsule>& Capsules, float Duration) const;
	void TellClientToDrawRollbackSphere(const TArray<struct FDebugDrawSphere>& Spheres, float Duration) const;
	bool UseCustomCullDistancePerPlayer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPlayerController">();
	}
	static class AMarvelPlayerController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelPlayerController>();
	}
};

// Class Marvel.MarvelTagNotify_Begin
// 0x0000 (0x02F8 - 0x02F8)
class UMarvelTagNotify_Begin final : public UAnimNotify_TagNotify
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTagNotify_Begin">();
	}
	static class UMarvelTagNotify_Begin* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTagNotify_Begin>();
	}
};

// Class Marvel.CueData_RotateToCharacterMoveDir
// 0x0008 (0x0048 - 0x0040)
class UCueData_RotateToCharacterMoveDir final : public UCueData_Base
{
public:
	ECueData_MoveDirType                          MoveDirType;                                       // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         Axis;                                              // 0x0041(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueData_RotateToCharacterMoveDir">();
	}
	static class UCueData_RotateToCharacterMoveDir* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueData_RotateToCharacterMoveDir>();
	}
};

// Class Marvel.MarvelTagNotify_Missile
// 0x0000 (0x02F8 - 0x02F8)
class UMarvelTagNotify_Missile final : public UAnimNotify_TagNotify
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTagNotify_Missile">();
	}
	static class UMarvelTagNotify_Missile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTagNotify_Missile>();
	}
};

// Class Marvel.MarvelTagNotify_Break
// 0x0000 (0x02F8 - 0x02F8)
class UMarvelTagNotify_Break final : public UAnimNotify_TagNotify
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTagNotify_Break">();
	}
	static class UMarvelTagNotify_Break* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTagNotify_Break>();
	}
};

// Class Marvel.MarvelAttributeFallBaseAbility
// 0x00E0 (0x11D8 - 0x10F8)
class UMarvelAttributeFallBaseAbility : public UMarvelEffectGameplayAbility
{
public:
	float                                         DelayAttenuation;                                  // 0x10F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10FC[0x4];                                     // 0x10FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      AttrChangeRequirements;                            // 0x1100(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EAttributeChangeSpeedMode                     AttrChangeSpeedMode;                               // 0x1148(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1149[0x3];                                     // 0x1149(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AttenuationSpeed;                                  // 0x114C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAttributeChangeType                          AttrChangeType;                                    // 0x1150(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1151[0x3];                                     // 0x1151(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinAttribute;                                      // 0x1154(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAttribute;                                      // 0x1158(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveEffectLessThanMin;                          // 0x115C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRemoveEffectGreaterThanMax;                       // 0x115D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_115E[0x2];                                     // 0x115E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttribute                     Attribute;                                         // 0x1160(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           UpdateTimerHandle;                                 // 0x11A0(0x0018)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11B8[0x20];                                    // 0x11B8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float ApplyAttributeDeltaValue(float DeltaValue);
	float CalcAttributeDeltaValue();
	float ClampAttributeDeltaValue(float DeltaValue);
	void OnEffectDurationChange(const struct FActiveGameplayEffectHandle& Handle, float NewStartTime, float NewDuration);
	void OnEffectStackChange(const struct FActiveGameplayEffectHandle& Handle, int32 NewCount, int32 OldCount);
	bool ShouldRemoveEffect();
	bool ShouldStartUpdateTimer();
	void UpdateAttributeFromTimer();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAttributeFallBaseAbility">();
	}
	static class UMarvelAttributeFallBaseAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAttributeFallBaseAbility>();
	}
};

// Class Marvel.MarvelNotTreatKillFallAbility
// 0x00E8 (0x12C0 - 0x11D8)
class UMarvelNotTreatKillFallAbility : public UMarvelAttributeFallBaseAbility
{
public:
	float                                         KillToShield;                                      // 0x11D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11DC[0x4];                                     // 0x11DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  KillerTagRequire;                                  // 0x11E0(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           CueTag;                                            // 0x1248(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1254[0x4];                                     // 0x1254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  BeKilledTagRequire;                                // 0x1258(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	void MulticastExecuteAbilityCue();
	void OnOwnerApply(class AActor* Killer, class AActor* Traget, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelNotTreatKillFallAbility">();
	}
	static class UMarvelNotTreatKillFallAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelNotTreatKillFallAbility>();
	}
};

// Class Marvel.DataBaseLogic
// 0x0000 (0x0030 - 0x0030)
class UDataBaseLogic final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataBaseLogic">();
	}
	static class UDataBaseLogic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataBaseLogic>();
	}
};

// Class Marvel.MarvelTagNotify_End
// 0x0000 (0x02F8 - 0x02F8)
class UMarvelTagNotify_End final : public UAnimNotify_TagNotify
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTagNotify_End">();
	}
	static class UMarvelTagNotify_End* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTagNotify_End>();
	}
};

// Class Marvel.CueData_AttachCharacter
// 0x0018 (0x0058 - 0x0040)
class UCueData_AttachCharacter : public UCueData_Base
{
public:
	EAttachCharacterType                          CharType;                                          // 0x0040(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SocketName;                                        // 0x0044(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UCueDataProcessor_AttachCharacter> CustomProcessorClass;                              // 0x0050(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, AdvancedDisplay, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueData_AttachCharacter">();
	}
	static class UCueData_AttachCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueData_AttachCharacter>();
	}
};

// Class Marvel.TriggerHapticFeedbackEffect_Base
// 0x00B0 (0x00E0 - 0x0030)
class UTriggerHapticFeedbackEffect_Base : public UObject
{
public:
	bool                                          bShouldCurvePara;                                  // 0x0030(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DurationTime;                                      // 0x0034(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Priority;                                          // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelGameplayAbility*                 TriggerAbility;                                    // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelPlayerController*                MPC;                                               // 0x0050(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_58[0x88];                                      // 0x0058(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyHapticEffect();
	bool GetPauseHapticState();
	void OnOwnerDeath(class AActor* DamageCauser, class AActor* TargetActor, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void PauseHapticEffect(bool bIsPause);
	void PlayHapticEffect(class UMarvelGameplayAbility* OwningAbility);
	void ShouldPauseEffect();
	void StopHapticEffect(class UMarvelGameplayAbility* OwningAbility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TriggerHapticFeedbackEffect_Base">();
	}
	static class UTriggerHapticFeedbackEffect_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTriggerHapticFeedbackEffect_Base>();
	}
};

// Class Marvel.TriggerHapticFeedbackEffect_FeedBack
// 0x0090 (0x0170 - 0x00E0)
class UTriggerHapticFeedbackEffect_FeedBack final : public UTriggerHapticFeedbackEffect_Base
{
public:
	uint8                                         FeedBackPosition;                                  // 0x00E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         FeedBackStrength;                                  // 0x00E1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     StrengthCurve;                                     // 0x00E8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TriggerHapticFeedbackEffect_FeedBack">();
	}
	static class UTriggerHapticFeedbackEffect_FeedBack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTriggerHapticFeedbackEffect_FeedBack>();
	}
};

// Class Marvel.MarvelTagNotify_Pick
// 0x0000 (0x02F8 - 0x02F8)
class UMarvelTagNotify_Pick final : public UAnimNotify_TagNotify
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTagNotify_Pick">();
	}
	static class UMarvelTagNotify_Pick* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTagNotify_Pick>();
	}
};

// Class Marvel.MarvelHitShape_Cylinder
// 0x0000 (0x0890 - 0x0890)
class UMarvelHitShape_Cylinder final : public UCylinderComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelHitShape_Cylinder">();
	}
	static class UMarvelHitShape_Cylinder* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelHitShape_Cylinder>();
	}
};

// Class Marvel.MarvelTagNotify_EndAbility
// 0x0008 (0x0300 - 0x02F8)
class UMarvelTagNotify_EndAbility final : public UAnimNotify_TagNotify
{
public:
	bool                                          bReplicateEndAbility;                              // 0x02F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWasCancelled;                                     // 0x02F9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FA[0x6];                                      // 0x02FA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTagNotify_EndAbility">();
	}
	static class UMarvelTagNotify_EndAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTagNotify_EndAbility>();
	}
};

// Class Marvel.MarvelDataBaseAssets
// 0x0050 (0x0088 - 0x0038)
class UMarvelDataBaseAssets final : public UPrimaryDataAsset
{
public:
	TMap<int32, struct FDataBaseItemRow>          DataRules;                                         // 0x0038(0x0050)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelDataBaseAssets">();
	}
	static class UMarvelDataBaseAssets* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelDataBaseAssets>();
	}
};

// Class Marvel.MarvelTagNotify_Select
// 0x0000 (0x02F8 - 0x02F8)
class UMarvelTagNotify_Select final : public UAnimNotify_TagNotify
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTagNotify_Select">();
	}
	static class UMarvelTagNotify_Select* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTagNotify_Select>();
	}
};

// Class Marvel.AnimNotify_MontageTagNotify
// 0x02A0 (0x02F0 - 0x0050)
class UAnimNotify_MontageTagNotify : public UAnimNotify_PlayMontageNotify
{
public:
	struct FGameplayTag                           EventTag;                                          // 0x0050(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEventData                     Payload;                                           // 0x0060(0x0290)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_MontageTagNotify">();
	}
	static class UAnimNotify_MontageTagNotify* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_MontageTagNotify>();
	}
};

// Class Marvel.ShowActorExtension
// 0x0000 (0x0030 - 0x0030)
class UShowActorExtension final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShowActorExtension">();
	}
	static class UShowActorExtension* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShowActorExtension>();
	}
};

// Class Marvel.CueNiagaraSpawnMethodLibrary
// 0x0000 (0x0030 - 0x0030)
class UCueNiagaraSpawnMethodLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UNiagaraComponent* ExecuteHitImpactNiagaraSpawnMethod(const class UMarvelCueNotify_Static* StaticCue, class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, class UNiagaraSystem* NiagaraSystem, const struct FGameplayCue_TransformInfoResult& CueTransformInfo);
	static class UNiagaraComponent* ExecuteHitImpactNiagaraSpawnMethod_WithParams(const class UMarvelCueNotify_Static* StaticCue, class AActor* MyTarget, const struct FGameplayCueParameters& Parameters, class UNiagaraSystem* NiagaraSystem, const struct FVector& Location, const struct FRotator& Rotation, class USceneComponent* AttachToComponent, const class FName& SocketName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueNiagaraSpawnMethodLibrary">();
	}
	static class UCueNiagaraSpawnMethodLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueNiagaraSpawnMethodLibrary>();
	}
};

// Class Marvel.MarvelTagNotify_MontageBegin
// 0x0000 (0x02F0 - 0x02F0)
class UMarvelTagNotify_MontageBegin final : public UAnimNotify_MontageTagNotify
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTagNotify_MontageBegin">();
	}
	static class UMarvelTagNotify_MontageBegin* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTagNotify_MontageBegin>();
	}
};

// Class Marvel.MarvelTagNotify_MontageMissile
// 0x0000 (0x02F0 - 0x02F0)
class UMarvelTagNotify_MontageMissile final : public UAnimNotify_MontageTagNotify
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTagNotify_MontageMissile">();
	}
	static class UMarvelTagNotify_MontageMissile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTagNotify_MontageMissile>();
	}
};

// Class Marvel.MarvelReplicationGraphNode_CustomCullDistancePerPlayer
// 0x0010 (0x0108 - 0x00F8)
class UMarvelReplicationGraphNode_CustomCullDistancePerPlayer final : public UReplicationGraphNode_ActorList
{
public:
	uint8                                         Pad_F8[0x10];                                      // 0x00F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelReplicationGraphNode_CustomCullDistancePerPlayer">();
	}
	static class UMarvelReplicationGraphNode_CustomCullDistancePerPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelReplicationGraphNode_CustomCullDistancePerPlayer>();
	}
};

// Class Marvel.DestructibleDamageComponent
// 0x0580 (0x09F0 - 0x0470)
class UDestructibleDamageComponent final : public USceneComponent
{
public:
	struct FMarvelAbilityTargetFilter             TargetFilter;                                      // 0x0470(0x0500)(Edit, BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0970(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0974(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayDuration;                                     // 0x0978(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SimulateDown;                                      // 0x097C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_97D[0x3];                                      // 0x097D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DownDuraton;                                       // 0x0980(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BuffID;                                            // 0x0984(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        DamageParticle;                                    // 0x0988(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0990(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawDebugType;                                     // 0x0998(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_999[0x3F];                                     // 0x0999(0x003F)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AMarvelBaseCharacter*>           HasCheckTarget;                                    // 0x09D8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class APawn*                                  ApplyInstigator;                                   // 0x09E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ExecuteDamage();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DestructibleDamageComponent">();
	}
	static class UDestructibleDamageComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDestructibleDamageComponent>();
	}
};

// Class Marvel.MarvelTagNotify_MontageBreak
// 0x0000 (0x02F0 - 0x02F0)
class UMarvelTagNotify_MontageBreak final : public UAnimNotify_MontageTagNotify
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTagNotify_MontageBreak">();
	}
	static class UMarvelTagNotify_MontageBreak* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTagNotify_MontageBreak>();
	}
};

// Class Marvel.MarvelTagNotify_MontageEnd
// 0x0000 (0x02F0 - 0x02F0)
class UMarvelTagNotify_MontageEnd final : public UAnimNotify_MontageTagNotify
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTagNotify_MontageEnd">();
	}
	static class UMarvelTagNotify_MontageEnd* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTagNotify_MontageEnd>();
	}
};

// Class Marvel.MarvelCueNotify_TakeDamage
// 0x00B8 (0x0340 - 0x0288)
class UMarvelCueNotify_TakeDamage final : public UMarvelCueNotify_Static
{
public:
	bool                                          bIsUseImpactNormal;                                // 0x0288(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         FXSystemAsset;                                     // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     DecalMaterial;                                     // 0x0298(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFeedBack_Decal                        HitDecal;                                          // 0x02A0(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         DamagedAudioID;                                    // 0x02F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStaticCue_TakeDamageNiagaraInfo       HitNiagaraInfo;                                    // 0x0300(0x0040)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	void OnExecuteAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters) const;
	void OnExecuteFX(class AActor* MyTarget, const struct FGameplayCueParameters& Paramters) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_TakeDamage">();
	}
	static class UMarvelCueNotify_TakeDamage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCueNotify_TakeDamage>();
	}
};

// Class Marvel.CueData_NormalWeapon
// 0x0010 (0x0050 - 0x0040)
class UCueData_NormalWeapon final : public UCueData_Base
{
public:
	ECueData_WeaponType                           WeaponType;                                        // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0044(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueData_NormalWeapon">();
	}
	static class UCueData_NormalWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueData_NormalWeapon>();
	}
};

// Class Marvel.MarvelOutputLogMgr
// 0x0028 (0x0060 - 0x0038)
class UMarvelOutputLogMgr final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_38[0x28];                                      // 0x0038(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void AddGlobalExtraLogInfo(const class FName& Key, const class FString& Val);
	static void RemoveGlobalExtraLogInfo(const class FName& Key);

	void OnBattleEnd(const class FString& BattleID, bool IsDedicatedServer);
	void OnBattleStart(const class FString& BattleID, bool IsDedicatedServer);
	void RedirectToBattleLogDeviceFile(const class FString& BattleID);
	void ResetLogDeviceFile();

	class FString GetBattleLogFileName() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelOutputLogMgr">();
	}
	static class UMarvelOutputLogMgr* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelOutputLogMgr>();
	}
};

// Class Marvel.TaskAnimNotifyInterface
// 0x0000 (0x0030 - 0x0030)
class ITaskAnimNotifyInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TaskAnimNotifyInterface">();
	}
	static class ITaskAnimNotifyInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ITaskAnimNotifyInterface>();
	}
};

// Class Marvel.MarvelGameplayEffectAmmo1Regen
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectAmmo1Regen final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectAmmo1Regen">();
	}
	static class UMarvelGameplayEffectAmmo1Regen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectAmmo1Regen>();
	}
};

// Class Marvel.AnimNotify_TriggerWeaponEventBase
// 0x0030 (0x0070 - 0x0040)
class UAnimNotify_TriggerWeaponEventBase : public UAnimNotify
{
public:
	uint8                                         bUseModeEvent : 1;                                 // 0x0040(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EquipID;                                           // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeaponModeIndex;                                   // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WeaponEventTag;                                    // 0x004C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWeaponNotifyEvent                     WeaponEvent;                                       // 0x0058(0x0018)(BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_TriggerWeaponEventBase">();
	}
	static class UAnimNotify_TriggerWeaponEventBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_TriggerWeaponEventBase>();
	}
};

// Class Marvel.CueUserData_SurvivalTime
// 0x0020 (0x0060 - 0x0040)
class UCueUserData_SurvivalTime final : public UCueData_Base
{
public:
	ESurvivalTimeType                             SurvivalTimeType;                                  // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInstancedStruct                       EventBindInfo;                                     // 0x0048(0x0010)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         OffsetTime;                                        // 0x0058(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxJumpTime;                                       // 0x005C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueUserData_SurvivalTime">();
	}
	static class UCueUserData_SurvivalTime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueUserData_SurvivalTime>();
	}
};

// Class Marvel.AnimNotify_TriggerWeaponEvent
// 0x0000 (0x0070 - 0x0070)
class UAnimNotify_TriggerWeaponEvent : public UAnimNotify_TriggerWeaponEventBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_TriggerWeaponEvent">();
	}
	static class UAnimNotify_TriggerWeaponEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_TriggerWeaponEvent>();
	}
};

// Class Marvel.MarvelCueNotify_Scope
// 0x0008 (0x0D70 - 0x0D68)
class AMarvelCueNotify_Scope : public AMarvelCueNotify_TargetActor
{
public:
	int32                                         LaserAudioID;                                      // 0x0D68(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LaserAudibleDistance;                              // 0x0D6C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_Scope">();
	}
	static class AMarvelCueNotify_Scope* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_Scope>();
	}
};

// Class Marvel.AnimNotify_TriggerClientWeaponEvent
// 0x0000 (0x0070 - 0x0070)
class UAnimNotify_TriggerClientWeaponEvent final : public UAnimNotify_TriggerWeaponEventBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_TriggerClientWeaponEvent">();
	}
	static class UAnimNotify_TriggerClientWeaponEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_TriggerClientWeaponEvent>();
	}
};

// Class Marvel.MarvelUITextConfig
// 0x0050 (0x0080 - 0x0030)
class UMarvelUITextConfig final : public UObject
{
public:
	TMap<class FName, class FText>                TextMap;                                           // 0x0030(0x0050)(Edit, NativeAccessSpecifierPublic)

public:
	class FText GetText(const class FName& Key) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelUITextConfig">();
	}
	static class UMarvelUITextConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelUITextConfig>();
	}
};

// Class Marvel.CueUserData_FloatCurve
// 0x00A8 (0x00E8 - 0x0040)
class UCueUserData_FloatCurve final : public UCueData_Base
{
public:
	class UCurveFloat*                            FloatCurve;                                        // 0x0040(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCueEventSubscriberInfo_StandardCueEvent AutoActiveSubscriberData;                          // 0x0048(0x0038)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FInstancedStruct                       AutoActiveEventSubscriberInfo;                     // 0x0080(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bResetOnActive;                                    // 0x0090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResetOnRemove;                                    // 0x0091(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDeactivate;                                   // 0x0092(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_93[0x5];                                       // 0x0093(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCueEventSubscriberInfo_StandardCueEvent DeactivateSubscriberData;                          // 0x0098(0x0038)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	struct FInstancedStruct                       DeactivateEventSubscriberInfo;                     // 0x00D0(0x0010)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UCueDataCurveAction_Base*               CurveAction;                                       // 0x00E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueUserData_FloatCurve">();
	}
	static class UCueUserData_FloatCurve* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueUserData_FloatCurve>();
	}
};

// Class Marvel.MarvelGameInstanceSubsystem
// 0x0000 (0x0038 - 0x0038)
class UMarvelGameInstanceSubsystem : public UGameInstanceSubsystem
{
public:
	void OnDeinitialized();
	void OnInitialized();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameInstanceSubsystem">();
	}
	static class UMarvelGameInstanceSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameInstanceSubsystem>();
	}
};

// Class Marvel.MarvelNotTreatFallAbility
// 0x00E0 (0x12B8 - 0x11D8)
class UMarvelNotTreatFallAbility : public UMarvelAttributeFallBaseAbility
{
public:
	uint8                                         Pad_11D8[0x8];                                     // 0x11D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ApplyDamgeToPer;                                   // 0x11E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11E4[0x4];                                     // 0x11E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DamageSourceRequire;                               // 0x11E8(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  DamageTargetRequire;                               // 0x1250(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	void OnOwnerApplyDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelNotTreatFallAbility">();
	}
	static class UMarvelNotTreatFallAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelNotTreatFallAbility>();
	}
};

// Class Marvel.AnonymousModeSubsystem
// 0x0080 (0x00B8 - 0x0038)
class UAnonymousModeSubsystem : public UMarvelGameInstanceSubsystem
{
public:
	uint8                                         Pad_38[0x80];                                      // 0x0038(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAnonymousModeSubsystem* Get(const class UObject* WCO);
	static class FString GetAlternateName(const class UObject* WCO);
	static bool GetSocialFeatureRestriction(const class UObject* WCO);
	static bool GetSpectationAnonymousModeEnable(const class UObject* WCO);
	static EStreamerAnonymousMode GetStreamerAnonymousMode(const class UObject* WCO);
	static bool GetStreamerAnonymousOneself(const class UObject* WCO);
	static void SetAlternateName(const class UObject* WCO, const class FString& InName);
	static void SetSocialFeatureRestriction(const class UObject* WCO, bool bInEnable);
	static void SetSpectationAnonymousModeEnable(const class UObject* WCO, bool bInEnable);
	static void SetStreamerAnonymousMode(const class UObject* WCO, EStreamerAnonymousMode InMode);
	static void SetStreamerAnonymousOneself(const class UObject* WCO, bool bInEnable);
	static void ToggleSocialFeatureRestriction(const class UObject* WCO);
	static void ToggleSpectationAnonymousMode(const class UObject* WCO);

	bool GetStreamerAnonymousEnable();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnonymousModeSubsystem">();
	}
	static class UAnonymousModeSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnonymousModeSubsystem>();
	}
};

// Class Marvel.MediumDestructionDamage
// 0x0000 (0x0050 - 0x0050)
class UMediumDestructionDamage final : public UDestructionDamageType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MediumDestructionDamage">();
	}
	static class UMediumDestructionDamage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMediumDestructionDamage>();
	}
};

// Class Marvel.ANS_AkEvent
// 0x0090 (0x00C8 - 0x0038)
class UANS_AkEvent final : public UAnimNotifyState
{
public:
	class FName                                   AttachName;                                        // 0x0038(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAkAudioEvent>           Event;                                             // 0x0048(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplay;                                           // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkFadeInterpolation                          FadeoutType;                                       // 0x0079(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A[0x2];                                       // 0x007A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeoutTime;                                       // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetSelf;                                       // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetTeammate;                                   // 0x0081(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetEnemy;                                      // 0x0082(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_83[0x35];                                      // 0x0083(0x0035)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class USkeletalMeshComponent>  CachedMeshComp;                                    // 0x00B8(0x0008)(ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAkAudioEvent*                          AkAudioEvent;                                      // 0x00C0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnEventAssetLoaded() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ANS_AkEvent">();
	}
	static class UANS_AkEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UANS_AkEvent>();
	}
};

// Class Marvel.ANS_AkModelShow
// 0x0030 (0x0068 - 0x0038)
class UANS_AkModelShow final : public UAnimNotifyState
{
public:
	TSoftObjectPtr<class UAkAudioEvent>           AudioEvent;                                        // 0x0038(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnOwnerMeshDeactivate(class UActorComponent* MeshComp) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ANS_AkModelShow">();
	}
	static class UANS_AkModelShow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UANS_AkModelShow>();
	}
};

// Class Marvel.CameraInterp
// 0x00F0 (0x0128 - 0x0038)
class UCameraInterp final : public UPrimaryDataAsset
{
public:
	int32                                         CameraControlPriority;                             // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x3C];                                      // 0x003C(0x003C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          EnableInterpSpringArmLength;                       // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SpringArmTargetLength;                             // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmInterpInitSpeed;                          // 0x0080(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmInterpMaxSpeed;                           // 0x0084(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmInterpAcceleration;                       // 0x0088(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmRecoveryInterpInitSpeed;                  // 0x008C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmRecoveryInterpMaxSpeed;                   // 0x0090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmRecoveryInterpAcceleration;               // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableInterpSpringArmSocketOffset;                 // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRelativeToCharacter;                            // 0x0099(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A[0x6];                                       // 0x009A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SpringArmSocketOffset;                             // 0x00A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmSocketInterpSpeed;                        // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmSocketInterpRecoverySpeed;                // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LockDeadZoneToggle;                                // 0x00C0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableTranscomposer;                               // 0x00C1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableCameraLag;                                   // 0x00C2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C3[0x1];                                       // 0x00C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraLagSpeed;                                    // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraLagSpeedInterpSpeed;                         // 0x00C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraLagSpeedInterpRecoverSpeed;                  // 0x00CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraLagMaxDistance;                              // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraLagMaxDistanceInterpSpeed;                   // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraLagMaxDistanceInterpRecoverSpeed;            // 0x00D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableFOVInterp;                                   // 0x00DC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DD[0x3];                                       // 0x00DD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FOVTarget;                                         // 0x00E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOVInterpSpeed;                                    // 0x00E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FOVInterpRecoverSpeed;                             // 0x00E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableCameraCurves;                                // 0x00EC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ED[0x3];                                       // 0x00ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCameraCurveInfo                       CameraCurves;                                      // 0x00F0(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraInterp">();
	}
	static class UCameraInterp* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraInterp>();
	}
};

// Class Marvel.MarvelAnimNotify
// 0x0000 (0x0040 - 0x0040)
class UMarvelAnimNotify : public UAnimNotify
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAnimNotify">();
	}
	static class UMarvelAnimNotify* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAnimNotify>();
	}
};

// Class Marvel.AN_AkEventWorld
// 0x0028 (0x0068 - 0x0040)
class UAN_AkEventWorld final : public UMarvelAnimNotify
{
public:
	class FName                                   AttachSocket;                                      // 0x0040(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          Event;                                             // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 EventName;                                         // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AN_AkEventWorld">();
	}
	static class UAN_AkEventWorld* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAN_AkEventWorld>();
	}
};

// Class Marvel.CueNotify_Stealth
// 0x0170 (0x11A8 - 0x1038)
class ACueNotify_Stealth : public AMarvelCueNotify_Buff
{
public:
	class UMaterialInstance*                      StealthMaterial;                                   // 0x1038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<int32, class UMaterialInterface*>        SectionSpecifiedMaterials;                         // 0x1040(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FPortableMaterialSlotName              CloakSlotSuffix;                                   // 0x1090(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     SpecificCloakMaterial;                             // 0x10A8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   LokiGlowParameterName;                             // 0x10B0(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bStealthByShellComponent;                          // 0x10BC(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHiddenOriginalMesh;                               // 0x10BD(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPropagateToChildMesh;                             // 0x10BE(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRenderCustomDepthPass;                            // 0x10BF(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bStealthSpawnedActor;                              // 0x10C0(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10C1[0x7];                                     // 0x10C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TextureParamNames;                                 // 0x10C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	class FName                                   IgnoreComponentTag;                                // 0x10D8(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   HideComponentTag;                                  // 0x10E4(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   SetParamComponentTag;                              // 0x10F0(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RequireStaticMeshCompTag;                          // 0x10FC(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstance*                      AppearMI;                                          // 0x1108(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   AppearParameterName;                               // 0x1110(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AppearParameterMax;                                // 0x111C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ShowUpDuration;                                    // 0x1120(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBindSummonedEndTask;                              // 0x1124(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1125[0x3];                                     // 0x1125(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UMeshComponent*, struct FMeshMatrials> OriginalMaterials;                                 // 0x1128(0x0050)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UMarvelShellMeshComponent*              ShellComponent;                                    // 0x1178(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ACharacter*                             OwnerCharacter;                                    // 0x1180(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1188[0x18];                                    // 0x1188(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStencilModifier_EnableCustomDepth     EnableCustomDepthModifier;                         // 0x11A0(0x0008)(NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void OnChildComponentAttached(class USceneComponent* CurrentComponent, class USceneComponent* ChildComponent);
	void OnChildComponentDetached(class USceneComponent* CurrentComponent, class USceneComponent* ChildComponent);
	void OnMeshVisibilityChanged(bool bNewHidden);
	void OnOwnerExitStealth();
	void OnOwnerSkinLoaded(int32 SkinID);
	void OnSummonedEnd(class AActor* InActor);
	void RecoverOriginMesh();
	void RecoverStealthMaterials();
	void SetChildStaticMeshEffect(class ACharacter* InCharacter, bool bEnable);
	void SetComponentSectionsShow(class USkinnedMeshComponent* InComponent, bool bShow);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueNotify_Stealth">();
	}
	static class ACueNotify_Stealth* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACueNotify_Stealth>();
	}
};

// Class Marvel.Cue_Buff_1114
// 0x0020 (0x11C8 - 0x11A8)
class ACue_Buff_1114 final : public ACueNotify_Stealth
{
public:
	float                                         MeshBoundsExpansion;                               // 0x11A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoundsTopParmName;                                 // 0x11AC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoundsBottomParmName;                              // 0x11B8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C4[0x4];                                     // 0x11C4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FBox GetMeshComponentsBounds(const TArray<class UMeshComponent*>& InMeshComponents) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Buff_1114">();
	}
	static class ACue_Buff_1114* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Buff_1114>();
	}
};

// Class Marvel.AN_AkModelShow
// 0x0088 (0x00C8 - 0x0040)
class UAN_AkModelShow final : public UAnimNotify
{
public:
	TSoftObjectPtr<class UAkAudioEvent>           AudioEvent;                                        // 0x0040(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndWithMontage;                                   // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x57];                                      // 0x0071(0x0057)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnMontageEnd(class UAnimMontage* Montage, bool bInterrupted) const;
	void OnOwnerMeshDeactivate(class UActorComponent* Component) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AN_AkModelShow">();
	}
	static class UAN_AkModelShow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAN_AkModelShow>();
	}
};

// Class Marvel.AN_HeroVoice
// 0x00C8 (0x0108 - 0x0040)
class UAN_HeroVoice final : public UMarvelAnimNotify
{
public:
	EMarvelVoiceType                              VoiceType;                                         // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AbilityID;                                         // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAbilityVoiceStage                            Stage;                                             // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         VoiceID;                                           // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x18];                                      // 0x0050(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TWeakObjectPtr<class AActor>, int32>     CurrentPlayingIDs;                                 // 0x0068(0x0050)(BlueprintReadOnly, Transient, NativeAccessSpecifierPrivate)
	TMap<TWeakObjectPtr<class AActor>, int32>     CurrentVoiceIDs;                                   // 0x00B8(0x0050)(BlueprintReadOnly, Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AN_HeroVoice">();
	}
	static class UAN_HeroVoice* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAN_HeroVoice>();
	}
};

// Class Marvel.CueUserData_ModifyNiagaraAccordingToCharacter
// 0x0028 (0x0068 - 0x0040)
class UCueUserData_ModifyNiagaraAccordingToCharacter final : public UCueData_Base
{
public:
	ECueData_ScaleMethod                          ScaleMethod;                                       // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StandardCharacterName;                             // 0x0044(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HorizontalScaleName;                               // 0x0050(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   VerticalScaleName;                                 // 0x005C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueUserData_ModifyNiagaraAccordingToCharacter">();
	}
	static class UCueUserData_ModifyNiagaraAccordingToCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueUserData_ModifyNiagaraAccordingToCharacter>();
	}
};

// Class Marvel.AssetFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UAssetFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void CancelAssetsStreaming(struct FStreamableHandleWrapper& HandleWrapper);
	static void CheckoutAll(const TArray<class FName>& PackageNames, TArray<class FName>* FailedPackageNames, TArray<class FString>* OtherCheckedOutNames);
	static void GetAllPackageFullPathInDirectory(const TArray<class FString>& InDirectoryRelPathArray, const class FString& Prefix, TArray<class FString>* OutPackageFullPath);
	static void GetAllSKAssetFullPaths(TArray<class FString>* OutSKAssetFullPaths);
	static void GetPackageInfo(const class FString& PackageRelPath, class FString* HashString, bool bRelPath);
	static void GetPackageListInfo(const TArray<class FString>& PackageRelPaths, TArray<class FString>* HashStrings, bool bRelPath);
	static void K2_FlushAsyncLoading();
	static void K2_RecursiveGetDependencies(const TArray<class FName>& PackageName, TArray<class FName>* Dependencies);
	static class UObject* LoadAsset(const struct FSoftObjectPath& SoftObjectPath);
	static struct FStreamableHandleWrapper LoadAssetAsync(const struct FSoftObjectPath& SoftObjectPath, const TDelegate<void(class UObject* LoadedAsset)>& OnAssetLoaded, const bool HighPriority);
	static struct FStreamableHandleWrapper LoadAssetsAsync(const TArray<struct FSoftObjectPath>& SoftObjectPaths, const TDelegate<void(TArray<class UObject*>& LoadedAssets)>& OnAssetsLoaded, const bool HighPriority);
	static void MarkFileWrite(const class FString& FullFileName);
	static void RevertAllUnchanged(const TArray<class FName>& PackageNames);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AssetFunctionLibrary">();
	}
	static class UAssetFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssetFunctionLibrary>();
	}
};

// Class Marvel.AttachmentHelper
// 0x00C0 (0x01B0 - 0x00F0)
class UAttachmentHelper : public UActorComponent
{
public:
	TSet<class USceneComponent*>                  ComponentsListenForAttachAndDetach;                // 0x00F0(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TSet<class USceneComponent*>                  AffectedComponents;                                // 0x0140(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_190[0x20];                                     // 0x0190(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnComponentAttachedOrDetached(class USceneComponent* SrcComp, class USceneComponent* AttachedOrDetachedComp);
	void UpdateAffectedComponents();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AttachmentHelper">();
	}
	static class UAttachmentHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAttachmentHelper>();
	}
};

// Class Marvel.MarvelDistanceFieldLibrary
// 0x0000 (0x0030 - 0x0030)
class UMarvelDistanceFieldLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool IsPointInsideDistanceFieldVolumeData(const struct FVector& InLocalLocation, const struct FMarvelDistanceFieldVolumeData& SDFVolumeData);
	static bool IsPointInsideMeshComponent(const struct FVector& InWorldLocation, class UStaticMeshComponent* MeshComponent);
	static bool IsPointInsideStaticMesh(const struct FVector& InMeshLocation, class UStaticMesh* InStaticMesh);
	static bool IsVectorInStaticMesh(const struct FVector& VectorToTest, class UStaticMeshComponent* StaticMeshComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelDistanceFieldLibrary">();
	}
	static class UMarvelDistanceFieldLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelDistanceFieldLibrary>();
	}
};

// Class Marvel.Cue_Buff_1140
// 0x0000 (0x1038 - 0x1038)
class ACue_Buff_1140 final : public AMarvelCueNotify_Buff
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Buff_1140">();
	}
	static class ACue_Buff_1140* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Buff_1140>();
	}
};

// Class Marvel.AudioActorPool
// 0x0060 (0x04F0 - 0x0490)
class AAudioActorPool final : public AActor
{
public:
	struct FCachedOneShotActorStruct              OneShotActorCache;                                 // 0x0490(0x0060)(NativeAccessSpecifierPrivate)

public:
	void HandleForReplay();
	void OnAudioReplayStateChanged(EMarvelAudioReplayState InState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioActorPool">();
	}
	static class AAudioActorPool* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAudioActorPool>();
	}
};

// Class Marvel.AudioEchoVolume
// 0x0058 (0x04E8 - 0x0490)
class AAudioEchoVolume final : public AActor
{
public:
	class UAkAuxBus*                              AuxBus;                                            // 0x0490(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkComponent*                           AK;                                                // 0x0498(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UBoxComponent*>                  BoxComponents;                                     // 0x04A0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FBox                                   ActorBoundingBox;                                  // 0x04B0(0x0038)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioEchoVolume">();
	}
	static class AAudioEchoVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAudioEchoVolume>();
	}
};

// Class Marvel.MarvelHealthLinkAbility
// 0x0020 (0x1118 - 0x10F8)
class UMarvelHealthLinkAbility : public UMarvelEffectGameplayAbility
{
public:
	float                                         MinHealth;                                         // 0x10F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxLinkDamagePerTarget;                            // 0x10FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseLinkTargetManager;                             // 0x1100(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1101[0x7];                                     // 0x1101(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 BuffInstigator;                                    // 0x1108(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 BuffOwner;                                         // 0x1110(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	float HealthLink(const struct FGameplayEffectSpec& GameplayEffect, const float InBaseDamageValue);
	void OnTakeDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void RemoveGrantedEffect();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelHealthLinkAbility">();
	}
	static class UMarvelHealthLinkAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelHealthLinkAbility>();
	}
};

// Class Marvel.CueUserData_DelayActiveManager
// 0x0048 (0x0088 - 0x0040)
class UCueUserData_DelayActiveManager final : public UCueData_Base
{
public:
	float                                         DelayActiveTime;                                   // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDeactivate;                                   // 0x0044(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayDeactiveTime;                                 // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCueEventSubscriberInfo_StandardCueEvent DeactivateSubscriberData;                          // 0x0050(0x0038)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueUserData_DelayActiveManager">();
	}
	static class UCueUserData_DelayActiveManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueUserData_DelayActiveManager>();
	}
};

// Class Marvel.WorldSingletons
// 0x00B0 (0x00E0 - 0x0030)
class UWorldSingletons final : public UObject
{
public:
	TArray<class UObject*>                        Singletons;                                        // 0x0030(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, class UObject*>             SingletonNameMap;                                  // 0x0040(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_90[0x50];                                      // 0x0090(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UWorldSingletons* Get(const class UObject* WCO);
	static class UObject* StaticGetOrCreateSingleton(const class UObject* WCO, class UClass* InClass);
	static class UObject* StaticGetSingleton(const class UObject* WCO, class UClass* InClass);
	static class UObject* StaticGetSingletonByName(class UObject* WCO, const class FName& InName);
	static void StaticRegisterSingleton(class UObject* Singleton);

	void BindSingletonCreatedCallback(const class FName& SingletonName, TDelegate<void()> Callback);
	class UObject* GetOrCreateSingleton(class UClass* InClass);
	class UObject* GetSingleton(class UClass* InClass);
	class UObject* GetSingletonByName(const class FName& SingletonName);
	void RegisterSingleton(class UObject* SingletonObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WorldSingletons">();
	}
	static class UWorldSingletons* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldSingletons>();
	}
};

// Class Marvel.AudioEchoVolumeManager
// 0x0050 (0x0080 - 0x0030)
class UAudioEchoVolumeManager final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           UpdateTimer;                                       // 0x0040(0x0018)(Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           EchoVolumeTimer;                                   // 0x0058(0x0018)(Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_70[0x10];                                      // 0x0070(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTimerUpdateEchoAuxSend();
	void OnTimerUpdateEchoVolumes();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioEchoVolumeManager">();
	}
	static class UAudioEchoVolumeManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioEchoVolumeManager>();
	}
};

// Class Marvel.MarvelReplicationGraph
// 0x01D0 (0x09C0 - 0x07F0)
class UMarvelReplicationGraph final : public UReplicationGraph
{
public:
	TArray<class UClass*>                         NonSpatializedChildClasses;                        // 0x07E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UReplicationGraphNode_GridSpatialization2D* GridNode;                                          // 0x07F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelReplicationGraphNode_DynamicSpatialFrequency* DynamicSpatialNode;                                // 0x0800(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReplicationGraphNode_ActorList*        AlwaysRelevantNode;                                // 0x0808(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelReplicationGraphNode_CustomCullDistancePerPlayer* CustomCullDistancePerPlayerNode;                   // 0x0810(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelReplicationGraphNode_SameTeam*   SameTeamNode;                                      // 0x0818(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMarvelConnectionAlwaysRelevantNodePair> AlwaysRelevantForConnectionList;                   // 0x0820(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         ActorsWithoutNetConnection;                        // 0x0830(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class UMarvelReplicationGraphNode_UseOwnerRelevancy* UseOwnerRelevancyNode;                             // 0x0840(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelReplicationGraphNode_ForceNetUpdate* ForceNetUpdateNode;                                // 0x0848(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_850[0x8];                                      // 0x0850(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelReplicationGraphNode_AbilityActor* AbilityActorNode;                                  // 0x0858(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UClass*>                         ExplicitlySetClasses;                              // 0x0860(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TSet<class UClass*>                           VisitedClasses;                                    // 0x0870(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_8C0[0x100];                                    // 0x08C0(0x0100)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelReplicationGraph">();
	}
	static class UMarvelReplicationGraph* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelReplicationGraph>();
	}
};

// Class Marvel.AudioGlobalSubSystem
// 0x00C8 (0x0100 - 0x0038)
class UAudioGlobalSubSystem final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void(const class FString& Value)> OnAudioCultureChangedDelegate;                     // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Value)>    OnApplicationWindowActivatedDelegate;              // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UAkComponent* AkComponent, class UAkAudioEvent* Event, const class FString& EventName)> OnEventPostedDelegate;                             // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UObject*                                ShowLogHelper;                                     // 0x0070(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameInstance*                    MarvelGameInstance;                                // 0x0078(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UAudioWorldSubSystem*>           WorldSubSystems;                                   // 0x0080(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class UBreathAudioManager*                    BreathAudioManager;                                // 0x0090(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarvelMusicMgr*                        MarvelMusicMgr;                                    // 0x0098(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarvelHeroVoiceData*                   HeroVoiceData;                                     // 0x00A0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UHeroVoiceTableManager*                 VoiceTableManager;                                 // 0x00A8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarvelAudioAdmin*                      AudioAdmin;                                        // 0x00B0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B8[0x48];                                      // 0x00B8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FadeOutAllSounds(int32 FadeoutMS, EAkFadeInterpolation InterpType);
	bool IsMidiEnabled();
	void OnAkComponentRegistered(class UAkComponent* AkComponent);
	void OnAudioCultureChangeCompleted(bool bSucceed);
	void OnInputDeviceConnectionChanged(EInputDeviceConnectionState ConnectionState, const struct FPlatformUserId& UserId, const struct FInputDeviceId& DeviceID);
	void OnInputTypeChanged(Marvel::EInputType OldInputType, Marvel::EInputType NewInputType);
	void OnReplayStateChanged(EMarvelReplayState State);
	void RefreshControllerMotion();
	void ToggleMidiEnabled();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioGlobalSubSystem">();
	}
	static class UAudioGlobalSubSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioGlobalSubSystem>();
	}
};

// Class Marvel.CombineNiagaraObject
// 0x0030 (0x0060 - 0x0030)
class UCombineNiagaraObject final : public UObject
{
public:
	uint8                                         Pad_30[0x10];                                      // 0x0030(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OwnerActor;                                        // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         NiagaraSystem;                                     // 0x0048(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      CombineNiagaraComponent;                           // 0x0050(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCombineNiagaraActivated(class UActorComponent* Component, bool bReset);
	void OnOwnerActorEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CombineNiagaraObject">();
	}
	static class UCombineNiagaraObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCombineNiagaraObject>();
	}
};

// Class Marvel.AudioLevelFeedbackActor
// 0x0018 (0x04A8 - 0x0490)
class AAudioLevelFeedbackActor final : public AActor
{
public:
	class UAkAudioEvent*                          HitEvent;                                          // 0x0490(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HitActorName;                                      // 0x0498(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioLevelFeedbackActor">();
	}
	static class AAudioLevelFeedbackActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAudioLevelFeedbackActor>();
	}
};

// Class Marvel.MarvelReplicationGraphDebugActor
// 0x0000 (0x04A0 - 0x04A0)
class AMarvelReplicationGraphDebugActor final : public AReplicationGraphDebugActor
{
public:
	void ClientReceiveDebugProperty(const TArray<struct FRepConnectionDebugInfo>& InRepConnectionDebugList);
	void ClientShowMsg(const struct FRepCheckMsg& msg);
	void ServerCheckReplicate(int32 Flag, const class FString& ClassName);
	void ServerSetCullDistanceForClassType(ECullDistanceClassType ClassType, float CullDistance);
	void ServerSetDebugProperty(int32 Open, const class FString& Propertys);
	void ServerSetNetCullDistanceForClass(class UClass* Class_0, float CullDistance);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelReplicationGraphDebugActor">();
	}
	static class AMarvelReplicationGraphDebugActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelReplicationGraphDebugActor>();
	}
};

// Class Marvel.AudioLevelFeedbackManager
// 0x0050 (0x0080 - 0x0030)
class UAudioLevelFeedbackManager final : public UObject
{
public:
	TMap<class FString, TWeakObjectPtr<class AAudioLevelFeedbackActor>> FeedbackAudioActors;                               // 0x0030(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioLevelFeedbackManager">();
	}
	static class UAudioLevelFeedbackManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioLevelFeedbackManager>();
	}
};

// Class Marvel.Cue_Buff_1105
// 0x0008 (0x1040 - 0x1038)
class ACue_Buff_1105 final : public AMarvelCueNotify_Buff
{
public:
	class UNiagaraComponent*                      NS_Loop;                                           // 0x1038(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Buff_1105">();
	}
	static class ACue_Buff_1105* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Buff_1105>();
	}
};

// Class Marvel.AudioLevelMaterialVolume
// 0x0050 (0x04E0 - 0x0490)
class AAudioLevelMaterialVolume final : public AActor
{
public:
	class UPhysicalMaterial*                      PhysicalMaterial;                                  // 0x0490(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UBoxComponent*>                  BoxComponents;                                     // 0x0498(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FBox                                   ActorBoundingBox;                                  // 0x04A8(0x0038)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioLevelMaterialVolume">();
	}
	static class AAudioLevelMaterialVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAudioLevelMaterialVolume>();
	}
};

// Class Marvel.AudioLevelMaterialManager
// 0x00B8 (0x00E8 - 0x0030)
class UAudioLevelMaterialManager final : public UObject
{
public:
	TMap<TWeakObjectPtr<class AActor>, class FString> CachedActorMaterial;                               // 0x0030(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<TWeakObjectPtr<class UActorComponent>, class FString> CachedComponentMaterial;                           // 0x0080(0x0050)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class AActor*>                         MaterialVolumes;                                   // 0x00D0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x8];                                       // 0x00E0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioLevelMaterialManager">();
	}
	static class UAudioLevelMaterialManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioLevelMaterialManager>();
	}
};

// Class Marvel.MarvelPushOutComponent
// 0x0000 (0x00F0 - 0x00F0)
class UMarvelPushOutComponent final : public UActorComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPushOutComponent">();
	}
	static class UMarvelPushOutComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelPushOutComponent>();
	}
};

// Class Marvel.ConstructHelper
// 0x0000 (0x0030 - 0x0030)
class UConstructHelper final : public UObject
{
public:
	static class UAbilityStatisticsUnit* ConstructAbilityStatisticsUnit(class UBattleStatisticsManager* BattleStatisticsManager, class UHeroStatisticsUnit* HeroStatistics, int32 AbilityID);
	static struct FMarvelBattleLogBuffUnit ConstructBuffUnit(const struct FBuffInfoContext& BuffInfoContext, float EndTimestamp);
	static struct FMarvelBattleLogDamageUnit ConstructDamageUnit(float Value, int32 SourceBattleSide, int32 SourceUID, int32 SourceHeroID, int32 SourceActorType, int32 TargetBattleSide, int32 TargetUID, int32 TargetHeroID, int32 TargetActorType, const class FString& SessionID, int32 AbilityID, float Timestamp);
	static class UGlobalStatisticsUnit* ConstructGlobalStatisticsUnit(class UBattleStatisticsManager* BattleStatisticsManager);
	static class UHeroStatisticsUnit* ConstructHeroStatisticsUnit(class UBattleStatisticsManager* BattleStatisticsManager, int32 PlayerUID, int32 SelectedHeroID, int32 CurrentHeroID, int32 HeroUID);
	static struct FMarvelKillInfoUnit ConstructKillInfoUnit(int32 FinalInstigatorUID, int32 FinalTargetUID, int32 FinalInstigatorHeroID, int32 FinalTargetHeroID, int32 KillSourceType, int32 KillTargetType, int32 ConsecutiveKillCount, int32 KillType, float KillTime);
	static class UModifierSelector* ConstructModifierSelector(class UBattleStatisticsManager* BattleStatisticsManager);
	static class UPlayerStatisticsUnit* ConstructPlayerStatisticsUnit(class UBattleStatisticsManager* BattleStatisticsManager, int32 PlayerUID);
	static class USummonedStatisticsUnit* ConstructSummonedStatisticsUnit(class UBattleStatisticsManager* BattleStatisticsManager, int32 SummonedID, const class FString& SummonedUniqueID);
	static class USustainInfoUnit* ConstructSustainInfoUnit(class UBattleStatisticsManager* BattleStatisticsManager);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ConstructHelper">();
	}
	static class UConstructHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConstructHelper>();
	}
};

// Class Marvel.AudioStaticMeshActor
// 0x0008 (0x04A8 - 0x04A0)
class AAudioStaticMeshActor final : public AStaticMeshActor
{
public:
	class UAkAudioEvent*                          HitEvent;                                          // 0x04A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioStaticMeshActor">();
	}
	static class AAudioStaticMeshActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAudioStaticMeshActor>();
	}
};

// Class Marvel.AudioWorldSubSystem
// 0x02D8 (0x0310 - 0x0038)
class UAudioWorldSubSystem final : public UWorldSubsystem
{
public:
	TMulticastInlineDelegate<void(int32 Value)>   OnAudioTypeEnabledChanged;                         // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UHeroAudioBuffManager*                  HeroAudioBuffManger;                               // 0x0058(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UProcedureAudioManager*                 CachedProcedureManager;                            // 0x0060(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarvelAkReflectService*                CachedReflectService;                              // 0x0068(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AMarvelObstructionMgr*                  CachedObstructionMgr;                              // 0x0070(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAudioGlobalSubSystem*                  CachedGlobalSystem;                                // 0x0078(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarvelSpatialVolumePriorityMgr*        CachedPriorityVolumeMgr;                           // 0x0080(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarvelSpatialVolumeManager*            CachedSpatialVolumeManager;                        // 0x0088(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UHeroAudioStateManager*                 CachedHeroAudioStateManager;                       // 0x0098(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAudioLevelMaterialManager*             CachedLevelMaterialManager;                        // 0x00A0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAudioEchoVolumeManager*                CachedEchoVolumeManager;                           // 0x00A8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAudioLevelFeedbackManager*             CachedLevelFeedbackManager;                        // 0x00B0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B8[0x60];                                      // 0x00B8(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int64, struct FMarvelAbilityAudioPack>   CachedAbilityAudioPack;                            // 0x0118(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<int64, struct FMarvelAbilityAudioPack>   CachedAbilityAudioPackNotValid;                    // 0x0168(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<int32, TSoftObjectPtr<class UDataTable>> CachedAbilityAudioDataTable;                       // 0x01B8(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<TWeakObjectPtr<class UObject>, class UAkComponent*> CachedPcmAkComponent;                              // 0x0208(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_258[0xA4];                                     // 0x0258(0x00A4)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  CurrentViewTarget;                                 // 0x02FC(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class AActor>                  LastViewTarget;                                    // 0x0304(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FadeOutWorldSounds(class UObject* WCO, int32 FadeoutMS, EAkFadeInterpolation InterpType);
	bool IsAudioInWhiteList(EMarvelAudioType AudioType, const class FString& InKey);
	bool IsWorldAudioTypeEnable(EMarvelAudioType AudioType);
	int32 MarvelPostAkEvent(class UAkComponent* AkComponent, class UAkAudioEvent* AkEvent, int32 CallbackMask, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback, const class FString& in_EventName, EMarvelAudioType AudioType, int32 AudioTypeMask);
	int32 MarvelPostMidiEvent(class UAkComponent* AkComponent, class UAkAudioEvent* AkEvent, int32 CallbackMask, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback, const class FString& in_EventName, EMarvelAudioType AudioType, float TimeBetweenShoot, int32 MaxShoot);
	void MarvelStopMidiEvent(class UAkComponent* AkComponent);
	void OnReplayStateChanged(EMarvelReplayState Value);
	void OnSpectationModeChanged(ESpectationMode Value);
	void OnViewTargetChanged(class AActor* NewViewTarget);
	void OnViewTargetChangedNextFrame();
	void SetAudioWhiteList(EMarvelAudioType AudioType, const TArray<class FString>& Whitelist);
	void SetWorldAudioTypeEnable(EMarvelAudioType AudioType, bool Enable);
	void SetWorldReverbDisable(bool bInDisabled);

	bool IsAkReflectEnabled() const;
	bool IsAudioTypeEnabled(EMarvelAudioType AudioType) const;
	bool IsReverbEnabled() const;
	bool IsSpatialListenerEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioWorldSubSystem">();
	}
	static class UAudioWorldSubSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioWorldSubSystem>();
	}
};

// Class Marvel.MarvelGridMeshComponent
// 0x0050 (0x08D0 - 0x0880)
class UMarvelGridMeshComponent final : public UMarvelGenMeshComponent
{
public:
	struct FMarvelGridPoints                      Points;                                            // 0x0880(0x0050)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGridMeshComponent">();
	}
	static class UMarvelGridMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGridMeshComponent>();
	}
};

// Class Marvel.CueDataCurveAction_MaterialScalar
// 0x0010 (0x0058 - 0x0048)
class UCueDataCurveAction_MaterialScalar final : public UCueDataCurveAction_Base
{
public:
	class FName                                   ParameterName;                                     // 0x0048(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueDataCurveAction_MaterialScalar">();
	}
	static class UCueDataCurveAction_MaterialScalar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueDataCurveAction_MaterialScalar>();
	}
};

// Class Marvel.Widget_ReceivedBuffs
// 0x0000 (0x03B8 - 0x03B8)
class UWidget_ReceivedBuffs final : public UUserWidget
{
public:
	static class UWidget_ReceivedBuffs* Get(class UObject* WCO);

	int32 Add(const struct FWidgetStyle_ReceivedBuff& Style);
	void Remove(int32 Handle);
	void SetBuffIconFlickering(int32 Handle, bool bFlickering);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_ReceivedBuffs">();
	}
	static class UWidget_ReceivedBuffs* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_ReceivedBuffs>();
	}
};

// Class Marvel.AutomationLibrary
// 0x0000 (0x0030 - 0x0030)
class UAutomationLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void CloseWindowsAndShutdown(const class FString& ShutdownReason);
	static class FString ConvertGamePathToSystemPath(const class FString& InBaseDir);
	static class UMarvelAbilityItem* GetAbilityAssetById(int32 InAbilityId);
	static const struct FMarvelAbilityTable GetAbilityByID(int32 AbilityID);
	static struct FGameplayTag GetAbilitySculptTag(int32 InAbilityId);
	static class FString GetAbilitySystemBaseDir(const int32& InHeroID);
	static const TArray<struct FMarvelAbilityTable> GetAllAbilities();
	static const TArray<struct FMarvelHeroTable> GetAllHeroes();
	static class FString GetAssetClass(const struct FAssetData& InAssetData);
	static class FString GetAssetClassString(const struct FAssetData& InAssetData);
	static bool GetAssetDataByNameAndClass(const TArray<class FName>& InPackageNames, const TArray<struct FTopLevelAssetPath>& InCLasses, TArray<struct FAssetData>* OutAssetData, bool bIsRecursive);
	static bool GetAssetDataByNames(TArray<class FName>* InNames, TArray<struct FAssetData>* OutAssetData, bool bIsRecursive);
	static bool GetAssetDataByPath(const TArray<class FName>& InPaths, TArray<struct FAssetData>* OutAssetData, const TArray<struct FTopLevelAssetPath>& InCLassPaths, bool bIsRecursive);
	static TArray<class FString> GetBehaviorTreeAssetsByPath(const class FString& Path);
	static TArray<class FString> GetBlueprintAssetsByPath(const class FString& Path);
	static class FString GetCharBaseDir(const int32& InHeroID);
	static TArray<class FString> GetCurrentLevelsPackageNameBySuffix(const class FString& Suffix, ESearchCase SearchCase);
	static const struct FMarvelHeroTable GetHeroByID(int32 HeroID);
	static bool GetHeroIdList(TArray<int32>* OutHeroList);
	static class FString GetObjectPathString(const struct FAssetData& InAssetData);
	static TArray<class UObject*> GetObjectsInCurrentLevel(const class UClass* Class_0);
	static TArray<class UObject*> GetObjectsInLevelsCommandlet(const class FString& LevelName, class UClass* Class_0);
	static TArray<class UObject*> GetObjectsInLevelsEditor(const class FString& LevelName, class UClass* Class_0);
	static int32 GetObjMemRefs(class UObject* Obj, TArray<class UObject*>* OutReferredToObjects);
	static bool GetRefsByPath(const class FString& InPath, TArray<class FName>* OutRefNames);
	static struct FSoftObjectPath GetSoftObjectPath(const struct FAssetData& InAssetData);
	static TArray<class FString> GetSubPaths(const class FString& InBaseDir);
	static class UMarvelAbilitySystemCom* GetTestingMarvelASC(class AMarvelPlayerController* InController, const class UObject* InObjectContext);
	static class AMarvelPlayerController* GetTestingMarvelPC(const class UObject* InObjectContext);
	static class UWorld* GetTestWorld(const class FString& MapRef);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AutomationLibrary">();
	}
	static class UAutomationLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAutomationLibrary>();
	}
};

// Class Marvel.MarvelLevelAnimBaseActor
// 0x0000 (0x0490 - 0x0490)
class AMarvelLevelAnimBaseActor : public AActor
{
public:
	void ResetForLevelSwitch();

	class USkeletalMeshComponent* GetMesh() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelLevelAnimBaseActor">();
	}
	static class AMarvelLevelAnimBaseActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelLevelAnimBaseActor>();
	}
};

// Class Marvel.BackTraceCombineEffectExample
// 0x0050 (0x04E0 - 0x0490)
class ABackTraceCombineEffectExample final : public AActor
{
public:
	TArray<class AActor*>                         Fragments;                                         // 0x0490(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         CombineEffect;                                     // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A8[0x38];                                     // 0x04A8(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BackTraceCombineEffectExample">();
	}
	static class ABackTraceCombineEffectExample* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABackTraceCombineEffectExample>();
	}
};

// Class Marvel.CueDataManagerComponent
// 0x0030 (0x0120 - 0x00F0)
class UCueDataManagerComponent final : public UActorComponent
{
public:
	TArray<class UCueDataProcessor_Base*>         CueDataProcessorArray;                             // 0x00F0(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class UCueDataProcessor_Base>> DynamicCueDataProcessorArray;                      // 0x0100(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class UCueUserDataProcessor_Tickable>> TickCueDataProcessorArray;                         // 0x0110(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	void OnOwnerCueRecycle();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueDataManagerComponent">();
	}
	static class UCueDataManagerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueDataManagerComponent>();
	}
};

// Class Marvel.BackTrackPointAudioActor
// 0x0000 (0x0490 - 0x0490)
class ABackTrackPointAudioActor final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BackTrackPointAudioActor">();
	}
	static class ABackTrackPointAudioActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABackTrackPointAudioActor>();
	}
};

// Class Marvel.MarvelPhysicsHandleComponent
// 0x0010 (0x0540 - 0x0530)
class UMarvelPhysicsHandleComponent final : public UPhysicsHandleComponent
{
public:
	bool                                          bCorrectLocation;                                  // 0x0530(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_531[0xF];                                      // 0x0531(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPhysicsHandleComponent">();
	}
	static class UMarvelPhysicsHandleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelPhysicsHandleComponent>();
	}
};

// Class Marvel.LifeInfo_TargetActor_Params
// 0x0040 (0x0088 - 0x0048)
class ULifeInfo_TargetActor_Params final : public ULifeInfo_Params
{
public:
	uint8                                         Pad_48[0x40];                                      // 0x0048(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTargetEndAgentTask(class AActor* TargetActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LifeInfo_TargetActor_Params">();
	}
	static class ULifeInfo_TargetActor_Params* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULifeInfo_TargetActor_Params>();
	}
};

// Class Marvel.MarvelSpatialAudioVolume
// 0x00B8 (0x0598 - 0x04E0)
class AMarvelSpatialAudioVolume : public AAkSpatialAudioVolume
{
public:
	uint8                                         Pad_4E0[0x18];                                     // 0x04E0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	ESpatialVolumePrefabType                      PrefabType;                                        // 0x04F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F9[0x7];                                      // 0x04F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          NoiseAudioEvent;                                   // 0x0500(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RtpcValueInside;                                   // 0x0508(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseFadeTime;                                     // 0x050C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RtpcVolumeNoise;                                   // 0x0510(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNoiseUsePriority;                                 // 0x0514(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetNoiseCoveredRtpc;                              // 0x0515(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAssociatedDestruction;                            // 0x0516(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_517[0x1];                                      // 0x0517(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DestructionActorTag;                               // 0x0518(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VolumeDisableThreshold;                            // 0x0528(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52C[0x4];                                      // 0x052C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           VolumeAkComponent;                                 // 0x0530(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarvelSpatialVolumePriorityMgr*        CachedPriorityMgr;                                 // 0x0538(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAudioWorldSubSystem*                   CachedAudioSystem;                                 // 0x0540(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         VolumeBrokenDegree;                                // 0x0548(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_54C[0x4C];                                     // 0x054C(0x004C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDelayUpdateTimer();
	void OnOverlapBegin(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnOverlapEnd(class AActor* OverlappedActor, class AActor* OtherActor);
	void SetBrokenDegree(float InBrokenDegree);
	void SetVolumeEnabled(bool bInEnable);

	float GetBrokenDegree() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSpatialAudioVolume">();
	}
	static class AMarvelSpatialAudioVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelSpatialAudioVolume>();
	}
};

// Class Marvel.SummonedAIController
// 0x0000 (0x05E8 - 0x05E8)
class ASummonedAIController : public AAIController
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SummonedAIController">();
	}
	static class ASummonedAIController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASummonedAIController>();
	}
};

// Class Marvel.Cue_Buff_1157
// 0x0000 (0x1038 - 0x1038)
class ACue_Buff_1157 final : public AMarvelCueNotify_Buff
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Buff_1157">();
	}
	static class ACue_Buff_1157* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Buff_1157>();
	}
};

// Class Marvel.BackTrackSpatialAudioVolume
// 0x0000 (0x0598 - 0x0598)
class ABackTrackSpatialAudioVolume final : public AMarvelSpatialAudioVolume
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BackTrackSpatialAudioVolume">();
	}
	static class ABackTrackSpatialAudioVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABackTrackSpatialAudioVolume>();
	}
};

// Class Marvel.AffectBackTrackActor
// 0x0088 (0x05E8 - 0x0560)
class AAffectBackTrackActor final : public AAffectStaticMeshBaseActor
{
public:
	int32                                         CurrentNumberOfHits;                               // 0x0560(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CurrentDamageReceived;                             // 0x0564(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UStaticMeshComponent*>           AttachSMCArray;                                    // 0x0568(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TMap<int32, struct FChaosAchieveDamageData>   CharToDamageData;                                  // 0x0578(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_5C8[0x10];                                     // 0x05C8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsFracture;                                       // 0x05D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D9[0x7];                                      // 0x05D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class ABackTrackManagerActor*                 BackTrackMgrActor;                                 // 0x05E0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void TriggerHitIndicatorMulticast(class AMarvelBaseCharacter* Character, const struct FHitResult& HitInfo);
	void UpdateNewActorFractureRPC(bool bNewFracture);

	bool IsAlive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AffectBackTrackActor">();
	}
	static class AAffectBackTrackActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAffectBackTrackActor>();
	}
};

// Class Marvel.MarvelTriggerEffect_Vibration
// 0x0008 (0x0050 - 0x0048)
class UMarvelTriggerEffect_Vibration final : public UMarvelTriggerEffect_Base
{
public:
	uint8                                         position;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Frequency;                                         // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Amplitude;                                         // 0x004A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B[0x5];                                       // 0x004B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTriggerEffect_Vibration">();
	}
	static class UMarvelTriggerEffect_Vibration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTriggerEffect_Vibration>();
	}
};

// Class Marvel.BackTrackManagerActor
// 0x05B8 (0x0A48 - 0x0490)
class ABackTrackManagerActor final : public AActor
{
public:
	TMap<class AActor*, struct FBackTrackLinkRecordData> LinkActorAppearRecordMap;                          // 0x0490(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class AActor*, struct FBackTrackLinkRecordData> LinkActorDisappearRecordMap;                       // 0x04E0(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, struct FBackTrackLinkRecordData> LinkTagActorAppearRecordMap;                       // 0x0530(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, struct FBackTrackLinkRecordData> LinkTagActorDisappearRecordMap;                    // 0x0580(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, TWeakObjectPtr<class AChaosClientDesActor>> ChaosTagActorPtrMap;                               // 0x05D0(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FName, TWeakObjectPtr<class AEnvironmentStaticActorBase>> EnvActorPtrMap;                                    // 0x0620(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	TMap<class FName, TWeakObjectPtr<class AActor>> NormalTagActorMap;                                 // 0x0670(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(const struct FChaosAchieveDamageMap& DamageDataMap)> BackTrackCollapsedEvent;                           // 0x06C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnArriveBackTrackDelegate;                         // 0x06D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBeginBackTrackAnimDelegate;                      // 0x06E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnChaosAnimEndDelegate;                            // 0x06F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnFinishBackTrackDelegate;                         // 0x0700(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         TotalDamageReceived;                               // 0x0710(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_714[0x4];                                      // 0x0714(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           AffectActorTagArray;                               // 0x0718(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	bool                                          bIsUseCollapseField;                               // 0x0728(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_729[0x3];                                      // 0x0729(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GC1DelayPlayTime;                                  // 0x072C(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GC1InitCollisionPreset;                            // 0x0730(0x000C)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GC1ActiveCollisionPreset;                          // 0x073C(0x000C)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBackChaosDesActorStruct               DestructionActorCacheStruct1;                      // 0x0748(0x0030)(Edit, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	class FName                                   GC2InitCollisionPreset;                            // 0x0778(0x000C)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GC2ActiveCollisionPreset;                          // 0x0784(0x000C)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FBackChaosDesActorStruct>       DestructionActorCache2Array;                       // 0x0790(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<struct FBackTrackFadeMaterialParam>    FadeMaterialParam1;                                // 0x07A0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBackTrackFadeMaterialParam>    FadeMaterialParam2;                                // 0x07B0(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         FadeTickFrame;                                     // 0x07C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalFadeTime;                                     // 0x07C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FEBackTrackMatParam>            GC1PreAnimParams;                                  // 0x07C8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEBackTrackMatParam>            GC1FinishAnimParams;                               // 0x07D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEBackTrackMatParam>            GC2PreAnimParams;                                  // 0x07E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FEBackTrackMatParam>            GC2FinishAnimParams;                               // 0x07F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         DisappearLinkActorArray1;                          // 0x0808(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<class FName>                           DisappearLinkActorTagArray1;                       // 0x0818(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         DisappearLinkActorArray2;                          // 0x0828(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<class FName>                           DisappearLinkActorTagArray2;                       // 0x0838(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         AppearLinkActorArray1;                             // 0x0848(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<class FName>                           AppearLinkActorTagArray1;                          // 0x0858(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         AppearLinkActorArray2;                             // 0x0868(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TArray<class FName>                           AppearLinkActorTagArray2;                          // 0x0878(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, NativeAccessSpecifierPublic)
	TMap<int32, class UMaterialInstance*>         OriginMaterialInstances;                           // 0x0888(0x0050)(NativeAccessSpecifierPublic)
	bool                                          bIsFracture;                                       // 0x08D8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D9[0x3];                                      // 0x08D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FractureSynTimeStamp;                              // 0x08DC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E0[0x68];                                     // 0x08E0(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class AAffectBackTrackActor>> AffectActorPtrArray;                               // 0x0948(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FBackTrackAffectActorHitHistory        AffectActorHitHistory;                             // 0x0958(0x0050)(Protected, NativeAccessSpecifierProtected)
	TSet<class UBoxComponent*>                    BackTrackBoxComponents;                            // 0x09A8(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_9F8[0x4];                                      // 0x09F8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBackTrackSyncInitState                InitRepData;                                       // 0x09FC(0x000C)(Net, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bHasEnterMatTransitionStage;                       // 0x0A08(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A09[0x3];                                      // 0x0A09(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SpatialAudioVolumeLinkTag;                         // 0x0A0C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class ABackTrackSpatialAudioVolume*>   SpatialAudioActors;                                // 0x0A18(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   PointAudioLinkTag;                                 // 0x0A28(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A34[0x4];                                      // 0x0A34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ABackTrackPointAudioActor*>      PointAudioActors;                                  // 0x0A38(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void CallClientEndAnimStage();
	bool CanShowAffectActorHitCue(class AAffectBackTrackActor* InHitActor, const struct FHitResult& InHit, class AActor* Source);
	void ClientFadeTickFunc();
	void DealLinkActorPtrAction(class AActor* ActorPtr, ELinkAct Action);
	void DealLinkTagActorPtrAction(const class FName& ActorTag, ELinkAct Action);
	void DoLinkActorsAppear(const TArray<class AActor*>& ActorArray, const TArray<class FName>& LinkTagArray);
	void DoLinkActorsDisappear(const TArray<class AActor*>& ActorArray, const TArray<class FName>& LinkTagArray);
	void EndFromGCTraceTrigger();
	void FinishAffectState();
	void FinishAffectState_External();
	void FinishAffectState_NextFrame();
	void JudgeAffectActorsDamageThreshold();
	void OnLikeMapLoaded();
	void OnRep_InitRepData();
	void ResetDamageDataRPC();
	void ResetLinkActorState();
	void ServerDelayFunc();
	void UpdateNewManagerFractureRPC(bool bNewFracture, float ServerFractureSynTimeStamp);

	const TArray<TWeakObjectPtr<class AAffectBackTrackActor>> GetAffectActorArray() const;
	float GetAnimGCCountdown() const;
	EBackTrackStage GetCurrentStage() const;
	void TriggerGCBreakAllParticles() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BackTrackManagerActor">();
	}
	static class ABackTrackManagerActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABackTrackManagerActor>();
	}
};

// Class Marvel.BaseTableFuncLibrary
// 0x0000 (0x0030 - 0x0030)
class UBaseTableFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FStreamableHandleWrapper AsyncLoadTables(const TArray<class FString>& Keywords, const TDelegate<void(TArray<class UObject*>& LoadedAssets)>& OnLoaded);
	static bool CheckAddDataTable(const class FString& InTableName, class FName RowName);
	static class UDataTable* GetTable(const class FName& InTableName);
	static bool GetTablePaths(const TArray<class FString>& Keywords, TArray<struct FSoftObjectPath>* OutTables);
	static bool GetTablePathsByHeroID(int32 HeroID, const TArray<class FString>& Keywords, TArray<struct FSoftObjectPath>* OutTables);
	static class UDataTable* LoadTable(const TArray<class FString>& Keywords, const bool bLoadIfNotExist);
	static bool LoadTables(const TArray<class FString>& Keywords, TArray<class UDataTable*>* OutTables, const bool bLoadIfNotExist);
	static class FName ToTableName(const int32 HeroID, const class FString& Keywords);
	static bool UpdateDataTable(const class FString& InTableName, class FName RowName, const class FString& TableExec);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BaseTableFuncLibrary">();
	}
	static class UBaseTableFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBaseTableFuncLibrary>();
	}
};

// Class Marvel.MarvelPlayerMappableKeySettings
// 0x0010 (0x00F0 - 0x00E0)
class UMarvelPlayerMappableKeySettings final : public UPlayerMappableKeySettings
{
public:
	TArray<class UInputAction*>                   IgnoreActionList;                                  // 0x00E0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPlayerMappableKeySettings">();
	}
	static class UMarvelPlayerMappableKeySettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelPlayerMappableKeySettings>();
	}
};

// Class Marvel.CueData_UpdateNiagaraLocParam
// 0x0040 (0x0080 - 0x0040)
class UCueData_UpdateNiagaraLocParam final : public UCueData_Base
{
public:
	class FName                                   ParamName;                                         // 0x0040(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EConnectionTargetType                         TargetType;                                        // 0x004C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D[0x3];                                       // 0x004D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LinkedSocketName;                                  // 0x0050(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LinkedOffset;                                      // 0x0060(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateCompRotation;                               // 0x0078(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowLocDebugSphere;                               // 0x0079(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverseLink;                                      // 0x007A(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7B[0x5];                                       // 0x007B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueData_UpdateNiagaraLocParam">();
	}
	static class UCueData_UpdateNiagaraLocParam* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueData_UpdateNiagaraLocParam>();
	}
};

// Class Marvel.MarvelReplayFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UMarvelReplayFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class AActor* FindMirrorActor(class AActor* Actor);
	static float GetDemoCurrentTimeSeconds(const class UObject* WorldContextObject);
	static EDemoPlayType GetDemoPlayType(const class UObject* WorldContextObject);
	static float GetDemoRecordTimeSeconds(const class UObject* WorldContextObject);
	static float GetDemoServerTimeSeconds(const class UObject* WorldContextObject);
	static int32 GetReplayProgress(const class UObject* WorldContextObject, float StartTime, float EndTime);
	static bool IsDeathReplay(const class UObject* WorldContextObject);
	static bool IsEpicReplay(const class UObject* WorldContextObject);
	static bool IsInDeathReplayWorld(const class UObject* WorldContextObject);
	static bool IsInReplayWorld(const class UObject* WorldContextObject);
	static bool IsInTransition(const class UObject* WorldContextObject);
	static bool IsLeagueObReplay(const class UObject* WorldContextObject);
	static bool IsOutsiderObReplay(const class UObject* WorldContextObject);
	static bool IsPlayingReplay(const class UObject* WorldContextObject);
	static bool IsRoomObReplay(const class UObject* WorldContextObject);
	static bool IsVideoReplay(const class UObject* WorldContextObject);
	static void SetDeathReplayEnable(const bool bEnable);
	static void ToggleSaveCheckPointInTransition(const class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelReplayFunctionLibrary">();
	}
	static class UMarvelReplayFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelReplayFunctionLibrary>();
	}
};

// Class Marvel.BattlePanelViewTargetHelper
// 0x0000 (0x0030 - 0x0030)
class UBattlePanelViewTargetHelper final : public UBlueprintFunctionLibrary
{
public:
	static void BindBattlePanelTargetActor(struct FDeclarationHolder& Holder, class UObject* WCO, TDelegate<void(class AActor* InActor)> InDelegate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattlePanelViewTargetHelper">();
	}
	static class UBattlePanelViewTargetHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattlePanelViewTargetHelper>();
	}
};

// Class Marvel.MarvelGameplay_CylinderTraceType
// 0x0000 (0x0030 - 0x0030)
class UMarvelGameplay_CylinderTraceType final : public UMarvelGameplay_LineTraceType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplay_CylinderTraceType">();
	}
	static class UMarvelGameplay_CylinderTraceType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplay_CylinderTraceType>();
	}
};

// Class Marvel.BattleSettlementConfig
// 0x0108 (0x0140 - 0x0038)
class UBattleSettlementConfig final : public UDataAsset
{
public:
	float                                         AttackAssistantDuration;                           // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefendAssistantDuration;                           // 0x003C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerspectiveAssistantDuration;                      // 0x0040(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JoinKillDuration;                                  // 0x0044(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TerrainKillDuration;                               // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SoloTerrainKillDuration;                           // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PerspectiveEffectID;                               // 0x0050(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BePerspectiveEffectID;                             // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AttackAssistantTag;                                // 0x0058(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DefendAssistantTag;                                // 0x0064(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PositiveEffectType;                                // 0x0070(0x0068)(Edit, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  NegativeEffectType;                                // 0x00D8(0x0068)(Edit, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattleSettlementConfig">();
	}
	static class UBattleSettlementConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattleSettlementConfig>();
	}
};

// Class Marvel.BattleSettlementManager
// 0x0150 (0x0188 - 0x0038)
class UBattleSettlementManager final : public UWorldSubsystem
{
public:
	class UMarvelGameplayEventManager*            GlobalEventManager;                                // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelGameState*                       MarvelGameState;                                   // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class USettlementInfo*>           HeroSettlementInfos;                               // 0x0048(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, class USettlementInfo*>   SummonedSettlementInfos;                           // 0x0098(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, class UPlayerSurvivalData*>       PlayerSurvivalDatas;                               // 0x00E8(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<struct FActiveGameplayEffectHandle, int32> EffectHandleToUIDs;                                // 0x0138(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UBattleSettlementManager* Get(class UObject* WCO);
	static void SpecialAssistant(class AActor* Killer, class AActor* Target, const struct FAttributeModifierHandle& ModifierParameterHandle);

	void BindEvents();
	void OnActorBuffApplied(class AActor* InInstigator, class AActor* InCauser, class AActor* InTarget, const struct FGameplayEffectSpecStackHandle& InEffectSpecHandle, const struct FActiveGameplayEffectHandle& EffectHandle);
	void OnActorBuffRemoved(class AActor* InInstigator, class AActor* InCauser, class AActor* InTarget, const struct FGameplayEffectSpecStackHandle& InEffectSpecHandle, const struct FActiveGameplayEffectHandle& EffectHandle);
	void OnActorDeath(class AActor* Killer, class AActor* Target, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void OnActorDeathSettlement(class AActor* InInstigator, class AActor* InTarget, const struct FAttributeModifierHandle& ModifierParameterHandle, struct FCharacterDeathInfo* DeathInfo);
	void OnActorPostTakeDamage(class AActor* InInstigator, class AActor* InTarget, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void OnActorReborn(class AActor* InInstigator, class AActor* InTarget);
	void OnActorTakeHealth(class AActor* InInstigator, class AActor* InTarget, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void OnAddPlayerState(class AMarvelPlayerState* PlayerState);
	void OnDelPlayerState(class AMarvelPlayerState* PlayerState);
	void OnGameStateSet(class AGameStateBase* GameStateBase);
	void OnSingleSurvivalPlayerKill(int32 KillerUID, int32 TargetUID, struct FMarvelSingleSurvivalDamageUnit* SingleSurvivalDamageUnit);
	void OnSummonedBegin(class AActor* SourceActor, class UMarvelGameplayAbility* SourceAbility, class AActor* Summoned, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnTargetActorRecycleAgentTask(class AActor* Source, class UMarvelGameplayAbility* SourceAbility, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, const struct FEndAgentTaskInfo& EndAgentTaskInfo);
	void UnbindEvents();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattleSettlementManager">();
	}
	static class UBattleSettlementManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattleSettlementManager>();
	}
};

// Class Marvel.BattleStatisticsHelper
// 0x0000 (0x0030 - 0x0030)
class UBattleStatisticsHelper final : public UObject
{
public:
	static bool CheckForceKillKill(const struct FAttributeModifierParameter& ModifierParameter);
	static class AActor* CheckIsPhantom(class AActor* Instigator, class AActor* FinalInstigator);
	static bool CheckTerrainKill(const struct FAttributeModifierParameter& ModifierParameter);
	static bool CheckWizardKill(const struct FAttributeModifierParameter& ModifierParameter);
	static float ComputeFireDistance(class UObject* WCO, class AActor* Source, int32 AbilityID);
	static int32 ComputeKillReason(int32 KillerType, int32 VictimType, const struct FAttributeModifierParameter& ModifierParameter);
	static int32 ComputeKillType(const struct FAttributeModifierParameter& ModifierParameter, int32 KillTargetType, int32 KillSourceType);
	static struct FMarvelSingleSurvivalDamageUnit ConstructSingleSurvivalDamageUnit(const TArray<struct FSingleSurvivalDamageInfo>& SingleSurvivalTakeDamage, const TArray<struct FSingleSurvivalDamageInfo>& SingleSurvivalInstigateDamage, int32 TotalHeal, struct FMarvelSingleSurvivalDamageUnit* DamageUnit);
	static bool DumpGlobalData(class UBattleStatisticsManager* WCO);
	static int32 GetAbilityType(int32 AbilityID);
	static struct FWeaponAmmoInfoContext GetAmmoInfoContext(class UObject* WCO, class AActor* Instigator, class AActor* Target, int32 AbilityID, bool bIsHit, bool bIsCritHit);
	static struct FBattleInfoContext GetBattleInfoContext(class UObject* WCO, class AActor* Instigator, class AActor* Target, const struct FAttributeModifierParameter& ModifierParameter, bool bNeedFireDistance);
	static EBattleSide GetBattleSide(class AActor* Target);
	static struct FBuffInfoContext GetBuffInfoContext(class UObject* WCO, class AActor* Instigator, class AActor* Causer, class AActor* Target, const struct FGameplayEffectSpec& EffectSpec);
	static int32 GetCareerHeroId(class UObject* WCO, int32 PlayerUID, int32 HeroID);
	static int32 GetConsecutiveKill(class UObject* WCO, int32 UID, int32 HeroID);
	static class FString GetCurrentPartName(class UObject* WCO);
	static int32 GetDamageType(class AActor* Instigator, class AActor* Target, int32 AbilityID, const struct FAttributeModifierParameter& ModifierParameter);
	static int32 GetDamageTypeV2(class UObject* WCO, const struct FBattleInfoContext& BattleInfoContext);
	static float GetDestructionDamageDuration(class UBattleStatisticsManager* Manager);
	static struct FDestructionDamageInfoContext GetDestructionDamageInfoContext(class UObject* WCO, class AActor* Destruction, float FinalDamage, class AActor* DamageCauser);
	static float GetDestructionPercentageDuration(class UBattleStatisticsManager* Manager);
	static bool GetEnableStatistics(class UObject* WCO);
	static float GetEscortLogDuration(class UBattleStatisticsManager* Manager);
	static float GetEscortTraceDuration(class UBattleStatisticsManager* Manager);
	static class AActor* GetFinalInstigator(class AActor* Instigator);
	static float GetFireDistanceInterval(class UBattleStatisticsManager* Manager);
	static float GetFireDistanceMaxDistance(class UBattleStatisticsManager* Manager);
	static float GetFireDistanceMaxTime(class UBattleStatisticsManager* Manager);
	static class FString GetFormatTime();
	static int32 GetHealType(class AActor* Instigator, class AActor* Target, int32 AbilityID, const struct FAttributeModifierParameter& ModifierParameter);
	static int32 GetHealTypeV2(const struct FBattleInfoContext& BattleInfoContext);
	static TArray<int32> GetHeroAbilityList(int32 HeroID);
	static class UHeroStatisticsUnit* GetHeroStatisticsUnit(class UBattleStatisticsManager* WCO, class AMarvelBaseCharacter* Player);
	static class FString GetHeroType(int32 HeroID);
	static float GetHitDistanceInterval(class UBattleStatisticsManager* Manager);
	static struct FKillInfoContext GetKillInfoContext(class UObject* WCO, class AActor* Instigator, class AActor* Target, const struct FAttributeModifierParameter& ModifierParameter, bool bNeedFireDistance);
	static int32 GetKillTargetType(class AActor* Target);
	static EMarvelKillReasonFlags GetKillType(const struct FAttributeModifierParameter& Modifier);
	static float GetLastBlowDistanceInterval(class UBattleStatisticsManager* Manager);
	static int32 GetMaskByType(int32 Type, int32 Value);
	static float GetModifierIdDamage(class UBattleStatisticsManager* WCO, const class FString& ModifierID);
	static struct FGameplayTag GetNormalSummonedTag(class UBattleStatisticsManager* Manager);
	static class FString GetPredictionKey(class AActor* Actor);
	static void GetRealAbilityInfo(int32* AbilityID, class FString* SessionID, const struct FAttributeModifierParameter& ModifierParameter);
	static struct FGameplayTag GetShieldSummonedTag(class UBattleStatisticsManager* Manager);
	static int32 GetSumMinMax(const TArray<int32>& List);
	static EMarvelActorType GetTargetActorKey(int32 TargetActorType);
	static int32 GetTrueHeroID(class UObject* WCO, int32 PlayerUID, int32 HeroID);
	static TArray<int32> GetUidHeroID(class AActor* Target);
	static bool IsEnemyByUid(class UBattleStatisticsManager* WCO, int32 Uid1, int32 Uid2);
	static bool IsFilterAbility(class AActor* Source, int32 CurrentHeroID, int32 SelectHeroID, int32 AbilityID);
	static bool IsIgnoreAbility(class UBattleStatisticsManager* Manager, int32 AbilityID);
	static bool IsLastBlowKillHero(const struct FBattleInfoContext& BattleInfoContext, int32 UID, int32 HeroID);
	static bool IsNotRedirectHeroId(int32 HeroID);
	static bool IsPassiveSkill(const struct FMarvelAbilityTable& AbilityTable);
	static bool IsShieldSummoned(class AActor* Actor);
	static bool IsTerrainRelativeBuff(int32 BuffID);
	static bool IsUltimateAbility(int32 AbilityID);
	static bool IsValidPlayer(class AActor* Actor);
	static bool KillTypeIsEnemyKill(const struct FKillInfoContext& KillInfoContext);
	static int32 NeedFilterAbility(int32 CurrentHeroID, int32 SelectHeroID);
	static bool NeedStatDamage(int32 DamageTargetType);
	static void PushBattleInfoContextToSelector(class UBattleStatisticsManager* WCO, const struct FBattleInfoContext& BattleInfoContext);
	static struct FBattleInfoContext ReplaceBattleInfoContextSource(class UObject* WCO, const struct FBattleInfoContext& InBattleInfoContext, const struct FMarvelBattleLogDamageUnit& DamageUnit);
	static struct FBattleInfoContext ReplaceBattleInfoContextTarget(class UObject* WCO, const struct FBattleInfoContext& InBattleInfoContext, const struct FMarvelBattleLogDamageUnit& DamageUnit);
	static void SetEnableStatistics(class UObject* WCO, bool Enable);
	static bool ShouldBuffStatHit(const struct FBuffInfoContext& BuffInfoContext);
	static bool ShouldDamageStatHit(const struct FBattleInfoContext& BattleInfoContext);
	static bool ShouldHealStatHit(const struct FBattleInfoContext& BattleInfoContext);
	static bool TargetActorIsProjectile(ETargetActorType TargetActorType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattleStatisticsHelper">();
	}
	static class UBattleStatisticsHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattleStatisticsHelper>();
	}
};

// Class Marvel.MarvelTriggerEffect_MultiFeedback
// 0x0010 (0x0058 - 0x0048)
class UMarvelTriggerEffect_MultiFeedback final : public UMarvelTriggerEffect_Base
{
public:
	TArray<uint8>                                 Strengths;                                         // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTriggerEffect_MultiFeedback">();
	}
	static class UMarvelTriggerEffect_MultiFeedback* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTriggerEffect_MultiFeedback>();
	}
};

// Class Marvel.BattleStatisticsManager
// 0x0158 (0x03E8 - 0x0290)
class UBattleStatisticsManager : public UBattleStatisticsManagerBase
{
public:
	TSubclassOf<class UPlayerStatisticsUnit>      PlayerStatisticsUnitClass;                         // 0x0290(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UHeroStatisticsUnit>        HeroStatisticsUnitClass;                           // 0x0298(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAbilityStatisticsUnit>     AbilityStatisticsUnitClass;                        // 0x02A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UModifierSelector>          ModifierSelectorClass;                             // 0x02A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USummonedStatisticsUnit>    SummonedStatisticsUnitClass;                       // 0x02B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGlobalStatisticsUnit>      GlobalStatisticsUnitClass;                         // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTargetActorParentManager*              TargetActorParentManager;                          // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class UPlayerStatisticsUnit*>     PlayerStatistics;                                  // 0x02C8(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, class UPresetDestructionStatisticsUnit*> PresetDestructionStatistics;                       // 0x0318(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	class UGlobalStatisticsUnit*                  GlobalStatistics;                                  // 0x0368(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayEventManager*            GlobalEventManager;                                // 0x0370(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UModifierSelector*                      ModifierSelector;                                  // 0x0378(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelGameState*                       MarvelGameState;                                   // 0x0380(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameInstance*                    MarvelGameInstance;                                // 0x0388(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_390[0x50];                                     // 0x0390(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BattleStartTime;                                   // 0x03E0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3E4[0x4];                                      // 0x03E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetAllChaosDestructionActor();
	void GetAllPresetDestructionActor();
	void OccupyOrCompetitionPlayerAdd(int32 UID);
	void OccupyOrCompetitionPlayerRemove(int32 UID);
	void OnActorAbilityAdsorbResult(class AActor* SourceActor, int32 InAbilityId, const struct FHitResult& HitResult, bool IsHit);
	void OnActorAbilityBreak(class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility);
	void OnActorAbilityMissile(class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility);
	void OnActorActivateAbility(class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility);
	void OnActorArmorChanged(class AActor* Target, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnActorBuffApplied(class AActor* InInstigator, class AActor* InCauser, class AActor* InTarget, const struct FGameplayEffectSpecStackHandle& InEffectSpecHandle, const struct FActiveGameplayEffectHandle& EffectHandle);
	void OnActorBuffRemoved(class AActor* InInstigator, class AActor* InCauser, class AActor* InTarget, const struct FGameplayEffectSpecStackHandle& InEffectSpecHandle, const struct FActiveGameplayEffectHandle& EffectHandle);
	void OnActorChangeTo(class AActor* Source);
	void OnActorDeath(class AActor* Source, class AActor* Target, const struct FAttributeModifierHandle& ParamHandle, const struct FGlobalEventExtraData& ExtraData);
	void OnActorEndAbility(class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility);
	void OnActorEnergyChanged(class AActor* Source, const struct FAttributeModifierParameter& ModifierParameter, const struct FGlobalEventExtraData& ExtraData);
	void OnActorEnergyEmpty(class AActor* Source, const struct FAttributeModifierParameter& ModifierParameter, const struct FGlobalEventExtraData& ExtraData);
	void OnActorEnergyFull(class AActor* Source, const struct FAttributeModifierParameter& ModifierParameter, const struct FGlobalEventExtraData& ExtraData);
	void OnActorNoTreatShieldChanged(class AActor* Source, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FNoTreatShieldChangeEventExtraData& ExtraData);
	void OnActorPostForceChanged(class AActor* SourceActor, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, ETargetActorType TargetActorType, int32 AbilityID);
	void OnActorPreActivateAbility(class AActor* Source, int32 AbilityID, const class FString& SessionID, class UMarvelGameplayAbility* SourceAbility);
	void OnActorPreDeath(class AActor* Source, class AActor* Target, const struct FAttributeModifierHandle& ParamHandle, const struct FGlobalEventExtraData& ExtraData);
	void OnActorPreForceChanged(class AActor* SourceActor, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, ETargetActorType TargetActorType, int32 AbilityID);
	void OnActorReborn(class AActor* InInstigator, class AActor* InTarget);
	void OnActorSculptChanged(class AActor* Source, int32 SculptID);
	void OnActorTakeDamage(class AActor* InInstigator, class AActor* InTarget, const struct FAttributeModifierParameter& ModifierParameter, const struct FGlobalEventExtraData& ExtraData);
	void OnActorTakeHealth(class AActor* InInstigator, class AActor* InTarget, const struct FAttributeModifierParameter& ModifierParameter, const struct FGlobalEventExtraData& ExtraData);
	void OnActorWeaponAmmoUse(class AActor* Source, class AActor* Target, int32 AbilityID, bool bHit, bool bIsCritHit, const struct FGlobalEventExtraData& ExtraData);
	void OnAddPlayerState(class AMarvelPlayerState* PlayerState);
	void OnBuffInstigateExtraAttributeChange(class AActor* InstigateBuffActor, class AActor* TakeBuffActor, class AActor* Target, struct FBuffExtraAttributeData* BuffData);
	void OnDelPlayerState(class AMarvelPlayerState* PlayerState);
	void OnDestroyCharacter(class AMarvelPlayerState* PlayerState, class AMarvelBaseCharacter* Character);
	void OnDestructionTakeDamage(class AActor* Destruction, float FinalDamage, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FDestructionExtraInfo& DestructionExtraInfo);
	void OnInitialize();
	void OnNotTreatActorArmorChanged(class AActor* Source, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FNoTreatShieldChangeEventExtraData& ExtraData);
	void OnPossesNewCharacter(class AMarvelPlayerState* PlayerState, class AMarvelBaseCharacter* Character);
	void OnPresetDestructionLevelChanged(class AActor* Destruction, const class FString& LastLevel, const class FString& CurrentLevel);
	void OnProjectileBegin(class AActor* SourceActor, class UMarvelGameplayAbility* SourceAbility, class AActor* Projectile, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnScopeBegin(class AActor* SourceActor, class UMarvelGameplayAbility* SourceAbility, class AActor* Scope, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnShutdown();
	void OnSummonedBegin(class AActor* SourceActor, class UMarvelGameplayAbility* SourceAbility, class AActor* Summoned, const struct FMarvelTargetActorGenerateInfo& GenerateInfo);
	void OnTargetActorRecycleAgentTask(class AActor* Source, class UMarvelGameplayAbility* SourceAbility, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, const struct FEndAgentTaskInfo& EndAgentTaskInfo);
	void PyOnActorDeathForLevel(int32 KillerTeam, int32 VictimTeam, int32 KillReason);
	void PyOnActorTakeDamage(class AActor* InInstigator, class AActor* InTarget, const struct FAttributeModifierParameter& ModifierParameter, const struct FGlobalEventExtraData& ExtraData);
	void PyOnActorTakeHealth(class AActor* InInstigator, class AActor* InTarget, const struct FAttributeModifierParameter& ModifierParameter, const struct FGlobalEventExtraData& ExtraData);
	void PyOnAddPlayerState(class AMarvelPlayerState* PlayerState);
	void PyOnDelPlayerState(class AMarvelPlayerState* PlayerState);
	void PyOnDestructionTakeDamage(const struct FDestructionDamageInfoContext& Context, const struct FAttributeModifierParameter& ModifierParameter, const struct FDestructionExtraInfo& DestructionExtraInfo);
	void PyOnPresetDestructionLevelChanged(class UPresetDestructionStatisticsUnit* StatisticsUnit, float AchieveTime, bool bRootLevel);
	void PyOnRecordFirstEnterBattle(struct FFirstEnterBattleInfo* BattleInfo);
	void PyOnRecordHeroDeathInfo(struct FHeroDeathInfoLog* DeathInfo);
	void RecordHeroDeathInfo(const struct FBattleInfoContext& BattleInfoContext, const struct FCharacterDeathInfo& DeathInfo);
	void SetDownFightEvent();
	void SetDownGameStateEvent();
	void SetDownGlobalEvent();
	void SetUpFightEvent();
	void SetUpGameStateEvent();
	void SetUpGlobalEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattleStatisticsManager">();
	}
	static class UBattleStatisticsManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattleStatisticsManager>();
	}
};

// Class Marvel.OutSpectationModeValue
// 0x0008 (0x0038 - 0x0030)
class UOutSpectationModeValue final : public UOutSpecialValueType
{
public:
	ESpectationMode                               OutSpectationMode;                                 // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OutSpectationModeValue">();
	}
	static class UOutSpectationModeValue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOutSpectationModeValue>();
	}
};

// Class Marvel.BattleStatisticsUnitTestFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UBattleStatisticsUnitTestFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ClearStatistics(class UObject* WCO);
	static struct FAttributeModifierParameter MakeDamageAttributeModifierParameter(class UObject* WCO, class AActor* Causer, class AActor* Instigator, class AActor* Target, float DeltaValue, float PreSpecDeltaPer, const class FString& ActivateKey, int32 SourceAbilityID);
	static struct FAttributeModifierParameter MakeEnergyAttributeModifierParameter(class UObject* WCO, class AActor* Causer, class AActor* Instigator, class AActor* Target, float DeltaValue, float PreSpecDeltaPer, const class FString& ActivateKey, int32 SourceAbilityID);
	static struct FAttributeModifierParameter MakeHealAttributeModifierParameter(class UObject* WCO, class AActor* Causer, class AActor* Instigator, class AActor* Target, float DeltaValue, float PreSpecDeltaPer, const class FString& ActivateKey, int32 SourceAbilityID);
	static class UMarvelGameplayAbility* MakeMarvelGameplayAbility(class UObject* WCO, int32 SourceAbilityID);
	static void PumpMessageBox(class UObject* WCO, const class FString& Message);
	static void SetHeroInfo(class UObject* WCO, class AMarvelBaseCharacter* Hero, int32 UID, int32 HeroID, int32 SelectedHeroID);
	static struct FAttributeModifierParameter SetModifierCauserActorInfo(class UObject* WCO, const struct FAttributeModifierParameter& ModifierParameter, int32 TargetActorID, const class FString& TargetActorUniqueID, ETargetActorType ActorType, const class FString& ModifierID, const class FString& TraceUniqueID);
	static class AMarvelBaseCharacter* SpawnHero(class UObject* WCO, int32 TeamID, int32 UID, int32 HeroID, const struct FTransform& Transform, class AActor* Instigator, class AActor* Owner);
	static class UMarvelAbilityTask_Projectile* SpawnProjectile(class UObject* WCO, class UGameplayAbility* OwnAbility, int32 ProjectileID, const struct FMarvelAbilitySocketInfo& SocketInfo, class AActor* Instigator, class AActor* Causer);
	static class UMarvelAbilityTask_Projectile* SpawnScope(class UObject* WCO, class UGameplayAbility* OwnAbility, int32 ScopeId, const struct FMarvelAbilitySocketInfo& SocketInfo, class AActor* Instigator, class AActor* Causer);
	static class UMarvelAbilityTask_SpawnSummoner* SpawnSummoned(class UObject* WCO, class UGameplayAbility* OwnAbility, int32 SummonedID, const struct FMarvelAbilitySocketInfo& SocketInfo, class AActor* Instigator, class AActor* Causer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BattleStatisticsUnitTestFunctionLibrary">();
	}
	static class UBattleStatisticsUnitTestFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBattleStatisticsUnitTestFunctionLibrary>();
	}
};

// Class Marvel.BindingProxy_Weapon
// 0x0070 (0x00A0 - 0x0030)
class UBindingProxy_Weapon final : public UObject
{
public:
	class AShootingWeapon*                        Weapon;                                            // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_38[0x68];                                      // 0x0038(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnOwnerTagUpdated(const struct FGameplayTag& Tag, bool bExist);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BindingProxy_Weapon">();
	}
	static class UBindingProxy_Weapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBindingProxy_Weapon>();
	}
};

// Class Marvel.BirthBase
// 0x0280 (0x0760 - 0x04E0)
class ABirthBase : public AGameplayActorBase
{
public:
	uint8                                         Pad_4E0[0x20];                                     // 0x04E0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UTeamComponent*                         TeamComponent;                                     // 0x0500(0x0008)(Edit, ExportObject, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AStaticMeshActor*>               SpawnRoomMeshes;                                   // 0x0508(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AStaticMeshActor*>               TransitionRoomMeshes;                              // 0x0518(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         StartRadius;                                       // 0x0528(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_52C[0x4];                                      // 0x052C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 BirthbaseAllyBuffs;                                // 0x0530(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 BirthbaseEnemyBuffs;                               // 0x0540(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 TransitionRoomAllyBuffs;                           // 0x0550(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 TransitionRoomEnemyBuffs;                          // 0x0560(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bOverlapDetection;                                 // 0x0570(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_571[0x3];                                      // 0x0571(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StartCount;                                        // 0x0574(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHiddenMeshRuntime;                                // 0x0578(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_579[0x7];                                      // 0x0579(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FBirthBaseAudioEventsParam>     AudioParams;                                       // 0x0580(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAkComponent*                           AkComponent;                                       // 0x0590(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelScopeCheckComponent*              SpawnRoomCheckComp;                                // 0x0598(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelScopeCheckComponent*              TransitionRoomCheckComp;                           // 0x05A0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ABirthBase* InBirthBase, class AActor* Actor, bool PassIn)> OnActorSRoomPassDispatcher;                        // 0x05A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ABirthBase* InBirthBase, class ULevelScopeCheckComponent* ScopeCheck, class AActor* Actor, bool PassIn)> OnActorSRoomPass;                                  // 0x05B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ABirthBase* InBirthBase, class AActor* Actor, bool PassIn)> OnActorTRoomPassDispatcher;                        // 0x05C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class APlayerStart*                           MyPlayerStart;                                     // 0x05D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        PlayerStartBillboardComponent;                     // 0x05E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class AStaticMeshActor*, struct FMarvelDistanceFieldVolumeData> SpawnMeshDistanceFieldData;                        // 0x05E8(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<class AStaticMeshActor*, struct FMarvelDistanceFieldVolumeData> TransitionMeshDistanceFieldData;                   // 0x0638(0x0050)(Protected, NativeAccessSpecifierProtected)
	TArray<class ULevelSpawnRoomCheckComponent*>  SpawnRoomCheckComps;                               // 0x0688(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TSet<class ACharacter*>                       InsideCharacterSet;                                // 0x0698(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TSet<class ACharacter*>                       TransitionRoomInsideCharacterSet;                  // 0x06E8(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class ABirthDoor*>                     NativeBirthDoors;                                  // 0x0738(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_748[0x18];                                     // 0x0748(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<class ABirthDoor*> GetAllBirthDoors();
	bool IsActorInsideBirthBase(class AActor* InActor);
	bool IsPlayerInsideBirthBase(class AMarvelPlayerState* MarvelPS);
	bool IsPointInsideBirthBase(const struct FVector& InLocation);
	bool IsPointInsideTransitionRoom(const struct FVector& InLocation);
	void OnPlayerEnterSpawn(class ULevelScopeCheckComponent* ScopeCheck, class AActor* Character);
	void OnPlayerEnterTransition(class AActor* Character);
	void OnPlayerExitSpawn(class ULevelScopeCheckComponent* ScopeCheck, class AActor* Character);
	void OnPlayerExitTransition(class AActor* Character);
	void PlayAudioEvents();
	void RewindForReplayPy();
	void SetSpawnRoomMeshesHidden();
	void Update(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BirthBase">();
	}
	static class ABirthBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ABirthBase>();
	}
};

// Class Marvel.BlockPlayerBoxComponent
// 0x0000 (0x08A0 - 0x08A0)
class UBlockPlayerBoxComponent final : public UBoxComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlockPlayerBoxComponent">();
	}
	static class UBlockPlayerBoxComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlockPlayerBoxComponent>();
	}
};

// Class Marvel.BlueprintArchetypeVisitor
// 0x0008 (0x0038 - 0x0030)
class UBlueprintArchetypeVisitor final : public UObject
{
public:
	bool                                          bCompileBeforeSave;                                // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckoutBeforeSave;                               // 0x0031(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void FindArchetypesByClass(class UClass* ParentClass, const struct FTopLevelAssetPath& PackagePath);
	void SaveArchetype(class UObject* Asset, class UObject* Archetype);
	bool VisitArchetype(class UObject* Archetype);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlueprintArchetypeVisitor">();
	}
	static class UBlueprintArchetypeVisitor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlueprintArchetypeVisitor>();
	}
};

// Class Marvel.BreathAudioInterface
// 0x0000 (0x0030 - 0x0030)
class IBreathAudioInterface final : public IInterface
{
public:
	void OnBreathTagUpdated(const struct FGameplayTag& TagUpdated, bool bTagExists);
	void OnCharVoiceItemLoaded(class AActor* InActor);
	void UpdateLoopBreathSwitch();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BreathAudioInterface">();
	}
	static class IBreathAudioInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IBreathAudioInterface>();
	}
};

// Class Marvel.BuffStatisticsController
// 0x00B0 (0x00E0 - 0x0030)
class UBuffStatisticsController final : public UObject
{
public:
	class UActionLogController*                   LogController;                                     // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayEventManager*            GlobalEventManager;                                // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FActiveGameplayEffectHandle, struct FBuffLogStatistics> BuffToStatistics;                                  // 0x0040(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, struct FActiveGameplayEffectHandle> ModifierIDToHandle;                                // 0x0090(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void BindEvents();
	void Initialize(class UActionLogController* InLogController);
	void OnActorBuffApplied(class AActor* InInstigator, class AActor* InCauser, class AActor* InTarget, const struct FGameplayEffectSpecStackHandle& InEffectSpecHandle, const struct FActiveGameplayEffectHandle& EffectHandle);
	void OnActorBuffRemoved(class AActor* InInstigator, class AActor* InCauser, class AActor* InTarget, const struct FGameplayEffectSpecStackHandle& InEffectSpecHandle, const struct FActiveGameplayEffectHandle& EffectHandle);
	void OnActorNotTreatArmorChanged(class AActor* Source, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FNoTreatShieldChangeEventExtraData& ExtraData);
	void OnActorNotTreatShieldChanged(class AActor* Source, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FNoTreatShieldChangeEventExtraData& ExtraData);
	void OnBuffExtraAttributeChange(class AActor* InstigateBuffActor, class AActor* TakeBuffActor, class AActor* Target, const struct FBuffExtraAttributeData& BuffData);
	void Shutdown();
	void UnbindEvents();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuffStatisticsController">();
	}
	static class UBuffStatisticsController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuffStatisticsController>();
	}
};

// Class Marvel.MarvelMusicData
// 0x00D8 (0x0110 - 0x0038)
class UMarvelMusicData : public UPrimaryDataAsset
{
public:
	TSubclassOf<class UMarvelMusicMgr>            MarvelMusicMgrClass;                               // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableNewMusic;                                   // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class UMarvelMusicItem*>  MusicsMapping;                                     // 0x0048(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FString, struct FMusicStateLevelMapping> MapStateMapping;                                   // 0x0098(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAkStateValue*                          StateAttack;                                       // 0x00E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkStateValue*                          StateDefend;                                       // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkStateValue*                          StateResultVictory;                                // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkStateValue*                          StateResultDefeat;                                 // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkStateValue*                          StateResultDraw;                                   // 0x0108(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelMusicData">();
	}
	static class UMarvelMusicData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelMusicData>();
	}
};

// Class Marvel.MarvelGuideKeyOrderAsset
// 0x00A0 (0x00D8 - 0x0038)
class UMarvelGuideKeyOrderAsset final : public UDataAsset
{
public:
	TMap<struct FKey, float>                      KeyPriMap;                                         // 0x0038(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<ESpecialUIKey, float>                    SpecialKeyPriMap;                                  // 0x0088(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGuideKeyOrderAsset">();
	}
	static class UMarvelGuideKeyOrderAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGuideKeyOrderAsset>();
	}
};

// Class Marvel.CameraFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UCameraFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddCommonPostProcessMaterialsToCamera(class UObject* WCO, class UCameraComponent* TargetCameraComponent);
	static int32 AddSpecifiedPostProcessMaterialInCommonToCamera(class UObject* WCO, class UCameraComponent* TargetCameraComponent, class FName PPName);
	static class UMaterialInstanceDynamic* EnablePostProcessing(class UCameraComponent* TargetCameraComponent, class FName PPName, bool bEnable);
	static int32 GetPostProcessMaterialIndexByName(class UCameraComponent* TargetCameraComponent, class FName PPName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CameraFunctionLibrary">();
	}
	static class UCameraFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCameraFunctionLibrary>();
	}
};

// Class Marvel.CareerFuncLibrary
// 0x0000 (0x0030 - 0x0030)
class UCareerFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static int32 AsyncLoadingHeroAsset(class UObject* WCO, const TArray<int32>& HeroIDList, const TDelegate<void(int32 HeroID, uint8 State, uint8 MaskState)>& LoadingEvent);
	static class FString GetEpicMoment(class UObject* WCO);
	static struct FEpicMomentActionInfo GetPlayerEpicMoment(class UObject* WCO, int32 InUID);
	static void ReplicateEpicDataToClient(class UObject* WCO);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CareerFuncLibrary">();
	}
	static class UCareerFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCareerFuncLibrary>();
	}
};

// Class Marvel.MarvelCueNotify_Grabbed_Actor
// 0x0000 (0x0CC8 - 0x0CC8)
class AMarvelCueNotify_Grabbed_Actor final : public AMarvelCueNotify_Actor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_Grabbed_Actor">();
	}
	static class AMarvelCueNotify_Grabbed_Actor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_Grabbed_Actor>();
	}
};

// Class Marvel.CareerWorldSubsystem
// 0x01C8 (0x0200 - 0x0038)
class UCareerWorldSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_38[0x1];                                       // 0x0038(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsEpicMomentOn;                                   // 0x0039(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UEpicMomentBaseAction*>     EpicMomentActions;                                 // 0x0040(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_90[0x140];                                     // 0x0090(0x0140)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AMarvelGameState>        GameState;                                         // 0x01D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ULevelEventSubsystem*                   LevelEventSubsystem;                               // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCareerGameData*                        CareerGameData;                                    // 0x01E0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E8[0x18];                                     // 0x01E8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UCareerWorldSubsystem* Get(class UObject* WCO);

	void EnableDataReplication(bool bEnable);
	TArray<struct FEpicMomentActionInfo> GetBrilliantMoments(int32 UID);
	void OnMatchEnd();
	void OnMatchQuiting();
	void OnMatchSlowMotion();
	void OnPawnPossessed(class AMarvelPlayerState* PlayerState, class AMarvelBaseCharacter* Character);
	void OnPlayerStateRemoved(class AMarvelPlayerState* PlayerState);
	void OnReplayRecordStart(class UWorld* World, const class FString& ReplayID, const class FString& InDisplayID);
	void Register();
	void UnRegister();

	TArray<struct FEpicMomentActionInfo> GetAllyEpicMoments() const;
	bool NeedsEpicMoment() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CareerWorldSubsystem">();
	}
	static class UCareerWorldSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCareerWorldSubsystem>();
	}
};

// Class Marvel.ChaosClientGCManagerActor
// 0x0160 (0x05F0 - 0x0490)
class alignas(0x10) AChaosClientGCManagerActor final : public AActor
{
public:
	uint8                                         Pad_490[0x50];                                     // 0x0490(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	struct FChaosClientActorStateRepData          StateRepData;                                      // 0x04E0(0x0020)(Net, RepNotify, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_500[0xF0];                                     // 0x0500(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientGCBroken(class AActor* InSourceAvatar, class AChaosClientDesActor* ClientGCActor, int16 ClientGCActorUID, float Damage);
	void ClientReceiveBatchRepInfo(const struct FChaosClientGCRepData& InRepInfoData);
	void ClientReceiveSingleRepInfo(const struct FChaosClientGCRepInfo& InRepInfoData);
	void OnAllLevelLoaded();
	void OnMapLoaded();
	void OnMatchStageChanged(EMatchState MatchState);
	void OnRep_StateRepData();
	void ResetChaosDestruction(int16 ClientGCActorUID);
	void ResetClientTransitionComponent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosClientGCManagerActor">();
	}
	static class AChaosClientGCManagerActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AChaosClientGCManagerActor>();
	}
};

// Class Marvel.ChaosDestructionComponent
// 0x1630 (0x1720 - 0x00F0)
class alignas(0x10) UChaosDestructionComponent final : public UActorComponent
{
public:
	struct FChaosDestructionPostPhysicsTickFunction PostPhysicsTickFunction;                           // 0x00F0(0x0038)(NativeAccessSpecifierPublic)
	TMap<uint32, uint32>                          ParticlesLevel;                                    // 0x0128(0x0050)(NativeAccessSpecifierPublic)
	ERecoveryType                                 RecoveryType;                                      // 0x0178(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x3];                                      // 0x0179(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	ERecoveryTriggerType                          RecoveryTriggerType;                               // 0x017C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERecoveryConfigType                           RecoveryConfigType;                                // 0x0180(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERecoveryFadeInEffectType                     RecoveryFadeInEffectType;                          // 0x0184(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoveryTime;                                      // 0x0188(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18C[0x4];                                      // 0x018C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RecoveryDirection;                                 // 0x0190(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoveryFadeInTime;                                // 0x01A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoveryFadeInSpeed;                               // 0x01AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x01B0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DissolveTime;                                      // 0x01B4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoveryMaterialSwitchTime;                        // 0x01B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BC[0x4];                                      // 0x01BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          StartRecoveryAudio;                                // 0x01C0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C8[0x8];                                      // 0x01C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          RecoveryDissolveAudio;                             // 0x01D0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D8[0x8];                                      // 0x01D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          RecoveryEffectAudio;                               // 0x01E0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8[0x8];                                      // 0x01E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          FinishRecoveryAudio;                               // 0x01F0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainRecoveryFadeInTime;                          // 0x01F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainDelayTime;                                   // 0x01FC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainDissolveTime;                                // 0x0200(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RemainMaterialSwitchTime;                          // 0x0204(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRecoveryMaterialParam>         RecoveryOverlayMaterialParams;                     // 0x0208(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRecoveryMaterialParam>         RecoveryMaterialParams;                            // 0x0218(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRecoveryMaterialParam>         RecoverySMMaterialParams;                          // 0x0228(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRecoveryMaterialParam>         RecoveryNiagaraParams;                             // 0x0238(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRecoveryMaterialParam>         GCDissolveMaterialParams;                          // 0x0248(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class AChaosDestructionRecoveryManager*       RecoveryManager;                                   // 0x0258(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoveryBrokenDegree;                              // 0x0260(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TickFrame;                                         // 0x0264(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AChaosDestructionRecoveryManager*       RuntimeRecoveryManager;                            // 0x0268(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_270[0x50];                                     // 0x0270(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   RecoveryMesh;                                      // 0x02C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C8[0x4];                                      // 0x02C8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastStartRecoveryTime;                             // 0x02CC(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2D0[0x8];                                      // 0x02D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLevelEffectTag                        RecoverySMBPTag;                                   // 0x02D8(0x0010)(Edit, EditConst, NativeAccessSpecifierPublic)
	class ARecoveryEffectMeshActor*               SMBPActorCache;                                    // 0x02E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F0[0xB8];                                     // 0x02F0(0x00B8)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UStaticMeshComponent*>             MainPartSubSMComps;                                // 0x03A8(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UNiagaraComponent*>              RecoveryNiagaraComponents;                         // 0x03F8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_408[0x18];                                     // 0x0408(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class AMarvelBaseCharacter*>             PotentialOverlapCharacters;                        // 0x0420(0x0050)(NativeAccessSpecifierPublic)
	TSet<class AActor*>                           PotentialOverlapSummoneds;                         // 0x0470(0x0050)(NativeAccessSpecifierPublic)
	TSet<class AMarvelBaseCharacter*>             BuffedCharacters;                                  // 0x04C0(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_510[0x38];                                     // 0x0510(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRecoveryScalableMeshParam>     RecoveryScalableMeshParams;                        // 0x0548(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FString, struct FSMBPMaterialOverrideParam> SMBPMaterialInstanceOrigin;                        // 0x0558(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<class FString, struct FSMBPMaterialOverrideParam> SMBPMaterialInstanceOverride;                      // 0x05A8(0x0050)(Edit, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstance*>              GCMaterialInstancesOverride;                       // 0x05F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstance*>              GCMaterialInstancesOrigin;                         // 0x0608(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_618[0x40];                                     // 0x0618(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnChaosResetEvent;                                 // 0x0658(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* GCActor)> OnChaosPostResetEvent;                             // 0x0668(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* SourceActor, class UGameplayAbility* SourceAbility, float Damage)> OnChaosDamageEvent;                                // 0x0678(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* TargetActor)> OnChaosActorTransitionEvent;                       // 0x0688(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* SourceActor, float BrokenDegreeLevel, float InBrokenDegree)> OnChaosTriggerDestructionEvent;                    // 0x0698(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bBroadcastChaosDamage;                             // 0x06A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A9[0x7];                                      // 0x06A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          DestructionAudioEvent;                             // 0x06B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FChaosDestructionAudioParam>    ChaosDestructionAudioParams;                       // 0x06B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          DestructionCombineEffectAudioEvent;                // 0x06C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          DestructionCollapsedCombineEffectAudioEvent;       // 0x06D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AMarvelSpatialAudioVolume*>      SpatialAudioVolumes;                               // 0x06D8(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6E8[0x8];                                      // 0x06E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FParticleImpulseEvent>     ParticleImpulseEventMap;                           // 0x06F0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FChaosCollisionAudioParam              CollisionAudioParam;                               // 0x0740(0x00B0)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_7F0[0x58];                                     // 0x07F0(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FLevelEffectTags>          ServerLinkedSyncEffectActorTags;                   // 0x0848(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, struct FLevelEffectActors>        EffectActorsDisableEvent;                          // 0x0898(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E8[0x18];                                     // 0x08E8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayDisableSeconds;                               // 0x0900(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_904[0x4];                                      // 0x0904(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   DelayDisableParticles;                             // 0x0908(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_958[0xA8];                                     // 0x0958(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                GCBoundingBoxScaleRadio;                           // 0x0A00(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFiltering;                                  // 0x0A18(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A19[0x7];                                      // 0x0A19(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FLevelEffectTags>          EffectTagsToDisable0;                              // 0x0A20(0x0050)(Edit, NativeAccessSpecifierPublic)
	uint8                                         Pad_A70[0x1F8];                                    // 0x0A70(0x01F8)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableShattering;                                 // 0x0C68(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C69[0x3];                                      // 0x0C69(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BigParticleSpeedLimit;                             // 0x0C6C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BigParticleStrain;                                 // 0x0C70(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMultiSegShattering;                         // 0x0C74(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C75[0x3];                                      // 0x0C75(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShatteringDownRange;                               // 0x0C78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ShatteringFieldType;                               // 0x0C7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShatteringRadius;                                  // 0x0C80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AChaosDestructionActor>  DestructionActorCache;                             // 0x0C84(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C8C[0x114];                                    // 0x0C8C(0x0114)(Fixing Size After Last Property [ Dumper-7 ])
	class AChaosDestructionLinkDegreeManager*     GlobalBrokenDegreeMgr;                             // 0x0DA0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FractureBrokenDegree;                              // 0x0DA8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_DAC[0xC];                                      // 0x0DAC(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, bool>                             BrokenUnDynamicIds;                                // 0x0DB8(0x0050)(NativeAccessSpecifierPrivate)
	TArray<struct FChaosBreakEvent>               BreakEventsCache;                                  // 0x0E08(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<struct FChaosDamageEvent>              DamageEventsCache;                                 // 0x0E18(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E28[0x50];                                     // 0x0E28(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   bInParticles;                                      // 0x0E78(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_EC8[0x10];                                     // 0x0EC8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2f                              BoundRange;                                        // 0x0ED8(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<float, struct FChaosDestructionEventParam> ChaosDestructionEventMaps;                         // 0x0EE0(0x0050)(Edit, NativeAccessSpecifierPrivate)
	uint8                                         Pad_F30[0x48];                                     // 0x0F30(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UNiagaraSystem*, float>            LastExEffDelayInfo;                                // 0x0F78(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_FC8[0x170];                                    // 0x0FC8(0x0170)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableBreakEffectByAbility;                       // 0x1138(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAutoAbilityRatio;                              // 0x1139(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoAbilityRatioUsed;                             // 0x113A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113B[0x1];                                     // 0x113B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BreakEffectByAbilityRatio;                         // 0x113C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         AbilityCombineDestructionEffect;                   // 0x1140(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         AbilityNormalDestructionEffect;                    // 0x1148(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsingCombineEffect;                               // 0x1150(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1151[0x7];                                     // 0x1151(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         CommonDestructionEffect;                           // 0x1158(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseNormalFractureLimit;                         // 0x1160(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1161[0x3];                                     // 0x1161(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LimitCollapsedNormalEffectRatio;                   // 0x1164(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseRandomDelay;                                 // 0x1168(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1169[0x3];                                     // 0x1169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2f                              DelayRange;                                        // 0x116C(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EffectDelayTickGap;                                // 0x1174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImmediatelyNum;                                    // 0x1178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImmediatelyTimeGap;                                // 0x117C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         CombineDestructionEffect;                          // 0x1180(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FChaosDesEffectParam>           EffParams;                                         // 0x1188(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSecondParticleEffect;                             // 0x1198(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1199[0x7];                                     // 0x1199(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         SecondParticleEffect;                              // 0x11A0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMultBreakEffect;                            // 0x11A8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreBuildStaticMesh;                               // 0x11A9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11AA[0x2];                                     // 0x11AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SecondGravityDirection;                            // 0x11AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EGeometryCollectionFractureType, struct FChaosRemovalEffectParam> ParticleBreakEffects;                              // 0x11B0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         GravityDirectionByBreakEvent;                      // 0x1200(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoundingBoxScaleByBreakEvent;                      // 0x1204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParticleVolumeByBreakEvent;                        // 0x1208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVolumeScaleByBreakEvent;                          // 0x120C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bParticleNumScaleByBreakEvent;                     // 0x120D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_120E[0x2];                                     // 0x120E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EmitterImpulse;                                    // 0x1210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmitterUpdateRotation;                             // 0x1214(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitCollapsedEffectRatio;                         // 0x1218(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121C[0x24];                                    // 0x121C(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableEventFilter;                                // 0x1240(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1241[0x3];                                     // 0x1241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxEffectLevel;                                    // 0x1244(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsingCollisionEffect;                             // 0x1248(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreciseCollisionEffect;                           // 0x1249(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_124A[0x2];                                     // 0x124A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PlayPreciseCollisionEffectInterval;                // 0x124C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinParticleVelocity;                               // 0x1250(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1254[0x4];                                     // 0x1254(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         CombineCollisionEffect;                            // 0x1258(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         CommonCollisionEffect;                             // 0x1260(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1268[0x8];                                     // 0x1268(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinCollisionEffectMass;                            // 0x1270(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1274[0x4];                                     // 0x1274(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MinCollisionEffectVelocity;                        // 0x1278(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCollisionEffectWithTag;                           // 0x1290(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1291[0x7];                                     // 0x1291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         CollisionEffectWithTag;                            // 0x1298(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayCollisionEffectTotalCount;                     // 0x12A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A4[0x4];                                     // 0x12A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CollisionTargetTag;                                // 0x12A8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsingRemovalEffect;                               // 0x12B4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12B5[0x3];                                     // 0x12B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EGeometryCollectionFractureType, struct FChaosRemovalEffectParam> ParticleRemovalEffects;                            // 0x12B8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_1308[0x8];                                     // 0x1308(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BoundingBoxScale;                                  // 0x1310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RemovalMaxEffectLevel;                             // 0x1314(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ParticleVolume;                                    // 0x1318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVolumeScale;                                      // 0x131C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bParticleNumScale;                                 // 0x131D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsingCollapseEffect;                              // 0x131E(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131F[0x1];                                     // 0x131F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         CollapseEffect;                                    // 0x1320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollapseEffectThreshold;                           // 0x1328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollapseEffectDamageThreshold;                     // 0x132C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LimitRemainderEffectRatio;                         // 0x1330(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1334[0xA4];                                    // 0x1334(0x00A4)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUsingParticleConnectionEffect;                    // 0x13D8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D9[0x7];                                     // 0x13D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         ParticleConnectionEffect;                          // 0x13E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SampleMaxNum;                                      // 0x13E8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13EC[0x4];                                     // 0x13EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FChaosGCSamplePoint>       ParticleSampleMap;                                 // 0x13F0(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, struct FChaosEffectMeshCache>     NiagaraMeshCaches;                                 // 0x1440(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_1490[0x168];                                   // 0x1490(0x0168)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FChaosBreakEvent>               BatchEffectBreakEventsCache;                       // 0x15F8(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FChaosParticleAnimData                 ParticleAnimData;                                  // 0x1608(0x00D0)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FMarvelSoftObjectPath                  ParticleAnimSequencePath;                          // 0x16D8(0x0038)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	int32                                         CurrentCollapseBreakClientGCLimit;                 // 0x1710(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1714[0xC];                                     // 0x1714(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AutoRecoveryEffect();
	void AutoRecoveryFinished();
	void BreakAllParticles();
	bool CheckCanBreakClientGCWhenCollapse();
	void CmdDoAutoRecovery();
	void DelayDisableEffectActorsLimitNum_Server();
	void DrawParticleAABB_GT(int32 ItemIndex);
	void DrawParticleAABB_PT(int32 ItemIndex);
	void InitCollapseBreakClientGCLimit();
	bool IsRecoveryDestruction();
	void MulticastAutoRecoveryEffect(float ServerTime);
	void OnChaosBreak(const struct FChaosBreakEvent& BreakEvent);
	void OnChaosBreakDeathTraceCache(const int32& Index_0, const float& ServerTime);
	void OnChaosCollision(const struct FChaosPhysicsCollisionInfo& CollisionEvent);
	void OnChaosReconstructPhysics(bool bIsFromReplay);
	void OnChaosRemoval(const struct FChaosRemovalEvent& RemovalEvent);
	void OnChaosTakeDamage(const struct FChaosDamageEvent& DamageEvent);
	void OnComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnRep_LastStartRecoveryTime();
	void OnServerChaosHit(const float HitServerTimer);
	void OnSMBPActorEndPlay(class AActor* InSource, EEndPlayReason Reason);
	void OnSubPartClientGCReset(class AActor* GCActor);
	void PlayCollisionEffectWithTag(float Mass, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& AngularVelocity, int32 ParticleID, float ServerWorldTime);
	void PlayConnectEffect(int32 ParticleIndex);
	void PlayHitAudioMulticast(int32 ParticleIndex, const struct FVector& Location);
	void PlayPreciseCollisionEffect(float Mass, const struct FVector& Location, const struct FVector& Velocity, const struct FVector& AngularVelocity);
	void PlayPreCollapseEffect();
	void ResetChaosDestruction();
	void RPCSyncGCDeltaInfo(const TArray<struct FChaosClusterDeltaInfo>& UpdateInfos, uint8 EncodedTimeScale);
	void RPCSyncGCFractureInfo(const TArray<struct FGeometryCollectionActivatedCluster>& OneOffActivated);
	void RPCSyncGCWorldInfo(const TArray<struct FChaosGCClusterWorldInfo>& UpdateInfos, uint8 EncodedTimeScale);
	void SendDisableEffectParticleIDToClient(const TArray<int32>& ParticleIDSet);
	void SetBanNativeCombineEffect(bool bIsEnable);
	void SetBloodRatio(float Ratio);
	void SetBroadcastChaosDamage(bool bSwitch);
	void SetIsFractured(bool bFlag);
	void TriggerChaosCollapse(bool bIsEnable);
	void TriggerHitIndicatorMulticast(class AMarvelBaseCharacter* Character);

	float GetBrokenDegree() const;
	float GetLastBrokenDegree() const;
	bool HasBeenFractured() const;
	bool IsAffectMeshAndFractured() const;
	bool IsBatchBreakEffectEnabled() const;
	bool IsFractured() const;
	bool IsOutParticle(int32 ClusterLocalID) const;
	int64 K2_GetValidChildrenCount() const;
	int64 K2_GetValidParticleNum() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosDestructionComponent">();
	}
	static class UChaosDestructionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChaosDestructionComponent>();
	}
};

// Class Marvel.FoliageISMComponentUserData
// 0x0010 (0x0040 - 0x0030)
class UFoliageISMComponentUserData final : public UAssetUserData
{
public:
	TArray<int32>                                 HiddenIndices;                                     // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FoliageISMComponentUserData">();
	}
	static class UFoliageISMComponentUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFoliageISMComponentUserData>();
	}
};

// Class Marvel.ChaosDestructionRecoveryManager
// 0x0180 (0x0610 - 0x0490)
class AChaosDestructionRecoveryManager final : public AActor
{
public:
	uint8                                         Pad_490[0x38];                                     // 0x0490(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	ERecoveryTriggerType                          RecoveryTriggerType;                               // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4CC[0x4];                                      // 0x04CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class AChaosDestructionActor*>           GlobalRecoveryActors;                              // 0x04D0(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TSet<class AChaosDestructionActor*>           PassiveRecoveryActors;                             // 0x0520(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_570[0x18];                                     // 0x0570(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GlobalRecoveryTime;                                // 0x0588(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalRecoveryEffectTime;                          // 0x058C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalDelayTime;                                   // 0x0590(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalDissolveTime;                                // 0x0594(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoveryMaterialSwitchTime;                        // 0x0598(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59C[0x4];                                      // 0x059C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          ChaosDestructionStartRecoveryAudio;                // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ChaosDestructionEffectAudio;                       // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ChaosDestructionFinishRecoveryAudio;               // 0x05B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B8[0x8];                                      // 0x05B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UChaosDestructionComponent*, bool> RecoveringFinishMap;                               // 0x05C0(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void OnChaosBreak(const struct FChaosBreakEvent& BreakEvent);
	void OnMatchStateChangeRecovery(EMatchState MatchState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosDestructionRecoveryManager">();
	}
	static class AChaosDestructionRecoveryManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AChaosDestructionRecoveryManager>();
	}
};

// Class Marvel.ChaosFieldActorStatic
// 0x00C8 (0x0568 - 0x04A0)
class AChaosFieldActorStatic final : public AChaosFieldActor
{
public:
	uint8                                         Pad_4A0[0xA8];                                     // 0x04A0(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UFieldSystemMetaDataFilter*>     MetaDataPool;                                      // 0x0548(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	float                                         CommandDamageMultiplier;                           // 0x0558(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_55C[0xC];                                      // 0x055C(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyField(const struct FFieldParams& InParams, class AActor* InSource, const struct FHitResult& InHit, float InAbilityDamage);
	void ApplyFieldNew(const struct FFieldParams& InParams, class AActor* InSource, const struct FHitResult& InHit, float InAbilityDamage);
	void ApplyFieldOld(const struct FFieldParams& InParams, class AActor* InSource, const struct FHitResult& InHit, float InAbilityDamage);
	void ApplyFieldToParticle(const struct FFieldParams& InParams, class AActor* InSource, const struct FHitResult& InHit, float InAbilityDamage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosFieldActorStatic">();
	}
	static class AChaosFieldActorStatic* GetDefaultObj()
	{
		return GetDefaultObjImpl<AChaosFieldActorStatic>();
	}
};

// Class Marvel.ChaosFieldDebugInfo
// 0x02E0 (0x0770 - 0x0490)
class AChaosFieldDebugInfo final : public AActor
{
public:
	uint8                                         Pad_490[0x18];                                     // 0x0490(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LiveTime;                                          // 0x04A8(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4AC[0x4];                                      // 0x04AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFieldParams                           FieldParams;                                       // 0x04B0(0x0280)(Net, NativeAccessSpecifierPublic)
	float                                         AbilityDamage;                                     // 0x0730(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_734[0x4];                                      // 0x0734(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DirectionalVectorOveride;                          // 0x0738(0x0018)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CenterPosition;                                    // 0x0750(0x0018)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 Color;                                             // 0x0768(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_76C[0x4];                                      // 0x076C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector GetCenterPosition();
	float GetDirectionalMagnitude();
	struct FVector GetDirectionalVectorOveride();
	struct FVector2f GetNoiseMinMax();
	float GetNoiseScaleBase();
	float GetNoiseScaleMult();
	float GetRadialMagnitude();
	struct FVector GetRadialPositionOffset();
	float GetSphereRadius();
	float GetTorqueMult();
	struct FVector GetTorqueVectorOveride();
	struct FVector2f GetVelocityFalloffMinMax();
	EFieldFalloffType GetVelocityFieldFalloffType();
	void MulticastDoPrint(const class FString& Info);
	void MulticastShowChaosFieldInfo(const struct FHitResult& InHit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosFieldDebugInfo">();
	}
	static class AChaosFieldDebugInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<AChaosFieldDebugInfo>();
	}
};

// Class Marvel.ChaosRecoveryMaterialHelper
// 0x0090 (0x0520 - 0x0490)
class AChaosRecoveryMaterialHelper final : public AActor
{
public:
	bool                                          bEnableBuildParam;                                 // 0x0490(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERecoveryType                                 RecoveryType;                                      // 0x0491(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_492[0x2];                                      // 0x0492(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	ERecoveryTriggerType                          RecoveryTriggerType;                               // 0x0494(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERecoveryConfigType                           RecoveryConfigType;                                // 0x0498(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ERecoveryFadeInEffectType                     RecoveryFadeInEffectType;                          // 0x049C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoveryTime;                                      // 0x04A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A4[0x4];                                      // 0x04A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RecoveryDirection;                                 // 0x04A8(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoveryFadeInTime;                                // 0x04C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoveryFadeInSpeed;                               // 0x04C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTime;                                         // 0x04C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DissolveTime;                                      // 0x04CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoveryMaterialSwitchTime;                        // 0x04D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoveryBrokenDegree;                              // 0x04D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FRecoveryMaterialParam>         RecoveryOverlayMaterialParams;                     // 0x04D8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRecoveryMaterialParam>         RecoveryMaterialParams;                            // 0x04E8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRecoveryMaterialParam>         RecoverySMMaterialParams;                          // 0x04F8(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FRecoveryMaterialParam>         GCDissolveMaterialParams;                          // 0x0508(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bSkipRecreateMaterial;                             // 0x0518(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeleteSelfAfterBuild;                             // 0x0519(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51A[0x6];                                      // 0x051A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosRecoveryMaterialHelper">();
	}
	static class AChaosRecoveryMaterialHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<AChaosRecoveryMaterialHelper>();
	}
};

// Class Marvel.CharacterAudioComponent
// 0x07E8 (0x0C90 - 0x04A8)
class UCharacterAudioComponent : public UMarvelAudioComponent
{
public:
	uint8                                         Pad_4A8[0x4E0];                                    // 0x04A8(0x04E0)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bTickForAeroStateChange;                           // 0x0988(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_989[0x1AF];                                    // 0x0989(0x01AF)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* DamageFrom, class AActor* DamageTo)> OnTakeDamage_AudioLowFrequency;                    // 0x0B38(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* DamageFrom, class AActor* DamageTo)> OnTakeDamage_AudioMiddleFrequency;                 // 0x0B48(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* DamageFrom, class AActor* DamageTo)> OnTakeDamage_AudioHighFrequency;                   // 0x0B58(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_B68[0x20];                                     // 0x0B68(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAkAudioEvent>           CachedLandedEvent;                                 // 0x0B88(0x0030)(Transient, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_BB8[0xB0];                                     // 0x0BB8(0x00B0)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TakeDamageAbilityID;                               // 0x0C68(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C6C[0x24];                                     // 0x0C6C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AfterBeginPlayFrame();
	void OnBindTagUpdated(const struct FGameplayTag& TagUpdated, bool bTagExists);
	void OnCharApplyDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnCharTakeDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnCharTakeDamageNextFrame(TWeakObjectPtr<class AActor> InWeakSourceAvatar, TWeakObjectPtr<class AActor> InWeakTargetAvatar);
	int32 OnFootstep(class UAkAudioEvent* Event, class FName FootName, EAxis MeshUpAxis, EFootstepType FootstepType, bool bDebug, bool bNeedRestrictOnGround);
	void OnKillOther(class AActor* Source, class AActor* Target, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnOwnerCharDeath(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnOwnerCharReborn(class AActor* TargetActor, const struct FCharacterRebornParam& Param);
	void OnPostBeHitAudioCallback(class AActor* DamageFrom, class AActor* DamageTo);
	void OnPostBeHitAudioTimer();
	void OnPostDamageBreathCallback(class AActor* DamageFrom, class AActor* DamageTo);
	void OnSculptChanged(int32 SculptID);
	void SetFootstepEnable(bool InEnable);
	void TickPose(class USkinnedMeshComponent* SkinnedMeshComponent, float DeltaTime, bool bNeedsValidRootMotion);
	void TryMakeUpLandedAudio(const struct FHitResult& Hit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterAudioComponent">();
	}
	static class UCharacterAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterAudioComponent>();
	}
};

// Class Marvel.CharacterFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UCharacterFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* GetCharacterClass(int32 HeroID);
	static bool GetCharacterDefaultCapsuleSize(class ACharacter* InCharacter, float* OutRadius, float* OutHalfHeight);
	static class AMarvelBaseCharacter* GetCharacterFromPC(class APlayerController* InPC, int32 HeroID);
	static class AMarvelBaseCharacter* GetCharacterFromPS(class APlayerState* InPS, int32 HeroID);
	static class APawn* PossessCharacter(class AController* PC, class AMarvelBaseCharacter* TargetCharacter);
	static bool RespawnPlayerInSpawnRoom(class APlayerState* InPS);
	static void StaticSetActorHealth(class AActor* InTarget, float Health);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterFunctionLibrary">();
	}
	static class UCharacterFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterFunctionLibrary>();
	}
};

// Class Marvel.MarvelPredictionFuncLibrary
// 0x0000 (0x0030 - 0x0030)
class UMarvelPredictionFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void BindPredictionKeyAnyForObj(class UObject* InObj, class UObject* Source, const class FString& Key, const TDelegate<void(const class FString& Key)>& Event);
	static void BindPredictionKeyCatchUpForObj(class UObject* InObj, class UObject* Source, const class FString& Key, const TDelegate<void(const class FString& Key)>& Event);
	static void BindPredictionKeyRejectedForObj(class UObject* InObj, class UObject* Source, const class FString& Key, const TDelegate<void(const class FString& Key)>& Event);
	static void BindPredictionKeyRejectOrCatchUpForObj(class UObject* InObj, class UObject* Source, const class FString& Key, const TDelegate<void(const class FString& Key)>& Event);
	static void BindPredictionKeyRejectOrTimeoutForObj(class UObject* InObj, class UObject* Source, const class FString& Key, const TDelegate<void(const class FString& Key)>& Event);
	static void BindPredictionKeyTimeoutForObj(class UObject* InObj, class UObject* Source, const class FString& Key, const TDelegate<void(const class FString& Key)>& Event);
	static struct FPredictionKeyHandle CreateChildPredictionKeyForObj(class UObject* InObj, const class FString& DebugKeyName, const class UObject* DebugSource);
	static struct FPredictionKeyHandle CreateChildPredictionKeyFromKeyForObj(class UObject* InObj, const struct FPredictionKeyHandle& Key, const class FString& DebugKeyName, const class UObject* DebugSource);
	static struct FScopedPredictionWindowHandle CreateScopedPredictionWindow(class UAbilitySystemComponent* ASC, class UObject* Source, const struct FPredictionKeyHandle& Key, EScopedPWType Type, bool bImportant, bool bSet, float InTimeout, const class FString& DebugLocationInfo);
	static struct FScopedPredictionWindowHandle CreateScopedPredictionWindow_Ability(class UGameplayAbility* Ability, const struct FPredictionKeyHandle& Key, EScopedPWType Type, bool bImportant, bool bSet, float InTimeout, const class FString& DebugLocationInfo);
	static struct FScopedPredictionWindowHandle CreateScopedPredictionWindow_Actor(class AActor* Causer, const struct FPredictionKeyHandle& Key, EScopedPWType Type, bool bImportant, bool bSet, float InTimeout, const class FString& DebugLocationInfo);
	static struct FScopedPredictionWindowHandle CreateScopedPredictionWindowForObj(class UObject* InObj, const struct FPredictionKeyHandle& Key, EScopedPWType Type, bool bImportant, bool bSet, float InTimeout, const class FString& DebugLocationInfo);
	static class UAbilitySystemComponent* GetPredictingASC(class UObject* InObj);
	static class FString GetPredictionKeyDebugStringForObj(const class FString& Key, class UObject* InObj);
	static EPredictionKeyState GetPredictionKeyStateForObj(class UObject* InObj, const class FString& Key);
	static bool GetReplicatedDataForKeyForObj(struct FPredictionDynamicParamHandle* OutHandle, class UObject* InObj, const class FString& Key);
	static bool GetReplicatedDataForScopedKeyForObj(struct FPredictionDynamicParamHandle* OutHandle, class UObject* InObj);
	static class FString GetScopedPredictionKeyForObj(class UObject* InObj);
	static bool IsDebuggingPredictionKey();
	static bool IsPredictionKeyCatchUpOrRejectForObj(class UObject* InObj, const class FString& Key);
	static bool IsPredictionKeyRejectedForObj(class UObject* InObj, const class FString& Key);
	static bool IsPredictionKeyUsedForObj(class UObject* InObj, const class FString& Key);
	static void MarkImportantScopedKeyForObj(class UObject* InObj);
	static void MarkReplicateScopedKeyForObj(class UObject* InObj);
	static void RejectPredictionKeyForObj(class UObject* InObj, const class FString& Key);
	static void SetReplicatedDataForScopedKeyForObj(class UObject* InObj, const struct FPredictionDynamicParamHandle& InDataHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPredictionFuncLibrary">();
	}
	static class UMarvelPredictionFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelPredictionFuncLibrary>();
	}
};

// Class Marvel.CharacterMaterialComponent
// 0x0120 (0x0210 - 0x00F0)
class UCharacterMaterialComponent final : public UActorComponent
{
public:
	struct FStencilModifier_EnableCustomDepth     StencilModifier_EnableCustomDepth;                 // 0x00F0(0x0008)(NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnCharacterMeshMaterialChangedDelegate;            // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UActorComponent* Value)> OnComponentMeshMaterialChangedDelegate;            // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FCharacterPriorityMaterialParameters   PriorityMaterialParameters;                        // 0x0118(0x00F8)(Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void OnChildComponentAttached(class USceneComponent* CurrentComponent, class USceneComponent* ChildComponent);
	void OnChildComponentDetached(class USceneComponent* CurrentComponent, class USceneComponent* ChildComponent);
	void RemoveMaterial(class UMaterialInterface* InMaterial, int32 InPriority);
	void RemoveMeshMaterialBySlotSuffix(class UMaterialInterface* InMaterial, class USkinnedMeshComponent* InMeshComponent, const class FName InSlotSuffix);
	void RemoveOwnerMeshMaterial(class UMaterialInterface* InMaterial, int32 InPriority);
	void SetMaterial(class UMaterialInterface* InMaterial, const TArray<class FName>& InTextureParameterNames, int32 InStencilValue, int32 InPriority, const struct FOptionalMaterialParameter& InOptionalParameters);
	void SetMeshMaterialBySlotSuffix(class UMaterialInterface* InMaterial, class USkinnedMeshComponent* InMeshComponent, const class FName InSlotSuffix);
	void SetOwnerMeshMaterial(const TArray<class UMaterialInterface*>& InMaterials, int32 InStencilValue, int32 InPriority, const struct FOptionalMaterialParameter& InOptionalParameters);
	void UpdateOriginalMaterials(const class UMeshComponent* InComponent, const class UMeshComponent* InMeshCDO);

	bool IsAffectComponent(const class UMeshComponent* InComponent) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterMaterialComponent">();
	}
	static class UCharacterMaterialComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterMaterialComponent>();
	}
};

// Class Marvel.CharacterSwingingComponent
// 0x1390 (0x1480 - 0x00F0)
class UCharacterSwingingComponent final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void()>              OnSwingingStartDelegate;                           // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESwingEndReason InSwingingEndReason)> OnSwingingEndDelegate;                             // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              StartIntoSwingingLoopStageDelegate;                // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          bNotReduceSpeedWhenSlide;                          // 0x0120(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PullForceScale;                                    // 0x0124(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinClampVelocityToAddRopeForce;                    // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxClampVelocityToAddRopeForce;                    // 0x012C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFixedRopeLengthToCalPull;                      // 0x0130(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_131[0x3];                                      // 0x0131(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FixedPullRopeLength;                               // 0x0134(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RopeLengthToStartReduceForce;                      // 0x0138(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxReduceForceScale;                               // 0x013C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReduceForceValueWhenNoStrech;                      // 0x0140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSwingAngleToAddVelocityForce;                   // 0x0144(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSwingAngleToAddVelocityForce;                   // 0x0148(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueOfVelocityForce;                              // 0x014C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ValueOfCameraForce;                                // 0x0150(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            CameraForceScaleCurve;                             // 0x0158(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RegularGravityScale;                               // 0x0160(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_164[0x4];                                      // 0x0164(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            SwingPointMakeUpCurve;                             // 0x0168(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwingPointMakeUpFactor;                            // 0x0170(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DashAbilityId;                                     // 0x0174(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTimeToDash;                                   // 0x0178(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17C[0x4];                                      // 0x017C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDashAbilityInfo                       DashInfo;                                          // 0x0180(0x0BA8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bAdjustSwingInitDirectionToCamera;                 // 0x0D28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D29[0x3];                                      // 0x0D29(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxAngleCanAdjust;                                 // 0x0D2C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinWallTiltAngleForSingleHandSwing;                // 0x0D30(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProbabilityOfSpinSwing;                            // 0x0D34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSwingAngleForSpinSwing;                         // 0x0D38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExpectSwingAngleForSpinSwing;                      // 0x0D3C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeedToStartIntoLoopStage;                      // 0x0D40(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThresholdAngleToStopSwing;                         // 0x0D44(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ThresholdSpeedToStopSwing;                         // 0x0D48(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSpeedOfSwing;                                   // 0x0D4C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTimeToLaunch;                                 // 0x0D50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D54[0x4];                                      // 0x0D54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LaunchVelocity;                                    // 0x0D58(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLaunchVelocityOverride;                         // 0x0D70(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D71[0x3];                                      // 0x0D71(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GravityScaleForRiseStage;                          // 0x0D74(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTimeToRise;                                     // 0x0D78(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D7C[0x4];                                      // 0x0D7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraInterp*                          CameraInterp_Swinging_Down;                        // 0x0D80(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayTimeToPlaySwingingDownCameraInterp;           // 0x0D88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8C[0x4];                                      // 0x0D8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraInterp*                          CameraInterp_Swinging_Up;                          // 0x0D90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSwingAngleToPlaySwingUpCameraEffect;            // 0x0D98(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D9C[0x4];                                      // 0x0D9C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraInterp*                          CameraInterp_RopeBreaking;                         // 0x0DA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraInterpDuration_RopeBreaking;                 // 0x0DA8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DAC[0x4];                                      // 0x0DAC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraInterp*                          CameraInterp_RopeBreaking_FOV;                     // 0x0DB0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraInterpDuration_RopeBreaking_FOV;             // 0x0DB8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DBC[0x4];                                      // 0x0DBC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULegacyCameraShake>         CameraShakeClass_Swinging;                         // 0x0DC0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDebugDrawCapsule;                           // 0x0DC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDebugLaunchCharacter;                       // 0x0DC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DCA[0x6];                                      // 0x0DCA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   MarvelCharacter;                                   // 0x0DD0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSwinging;                                       // 0x0DD8(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsInSwingLoopStage;                               // 0x0DD9(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_DDA[0x6];                                      // 0x0DDA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSwingInfo                             CurrentSwingInfo;                                  // 0x0DE0(0x0190)(BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	float                                         SwingAngle;                                        // 0x0F70(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESwingEndReason                               SwingEndReason;                                    // 0x0F74(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsEndSwingFromDash;                               // 0x0F75(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESwingCameraStage                             CurrentSwingCameraStage;                           // 0x0F76(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F77[0x111];                                    // 0x0F77(0x0111)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         Swingingkey;                                       // 0x1088(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         ApplyDashTaskKey;                                  // 0x1128(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         OnDashTaskFinishedKey;                             // 0x11C8(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         StartIntoSwingLoopKey;                             // 0x1268(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         LaunchCharacterKey;                                // 0x1308(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         RestoreFlyParamsKey;                               // 0x13A8(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1448[0x38];                                    // 0x1448(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyDash();
	bool GetIsEndSwingFromDash();
	bool GetIsInSwingLoopStage();
	bool GetIsSwinging();
	bool GetIsSwingToLeft();
	struct FVector GetOptimalSwingPoint();
	bool GetShouldSwingSpin();
	float GetSwingAngle();
	ESwingEndReason GetSwingEndReason();
	ESwingType GetSwingType();
	const struct FHitResult GetVisualHitResult();
	struct FVector GetVisualSwingPoint();
	void OnCharacterLand(const struct FHitResult& Hit);
	void OnDashFinish(EDashStopReason Reason);
	void OnRep_CurrentSwingCameraStage();
	void OnRep_CurrentSwingInfo();
	void OnRep_IsInSwingLoopStage();
	void OnRep_IsSwinging();
	void OnTimeToPlaySwingingDownCameraInterp();
	void OnTimeToRestoreCameraAfterRopeBreaking();
	void OnTimeToRestoreCameraAfterRopeBreaking_FOV();
	void ServerStopSwing(const class FString& InRemoteSwingKeyValue, ESwingEndReason InRemoteEndReason, ESwingStage InRemoteSwingStage);
	void SetIsEndSwingFromDash(bool IsEndSwingFromDash);
	void SetIsInSwingLoopStage(bool IsInSwingLoopStage);
	void SetIsSwinging(bool IsSwinging);
	void SetIsSwingToLeft(bool IsSwingToLeft);
	void SetOptimalSwingPoint(const struct FVector& InOptimalSwingPoint);
	void SetShouldSwingSpin(bool ShouldSwingSpin);
	void SetSwingAngle(float InSwingAngle);
	void SetSwingEndReason(ESwingEndReason InSwingEndReason);
	void SetSwingType(ESwingType InSwingType);
	void SetVisualHitResult(const struct FHitResult& InHitResult);
	void StartSimpleSwing(const struct FSwingInfo& InSwingInfo);
	void StartSwing(const struct FHitResult& InHitResult, const bool InIsLeftHandShoot);
	void StopSwing(ESwingEndReason InSwingEndReason);
	bool TryToFindSwingPoint(struct FSwingInfo* OutSwingInfo, const struct FSimpleSwingConfig& InSimpleSwingConfig, class UMarvelBaseGameplayAbility* SourceAbility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterSwingingComponent">();
	}
	static class UCharacterSwingingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterSwingingComponent>();
	}
};

// Class Marvel.CharacterWallRunningComponent
// 0x1470 (0x2FD0 - 0x1B60)
class UCharacterWallRunningComponent : public UMarvelCharacterMovementComponent
{
public:
	bool                                          bIsOnWall;                                         // 0x1B60(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWantsToGetOnWall;                                 // 0x1B61(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableTryGetOnWall;                               // 0x1B62(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInSprint;                                       // 0x1B63(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTransforming;                                   // 0x1B64(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOnWallIdle;                                     // 0x1B65(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsGetOnWallFromFalling;                           // 0x1B66(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsHeadDownWhenEnterWallIdle;                      // 0x1B67(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWallRunningEndInfo                    WallRunningEndInfo;                                // 0x1B68(0x0020)(BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bNeedPlayFlipAnimWhenJumpOffWall;                  // 0x1B88(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsBackToWallWhenWalkDown;                         // 0x1B89(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B8A[0x6];                                     // 0x1B8A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWallInfo                              CurrentWallInfo;                                   // 0x1B90(0x01C8)(BlueprintVisible, BlueprintReadOnly, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FCrossWallInfo                         CurrentCrossWallInfo;                              // 0x1D58(0x0470)(BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FVector                                OriginalAcceInVehicleMode;                         // 0x21C8(0x0018)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              WallRunningStartDelegate;                          // 0x21E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FWallRunningEndInfo& InWallRunningEndInfo)> WallRunningEndDelegate;                            // 0x21F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_2200[0x28];                                    // 0x2200(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Value)>    FullWallIdleStateChangedDelegate_ThreadSafe;       // 0x2228(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool Value)>    SprintRunningStateChangedDelegate;                 // 0x2238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          bDisableWallRunningMoveCombine;                    // 0x2248(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAutoInputMode;                                 // 0x2249(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseWorldDirection;                                // 0x224A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_224B[0x5];                                     // 0x224B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                AutoInputDirection;                                // 0x2250(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAutoInputDirectionAsInitDirection;             // 0x2268(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bKeepMoveWhenNoInput;                              // 0x2269(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWallRunningMoveMode                          WallRunMoveMode;                                   // 0x226A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanOnlyMoveForward_TowardsCamera;                 // 0x226B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAngleToTurnRound;                               // 0x226C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanOnlyMoveForward_VerticallyUpward;              // 0x2270(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFlipLeftRightInputWhenCarmeraLeaveWall;           // 0x2271(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2272[0x2];                                     // 0x2272(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxAngleToFlipLeftRightInput;                      // 0x2274(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseVehicleLikeRotation;                           // 0x2278(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2279[0x3];                                     // 0x2279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxAngleCanVehicleRotate;                          // 0x227C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinSlopeAngle;                                     // 0x2280(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSlopeAngle;                                     // 0x2284(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotateInterpSpeed;                                 // 0x2288(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardVectorInterpSpeed;                          // 0x228C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedAdjustRotataion;                              // 0x2290(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2291[0x3];                                     // 0x2291(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ParallelWallInterpSpeed;                           // 0x2294(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStepHeightOnWall;                               // 0x2298(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OutOfEdgeDistanceThreshold;                        // 0x229C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvalidWallMaxHalfWidth;                           // 0x22A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InvalidWallMaxHalfHeight;                          // 0x22A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewForwardAngleToAdjust;                          // 0x22A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransformTotalTime_GetOnWall;                      // 0x22AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedFallDownIfMeshCenterNotOnWallWhenNotMove;     // 0x22B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22B1[0x3];                                     // 0x22B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   RootBoneName;                                      // 0x22B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           HandSocketNames;                                   // 0x22C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           FootSocketNames;                                   // 0x22D0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         MaxSpeedOnSprint;                                  // 0x22E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxStepHeightOnSprint;                             // 0x22E4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SprintRunningTag;                                  // 0x22E8(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableEnterIdleState;                             // 0x22F4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22F5[0x3];                                     // 0x22F5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DurationToEnterIdleState;                          // 0x22F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAngleToEnterIdleState;                          // 0x22FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngleThresholdForPlayHeadFlipAnim;                 // 0x2300(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IdleInterpSpeed;                                   // 0x2304(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         FrameInterval_CheckToExitIdle;                     // 0x2308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedDownWallIfCanNotSetupTheBarrier;              // 0x230C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedDownWallWhenCameraExceedMaxAngle;             // 0x230D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_230E[0x2];                                     // 0x230E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxCameraHorizontalBetweenAngle;                   // 0x2310(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpDownLaunchVelocity_XY;                         // 0x2314(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpDownLaunchVelocity_Z;                          // 0x2318(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpDownLaunchApplyTimeDelay;                      // 0x231C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownWallBlockCharacterRotTime;                     // 0x2320(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bForceNotInterpWhenGetOffWall;                     // 0x2324(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2325[0x3];                                     // 0x2325(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DownWallInterpSpeed;                               // 0x2328(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownWallInterpMaxTime;                             // 0x232C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasFlipAnimWhenJumpOffWall;                       // 0x2330(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWalkToGround;                               // 0x2331(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2332[0x2];                                     // 0x2332(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DownWallForbidMoveDuration;                        // 0x2334(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownWallForbidMoveDuration_Back;                   // 0x2338(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableWallTopCheck;                               // 0x233C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_233D[0x3];                                     // 0x233D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxTiltAngleAtTopOfWall;                           // 0x2340(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistanceToTopOfWall;                            // 0x2344(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedTransformToWallTop;                           // 0x2348(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWalkToWallTop;                                    // 0x2349(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_234A[0x2];                                     // 0x234A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StandPointDistance_WallTop;                        // 0x234C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTime_MoveForward_WallTop;                       // 0x2350(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTime_MoveAfter_WallTop;                         // 0x2354(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceToAdjustWhenReachTopOfWall;             // 0x2358(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseLaunchCharacter_JumpOnTopOfWall;               // 0x235C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235D[0x3];                                     // 0x235D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OverTopMoveForwardDuration;                        // 0x2360(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverTopLaunchVelocity_Z;                           // 0x2364(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableCrossWall;                                  // 0x2368(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2369[0x3];                                     // 0x2369(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDistanceToCross_Inner;                          // 0x236C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandPointDistance_Inner;                          // 0x2370(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAngleDiffrence_Inner;                           // 0x2374(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngleDiffrence_Inner;                           // 0x2378(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransformTotalTime_Inner;                          // 0x237C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransformTotalTime_Inner_Sprint;                   // 0x2380(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSimpleCrossOuterMethodWhenSprint;              // 0x2384(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2385[0x3];                                     // 0x2385(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxDistanceToCross_Outer;                          // 0x2388(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDistanceToCross_Outer_Sprint;                   // 0x238C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandPointDistance_Outer;                          // 0x2390(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandPointDistance_Outer_Sprint;                   // 0x2394(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinWallThickness_Outer;                            // 0x2398(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinAngleDiffrence_Outer;                           // 0x239C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngleDiffrence_Outer;                           // 0x23A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransformTotalTime_Outer;                          // 0x23A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TransformTotalTime_Outer_Sprint;                   // 0x23A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTime_MoveForward_Outer;                         // 0x23AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTime_MoveAfter_Outer;                           // 0x23B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23B4[0x4];                                     // 0x23B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraInterp*                          CameraInterp_Outer;                                // 0x23B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockCameraWhenOuterCross;                         // 0x23C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCameraDecoupledFromCapsule;                       // 0x23C1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23C2[0x2];                                     // 0x23C2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraInterpSpeed_Outer;                           // 0x23C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngleCanCross_Outer;                            // 0x23C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceToEdge_Outer;                              // 0x23CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugForceDisableCameraTransform;                 // 0x23D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawCanPlace;                                // 0x23D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDownWallInterp;                              // 0x23D2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugTurningAngle;                                // 0x23D3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugCheckOnEdgeOfWall;                           // 0x23D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugCheckWillReachTopOfWall;                     // 0x23D5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugTraceForNewWall;                             // 0x23D6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugCrossWall;                                   // 0x23D7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugCrossWallTrace;                              // 0x23D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawTransformTargetLocation;                 // 0x23D9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawWhenTransform;                           // 0x23DA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDrawOuterCrossCamera;                        // 0x23DB(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_23DC[0x4];                                     // 0x23DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   MarvelCharacter;                                   // 0x23E0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_23E8[0xBE8];                                   // 0x23E8(0x0BE8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CanGetOnWall(struct FGetOnWallResult* OutGetOnWallResult, const struct FGetOnWallParam& InParams, bool bCheckEvenStill);
	void ClientGetOffWall(EWallRunningEndReason InWallRunningEndReason);
	bool GetIsSprintRunningOnWall();
	void GetOffWall(bool IsFromJumping, bool bImmediately);
	bool GetOnWall(const struct FGetOnWallResult& InGetOnWallResult);
	void JumpDownLaunchCharacter(const struct FVector& InLaunchVelocity);
	void OnMoveForwardReceive(float Val);
	void OnMoveRightReceive(float Val);
	void OnRep_CurrentCrossWallInfo();
	void OnRep_IsOnWall();
	void OnRep_IsOnWallIdle();
	void ServerCrossWall(const ECrossWallType InCrossWallType, const struct FHitResult& InSourceHitResult, const struct FHitResult& InTargetHitResult, float TransformTime, const struct FVector& InNewMoveDirection, const struct FVector& InForwardDirection);
	void ServerGetOffWall(const struct FWallRunningEndInfo& InWallRunningEndInfo, bool bImmediately);
	void ServerSetIsInSprint(bool IsInSprint, const class FString& SyncSignature);
	void SetIsInSprint(bool IsInSprint);
	void SetIsInSprintSync(bool IsInSprint);
	void WalkDownRestoreMove();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterWallRunningComponent">();
	}
	static class UCharacterWallRunningComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterWallRunningComponent>();
	}
};

// Class Marvel.ChatMsgEntry
// 0x0060 (0x0418 - 0x03B8)
class UChatMsgEntry final : public UUserWidget
{
public:
	uint8                                         Pad_3B8[0x8];                                      // 0x03B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMultiLineEditableText*                 ReadOnlyMsg;                                       // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EChatMsgType, struct FSlateColor>        ColorMap;                                          // 0x03C8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChatMsgEntry">();
	}
	static class UChatMsgEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChatMsgEntry>();
	}
};

// Class Marvel.MarvelInstantReplayManager
// 0x0370 (0x03A0 - 0x0030)
class UMarvelInstantReplayManager final : public UObject
{
public:
	bool                                          bEnabled;                                          // 0x0030(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EMarvelReplayEndReason                        EndReason;                                         // 0x0031(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelReplayContext                   ReplayContext_Paused;                              // 0x0038(0x00E0)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_118[0x28];                                     // 0x0118(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ReplayDataRequest;                                 // 0x0140(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelReplayContext                   ReplayContext;                                     // 0x0148(0x00E0)(Transient, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EMarvelReplayState Value)> OnReplayStateChanged;                              // 0x0228(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnReplayGotoTimeFinishedDelegate;                  // 0x0238(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TDelegate<void(double Time)>                  OnReplayDownloadTime;                              // 0x0248(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25C[0x124];                                    // 0x025C(0x0124)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarvelDuplicationParameters>   PendingDuplicateObjects;                           // 0x0380(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FMarvelDuplicatedLevelToConsider> DuplicatedLevelsToConsider;                        // 0x0390(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)

public:
	static class UMarvelInstantReplayManager* Get(const class UObject* InWCO);

	void CacheNetGUIDsForReplay(class UWorld* InWorld);
	void DumpDuplicatedLevelsToIncrementalDestroy();
	bool NeedStopImmediately();
	void On_Replay_Playing();
	void On_Replay_Starting();
	void On_Replay_Stopped();
	void On_Replay_Stopping();
	void OnReplayEnded(bool bSuccess);
	void OnReplayGotoTimeFinished(const bool bWasSuccessful);
	void OnReplaySpectatorLoaded(class UWorld* InWorld, class APlayerController* InSpectatorController);
	void OnReplayStartLoadCheckpoint(class UWorld* InWorld, bool bFirst, double DownloadTime);
	void OnReplayStreamingReady(class UWorld* InWorld);
	void PausePlayReplay();
	bool PlayReplay(const class FString& SessionName, const struct FMarvelReplayConfig& InConfig, const struct FMarvelSpectatorInfo& InSpectatorInfo);
	void ResumePlayReplay();
	void SetIsEnabled(const bool bInEnable);
	bool ShouldShareHUD();
	void StopPlayReplay(const EMarvelReplayEndReason InEndReason);
	void StopPlayReplayImmediately(const EMarvelReplayEndReason InEndReason);
	void UnloadDuplicatedLevels();

	bool CanPlay(const EDemoPlayType ReplayType) const;
	class APlayerController* GetCurrentPlayerController() const;
	EMarvelReplayEndReason GetEndReason() const;
	class ULocalPlayer* GetLocalPlayer() const;
	bool IsDeathReplayPlaying() const;
	bool IsDemoPlayType(EDemoPlayType InDemoType) const;
	bool IsPlaying() const;
	bool IsStopped() const;
	bool IsStopping() const;
	void SetPlayReplayRate(float InTimeDilation) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelInstantReplayManager">();
	}
	static class UMarvelInstantReplayManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelInstantReplayManager>();
	}
};

// Class Marvel.ClientStaticMeshActor
// 0x0048 (0x04E8 - 0x04A0)
class AClientStaticMeshActor final : public AStaticMeshActor
{
public:
	class UAkAudioEvent*                          AkAudioEvent;                                      // 0x04A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceThreshold;                                 // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeThreshold;                                     // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LinearMomentThreshold;                             // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AngularMomentThreshold;                            // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Hitpoints;                                         // 0x04B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4BC[0x4];                                      // 0x04BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         FXSystem;                                          // 0x04C0(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C8[0x20];                                     // 0x04C8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActorHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ClientStaticMeshActor">();
	}
	static class AClientStaticMeshActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AClientStaticMeshActor>();
	}
};

// Class Marvel.CollisionCheck
// 0x0050 (0x04E0 - 0x0490)
class ACollisionCheck final : public AActor
{
public:
	TMap<class UStaticMesh*, int32>               StaticMeshFilter;                                  // 0x0490(0x0050)(NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CollisionCheck">();
	}
	static class ACollisionCheck* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACollisionCheck>();
	}
};

// Class Marvel.CombineNiagaraManagerSubsystem
// 0x0050 (0x0088 - 0x0038)
class UCombineNiagaraManagerSubsystem final : public UWorldSubsystem
{
public:
	TMap<struct FCombineNiagaraKey, class UCombineNiagaraObject*> CombineNiagaraMap;                                 // 0x0038(0x0050)(Transient, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CombineNiagaraManagerSubsystem">();
	}
	static class UCombineNiagaraManagerSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCombineNiagaraManagerSubsystem>();
	}
};

// Class Marvel.MarvelPhysics_Projectile
// 0x0020 (0x3070 - 0x3050)
class AMarvelPhysics_Projectile : public AMarvelAbilityTargetActor_Projectile
{
public:
	class UStaticMeshComponent*                   MeshComponent;                                     // 0x3050(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          BoxCollision;                                      // 0x3058(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APhysicsSummoner*                       SourcePhysicsSummoner;                             // 0x3060(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicalSurface                              MeshSurfaceType;                                   // 0x3068(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPhysicsWeaponType                            WeaponType;                                        // 0x3069(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_306A[0x2];                                     // 0x306A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HealthReduction;                                   // 0x306C(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void InitPhysicsProjectileData(class APhysicsSummoner* InActor, float InHealthReduction);
	void OnRep_SourcePhysicsSummoner();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPhysics_Projectile">();
	}
	static class AMarvelPhysics_Projectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelPhysics_Projectile>();
	}
};

// Class Marvel.ConstraintEmitterComponent
// 0x0100 (0x0570 - 0x0470)
class UConstraintEmitterComponent final : public USceneComponent
{
public:
	float                                         EmitSpeed;                                         // 0x0470(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeoutTime;                                       // 0x0474(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           EmitTimerHandle;                                   // 0x0478(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmitTickInterval;                                  // 0x0490(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmitTickProgress;                                  // 0x0494(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EmitTime;                                          // 0x0498(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalDistance;                                     // 0x049C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTimerHandle                           DelayCreatCableTimerHandle;                        // 0x04A0(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayCreatCableTime;                               // 0x04B8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4BC[0x4];                                      // 0x04BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         EmitEffect;                                        // 0x04C0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         BreakEffect;                                       // 0x04C8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemComponent*                     EffectInstance;                                    // 0x04D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AStaticMeshActor>           LineMeshClass;                                     // 0x04D8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APhysicsConstraintActor>    ConstraintActorClass;                              // 0x04E0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     CableActorClass;                                   // 0x04E8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F0[0x18];                                     // 0x04F0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ToLocation;                                        // 0x0508(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerLineLength;                                     // 0x0520(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_524[0x4];                                      // 0x0524(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AChaosDestructionActor*                 ChaosDestructionActor;                             // 0x0528(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_530[0x8];                                      // 0x0530(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AStaticMeshActor*>               LineMeshes;                                        // 0x0538(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class APhysicsConstraintActor*>        PhysicsConstraints;                                // 0x0548(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                 CableActor;                                        // 0x0558(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDestructionCableComponent*             DestructionCableComponent;                         // 0x0560(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_568[0x8];                                      // 0x0568(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EffectEndFunc();
	void SetEmitterInfo(const struct FVector& ToLocation_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ConstraintEmitterComponent">();
	}
	static class UConstraintEmitterComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UConstraintEmitterComponent>();
	}
};

// Class Marvel.OnlineCameraMovement
// 0x0080 (0x0278 - 0x01F8)
#pragma pack(push, 0x1)
class alignas(0x08) UOnlineCameraMovement : public UCameraMovement
{
public:
	uint8                                         Pad_1F8[0x78];                                     // 0x01F8(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxSimulateSpeedPower;                             // 0x0270(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxSimulateRotSpeed;                               // 0x0274(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void NetMulticastMovementInfo(const struct FClientCameraMovementInfo& InInfo);
	void ServerSetMovementInfo(const struct FClientCameraMovementInfo& InInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OnlineCameraMovement">();
	}
	static class UOnlineCameraMovement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOnlineCameraMovement>();
	}
};
#pragma pack(pop)

// Class Marvel.ControlPointBase
// 0x0080 (0x0510 - 0x0490)
class AControlPointBase : public AActor
{
public:
	uint8                                         Pad_490[0x18];                                     // 0x0490(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelScopeCheckComponent*              ScopeCheckComponent;                               // 0x04A8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeshRelativeRotation;                              // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B4[0x4];                                      // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMarvelVehicleAnimBakedData*>    VehicleBakedData;                                  // 0x04B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         IdleAnimTime;                                      // 0x04C8(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ForwardAnimTime;                                   // 0x04CC(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BackwardAnimTime;                                  // 0x04D0(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurnFwdBSAnimTime;                                 // 0x04D4(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurnBwdBSAnimTime;                                 // 0x04D8(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4DC[0x4];                                      // 0x04DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         CachedTraceList;                                   // 0x04E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UMarvelSplineComponent*>         CachedSplines;                                     // 0x04F0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_500[0x10];                                     // 0x0500(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetCurrSplineIndex();
	TArray<class AActor*> GetTraceListForBake();
	bool GetTransformAlongAllSpines(float InDistance, struct FTransform* OutTransform);
	bool RecursivelyGetTransformAlongSpline(const class UMarvelSplineComponent* InSpline, const int32 InSplineIndex, const float InDistance, struct FTransform* OutTransform);
	void RewindForReplayForPy();
	void SetNeareastTracePoint(const TArray<float>& DisList);

	float GetSplineStartDistance(int32 InSplineIndex) const;
	EControlPointType GetType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ControlPointBase">();
	}
	static class AControlPointBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AControlPointBase>();
	}
};

// Class Marvel.CueCombineNiagaraComponent
// 0x00C8 (0x01B8 - 0x00F0)
class UCueCombineNiagaraComponent final : public UActorComponent
{
public:
	class UNiagaraSystem*                         CombineNiagaraAsset;                               // 0x00F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelCueNotify_Actor*                 OwnerCueNotifyActor;                               // 0x00F8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VectorParamNum;                                    // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        VectorParamDefaults;                               // 0x0108(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         FloatParamNum;                                     // 0x0118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11C[0x4];                                      // 0x011C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 FloatParamDefaults;                                // 0x0120(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         IntParamNum;                                       // 0x0130(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_134[0x4];                                      // 0x0134(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 IntParamDefaults;                                  // 0x0138(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x70];                                     // 0x0148(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetFloatParameter(int32 Index_0, float Value);
	void SetIntOrEnumParameter(int32 Index_0, int32 Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueCombineNiagaraComponent">();
	}
	static class UCueCombineNiagaraComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueCombineNiagaraComponent>();
	}
};

// Class Marvel.CueData_AttachCharacter_WithOffset
// 0x0068 (0x00C0 - 0x0058)
class UCueData_AttachCharacter_WithOffset final : public UCueData_AttachCharacter
{
public:
	uint8                                         Pad_58[0x8];                                       // 0x0058(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelativeOffset;                                    // 0x0060(0x0060)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueData_AttachCharacter_WithOffset">();
	}
	static class UCueData_AttachCharacter_WithOffset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueData_AttachCharacter_WithOffset>();
	}
};

// Class Marvel.CueDataProcessor_ManageVisible
// 0x0060 (0x00B0 - 0x0050)
class UCueDataProcessor_ManageVisible final : public UCueDataProcessor_Base
{
public:
	uint8                                         Pad_50[0x60];                                      // 0x0050(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisplayComponent();
	void HideComponent();
	void RecoverComponent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueDataProcessor_ManageVisible">();
	}
	static class UCueDataProcessor_ManageVisible* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueDataProcessor_ManageVisible>();
	}
};

// Class Marvel.CueDataProcessor_PlayAnim
// 0x0010 (0x0060 - 0x0050)
class UCueDataProcessor_PlayAnim final : public UCueDataProcessor_Base
{
public:
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPlayAnimEventTriggered();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueDataProcessor_PlayAnim">();
	}
	static class UCueDataProcessor_PlayAnim* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueDataProcessor_PlayAnim>();
	}
};

// Class Marvel.CueDataProcessor_UnarmedWeapon
// 0x0060 (0x00B0 - 0x0050)
class UCueDataProcessor_UnarmedWeapon final : public UCueDataProcessor_Base
{
public:
	uint8                                         Pad_50[0x60];                                      // 0x0050(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ArmWeapon();
	void HandleCharacterMeshReady();
	void HandleRecycle();
	void UnArmWeapon();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueDataProcessor_UnarmedWeapon">();
	}
	static class UCueDataProcessor_UnarmedWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueDataProcessor_UnarmedWeapon>();
	}
};

// Class Marvel.CueData_WeaponAnim
// 0x0020 (0x0060 - 0x0040)
class UCueData_WeaponAnim final : public UCueData_Base
{
public:
	struct FGameplayTag                           StartEventTag;                                     // 0x0040(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           StopEventTag;                                      // 0x004C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           WeaponMontage;                                     // 0x0058(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueData_WeaponAnim">();
	}
	static class UCueData_WeaponAnim* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueData_WeaponAnim>();
	}
};

// Class Marvel.GetOptionsHandler
// 0x0000 (0x0030 - 0x0030)
class UGetOptionsHandler final : public UObject
{
public:
	static const TArray<class FName> GetParentThemeOptions();
	static const TArray<class FName> GetSubThemeOptions();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GetOptionsHandler">();
	}
	static class UGetOptionsHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGetOptionsHandler>();
	}
};

// Class Marvel.CueNiagaraInfoBlueprintLibrary
// 0x0000 (0x0030 - 0x0030)
class UCueNiagaraInfoBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueNiagaraInfoBlueprintLibrary">();
	}
	static class UCueNiagaraInfoBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueNiagaraInfoBlueprintLibrary>();
	}
};

// Class Marvel.CuePlayWaterEffectLibrary
// 0x0000 (0x0030 - 0x0030)
class UCuePlayWaterEffectLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void TestAndTryPlayWaterEffect(const class UObject* WorldContext, class UGameplayAbility* SourceAbility, const struct FHitResult& RawHitResult, const struct FVector& TraceStart, const struct FVector& TraceEnd, const struct FVector& HitDirection);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CuePlayWaterEffectLibrary">();
	}
	static class UCuePlayWaterEffectLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCuePlayWaterEffectLibrary>();
	}
};

// Class Marvel.CueUserDataProcessor_ActiveManager
// 0x0020 (0x0070 - 0x0050)
class UCueUserDataProcessor_ActiveManager : public UCueDataProcessor_Base
{
public:
	uint8                                         Pad_50[0x20];                                      // 0x0050(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateCueComponent();
	void DeactivateCueComponent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueUserDataProcessor_ActiveManager">();
	}
	static class UCueUserDataProcessor_ActiveManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueUserDataProcessor_ActiveManager>();
	}
};

// Class Marvel.MarvelReplicationGraphNode_Default
// 0x0000 (0x00F8 - 0x00F8)
class UMarvelReplicationGraphNode_Default final : public UReplicationGraphNode_ActorList
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelReplicationGraphNode_Default">();
	}
	static class UMarvelReplicationGraphNode_Default* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelReplicationGraphNode_Default>();
	}
};

// Class Marvel.CueUserDataProcessor_DelayActiveManager
// 0x0030 (0x00A0 - 0x0070)
class UCueUserDataProcessor_DelayActiveManager final : public UCueUserDataProcessor_ActiveManager
{
public:
	uint8                                         Pad_70[0x30];                                      // 0x0070(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearTimer();
	void DelayActivateComponent();
	void DelayDeactivateComponent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueUserDataProcessor_DelayActiveManager">();
	}
	static class UCueUserDataProcessor_DelayActiveManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueUserDataProcessor_DelayActiveManager>();
	}
};

// Class Marvel.CueDataProcessor_FixedValue
// 0x0030 (0x0080 - 0x0050)
class UCueDataProcessor_FixedValue final : public UCueDataProcessor_Base
{
public:
	class UCueDataCurveAction_Base*               CurveAction;                                       // 0x0050(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_58[0x28];                                      // 0x0058(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetFixedValue();
	void OnActiveEventTriggered();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueDataProcessor_FixedValue">();
	}
	static class UCueDataProcessor_FixedValue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueDataProcessor_FixedValue>();
	}
};

// Class Marvel.MarvelRopeActor
// 0x0078 (0x0508 - 0x0490)
class AMarvelRopeActor final : public AActor
{
public:
	uint8                                         Pad_490[0x38];                                     // 0x0490(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelRopeComponent*                   RopeComponent;                                     // 0x04C8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBoxComponent*                          BoxShape;                                          // 0x04D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   LeftAttachMesh;                                    // 0x04D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   RightAttachMesh;                                   // 0x04E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsConstraintComponent*            PhysicsConstraint;                                 // 0x04E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        PreviewMeshComponent;                              // 0x04F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F8[0x8];                                      // 0x04F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0500(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelRopeActor">();
	}
	static class AMarvelRopeActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelRopeActor>();
	}
};

// Class Marvel.CueDataProcessor_FloatCurve
// 0x00E8 (0x0140 - 0x0058)
class UCueDataProcessor_FloatCurve final : public UCueUserDataProcessor_Tickable
{
public:
	uint8                                         Pad_58[0xA8];                                      // 0x0058(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	class UCueDataCurveAction_Base*               CurveAction;                                       // 0x0100(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_108[0x38];                                     // 0x0108(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnActiveEventTriggered();
	void OnCueRecycle();
	void OnDeactiveEventTriggered();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueDataProcessor_FloatCurve">();
	}
	static class UCueDataProcessor_FloatCurve* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueDataProcessor_FloatCurve>();
	}
};

// Class Marvel.CueDataCurveAction_NiagaraFloat
// 0x0010 (0x0058 - 0x0048)
class UCueDataCurveAction_NiagaraFloat final : public UCueDataCurveAction_Base
{
public:
	class FName                                   ParameterName;                                     // 0x0048(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueDataCurveAction_NiagaraFloat">();
	}
	static class UCueDataCurveAction_NiagaraFloat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueDataCurveAction_NiagaraFloat>();
	}
};

// Class Marvel.CueDataCurveAction_DecalFloat
// 0x0010 (0x0058 - 0x0048)
class UCueDataCurveAction_DecalFloat final : public UCueDataCurveAction_Base
{
public:
	class FName                                   ParameterName;                                     // 0x0048(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueDataCurveAction_DecalFloat">();
	}
	static class UCueDataCurveAction_DecalFloat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueDataCurveAction_DecalFloat>();
	}
};

// Class Marvel.CueDataCurveAction_CharacterComponentMaterial
// 0x0010 (0x00A8 - 0x0098)
class UCueDataCurveAction_CharacterComponentMaterial final : public UCueDataCurveAction_CharacterMaterial
{
public:
	class FName                                   ComponentName;                                     // 0x0098(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A4[0x4];                                       // 0x00A4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueDataCurveAction_CharacterComponentMaterial">();
	}
	static class UCueDataCurveAction_CharacterComponentMaterial* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueDataCurveAction_CharacterComponentMaterial>();
	}
};

// Class Marvel.CueDataProcessor_ModifyNiagaraAccordingToCharacter
// 0x0008 (0x0058 - 0x0050)
class UCueDataProcessor_ModifyNiagaraAccordingToCharacter final : public UCueDataProcessor_Base
{
public:
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void RecoverNiagaraScale();
	void SetNiagaraScale();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueDataProcessor_ModifyNiagaraAccordingToCharacter">();
	}
	static class UCueDataProcessor_ModifyNiagaraAccordingToCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueDataProcessor_ModifyNiagaraAccordingToCharacter>();
	}
};

// Class Marvel.CueDataProcessor_SurvivalTime
// 0x0010 (0x0060 - 0x0050)
class UCueDataProcessor_SurvivalTime final : public UCueDataProcessor_Base
{
public:
	uint8                                         Pad_50[0x10];                                      // 0x0050(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEventTrigger();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueDataProcessor_SurvivalTime">();
	}
	static class UCueDataProcessor_SurvivalTime* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueDataProcessor_SurvivalTime>();
	}
};

// Class Marvel.CueDataProcessor_UpdateNiagaraLocParam
// 0x0050 (0x00A8 - 0x0058)
class UCueDataProcessor_UpdateNiagaraLocParam final : public UCueUserDataProcessor_Tickable
{
public:
	struct FPortalSegments                        PrePortalSegments;                                 // 0x0058(0x0050)(Protected, NativeAccessSpecifierProtected)

public:
	void BeginUpdateLocParam(class UActorComponent* Component, bool bReset);
	void EndUpdateLocParam(class UActorComponent* Component);
	void RestoreNiagaraParam();
	void UpdateNiagaraParam();

	void GetFinalParamLocWithRelOffset(const struct FVector& InRelOffset, struct FVector* OutParamLoc) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CueDataProcessor_UpdateNiagaraLocParam">();
	}
	static class UCueDataProcessor_UpdateNiagaraLocParam* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCueDataProcessor_UpdateNiagaraLocParam>();
	}
};

// Class Marvel.Cue_Buff_1104
// 0x0000 (0x1038 - 0x1038)
class ACue_Buff_1104 final : public AMarvelCueNotify_Buff
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Buff_1104">();
	}
	static class ACue_Buff_1104* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Buff_1104>();
	}
};

// Class Marvel.Cue_Buff_1115
// 0x0038 (0x1070 - 0x1038)
class ACue_Buff_1115 final : public AMarvelCueNotify_Buff
{
public:
	class FName                                   FadeInOutParam;                                    // 0x1038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInOutDuration;                                 // 0x1044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInOutMaxValue;                                 // 0x1048(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104C[0x24];                                    // 0x104C(0x0024)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdeteMaterialFadeInOut();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Buff_1115">();
	}
	static class ACue_Buff_1115* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Buff_1115>();
	}
};

// Class Marvel.Cue_Buff_1121
// 0x0008 (0x1040 - 0x1038)
class ACue_Buff_1121 final : public AMarvelCueNotify_Buff
{
public:
	class UNiagaraComponent*                      TrailNiagara;                                      // 0x1038(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Buff_1121">();
	}
	static class ACue_Buff_1121* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Buff_1121>();
	}
};

// Class Marvel.MarvelPlayerStart
// 0x0010 (0x04D8 - 0x04C8)
class AMarvelPlayerStart : public APlayerStart
{
public:
	float                                         StartRadius;                                       // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartCount;                                        // 0x04CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPlayerStartBillboardComponent*         PlayerStartBillboardComponent;                     // 0x04D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void DrawClientSprite();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPlayerStart">();
	}
	static class AMarvelPlayerStart* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelPlayerStart>();
	}
};

// Class Marvel.Cue_Buff_1146
// 0x0028 (0x1060 - 0x1038)
class ACue_Buff_1146 final : public AMarvelCueNotify_Buff
{
public:
	class UNiagaraComponent*                      NS_Healing;                                        // 0x1038(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 EffectCauser;                                      // 0x1040(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1048[0x18];                                    // 0x1048(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTakeTreat(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Buff_1146">();
	}
	static class ACue_Buff_1146* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Buff_1146>();
	}
};

// Class Marvel.Cue_Buff_Dying
// 0x0010 (0x1048 - 0x1038)
class ACue_Buff_Dying final : public AMarvelCueNotify_Buff
{
public:
	class FName                                   BlurPPName;                                        // 0x1038(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1044[0x4];                                     // 0x1044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Buff_Dying">();
	}
	static class ACue_Buff_Dying* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Buff_Dying>();
	}
};

// Class Marvel.Cue_Buff_KnockLieDown
// 0x0058 (0x1090 - 0x1038)
class ACue_Buff_KnockLieDown final : public AMarvelCueNotify_Buff
{
public:
	uint8                                         Pad_1038[0x14];                                    // 0x1038(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SmashCameraLagSpeed;                               // 0x104C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmashTargetArmLength;                              // 0x1050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SmashSpringArmSpeed;                               // 0x1054(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecoveryAnimDuration;                              // 0x1058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_105C[0x1C];                                    // 0x105C(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           KnockDownExitTag;                                  // 0x1078(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1084[0x4];                                     // 0x1084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   TargetCharacter;                                   // 0x1088(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnCharacterTagUpdate(const struct FGameplayTag& Tag, bool TagExists);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Buff_KnockLieDown">();
	}
	static class ACue_Buff_KnockLieDown* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Buff_KnockLieDown>();
	}
};

// Class Marvel.InteractableActor
// 0x0020 (0x04B0 - 0x0490)
class AInteractableActor final : public AActor
{
public:
	TArray<class UInteractableComponent*>         Interactables;                                     // 0x0490(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UInteractableConstraintComponent*> Constraints;                                       // 0x04A0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InteractableActor">();
	}
	static class AInteractableActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AInteractableActor>();
	}
};

// Class Marvel.Cue_Buff_KnockUp
// 0x0000 (0x1038 - 0x1038)
class ACue_Buff_KnockUp final : public AMarvelCueNotify_Buff
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Buff_KnockUp">();
	}
	static class ACue_Buff_KnockUp* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Buff_KnockUp>();
	}
};

// Class Marvel.Cue_Buff_WebTying
// 0x0088 (0x10C0 - 0x1038)
class ACue_Buff_WebTying : public AMarvelCueNotify_Buff
{
public:
	class UNiagaraComponent*                      NS_Loop;                                           // 0x1038(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FBuddleMeshSkinIdMapItem>  BuddleMeshHeroIdMap;                               // 0x1040(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	float                                         TrajectorySpeed;                                   // 0x1090(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1094[0x4];                                     // 0x1094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            LineDissloveCurve;                                 // 0x1098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWillDestroyTrajectory;                            // 0x10A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A1[0x7];                                     // 0x10A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemComponent*                     TrajectoryEffectComponent;                         // 0x10A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartFadeOutTime;                                  // 0x10B0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10B4[0xC];                                     // 0x10B4(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DestroyTrajectoryComponent();
	struct FBuddleMeshItem GetBuddleMeshItem();
	void K2_OnAsyncLoadFinished();
	void K2_OnTrajectoryHit();
	void OnAsyncLoadFinished();
	void PreLoadAsset(int32 HeroID, int32 SkinID, int32 SculptID);
	void RestorePhysicsSimulation();
	bool SetBuddleMeshAsset(const int32 HeroID, const int32 SkinID, const int32 SculptID, bool IsBody, class UStaticMesh* InAsset);
	void SetLineDissloveParam(float ElapsedTime);
	void TryClosePhysicsSimulation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Buff_WebTying">();
	}
	static class ACue_Buff_WebTying* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Buff_WebTying>();
	}
};

// Class Marvel.StencilComponent
// 0x0680 (0x0830 - 0x01B0)
class UStencilComponent final : public UAttachmentHelper
{
public:
	float                                         PPTransparentDistanceOffset;                       // 0x01B0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExternalEnablePPTransparent;                      // 0x01B4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDitheringConfig                       DitheringConfig;                                   // 0x01B5(0x0003)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	struct FSummonedStencilConfig                 SummonedStencilConfig;                             // 0x01B8(0x0006)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1BE[0x152];                                    // 0x01BE(0x0152)(Fixing Size After Last Property [ Dumper-7 ])
	struct FOutlineConfig                         WrittenOutline;                                    // 0x0310(0x0020)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_330[0x150];                                    // 0x0330(0x0150)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFillColorConfig                       WrittenFillColor;                                  // 0x0480(0x0020)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A0[0x290];                                    // 0x04A0(0x0290)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Counter_EnableCustomDepth;                         // 0x0730(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_734[0x4];                                      // 0x0734(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class AActor*, struct FAffectedComponents> ManuallyAffectedActor;                             // 0x0738(0x0050)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bTransparentByPPEnable;                            // 0x0788(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_789[0x3];                                      // 0x0789(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DitheringOpacity;                                  // 0x078C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         DitheringOpacityRankIndex;                         // 0x0790(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_794[0x4];                                      // 0x0794(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DitheringOpacityUpdateTimer;                       // 0x0798(0x0018)(BlueprintVisible, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDebugEnable;                                      // 0x07B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7B1[0x7];                                      // 0x07B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelBaseAbilitySystemComponent*      CachedOwnerASC;                                    // 0x07B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStencilSettings*                       CachedStencilSettings;                             // 0x07C0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTeamComponent*                         CachedOwnerTeamComponent;                          // 0x07C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UReactivePropertyComponent*             CachedOwnerProperty;                               // 0x07D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelPlayerView*                      CachedPlayerView;                                  // 0x07D8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStencilManager*                        CachedStencilManager;                              // 0x07E0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7E8[0x48];                                     // 0x07E8(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddAffectedActor_PPTransparent(struct FStencilModifier_SyncPPTransparent* Handle, class AActor* TargetActor);
	void DelayedBeginPlay();
	void ForceUpdate();
	void ForceUpdateDitheringTransparent();
	void OnTagUpdated(const struct FGameplayTag& InTag, bool bExist);
	void RemoveAffectedActor_PPTransparent(struct FStencilModifier_SyncPPTransparent* Handle);
	void SetSummonedStencilConfig(const struct FSummonedStencilConfig& NewConfig);
	void UnwatchComponentAttachment(class USceneComponent* InComp);
	void UpdateDitheringTransparent(bool bForceUpdate);
	void UpdateStencilState();
	void WatchComponentAttachment(class USceneComponent* InComp);

	float GetCurrentDitheringOpacity() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StencilComponent">();
	}
	static class UStencilComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStencilComponent>();
	}
};

// Class Marvel.Cue_DeathRebornNotify
// 0x0000 (0x0CC8 - 0x0CC8)
class ACue_DeathRebornNotify final : public AMarvelCueNotify_Actor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_DeathRebornNotify">();
	}
	static class ACue_DeathRebornNotify* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_DeathRebornNotify>();
	}
};

// Class Marvel.Widget_MainHpBar
// 0x0038 (0x05E0 - 0x05A8)
class UWidget_MainHpBar : public UMarvelUserWidget
{
public:
	class UWidget_HpBar*                          Widget_HpBar;                                      // 0x05A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x05B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   RegisterCueTags;                                   // 0x05B8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C8[0x14];                                     // 0x05C8(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bCustomColorPreview;                               // 0x05DC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5DD[0x3];                                      // 0x05DD(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddBuffWidget(class UUserWidget* InWidget);
	void OnTagUpdated(const struct FGameplayTag& Tag, bool bInExist);
	void SetShieldExternal(float InShieldExternal);
	void SetTargetActor(class AActor* InActor);
	void SetTargetTreatPercentageCur(float InPercentage);
	void SetTotalHpCur(float InTotalHpCur);
	void SetTotalHpMax(float InTotalHpMax);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_MainHpBar">();
	}
	static class UWidget_MainHpBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_MainHpBar>();
	}
};

// Class Marvel.Widget_ViewTargetHpBar
// 0x0000 (0x05E0 - 0x05E0)
class UWidget_ViewTargetHpBar : public UWidget_MainHpBar
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_ViewTargetHpBar">();
	}
	static class UWidget_ViewTargetHpBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_ViewTargetHpBar>();
	}
};

// Class Marvel.ProcedureAudioManager
// 0x0898 (0x08C8 - 0x0030)
class UProcedureAudioManager : public UObject
{
public:
	bool                                          bAsyncLoading;                                     // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SystemVoiceBnkName;                                // 0x0034(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SystemTag;                                         // 0x0040(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ScoringTag;                                        // 0x004C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DeathTag;                                          // 0x0058(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DoubleKillTag;                                     // 0x0064(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TripleKillTag;                                     // 0x0070(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           QuadraKillTag;                                     // 0x007C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PentaKillTag;                                      // 0x0088(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HexaKillTag;                                       // 0x0094(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TeamKillTag;                                       // 0x00A0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ConsecutiveKillTag;                                // 0x00AC(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HeroSelectingTag;                                  // 0x00B8(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PrepareStartTag;                                   // 0x00C4(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PreparingTag;                                      // 0x00D0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           FightStartTag;                                     // 0x00DC(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           FightingTag;                                       // 0x00E8(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OvertimeStartTag;                                  // 0x00F4(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OvertimingTag;                                     // 0x0100(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           QuitStartTag;                                      // 0x010C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           QuittingTag;                                       // 0x0118(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           BattleEndStartTag;                                 // 0x0124(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           BattleEndingTag;                                   // 0x0130(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           BattleWinTag;                                      // 0x013C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           BattleLostTag;                                     // 0x0148(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           BattleDrawTag;                                     // 0x0154(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           BirthBaseUnbeatableTag;                            // 0x0160(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AssaultAActivateTag;                               // 0x016C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AssaultBActivateTag;                               // 0x0178(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AssaultFightingTag;                                // 0x0184(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AssaultObjOccupyingTag;                            // 0x0190(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AssaultObjFightingTag;                             // 0x019C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AssaultObjStagedTag;                               // 0x01A8(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AssaultObjOccupiedTag;                             // 0x01B4(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ControlUnlockStartTag;                             // 0x01C0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ControlUnlockingTag;                               // 0x01CC(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ControlFightStartTag;                              // 0x01D8(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ControlOccupyingTag;                               // 0x01E4(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ControlFightingTag;                                // 0x01F0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ControlOccupiedTag;                                // 0x01FC(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ControlOwnedTag;                                   // 0x0208(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ControlFightEndTag;                                // 0x0214(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ControlOccupiedFirstTag;                           // 0x0220(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ControlOccupyProgressATag;                         // 0x022C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ControlOccupyProgressBTag;                         // 0x0238(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ControlOccupyProgressExceedTag;                    // 0x0244(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EscortFightingTag;                                 // 0x0250(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EscortPayloadOccupyingTag;                         // 0x025C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EscortPayloadOccupiedTag;                          // 0x0268(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PayloadMovingTag;                                  // 0x0274(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PayloadFightingTag;                                // 0x0280(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PayloadAboutCheckTag;                              // 0x028C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PayloadAboutCheckingTag;                           // 0x0298(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EscortPayloadActivateTag;                          // 0x02A4(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EscortPayloadCheckedTag;                           // 0x02B0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EscortPayloadAboutEndTag;                          // 0x02BC(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EscortPayloadEndingTag;                            // 0x02C8(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EscortPayloadAdvanceSecNTag;                       // 0x02D4(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EscortPayloadRetreatSecNTag;                       // 0x02E0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EscortPayloadPointStopSecNTag;                     // 0x02EC(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EscortPayloadProgressPointOneTag;                  // 0x02F8(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EscortPayloadProgressPointTwoTag;                  // 0x0304(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EscortPayloadProgressDestinationOneTag;            // 0x0310(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EscortPayloadProgressDestinationTwoTag;            // 0x031C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HybridFightingTag;                                 // 0x0328(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HybridObjActivateTag;                              // 0x0334(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HybridObjOccupyingTag;                             // 0x0340(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HybridObjFightingTag;                              // 0x034C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HybridObjStagedTag;                                // 0x0358(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HybridObjOccupiedTag;                              // 0x0364(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HybridPayloadActivateTag;                          // 0x0370(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HybridPayloadOccupyingTag;                         // 0x037C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HybridPayloadOccupiedTag;                          // 0x0388(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HybridPayloadCheckedTag;                           // 0x0394(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HybridPayloadAboutEndTag;                          // 0x03A0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HybridPayloadEndingTag;                            // 0x03AC(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WinScoreCheckTag;                                  // 0x03B8(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DeathMatchAddScoreTag;                             // 0x03C4(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DeathMatchSubScoreTag;                             // 0x03D0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SelfScoreWinTag1;                                  // 0x03DC(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SelfScoreWinTag2;                                  // 0x03E8(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SelfScoreWinTag3;                                  // 0x03F4(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SelfScoreWinTag4;                                  // 0x0400(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SelfScoreWinTag5;                                  // 0x040C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SelfScoreWinTag10;                                 // 0x0418(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SelfScoreWinTag15;                                 // 0x0424(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyScoreWin1Tag1;                                // 0x0430(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyScoreWin1Tag2;                                // 0x043C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyScoreWin1Tag3;                                // 0x0448(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyScoreWin1Tag4;                                // 0x0454(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyScoreWin1Tag5;                                // 0x0460(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyScoreWin1Tag10;                               // 0x046C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyScoreWin1Tag15;                               // 0x0478(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           FristWinnerTag;                                    // 0x0484(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           GainAdvantageTag;                                  // 0x0490(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           LostAdvantageTag;                                  // 0x049C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PickupEnemyCrystalTag;                             // 0x04A8(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PickupAllyCrystalTag;                              // 0x04B4(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           MultiKillAudioTag;                                 // 0x04C0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           FinishKillTag;                                     // 0x04CC(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SuddenlyDeathTag;                                  // 0x04D8(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AllyTripleLevel;                                   // 0x04E4(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyTripleLevel;                                  // 0x04F0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TripleLevelKill;                                   // 0x04FC(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AllyPlayerGetHalfScore;                            // 0x0508(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyPlayerGetHalfScore;                           // 0x0514(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlayerGetOneFifthScore;                            // 0x0520(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TeamGetHalfScore;                                  // 0x052C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AllyPlayerGetMatchPoint;                           // 0x0538(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyPlayerGetMatchPoint;                          // 0x0544(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AllyLastOneTenthStage;                             // 0x0550(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EnemyLastOneTenthStage;                            // 0x055C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagDropTag;                                // 0x0568(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagGetTag;                                 // 0x0574(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagGetAmplifierTag;                        // 0x0580(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagAmpFlagReset;                           // 0x058C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagAmplifierDropTag;                       // 0x0598(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagAmplifierOrFlagDropUITag;               // 0x05A4(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagFlagProgressBarUITag;                   // 0x05B0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagAmpProgressBarUITag;                    // 0x05BC(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagCombineProgressBarUITag;                // 0x05C8(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagCombineCompleteUITag;                   // 0x05D4(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagGetAmpFlagTag;                          // 0x05E0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagGetAmpFlagSelfTag;                      // 0x05EC(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagGetAmpFlagAndrefreshPlacedTag;          // 0x05F8(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagGetAmpFlagAndrefreshPlacedSelfTag;      // 0x0604(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagAmpFlagPlacedTag;                       // 0x0610(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagConductingAmplificationTag;             // 0x061C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagAmpFlagDropTag;                         // 0x0628(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagInterferenceCombineTag;                 // 0x0634(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagReciprocalReadyToCompleteUITag;         // 0x0640(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagReciprocalReadyToCompleteVoTag;         // 0x064C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagReciprocalReadyToCompleteVo2Tag;        // 0x0658(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagAmplificationCompleteTag;               // 0x0664(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagRespawnDisabledTag;                     // 0x0670(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagOverTimeBeginsTag;                      // 0x067C(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagRingShrinkingTag;                       // 0x0688(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagDefeatEnemiesTag;                       // 0x0694(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TryToSurviveTag;                                   // 0x06A0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagTeamGetTag;                             // 0x06AC(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureFlagTeamDropTag;                            // 0x06B8(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureSuddenDeathStageTag;                        // 0x06C4(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CaptureContestStateTag;                            // 0x06D0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           BonusStageLastTimeTag;                             // 0x06DC(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EProcedureNotifySwitch, class FName>     SwitchKeys;                                        // 0x06E8(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EProcedureNotifyRtpc, class FName>       RtpcKeys;                                          // 0x0738(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            LevelNameSwitchs;                                  // 0x0788(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         StaySecondsNum;                                    // 0x07D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7DC[0x4];                                      // 0x07DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AmbEventTags;                                      // 0x07E0(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EProcedureNotifyTeam                          ParamTeam;                                         // 0x0848(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EProcedureNotifyBattleResult                  ParamBattleResult;                                 // 0x0849(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         RoundIndex;                                        // 0x084A(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_84B[0x5];                                      // 0x084B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(struct FGameplayTag& InTag)> FAmbEventTagDispatcher;                            // 0x0850(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	class FString                                 MapName;                                           // 0x0860(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UProcedureNotify*>               ProcedureNotifies;                                 // 0x0870(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UObject*                                WorldContext;                                      // 0x0880(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkComponent*                           Emitter;                                           // 0x0888(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_890[0x38];                                     // 0x0890(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UProcedureAudioManager* GetManager(class UObject* WCO);

	void ActivateNotifyState(const struct FGameplayTag& InTag, float InCurrentTime, float TotalTime);
	TArray<class UProcedureNotify*> AddNotifyDatas(const TArray<struct FProcedureNotifyData>& Datas);
	void ClearTriggerTime();
	void DeactivateNotifyState(const struct FGameplayTag& InTag);
	class UAkComponent* GetProcedureAkComponent();
	void OnInitialize();
	void OnReceiveInitialize();
	void ReceiveInitialize();
	void ReceiveNotifyVoice(const struct FProcedureNotifyDataVoice& DataVoice);
	void SetModeType(const struct FGameplayTag& InModeType);
	void TriggerNotifyEvent(const struct FGameplayTag& InTag);
	void UpdateCurrentTime(const struct FGameplayTag& InTag, float InCurrentTime);
	void UpdateRemainingTime(const struct FGameplayTag& InTag, float InRemainingTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProcedureAudioManager">();
	}
	static class UProcedureAudioManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProcedureAudioManager>();
	}
};

// Class Marvel.WeaponAmmoBase
// 0x0048 (0x04F8 - 0x04B0)
class AWeaponAmmoBase : public AMarvelActorBase
{
public:
	int32                                         SkinID;                                            // 0x04B0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B4[0x4];                                      // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GenerateID;                                        // 0x04B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         WeaponModeIndex;                                   // 0x04C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C9[0x3];                                      // 0x04C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AmmoID;                                            // 0x04CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         OwningAbilityID;                                   // 0x04D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4D4[0x4];                                      // 0x04D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AShootingWeapon*                        OwningWeapon;                                      // 0x04D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameplayAbility*                       OwningAbility;                                     // 0x04E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            DamageCurve;                                       // 0x04E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4F0[0x8];                                      // 0x04F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	bool ApplyEffectsToTarget(struct FMarvelGameplayEffectContainerSpec& ContainerSpec, TArray<struct FHitResult>& HitResults, const float FlyDistance, float GroupNum, int32* OutApplyBuff, int32* OutApplyDamage, class UGameplayAbility* NewSourceAbility);
	void ExecuteGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	void OnRep_OwningWeapon();
	void RemoveGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);

	class UGameplayAbility* GetOwningAbility() const;
	int32 GetOwningAbilityID() const;
	class UAbilitySystemComponent* GetOwningAbilitySystemComponent() const;
	class AShootingWeapon* GetOwningWeapon() const;
	struct FVector GetTraceEnd(float FireRange, const struct FVector& ShootDir) const;
	struct FVector GetTraceStart() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WeaponAmmoBase">();
	}
	static class AWeaponAmmoBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWeaponAmmoBase>();
	}
};

// Class Marvel.Cue_Healing_HealthPack
// 0x0010 (0x0CD8 - 0x0CC8)
class ACue_Healing_HealthPack final : public AMarvelCueNotify_Actor
{
public:
	class UAkAudioEvent*                          AkAudioEvent;                                      // 0x0CC8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD0[0x8];                                      // 0x0CD0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Healing_HealthPack">();
	}
	static class ACue_Healing_HealthPack* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Healing_HealthPack>();
	}
};

// Class Marvel.InteractableConstraintComponent
// 0x0010 (0x0770 - 0x0760)
class UInteractableConstraintComponent final : public UPhysicsConstraintComponent
{
public:
	float                                         Hitpoints;                                         // 0x0758(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_75C[0x4];                                      // 0x075C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         FXSystem;                                          // 0x0760(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_768[0x8];                                      // 0x0768(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InteractableConstraintComponent">();
	}
	static class UInteractableConstraintComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInteractableConstraintComponent>();
	}
};

// Class Marvel.MarvelModMagnitudeDiffusion
// 0x0000 (0x0030 - 0x0030)
class UMarvelModMagnitudeDiffusion final : public UGameplayModMagnitudeDiffusion
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelModMagnitudeDiffusion">();
	}
	static class UMarvelModMagnitudeDiffusion* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelModMagnitudeDiffusion>();
	}
};

// Class Marvel.MarvelSolvePenetrationComponent
// 0x0210 (0x0300 - 0x00F0)
class alignas(0x10) UMarvelSolvePenetrationComponent final : public UActorComponent
{
public:
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LastLocation;                                      // 0x0100(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_118[0xC];                                      // 0x0118(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SolveSpeed;                                        // 0x0124(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         Scaler;                                            // 0x0128(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         IteratorCount;                                     // 0x012C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESolveTriggerType                             SolveTriggerType;                                  // 0x012D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12E[0x2];                                      // 0x012E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECollisionChannel>                     ObjectTypesToQuery;                                // 0x0130(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RecoveringDesCancelAbilityTags;                    // 0x0140(0x0068)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A8[0x148];                                    // 0x01A8(0x0148)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAllowLaunchingCharacterWhenStuck;                 // 0x02F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F1[0x3];                                      // 0x02F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FrameToLaunchStuckCharacter;                       // 0x02F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FactorToLaunchStuckCharacter;                      // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FC[0x4];                                      // 0x02FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetIsSleeping();
	void SetEnableSolve(bool Value);
	void SetNeedSendStuckStateToServer(bool InNeedSend);
	bool TriggerSolve();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSolvePenetrationComponent">();
	}
	static class UMarvelSolvePenetrationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSolvePenetrationComponent>();
	}
};

// Class Marvel.Cue_Physics_Projectile_HitImpact
// 0x00C8 (0x0598 - 0x04D0)
class UCue_Physics_Projectile_HitImpact final : public UMarvelCueNotify_HitImpact
{
public:
	class UFXSystemAsset*                         RockFXAsset;                                       // 0x04D0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EPhysicalSurface, class UFXSystemAsset*> PhysicalSurfaceFXAssetMap;                         // 0x04D8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   FXScaleParamName;                                  // 0x0528(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_534[0x4];                                      // 0x0534(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPhysicsWeaponType, float>               FXScaleMap;                                        // 0x0538(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   SizeSwitchName;                                    // 0x0588(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_594[0x4];                                      // 0x0594(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Physics_Projectile_HitImpact">();
	}
	static class UCue_Physics_Projectile_HitImpact* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCue_Physics_Projectile_HitImpact>();
	}
};

// Class Marvel.InputFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UInputFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void FlushAbilityInputPressed(class UAbilitySystemComponent* TargetASC, int32 BindInputID);
	static void FlushPressedActionKeys(class UInputComponent* InputComponent, const class APlayerController* PlayerController);
	static void FlushPressedAxisKeys(class UInputComponent* InputComponent, const class APlayerController* PlayerController);
	static void FlushSpecifiedActionKeys(class UInputComponent* InputComponent, const TArray<class FName>& InActions, const class APlayerController* PlayerController);
	static void FlushSpecifiedAxisKeys(class UInputComponent* InputComponent, const TArray<class FName>& InAxes, const class APlayerController* PlayerController);
	static float GetInputComponentAxisValue(class UInputComponent* InputComponent, const class FName AxisName);
	static struct FVector2D GetInputComponentMoveValue(class UInputComponent* InputComponent);
	static void InheritateSpecificActionKey(class UInputComponent* InputComponent, const class FName& InAction, const class UMarvelGameplayAbility* InAbility, const class APlayerController* PlayerController);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputFunctionLibrary">();
	}
	static class UInputFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputFunctionLibrary>();
	}
};

// Class Marvel.MarvelGameplay_CapsuleTraceType
// 0x0000 (0x0030 - 0x0030)
class UMarvelGameplay_CapsuleTraceType final : public UMarvelGameplay_LineTraceType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplay_CapsuleTraceType">();
	}
	static class UMarvelGameplay_CapsuleTraceType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplay_CapsuleTraceType>();
	}
};

// Class Marvel.Cue_Physics_Projectile_Loop
// 0x0090 (0x0E40 - 0x0DB0)
class ACue_Physics_Projectile_Loop : public AMarvelCueNotify_Projectile
{
public:
	class UNiagaraComponent*                      NS_SpeedLine;                                      // 0x0DB0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SpeedLineDirParamName;                             // 0x0DB8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotMesh;                                          // 0x0DC4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC5[0x3];                                      // 0x0DC5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   CenterSocketName;                                  // 0x0DC8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HoldSocketName;                                    // 0x0DD4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EPhysicsWeaponType, float>               RotSpeedMap;                                       // 0x0DE0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ForceEndTag;                                       // 0x0E30(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E3C[0x4];                                      // 0x0E3C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Physics_Projectile_Loop">();
	}
	static class ACue_Physics_Projectile_Loop* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Physics_Projectile_Loop>();
	}
};

// Class Marvel.Cue_Physics_Summoner_Death
// 0x0000 (0x0368 - 0x0368)
class UCue_Physics_Summoner_Death final : public UMarvelCueNotify_Base
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Physics_Summoner_Death">();
	}
	static class UCue_Physics_Summoner_Death* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCue_Physics_Summoner_Death>();
	}
};

// Class Marvel.Cue_Adsorb
// 0x00C0 (0x0F10 - 0x0E50)
class ACue_Adsorb final : public AMarvelCueNotify_Ability
{
public:
	int32                                         AdsorbMode;                                        // 0x0E50(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E54[0x4];                                      // 0x0E54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EPhysicsWeaponType, float>               LoopFXScale;                                       // 0x0E58(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FName                                   SizeParameterName;                                 // 0x0EA8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EB4[0x4];                                      // 0x0EB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         AdsorbFXAsset;                                     // 0x0EB8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AdsorbTime;                                        // 0x0EC0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AdsorbTimeParameterName;                           // 0x0EC4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetPosName;                                     // 0x0ED0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TargetSocketName;                                  // 0x0EDC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetRelativeLocation;                            // 0x0EE8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemComponent*                     AdsorbFXComponent;                                 // 0x0F00(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NS_Loop;                                           // 0x0F08(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Adsorb">();
	}
	static class ACue_Adsorb* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Adsorb>();
	}
};

// Class Marvel.Cue_ScreenTipsText
// 0x0028 (0x0EF0 - 0x0EC8)
class ACue_ScreenTipsText final : public AMarvelCueNotify_Loop
{
public:
	bool                                          bIsHalfHeightRelative;                             // 0x0EC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EC9[0x3];                                      // 0x0EC9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   TipsTextBone;                                      // 0x0ECC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelWidgetComponent*                 TextTipsComponent;                                 // 0x0ED8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x0EE0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 MyTargetActor;                                     // 0x0EE8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class AMarvelBaseCharacter* TryGetOwnerCharacter();
	void UpdateWidgetVisibility();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_ScreenTipsText">();
	}
	static class ACue_ScreenTipsText* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_ScreenTipsText>();
	}
};

// Class Marvel.CurveFacialExpression
// 0x0B00 (0x0B38 - 0x0038)
class UCurveFacialExpression final : public UCurveBase
{
public:
	struct FRichCurve                             FloatCurves[0x16];                                 // 0x0038(0x0080)(NativeAccessSpecifierPrivate)

public:
	void AddKeyToCurve(int32 Index_0, float InTime, float InValue);
	void AddKeyToCurveByName(class FName CurveName, float InTime, float InValue);
	float GetValueFromCurve(int32 Index_0, float InTime);
	float GetValueFromCurveByName(class FName CurveName, float InTime);

	TArray<struct FPoseAssetData> GetFacialExpressionValue(float InTime) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CurveFacialExpression">();
	}
	static class UCurveFacialExpression* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCurveFacialExpression>();
	}
};

// Class Marvel.CurveSourceActor
// 0x0008 (0x0498 - 0x0490)
class ACurveSourceActor final : public AActor
{
public:
	uint8                                         Pad_490[0x8];                                      // 0x0490(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TArray<struct FNamedCurveValue> GetCurveValues() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CurveSourceActor">();
	}
	static class ACurveSourceActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACurveSourceActor>();
	}
};

// Class Marvel.CustomColorManager
// 0x0128 (0x0160 - 0x0038)
class UCustomColorManager : public UMarvelGameInstanceSubsystem
{
public:
	uint8                                         Pad_38[0x118];                                     // 0x0038(0x0118)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnCustomColorChanged;                              // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	static class UCustomColorManager* Get(const class UObject* WorldContextObject);

	void FlushWorldMaterialParameterCollection(const class UObject* WorldContextObject);
	void SetColorHpBarHealth(bool bEnable, const struct FLinearColor& Color);
	void SetColorHpBarShield(bool bEnable, const struct FLinearColor& Color);
	void SetColorTeamAlly(bool bEnable, const struct FLinearColor& Color);
	void SetColorTeamEnemy(bool bEnable, const struct FLinearColor& Color);
	void SetColorWarning(bool bEnable, const struct FLinearColor& Color);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomColorManager">();
	}
	static class UCustomColorManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomColorManager>();
	}
};

// Class Marvel.MarvelCueNotify_Traceable
// 0x0108 (0x0DD0 - 0x0CC8)
class AMarvelCueNotify_Traceable final : public AMarvelCueNotify_Actor
{
public:
	class AMarvelTraceableSummoner*               TraceableSummoner;                                 // 0x0CC8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      NiagaraFX;                                         // 0x0CD0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowFXOnStart;                                    // 0x0CD8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD9[0x3];                                      // 0x0CD9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BeginAudioID;                                      // 0x0CDC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             NiagaraFXRelativeTransform;                        // 0x0CE0(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelaySpawnTime;                                    // 0x0D40(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HitSocketName;                                     // 0x0D44(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         HitFX;                                             // 0x0D50(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAttachHitFXToTarget;                              // 0x0D58(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D59[0x3];                                      // 0x0D59(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   HitFXAttachSocketName;                             // 0x0D5C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HitAudioID;                                        // 0x0D68(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShowFXOnEnd;                                      // 0x0D6C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6D[0x3];                                      // 0x0D6D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         CustomEndFX;                                       // 0x0D70(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NaturalEndAudioID;                                 // 0x0D78(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D7C[0x2C];                                     // 0x0D7C(0x002C)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 Target;                                            // 0x0DA8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 MyTargetChar;                                      // 0x0DB0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_DB8[0x18];                                     // 0x0DB8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTraceBegin(class AActor* InActor);
	void OnTraceEnd();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_Traceable">();
	}
	static class AMarvelCueNotify_Traceable* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_Traceable>();
	}
};

// Class Marvel.InputTriggerSerialClick
// 0x0018 (0x0070 - 0x0058)
class UInputTriggerSerialClick final : public UInputTrigger
{
public:
	int32                                         ShouldClickCount;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxIntervalTime;                                   // 0x005C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x10];                                      // 0x0060(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InputTriggerSerialClick">();
	}
	static class UInputTriggerSerialClick* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInputTriggerSerialClick>();
	}
};

// Class Marvel.OutIndexValue
// 0x0008 (0x0038 - 0x0030)
class UOutIndexValue final : public UOutSpecialValueType
{
public:
	int32                                         PresetValue;                                       // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OutIndexValue">();
	}
	static class UOutIndexValue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOutIndexValue>();
	}
};

// Class Marvel.CustomProgressBar
// 0x01C0 (0x0500 - 0x0340)
class UCustomProgressBar final : public UImage
{
public:
	struct FSlateBrush                            FillBrush;                                         // 0x0340(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	struct FSlateBrush                            ProgressBrush;                                     // 0x0410(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	float                                         Percent;                                           // 0x04E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BlurStrength;                                      // 0x04E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterial*                              MatCustomProgressBar;                              // 0x04E8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               MIDCustomProgressBar;                              // 0x04F0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4F8[0x8];                                      // 0x04F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBlurStrength(float InBlurStrength);
	void SetFillBrush(const struct FSlateBrush& InFillBrush);
	void SetPercent(float InPercent);
	void SetProgressBrush(const struct FSlateBrush& InProgressBrush);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomProgressBar">();
	}
	static class UCustomProgressBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomProgressBar>();
	}
};

// Class Marvel.MarvelUserSetting
// 0x08A0 (0x08D0 - 0x0030)
class UMarvelUserSetting : public UObject
{
public:
	uint8                                         Pad_30[0x4];                                       // 0x0030(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ApplyHeroSculptId;                                 // 0x0034(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UIHeroSculptId;                                    // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x1BC];                                     // 0x003C(0x01BC)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelCharCtrlSettingData             CharacterApplySettingData;                         // 0x01F8(0x01B8)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarvelCharCtrlSettingData             UIPanelDisplaySettingData;                         // 0x03B0(0x01B8)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarvelCharCtrlSettingData             OtherHeroSettingData;                              // 0x0568(0x01B8)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FName>                           CharCtrlInputMappingNames;                         // 0x0720(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FName>                           CharCtrlInputMappingSearchKeys;                    // 0x0730(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<int32, class FName>                      CommunicationActionNames;                          // 0x0740(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<class FName>                           GamepadThumbstickNames;                            // 0x0790(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnSettingUpdateDispatcher;                         // 0x07A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Value)>   HeroMovementModeChangedDelegate;                   // 0x07B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(Marvel::EInputType OldInputType, Marvel::EInputType CurrentInputType)> OnInputTypeChangedDelegate;                        // 0x07C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              MappingInputChordChangedEvent;                     // 0x07D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMap<int32, struct FMarvelCharCtrlSettingData> CacheUserSettingMap;                               // 0x07E0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	class UMarvelGameInstance*                    GameInstance;                                      // 0x0830(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_838[0x50];                                     // 0x0838(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnUserAbilitySettingChanged;                       // 0x0888(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_898[0x38];                                     // 0x0898(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelUserSetting* Get(class UObject* WCO);

	void ApplyHeroSettingDataOnSculptChanged();
	void BroadcastMappingInputChordChangedEvent();
	void ClearCoronas(const int32 InCommID, const int32 HeroID);
	void ClearInputMappingKey(const struct FInputChord& ChordToClear, int32 SculptID, class FString* OldKey, bool* bIsCommunicationInput, class FName* SearchKey, class FString* CategoryName, int32 InputMappintIndex);
	TMap<class FName, class FText> GetAbilityNameBindToAbilityAction(int32 HeroID);
	TArray<int32> GetCoronas(int32 InCommID, bool bUpdateApplyData);
	struct FMarvelCharCtrlSettingData GetDefaultSettingData(int32 HeroSculptID);
	TArray<struct FAbilityPersonalizedSetting> GetHeroAbilityUserSettings(int32 HeroID);
	int32 GetHeroSculptID();
	int32 GetSwingModeItemValue();
	void InitHeroAbilitySettingData(int32 HeroID, ESettingDataType SettingDataType);
	void InitSculptInputs(int32 HeroID, bool bUpdateApplyData);
	void InitUserSettingModule();
	bool IsUseBondAbilitySignal(bool bUpdateApplyData);
	bool IsUseFourAreaCorona(bool bUpdateApplyData);
	bool LoadApplySettingData();
	void LoadDefaultOverrideGamepadData(int32 HeroSculptID);
	void OnHeroMovementModeChanged(int32 NewValue);
	void OnSwingModeChanged(int32 NewValue);
	void RebuildCharCtrlInputMapping();
	void RebuildCommInputMapping();
	void RebuildLookupAndTurnSetting();
	void RebuildSculptInputMappingOnSculptChanged();
	void RefreshAllUserSetting();
	void SetAbilitySettingValueByAbilityID(int32 AbilityID, class FName KeyName, class FName NewValue, int32 HeroID, bool bIsGamepad, bool bIsDirty);
	void SetCorona(int32 InCommID, const int32 InCorona, bool bUpdateApplyData, const int32 HeroID);
	void SetHeroSculptId(int32 HeroSculptID);
	void SetHorizontalDeadZoneAccelerationTime(int32 AccelerationTime);
	void SetHpBarVisibleRule(class UObject* Object, int32 HpBarVisibleRule, bool bUpdateApplyData);
	void SetInputType(const Marvel::EInputType InInputType);
	void SetInputTypeByString(const class FString& InInputTypeString);
	void SetUIInputType(const Marvel::EInputType InInputType);
	void SetUseBondAbilitySignal(bool bState, const int32 HeroID);
	void SetUseFourAreaCorona(bool bState, const int32 HeroID);
	void SetWakandaFlyAbilityActivateMethod(int32 HeroID, bool NewValue, bool bIsGamepad);
	void TryChangeControllerProperty(float Value, const class FString& PropName, int32 HeroID, bool bUpdateApplyData);
	class FString TryChangeGamepadMappingKey(class FName SelKey, const struct FInputChord& NewGamepadKey, bool bPrimary, int32 HeroID);
	class FString TryChangeInputMappingKey(class FName SelKey, const struct FInputChord& NewKey, bool bPrimary, int32 HeroSculptID);
	void TryChangeMouseSensitivity(int32 idx, float Scale, int32 HeroID);
	void TryLoadCtrlSettingFromConfig(int32 HeroSculptID, bool bUpdateApplyData);
	void TryLoadOtherHeroSettingFromConfig(int32 HeroSculptID, const class FString& SettingName);
	void TrySaveCtrlSettingToConfig(int32 HeroID, bool bUpdateApplyData);
	class FString TrySetCommMappingKey(int32 CommID, const struct FInputChord& NewKey, EInputChordSlot Slot, int32 HeroID);
	void TrySetHpBarVisibleRule(int32 HpBarVisibleRule, bool bUpdateApplyData);
	bool TryUnbindCommMappingKey(int32 CommID, EInputChordSlot Slot, int32 HeroID);
	bool TryUnbindGamepadMappingKey(class FName SelKey, bool bPrimary, int32 HeroID);
	bool TryUnbindInputMappingKey(class FName SelKey, bool bPrimary, int32 HeroSculptID);
	void UpdateAbilityUserSetting(const struct FAbilityPersonalizedSetting& NewAbilitySettingData, ESettingDataType SettingDataType);
	void UpdateAbilityUserSettings(const struct FAbilitySettings& AbilitySettings, ESettingDataType SettingDataType);
	void UpdateCacheSettingData();
	void UpdateCameraTurnInvert();
	void UpdateCommInput(const int32 CommID, const struct FMarvelBattleCommunicationInputBinding& InCommInput, const bool bUpdateApplyData);
	void UpdateMappingKey(class FName SelKey, const struct FInputChord& NewPrimaryKey, const struct FInputChord& NewSecondaryKey, const struct FInputChord& NewGamepadKey, const struct FInputChord& NewSecondaryGamepadKey, bool bUpdateApplyData, bool bIsSculptInput, int32 SculptID);
	void UpdateMouseSmoothing();

	bool GetEnableMouseAcceleration() const;
	bool GetEnableMouseSmoothing() const;
	Marvel::EInputType GetInputType() const;
	float GetMouseAcceleration() const;
	float GetMouseAccelerationThreshold() const;
	Marvel::EInputType GetUIInputType() const;
	bool IsUsingGamepad() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelUserSetting">();
	}
	static class UMarvelUserSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelUserSetting>();
	}
};

// Class Marvel.DataBaseTarget
// 0x0000 (0x0030 - 0x0030)
class UDataBaseTarget : public UObject
{
public:
	TSet<class FString> GetTargetHeroIDs();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataBaseTarget">();
	}
	static class UDataBaseTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataBaseTarget>();
	}
};

// Class Marvel.PlayerStatisticsUnit
// 0x0060 (0x0090 - 0x0030)
class UPlayerStatisticsUnit : public UObject
{
public:
	TMap<int32, class UHeroStatisticsUnit*>       HeroStatistics;                                    // 0x0030(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	class UBattleStatisticsManager*               BattleStatisticsManager;                           // 0x0080(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerUID;                                         // 0x0088(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentHeroID;                                     // 0x008C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void Initialize(class UBattleStatisticsManager* InBattleStatisticsManager, int32 InPlayerUID);
	void OnActorAbilityBreak(class AActor* Source, int32 AbilityID, const class FString& SessionID);
	void OnActorAbilityMissile(const struct FBattleInfoContext& BattleInfoContext);
	void OnActorActivateAbility(const struct FBattleInfoContext& BattleInfoContext);
	void OnActorEndAbility(const struct FBattleInfoContext& BattleInfoContext);
	void OnActorEnergyChanged(const struct FBattleInfoContext& BattleInfoContext);
	void OnActorEnergyEmpty(class AActor* Source, const struct FAttributeModifierParameter& ModifierParameter);
	void OnActorEnergyFull(class AActor* Source, const struct FAttributeModifierParameter& ModifierParameter);
	void OnActorInstigateArmor(const struct FBattleInfoContext& BattleInfoContext);
	void OnActorInstigateDamage(const struct FBattleInfoContext& BattleInfoContext);
	void OnActorInstigateHeal(const struct FBattleInfoContext& BattleInfoContext);
	void OnActorInstigateNoTreatShield(const struct FBattleInfoContext& BattleInfoContext, const struct FNoTreatShieldChangeEventExtraData& ExtraData);
	void OnActorInstigateNotTreatArmor(const struct FBattleInfoContext& BattleInfoContext, const struct FNoTreatShieldChangeEventExtraData& ExtraData);
	void OnActorPreActivateAbility(const struct FBattleInfoContext& BattleInfoContext);
	void OnActorTakeArmor(const struct FBattleInfoContext& BattleInfoContext);
	void OnActorTakeDamage(const struct FBattleInfoContext& BattleInfoContext);
	void OnActorTakeHeal(const struct FBattleInfoContext& BattleInfoContext);
	void OnActorTakeNoTreatShield(const struct FBattleInfoContext& BattleInfoContext, const struct FNoTreatShieldChangeEventExtraData& ExtraData);
	void OnActorTakeNotTreatArmor(const struct FBattleInfoContext& BattleInfoContext, const struct FNoTreatShieldChangeEventExtraData& ExtraData);
	void OnActorWeaponAmmoUse(const struct FWeaponAmmoInfoContext& AmmoContext);
	void OnBaseTargetActorEndAgentTask(const struct FBattleInfoContext& BattleInfoContext, const struct FEndAgentTaskInfo& EndAgentTaskInfo);
	void OnDestroyCharacter(class AMarvelPlayerState* PlayerState, class AMarvelBaseCharacter* Character);
	void OnInstigateBuff(const struct FBuffInfoContext& BuffInfoContext);
	void OnInstigateBuffExtraDamage(int32 HeroID, int32 BuffID, float DeltaValue);
	void OnInstigateBuffExtraHeal(int32 HeroID, int32 BuffID, float DeltaValue);
	void OnInstigateBuffRemoved(const struct FBuffInfoContext& BuffInfoContext);
	void OnPossesCharacter(class AMarvelBaseCharacter* Character);
	void OnQuitGame();
	void OnSummonerTakeBuff(const struct FBuffInfoContext& BuffInfoContext);
	void OnSummonerTakeBuffRemoved(const struct FBuffInfoContext& BuffInfoContext);
	void OnTakeBuff(const struct FBuffInfoContext& BuffInfoContext);
	void OnTakeBuffRemoved(const struct FBuffInfoContext& BuffInfoContext);
	void PyInitialize();
	void PyOnPossesCharacter(int32 HeroID);
	void RemoveHero(int32 HeroID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerStatisticsUnit">();
	}
	static class UPlayerStatisticsUnit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerStatisticsUnit>();
	}
};

// Class Marvel.DataBaseConditionObject
// 0x0000 (0x0030 - 0x0030)
class UDataBaseConditionObject : public UObject
{
public:
	TSet<class FString> GetConditionHeroIDsAll();
	TSet<class FString> GetConditionHeroIDsAny();
	TSet<class FString> GetConditionMapIDsAll();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DataBaseConditionObject">();
	}
	static class UDataBaseConditionObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDataBaseConditionObject>();
	}
};

// Class Marvel.DefaultAbilityStatisticsImpl
// 0x0058 (0x00A0 - 0x0048)
class UDefaultAbilityStatisticsImpl final : public UTagAbilityStatisticsImpl
{
public:
	bool                                          bPassiveSkill;                                     // 0x0048(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FBaseAbilityUseInfo> SessionUseInfo;                                    // 0x0050(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void AddAbilityUse(const class FString& AbilitySessionID, const int32 UseCount, const int32 ActivateCount, const int32 MissileCount);
	void EndAbilityUse(const class FString& AbilitySessionID);
	void RecordAbilityUseInfo(const class FString& AbilitySessionID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DefaultAbilityStatisticsImpl">();
	}
	static class UDefaultAbilityStatisticsImpl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDefaultAbilityStatisticsImpl>();
	}
};

// Class Marvel.MarvelCueNotify_DestructionHitImpact
// 0x0038 (0x02C0 - 0x0288)
class UMarvelCueNotify_DestructionHitImpact final : public UMarvelCueNotify_Static
{
public:
	TArray<class UNiagaraSystem*>                 DestructionNiagaraSystems;                         // 0x0288(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FVector                                DestructionParticleScale;                          // 0x0298(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDestructionHitAudioSetting>    AudioSettings;                                     // 0x02B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_DestructionHitImpact">();
	}
	static class UMarvelCueNotify_DestructionHitImpact* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCueNotify_DestructionHitImpact>();
	}
};

// Class Marvel.DestructionCollisionAudioManager
// 0x0110 (0x05A0 - 0x0490)
class ADestructionCollisionAudioManager final : public AActor
{
public:
	float                                         MinVelocity;                                       // 0x0490(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CollisionAudioDistanceThreshold;                   // 0x0494(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CollisionAudioPlayTimeThreshold;                   // 0x0498(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CollisionAudioTimeThreshold;                       // 0x049C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         MaxCollisionAudioCount;                            // 0x04A0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TickInterval;                                      // 0x04A4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A8[0xF8];                                     // 0x04A8(0x00F8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MulticastPlayCollisionAudio(const struct FDestructionCollisionObject& CollisionObject);
	void OnRecycleOneShotAudioActor(class AActor* OneShotAudioActor);
	void TickPlayCollisionAudio();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DestructionCollisionAudioManager">();
	}
	static class ADestructionCollisionAudioManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADestructionCollisionAudioManager>();
	}
};

// Class Marvel.DestructionConstraintClientMesh
// 0x0028 (0x04B8 - 0x0490)
class ADestructionConstraintClientMesh : public AActor
{
public:
	class USkeletalMeshComponent*                 AttachSkeletalMesh;                                // 0x0490(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimInstance*                          AttachAnimInstance;                                // 0x0498(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                   AttachSM;                                          // 0x04A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ParticleIndex1;                                    // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleIndex2;                                    // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AChaosDestructionActor*                 ChaosDestructionActor;                             // 0x04B0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnChaosBreak(const struct FChaosBreakEvent& BreakEvent);
	void OnTriggerBreak(const struct FChaosBreakEvent& BreakEvent);
	void OnTriggerBreakEvent(const struct FChaosBreakEvent& BreakEvent);
	void OnTriggerBrokenDegree(float BrokenDegree);
	void OnTriggerBrokenDegreeEvent(float BrokenDegree);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DestructionConstraintClientMesh">();
	}
	static class ADestructionConstraintClientMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADestructionConstraintClientMesh>();
	}
};

// Class Marvel.DestructionConstraintComponent
// 0x0390 (0x0800 - 0x0470)
class UDestructionConstraintComponent final : public USceneComponent
{
public:
	uint8                                         Pad_470[0x30];                                     // 0x0470(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class AChaosDestructionActor*                 ChaosDestructionActor;                             // 0x04A0(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleIndex1;                                    // 0x04A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ParticleIndex2;                                    // 0x04AC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x04B0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APhysicsConstraintActor>    ConstraintActorClass;                              // 0x04B8(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class APhysicsConstraintActor>    ConstraintActorClassToTarget;                      // 0x04C0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ADestructionConstraintClientMesh*       ClientMeshActor;                                   // 0x04C8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraSystem*                         LineEffect;                                        // 0x04D0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D8[0x8];                                      // 0x04D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EmitTime;                                          // 0x04E0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E4[0x18C];                                    // 0x04E4(0x018C)(Fixing Size After Last Property [ Dumper-7 ])
	class APhysicsConstraintActor*                PhysicsConstraintActor;                            // 0x0670(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APhysicsConstraintActor*                PhysicsConstraintActorToTarget;                    // 0x0678(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDestructionCableComponent*             DestructionCableComponent;                         // 0x0680(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_688[0x140];                                    // 0x0688(0x0140)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableVelocityDamping;                            // 0x07C8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateConstraintEveryFrame;                       // 0x07C9(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7CA[0x2];                                      // 0x07CA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VelocityThreshold;                                 // 0x07CC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DampingFactor;                                     // 0x07D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         VelocityCheckInterval;                             // 0x07D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D8[0x28];                                     // 0x07D8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnChaosBreak(const struct FChaosBreakEvent& BreakEvent);
	void OnChaosPreReset();
	void OnChaosReset();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DestructionConstraintComponent">();
	}
	static class UDestructionConstraintComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDestructionConstraintComponent>();
	}
};

// Class Marvel.DestructionEffectFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UDestructionEffectFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void PlaySecondParticleEffectWithRenderDataOnly(class UObject* WCO, const class UGeometryCollection* InGeometryCollection, const struct FSecondParticleEffectParameter& EffectParameter);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DestructionEffectFunctionLibrary">();
	}
	static class UDestructionEffectFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDestructionEffectFunctionLibrary>();
	}
};

// Class Marvel.DestructionPostProcessActor
// 0x0170 (0x0600 - 0x0490)
class ADestructionPostProcessActor final : public AActor
{
public:
	uint8                                         Pad_490[0x10];                                     // 0x0490(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MaterialInterface;                                 // 0x04A0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               MaterialInstance;                                  // 0x04A8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FloatCurve_Open;                                   // 0x04B0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FloatCurve_WavePosition;                           // 0x04B8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FloatCurveLongPress_Open;                          // 0x04C0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FloatCurveLongPress_WavePosition;                  // 0x04C8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInOutTime;                                     // 0x04D0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LongPressThreshold;                                // 0x04D4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeInOutTimeLongPress;                            // 0x04D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickInterval;                                      // 0x04DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E0[0x4];                                      // 0x04E0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         FogBuffID;                                         // 0x04E4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          StartAudio;                                        // 0x04E8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          EndAudio;                                          // 0x04F0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartStateGroup;                                   // 0x04F8(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   StartStateValue;                                   // 0x0504(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndStateGroup;                                     // 0x0510(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   EndStateValue;                                     // 0x051C(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_528[0xC0];                                     // 0x0528(0x00C0)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     RecoveryMaterialInterface;                         // 0x05E8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               RecoveryMaterialInstance;                          // 0x05F0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F8[0x8];                                      // 0x05F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Disable();
	bool GetIsPostProcessStart();
	void OnCurrentStageChanged(const class FString& StageName);
	void OnMatchStageChanged(EMatchState MatchState);

	bool GetPostProcessEnable() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DestructionPostProcessActor">();
	}
	static class ADestructionPostProcessActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ADestructionPostProcessActor>();
	}
};

// Class Marvel.PresetDestructionStatisticsUnit
// 0x0048 (0x0078 - 0x0030)
class UPresetDestructionStatisticsUnit final : public UObject
{
public:
	class UBattleStatisticsManager*               BattleStatisticsManager;                           // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelPresetDestructionActor*          PresetDestructionActor;                            // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 LastLevel;                                         // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 CurrentLevel;                                      // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ChildLevelCount;                                   // 0x0060(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRootLevel;                                        // 0x0064(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_65[0x3];                                       // 0x0065(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DestructionID;                                     // 0x0068(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PresetDestructionStatisticsUnit">();
	}
	static class UPresetDestructionStatisticsUnit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPresetDestructionStatisticsUnit>();
	}
};

// Class Marvel.DevTestConfigSubsystem
// 0x0030 (0x0068 - 0x0038)
class UDevTestConfigSubsystem final : public UWorldSubsystem
{
public:
	class UTestConfigDataAsset*                   TestConfig;                                        // 0x0038(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class UDevTestConfigSubsystem* TestConfigSubsystem, class AMarvelGameMode* GameMode)> OnMarvelGameModeInited;                            // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	TArray<class UTestConfigItem*>                RuntimeTestConfigItemList;                         // 0x0050(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UTestConfigDataAsset*                   DummyTestConfigToRefConfigClass;                   // 0x0060(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class UWorld* K2_GetWorld() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DevTestConfigSubsystem">();
	}
	static class UDevTestConfigSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDevTestConfigSubsystem>();
	}
};

// Class Marvel.EditableComboBox
// 0x0050 (0x0408 - 0x03B8)
class UEditableComboBox final : public UUserWidget
{
public:
	class UComboBoxString*                        ComboBox;                                          // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FString>                         DefaultOptions;                                    // 0x03C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class FText                                   DefaultText;                                       // 0x03D0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   HintText;                                          // 0x03E8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class UEditableText*                          EditableText;                                      // 0x0400(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void TransferComboBoxOptionToText(const class FString& SelectItem, ESelectInfo SelectInfo);

	class FText GetText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EditableComboBox">();
	}
	static class UEditableComboBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEditableComboBox>();
	}
};

// Class Marvel.EffectFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UEffectFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void DumpAllNiagaraComponents(const class UObject* WorldContextObject, TMap<class FName, struct FNiagaraSystemDumpInfo>* PerSystemDumpInfo);
	static void GetUsedMaterials(class UPrimitiveComponent* Component, TArray<class UMaterialInterface*>* OutMaterails, bool bGetDebugMaterails);
	static void RefreshFXSystemMaterials(class UFXSystemComponent* Component);
	static void SetAllEmitterEnable(class UParticleSystemComponent* Target, bool bNewEnableState);
	static int32 SetMaterialInstanceDynamicBySource(class UPrimitiveComponent* Component, class UMaterialInterface* Source, class UMaterialInstanceDynamic* Mid, bool bExactSource);
	static class UDecalComponent* SpawnDecalByHitResult(class UObject* WCO, const struct FDecalData& DecalData, const struct FHitResult& Hit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EffectFunctionLibrary">();
	}
	static class UEffectFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEffectFunctionLibrary>();
	}
};

// Class Marvel.EnvironmentStaticActorBase
// 0x0000 (0x0490 - 0x0490)
class AEnvironmentStaticActorBase : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EnvironmentStaticActorBase">();
	}
	static class AEnvironmentStaticActorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AEnvironmentStaticActorBase>();
	}
};

// Class Marvel.MarvelDPICustomScalingRule
// 0x0010 (0x0040 - 0x0030)
class UMarvelDPICustomScalingRule : public UDPICustomScalingRule
{
public:
	struct FVector2D                              StandardSize;                                      // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UMarvelDPICustomScalingRule* Get(class UObject* WCO);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelDPICustomScalingRule">();
	}
	static class UMarvelDPICustomScalingRule* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelDPICustomScalingRule>();
	}
};

// Class Marvel.CareerGameData
// 0x0050 (0x0088 - 0x0038)
class UCareerGameData final : public UPrimaryDataAsset
{
public:
	int32                                         MaxNumOfBriMoment;                                 // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxEpicMomentTime;                                 // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BriMomentThreshold;                                // 0x0040(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EpicMomentAheadTime;                               // 0x0044(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EpicMomentOverTime;                                // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DyingTreatInterval;                                // 0x004C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UltimateAheadTime;                                 // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FEpicMomentNodeInfo                    LastKillValue;                                     // 0x0054(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FEpicMomentNodeInfo                    AssistKillValue;                                   // 0x0060(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FEpicMomentNodeInfo                    TerrainKillValue;                                  // 0x006C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FEpicMomentNodeInfo                    DyingTreatValue;                                   // 0x0078(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CareerGameData">();
	}
	static class UCareerGameData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCareerGameData>();
	}
};

// Class Marvel.EquipmentTableFuncLibrary
// 0x0000 (0x0030 - 0x0030)
class UEquipmentTableFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FMarvelEquipmentTable GetEquipmentData(const int32 EquipmentID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EquipmentTableFuncLibrary">();
	}
	static class UEquipmentTableFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEquipmentTableFuncLibrary>();
	}
};

// Class Marvel.ObjectEventType
// 0x0018 (0x0048 - 0x0030)
class UObjectEventType final : public UObject
{
public:
	class UObject*                                Sender;                                            // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EventTag;                                          // 0x0038(0x000C)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ObjectEventType">();
	}
	static class UObjectEventType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UObjectEventType>();
	}
};

// Class Marvel.EventWorldSubsystem
// 0x0050 (0x0098 - 0x0048)
class UEventWorldSubsystem final : public UTickableWorldSubsystem
{
public:
	TMap<struct FGameplayTag, class UEventDelegateProxy*> ObjectEventMap;                                    // 0x0048(0x0050)(NativeAccessSpecifierPrivate)

public:
	static class UEventWorldSubsystem* GetEventSubsystem(const class UObject* WorldContextObject);

	void DispatchEvent(const struct FGameplayTag& EventType, class UObjectEventType* ObjectEventType);
	class UEventDelegateProxy* RegisterEvent(const struct FGameplayTag& EventType);
	void UnRegisterEvent(const struct FGameplayTag& EventType);
	void UnRegisterEventProxy(const struct FGameplayTag& EventType, class UObject* Binder, class FName BindFunction);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EventWorldSubsystem">();
	}
	static class UEventWorldSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEventWorldSubsystem>();
	}
};

// Class Marvel.MarvelDedicatedServerConfigure
// 0x0010 (0x0040 - 0x0030)
class UMarvelDedicatedServerConfigure final : public UObject
{
public:
	class FString                                 ExternalIP;                                        // 0x0030(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	class FString GetExternalIP();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelDedicatedServerConfigure">();
	}
	static class UMarvelDedicatedServerConfigure* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelDedicatedServerConfigure>();
	}
};

// Class Marvel.FakeChaosDesMaterialActor
// 0x0080 (0x05E0 - 0x0560)
class AFakeChaosDesMaterialActor final : public AAffectStaticMeshBaseActor
{
public:
	class UMaterialInstanceDynamic*               MatDynamicIns;                                     // 0x0560(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UChaosDesAchieveDataComponent*          AchieveDataSMComponent;                            // 0x0568(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         CurrentNumberOfHits;                               // 0x0570(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         CurrentDamageReceived;                             // 0x0574(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIsFracture;                                       // 0x0578(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_579[0x7];                                      // 0x0579(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFakeChaosDesMaterialInfo>      MaterialInfos;                                     // 0x0580(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bApplyCharAbility;                                 // 0x0590(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsingCombineEffect;                               // 0x0591(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_592[0x6];                                      // 0x0592(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         NoHealthCombineFx;                                 // 0x0598(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         NoHealthFx;                                        // 0x05A0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          NoHealthAudioEvent;                                // 0x05A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FDestroyFieldTrigger>           FieldsTrigger;                                     // 0x05B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnDesMaterialActorBroken;                          // 0x05C0(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float CurrentProgress)> OnDesMaterialActorHittedProgress;                  // 0x05D0(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)

public:
	void OnRep_CurrentDamageReceived();
	void OnRep_CurrentNumberOfHits();
	void ResetAffectState();
	void TriggerHitIndicatorMulticast(class AMarvelBaseCharacter* Character, const struct FHitResult& HitInfo);

	bool IsAlive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FakeChaosDesMaterialActor">();
	}
	static class AFakeChaosDesMaterialActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AFakeChaosDesMaterialActor>();
	}
};

// Class Marvel.FlyConfigTableFuncLibrary
// 0x0000 (0x0030 - 0x0030)
class UFlyConfigTableFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FlyConfigTableFuncLibrary">();
	}
	static class UFlyConfigTableFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFlyConfigTableFuncLibrary>();
	}
};

// Class Marvel.FootIKComponent
// 0x0048 (0x0138 - 0x00F0)
class UFootIKComponent final : public UActorComponent
{
public:
	class FName                                   LeftFootName;                                      // 0x00F0(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RightFootName;                                     // 0x00FC(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   LeftBallName;                                      // 0x0108(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   RightBallName;                                     // 0x0114(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InterpSpeed;                                       // 0x0120(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         InterpRotationSpeed;                               // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxRollAngle;                                      // 0x0128(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         MaxPitchAngle;                                     // 0x012C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FootOffsetMin;                                     // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         FootOffsetMax;                                     // 0x0134(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FootIKComponent">();
	}
	static class UFootIKComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFootIKComponent>();
	}
};

// Class Marvel.FrameTaskManager
// 0x00A0 (0x00D0 - 0x0030)
class UFrameTaskManager final : public UObject
{
public:
	uint8                                         Pad_30[0xA0];                                      // 0x0030(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"FrameTaskManager">();
	}
	static class UFrameTaskManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UFrameTaskManager>();
	}
};

// Class Marvel.MarvelInteractableActor_Rep
// 0x0080 (0x05C0 - 0x0540)
class AMarvelInteractableActor_Rep final : public AMarvelInteractableActor
{
public:
	uint8                                         Pad_540[0x80];                                     // 0x0540(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelInteractableActor_Rep">();
	}
	static class AMarvelInteractableActor_Rep* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelInteractableActor_Rep>();
	}
};

// Class Marvel.GameModeFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UGameModeFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void OverridePlayerState(class APlayerState* OldState, class APlayerState* NewState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameModeFunctionLibrary">();
	}
	static class UGameModeFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameModeFunctionLibrary>();
	}
};

// Class Marvel.GameplayAudioInterface
// 0x0000 (0x0030 - 0x0030)
class IGameplayAudioInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayAudioInterface">();
	}
	static class IGameplayAudioInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGameplayAudioInterface>();
	}
};

// Class Marvel.GameplayCueFuncLibrary
// 0x0000 (0x0030 - 0x0030)
class UGameplayCueFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayCueFuncLibrary">();
	}
	static class UGameplayCueFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayCueFuncLibrary>();
	}
};

// Class Marvel.GlobalStatisticsUnit
// 0x0000 (0x0030 - 0x0030)
class UGlobalStatisticsUnit : public UObject
{
public:
	void Initialize(class UBattleStatisticsManager* InBattleStatisticsManager);
	void PyInitialize();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GlobalStatisticsUnit">();
	}
	static class UGlobalStatisticsUnit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGlobalStatisticsUnit>();
	}
};

// Class Marvel.MarvelDeathAnimationComponent
// 0x00D0 (0x01C0 - 0x00F0)
class UMarvelDeathAnimationComponent final : public UActorComponent
{
public:
	float                                         StrengthMultiplyer;                                // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         IgnoreBoneNames;                                   // 0x00F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bOnlyApplyOnce;                                    // 0x0108(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayTimer;                                        // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseVelocity;                                      // 0x0110(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x3];                                      // 0x0111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VelocityDeltaTime;                                 // 0x0114(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 SkeletalMeshComponent;                             // 0x0118(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_120[0x38];                                     // 0x0120(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace1D*                          TargetBS;                                          // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_160[0x60];                                     // 0x0160(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyPhysicalAnimationSettings(class FName BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData);
	void ApplyPhysicalAnimationSettingsBelow(class FName BodyName, const struct FPhysicalAnimationData& PhysicalAnimationData, bool bIncludeSelf);
	void ReleasePhysicsEngine();
	void SetSkeletalMeshComponent(class USkeletalMeshComponent* InSkeletalMeshComponent);
	void SetStrengthMultiplyer(float InStrengthMultiplyer);
	void SetTargetBS(class UBlendSpace1D* InTargetBS, const struct FVector& InDeathMoveVelocity, const struct FVector& InHitDir, const float& InImpulse, bool InUseSimpleDeathPhysicalAnim, const struct FVector& InSimpleDeathPhysicalAnimExtraOffset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelDeathAnimationComponent">();
	}
	static class UMarvelDeathAnimationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelDeathAnimationComponent>();
	}
};

// Class Marvel.GoatChariotAnimInstance
// 0x0290 (0x0710 - 0x0480)
class UGoatChariotAnimInstance final : public UMarvelVehicleAnimInstance
{
public:
	class FName                                   LeftGoatLeftArmBoneName;                           // 0x0478(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   LeftGoatRightArmBoneName;                          // 0x0484(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   LeftGoatLeftLegBoneName;                           // 0x0490(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   LeftGoatRightLegBoneName;                          // 0x049C(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RightGoatLeftArmBoneName;                          // 0x04A8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RightGoatRightArmBoneName;                         // 0x04B4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RightGoatLeftLegBoneName;                          // 0x04C0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RightGoatRightLegBoneName;                         // 0x04CC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   YokeBoneName;                                      // 0x04D8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ChariotBoneName;                                   // 0x04E4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   ChariotUpBoneName;                                 // 0x04F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   AxleBoneName;                                      // 0x04FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   LeftWheelBoneName;                                 // 0x0508(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   RightWheelBoneName;                                // 0x0514(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WheelRadius;                                       // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_524[0x4];                                      // 0x0524(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TurnAffectedBoneNames;                             // 0x0528(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           RingBoneNames;                                     // 0x0538(0x0010)(Edit, BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FVehicleHitInfo                        LeftGoatHitInfo;                                   // 0x0548(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVehicleHitInfo                        RightGoatHitInfo;                                  // 0x0568(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bUseFullBodyHit;                                   // 0x0588(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_589[0x7];                                      // 0x0589(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LeftGoatLeftArmOffset;                             // 0x0590(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LeftGoatRightArmOffset;                            // 0x05A8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LeftGoatLeftLegOffset;                             // 0x05C0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LeftGoatRightLegOffset;                            // 0x05D8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                RightGoatLeftArmOffset;                            // 0x05F0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                RightGoatRightArmOffset;                           // 0x0608(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                RightGoatLeftLegOffset;                            // 0x0620(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                RightGoatRightLegOffset;                           // 0x0638(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                AxleOffset;                                        // 0x0650(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FName>                           PhysicsBoneHasLocationOffsetNames;                 // 0x0668(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVector>                        PhysicsBoneLocationOffsets;                        // 0x0678(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           PhysicsBoneHasRotationOffsetNames;                 // 0x0688(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FRotator>                       PhysicsBoneRotationOffsets;                        // 0x0698(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVector>                        TurnAffectedBoneOffsets;                           // 0x06A8(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FRotator>                       TurnAffectedBoneRotations;                         // 0x06B8(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	struct FRotator                               WheelRotationCS;                                   // 0x06C8(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         PhysicsBlendFactor;                                // 0x06E0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6E4[0x4];                                      // 0x06E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        RingParentBoneSpaceLocations;                      // 0x06E8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FRotator>                       RingParentBoneSpaceRotations;                      // 0x06F8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_708[0x8];                                      // 0x0708(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GoatChariotAnimInstance">();
	}
	static class UGoatChariotAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGoatChariotAnimInstance>();
	}
};

// Class Marvel.GradientCheck
// 0x0230 (0x06C0 - 0x0490)
class AGradientCheck final : public AActor
{
public:
	class ARecastNavMesh*                         NavMeshPtr;                                        // 0x0490(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 NavMeshActor;                                      // 0x0498(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A0[0x8];                                      // 0x04A0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UNavMeshRenderingComponent*             NavMeshRenderComp;                                 // 0x04A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4B0[0x128];                                    // 0x04B0(0x0128)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinAngle;                                          // 0x05D8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxAngle;                                          // 0x05DC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LowPoint;                                          // 0x05E0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNavDataConfig                         LevelToolNavDataConfig;                            // 0x05F8(0x0098)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ANavMeshBoundsVolume*                   NavMeshBound_LevelTool;                            // 0x0690(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinZ;                                              // 0x0698(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69C[0x4];                                      // 0x069C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                HighPoint;                                         // 0x06A0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinTriangleArea;                                   // 0x06B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6BC[0x4];                                      // 0x06BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearAllActors();
	void ConfigNavMeshData();
	void InitRecastNavMesh();
	void UpdateNavDataConfigToLevelToolAgent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GradientCheck">();
	}
	static class AGradientCheck* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGradientCheck>();
	}
};

// Class Marvel.GroundMotionSubAnimInstanceV1
// 0x0A30 (0x10E0 - 0x06B0)
class UGroundMotionSubAnimInstanceV1 final : public UGroundMotionSubAnimInstance
{
public:
	bool                                          bUsingRelevantStopNode;                            // 0x06B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B1[0x3];                                      // 0x06B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FallingIdleBlendTime;                              // 0x06B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpStartToFallingBlendTime;                       // 0x06B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LandMovementToGround;                              // 0x06BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAnimInstance>              LinkedAnimLayerInstanceClass;                      // 0x06C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseExternLayerClass;                              // 0x06C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6C9[0x3];                                      // 0x06C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VelocityInterpSpeed;                               // 0x06CC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HipOrientationOffset;                              // 0x06D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   FeetCrossingCurveName;                             // 0x06D4(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            LandBlendCurve;                                    // 0x06E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   MaskLandBlendFactorCurveName;                      // 0x06E8(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LandTraceFrequency;                                // 0x06F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SubJumpLandAnimStartHeight;                        // 0x06F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SubTargetStopThreshold;                            // 0x06FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseSixDirAnimData;                                // 0x0700(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseStrideWarping;                                 // 0x0701(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseNewJump;                                       // 0x0702(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_703[0x1];                                      // 0x0703(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IsPivotingDuration;                                // 0x0704(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         IdleToLFAngle;                                     // 0x0708(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         IdleToRFAngle;                                     // 0x070C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RBStateTimeThreshold;                              // 0x0710(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LBStateTimeThreshold;                              // 0x0714(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULegacyCameraShake>         CameraShakeLight;                                  // 0x0718(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class ULegacyCameraShake>         CameraShakeHeavy;                                  // 0x0720(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CameraShakeSpeedThreshold;                         // 0x0728(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CameraShakeLandDelay;                              // 0x072C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RunToStopThreshold;                                // 0x0730(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkToIdleThreshold;                               // 0x0734(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         JumpMoveThreshold;                                 // 0x0738(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGroundMotionTransitionFlags           GroundMotionTransitionFlags;                       // 0x073C(0x0025)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_761[0x7];                                      // 0x0761(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGroundMotionCharacterInfo             GroundMotionCharacterInfo;                         // 0x0768(0x0228)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVelocityBlend                         VelocityBlendFactor;                               // 0x0990(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVelocityBlend                         OrientationBlendFactor;                            // 0x09B0(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVelocityBlend                         FwdBwdOrientationBlendFactor;                      // 0x09D0(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FVelocityBlend                         HipBlendFactor;                                    // 0x09F0(0x0020)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         JumpDirectionFwd;                                  // 0x0A10(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         JumpDirectionBwd;                                  // 0x0A14(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StopDirection;                                     // 0x0A18(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsForwardStop;                                    // 0x0A1C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A1D[0x3];                                      // 0x0A1D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LandBlendFactor;                                   // 0x0A20(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkSpeed;                                         // 0x0A24(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         WalkSpeedRatio;                                    // 0x0A28(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         JumpLandWalkBlendRatio;                            // 0x0A2C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SubIsAccelerating;                                 // 0x0A30(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SubNeedJumpStart;                                  // 0x0A31(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A32[0x2];                                      // 0x0A32(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SubDirection;                                      // 0x0A34(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SubAccelerationDirection;                          // 0x0A38(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseStrideWithWalkEnabled;                         // 0x0A3C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A3D[0x3];                                      // 0x0A3D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSixDirGroundMotionAnimContainer       GroundMotionAnims;                                 // 0x0A40(0x01A8)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	struct FSixDirGroundMotionAnimContainer       GroundMotionAnims_Other;                           // 0x0BE8(0x01A8)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	struct FSixDirGroundMotionAnimContainer       GroundMotionAnims_AutoBlend;                       // 0x0D90(0x01A8)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	class UBlendSpace1D*                          StopAnim;                                          // 0x0F38(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          SpeicalStopAnim;                                   // 0x0F40(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUsingSpeicalStopAnim;                             // 0x0F48(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasRunF_BS;                                       // 0x0F49(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasRunB_BS;                                       // 0x0F4A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasRunLF_BS;                                      // 0x0F4B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasRunLB_BS;                                      // 0x0F4C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasRunRF_BS;                                      // 0x0F4D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasRunRB_BS;                                      // 0x0F4E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F4F[0x1];                                      // 0x0F4F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StrideDirection;                                   // 0x0F50(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StrideScale;                                       // 0x0F68(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StrideAlpha;                                       // 0x0F6C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F70[0x158];                                    // 0x0F70(0x0158)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UMarvelUserSetting>      UserSettings;                                      // 0x10C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10D0[0x10];                                    // 0x10D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AnimNotify_EnterJumpStart();
	void AnimNotify_OnLand();
	void AnimNotify_OnLandMovement();
	void NativeGatherLocomotionInfo();
	void NativePlayLandCameraAnim();
	void OnForceChangedByPortal(class APortalViewActor* InPortal);
	void OnMoveModeChange(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void PlayCameraShake();
	void RelevantStopNode(const struct FAnimUpdateContext& Context, const struct FAnimNodeReference& Node);
	void SetIsPivoting();
	void SetPivotFlag();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GroundMotionSubAnimInstanceV1">();
	}
	static class UGroundMotionSubAnimInstanceV1* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGroundMotionSubAnimInstanceV1>();
	}
};

// Class Marvel.MarvelGameplayEffectAmmo2Reduce
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectAmmo2Reduce final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectAmmo2Reduce">();
	}
	static class UMarvelGameplayEffectAmmo2Reduce* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectAmmo2Reduce>();
	}
};

// Class Marvel.HeadWidgetRootComponent
// 0x0040 (0x04B0 - 0x0470)
class UHeadWidgetRootComponent final : public USceneComponent
{
public:
	uint8                                         Pad_470[0x10];                                     // 0x0470(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SmoothedPelvisLocation;                            // 0x0480(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SmoothedPelvisMaxLag;                              // 0x0498(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_49C[0x4];                                      // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                HorizontalWidgetsManager;                          // 0x04A0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A8[0x8];                                      // 0x04A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeadWidgetRootComponent">();
	}
	static class UHeadWidgetRootComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeadWidgetRootComponent>();
	}
};

// Class Marvel.HeroAudioBuffManager
// 0x0200 (0x0230 - 0x0030)
class UHeroAudioBuffManager final : public UObject
{
public:
	TMap<struct FGameplayTag, struct FMarvelCommonBuffAudioRow> CachedCommonBuffAudioRows;                         // 0x0030(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  CachedCommonBuffTagContainer;                      // 0x0080(0x0068)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  CachedLoopBuffTagContainer;                        // 0x00E8(0x0068)(Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGameplayTag>                   CachedCommonBuffTagArray;                          // 0x0150(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	struct FDeclarationHolder                     ViewCharacterChangedReceiver;                      // 0x0160(0x0010)(Transient, Protected, NativeAccessSpecifierProtected)
	TDelegate<void(class AActor* InActor)>        ViewCharacterChangedDelegate;                      // 0x0170(0x0014)(ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_184[0xAC];                                     // 0x0184(0x00AC)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnEffectDurationChange(const struct FActiveGameplayEffectHandle& Handle, float NewStartTime, float NewDuration);
	void OnEffectStackChange(const struct FActiveGameplayEffectHandle& Handle, int32 NewCount, int32 OldCount);
	void OnGameplayEffectApplied(const class UAbilitySystemComponent* ASC, const struct FGameplayEffectSpecStackHandle& EffectSpecHandle, const struct FActiveGameplayEffectHandle& Handle);
	void OnGameplayEffectRemove(const class UAbilitySystemComponent* ASC, const struct FActiveGameplayEffect& GameplayEffect);
	void OnViewCharacterChanged(class AActor* ViewTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroAudioBuffManager">();
	}
	static class UHeroAudioBuffManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeroAudioBuffManager>();
	}
};

// Class Marvel.HeroBreathGlobalConfig
// 0x00B8 (0x00F0 - 0x0038)
class UHeroBreathGlobalConfig final : public UPrimaryDataAsset
{
public:
	float                                         HighSpaceLandThreshold;                            // 0x0038(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<EHeroBreathType, struct FBreathAudioConfig> BreathTypeSetting;                                 // 0x0040(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EHeroBreathType, struct FGameplayTagContainer> InstantBreathTagsMapping;                          // 0x0090(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FHeroBreathTagFilterParams>     TagFilterWhiteList;                                // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroBreathGlobalConfig">();
	}
	static class UHeroBreathGlobalConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeroBreathGlobalConfig>();
	}
};

// Class Marvel.HeroGallerySceneCaptureComponent2D
// 0x0010 (0x1010 - 0x1000)
class UHeroGallerySceneCaptureComponent2D final : public USceneCaptureComponent2D
{
public:
	class AActor*                                 CustomViewOwner;                                   // 0x1000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1008[0x8];                                     // 0x1008(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroGallerySceneCaptureComponent2D">();
	}
	static class UHeroGallerySceneCaptureComponent2D* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeroGallerySceneCaptureComponent2D>();
	}
};

// Class Marvel.HeroStatePreAbilitySubAnimInstance
// 0x0050 (0x0480 - 0x0430)
class UHeroStatePreAbilitySubAnimInstance final : public UAnimInstance
{
public:
	bool                                          bBeingKnockOut;                                    // 0x0428(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_429[0x3];                                      // 0x0429(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         KnockOutDir;                                       // 0x042C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          KnockOutFloat_Seq;                                 // 0x0430(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAimOffsetBlendSpace1D*                 KnockOutAO_1D;                                     // 0x0438(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           PlayKnockOutAnimTag;                               // 0x0440(0x000C)(BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_44C[0x34];                                     // 0x044C(0x0034)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetBeingKnockOut(bool bInNewState);
	void SetKnockOutDir(float InKnockOutDir);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroStatePreAbilitySubAnimInstance">();
	}
	static class UHeroStatePreAbilitySubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeroStatePreAbilitySubAnimInstance>();
	}
};

// Class Marvel.ShootingLogic_Base
// 0x05F8 (0x0628 - 0x0030)
class UShootingLogic_Base : public UObject
{
public:
	uint8                                         Pad_30[0x20];                                      // 0x0030(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         ModeIndex;                                         // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AbilityID;                                         // 0x0054(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bIsFiring : 1;                                     // 0x0058(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         BurstCounter;                                      // 0x0059(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartFireTime;                                     // 0x005C(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ThisFireTime;                                      // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NextFireTime;                                      // 0x0064(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StopFireTime;                                      // 0x0068(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           LoopingFireAnimation;                              // 0x0070(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_78[0x18];                                      // 0x0078(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bShowDebugLine;                                    // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSpecialAimingMode;                                // 0x0091(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponAmmoType                               AmmoType;                                          // 0x0092(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_93[0x1];                                       // 0x0093(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FireRangeOverride;                                 // 0x0094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableTraceRuleOverride;                          // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelTraceRule                       TraceRuleOverride;                                 // 0x00A0(0x0390)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         TraceRequirementsOverride;                         // 0x0430(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         TimeBetweenShots;                                  // 0x0500(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MontagePlayRate;                                   // 0x0504(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanFireWithoutEnoughEnergy;                       // 0x0508(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponMeshType                               MeshType;                                          // 0x0509(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50A[0x2];                                      // 0x050A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MuzzleSocket;                                      // 0x050C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MuzzleRelativeLocation;                            // 0x0518(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               MuzzleRelativeRotation;                            // 0x0530(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TMap<int32, struct FVector>                   MuzzleRelativeLocationToPawn;                      // 0x0548(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, AdvancedDisplay, NativeAccessSpecifierPublic)
	float                                         BlockingNoticeDistance;                            // 0x0598(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToWarmUpWeapon;                                // 0x059C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TimeToCoolDownWeapon;                              // 0x05A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWeaponPenetratingCheckMethod                 PenetratingCheckMethod;                            // 0x05A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A5[0x3];                                      // 0x05A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         WeaponLength;                                      // 0x05A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFixNearRangeAiming;                         // 0x05AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5AD[0x3];                                      // 0x05AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNearRangeAimingParams                 NearRangeAimingParams;                             // 0x05B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         CrosshairIndex;                                    // 0x05B8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ModeGameplayTag;                                   // 0x05BC(0x000C)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           FireGameplayCueTag;                                // 0x05C8(0x000C)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D4[0x4];                                      // 0x05D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, float>                            FrameRateErrorTolerance;                           // 0x05D8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	void AddBurstCounter(uint8 Count);
	bool CalcTracingInfo(struct FWeaponFireContext& InOutContext, struct FWeaponTargetingData& InOutTargetingData);
	void HandleFireWithParams(struct FWeaponFireContext& InContext);
	bool MakeFireContext(struct FWeaponFireContext* Context, struct FWeaponTargetingData& InOutTargetingData, struct FMarvelAbilityTargetFilter& TraceFilter);
	void OnRep_AbilityID();
	void OnRep_BurstCounter(uint8 OldBurstCounter);
	void OnRep_Firing();
	void PlayOwnerFireAnimation(bool bStartFiring);
	void PlayOwnerFireEndAnimation();
	void SetFiring(bool InIsFiring, float InTimeSeconds);
	void StartFiring(const struct FStartFiringContext& Context);
	void StopFiring(const struct FStopFiringContext& Context);
	void StopOwnerLoopingFireAnimation();

	void GetAimingTraceParams(struct FMarvelAbilityTargetFilter* OutFilter) const;
	void GetAimTraceExtraInfo(struct FAimTraceExtraInfo* ExtraInfo) const;
	int32 GetAmmoPerShot() const;
	float GetFireRange() const;
	struct FTransform GetMuzzleTransform() const;
	class AActor* GetOwner() const;
	struct FTransform GetRawMuzzleTransform() const;
	class UGameplayAbility* GetSourceAbility() const;
	int32 GetSourceAbilityID() const;
	class APawn* GetWeaponInstigator() const;
	struct FWeaponMuzzleData GetWeaponMuzzleData() const;
	class AActor* GetWeaponOwner() const;
	bool IsFiring() const;
	bool IsShotgunMode() const;
	bool IsSourceAbilityActive() const;
	struct FWeaponTargetingData MakeWeaponTargetingData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShootingLogic_Base">();
	}
	static class UShootingLogic_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShootingLogic_Base>();
	}
};

// Class Marvel.ShootingLogic_Generic
// 0x0008 (0x0630 - 0x0628)
class UShootingLogic_Generic : public UShootingLogic_Base
{
public:
	uint8                                         Pad_628[0x4];                                      // 0x0628(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ShootVersion;                                      // 0x062C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShootingLogic_Generic">();
	}
	static class UShootingLogic_Generic* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShootingLogic_Generic>();
	}
};

// Class Marvel.ShootingLogic_Instant
// 0x0788 (0x0DB8 - 0x0630)
class UShootingLogic_Instant : public UShootingLogic_Generic
{
public:
	class AInstantAmmo*                           PersistentAmmo;                                    // 0x0630(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_638[0x778];                                    // 0x0638(0x0778)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InstantAmmoID;                                     // 0x0DB0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB4[0x4];                                      // 0x0DB4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ServerFireInstant(const struct FInstantHitResults& InstantHitResults, const struct FRotator& ShootRawRot, uint16 InClientSpread, int32 InClientVersion, const struct FPredictionKey& PredictionKey, const struct FWeaponFireContext& InContext, const struct FWeaponFireOptData& OptData);

	const struct FMarvelInstantAmmoTable GetInstantAmmoData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShootingLogic_Instant">();
	}
	static class UShootingLogic_Instant* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShootingLogic_Instant>();
	}
};

// Class Marvel.SustainInfoUnit
// 0x0050 (0x0080 - 0x0030)
class USustainInfoUnit final : public UObject
{
public:
	TMap<class FString, struct FSustainScopeInfoUnit> ScopeUnitDict;                                     // 0x0030(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)

public:
	bool HasScope(const class FString& ScopeUniqueID);
	void ScopeBegin(const class FString& ScopeUniqueID, float FireDistance);
	void ScopeEnd(const class FString& ScopeUniqueID, int32 TraceCount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SustainInfoUnit">();
	}
	static class USustainInfoUnit* GetDefaultObj()
	{
		return GetDefaultObjImpl<USustainInfoUnit>();
	}
};

// Class Marvel.HeroStatistics_1011
// 0x0050 (0x0120 - 0x00D0)
class UHeroStatistics_1011 final : public UHeroStatistics
{
public:
	TMap<int32, struct FEnergyFullInfo>           SculptToEnergyFullInfo;                            // 0x00D0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroStatistics_1011">();
	}
	static class UHeroStatistics_1011* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeroStatistics_1011>();
	}
};

// Class Marvel.HeroTabDataBase
// 0x0020 (0x0050 - 0x0030)
class UHeroTabDataBase : public UObject
{
public:
	class UMarvelTabDataComponent*                OwnerTabDataComponent;                             // 0x0030(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   MarvelCharacter;                                   // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentHeroID;                                     // 0x0040(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerUID;                                         // 0x0044(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x8];                                       // 0x0048(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddSpecialData(const class FString& KeyName, float DeltaValue);
	void Initialize();
	void K2_Initialize();
	void K2_Refresh();
	void K2_Shutdown();
	void OnActorDeathEvent(class AActor* Killer, class AActor* Target, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void OverrideSpecialData(const class FString& KeyName, float DeltaValue);
	void Refresh();
	void Shutdown();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroTabDataBase">();
	}
	static class UHeroTabDataBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeroTabDataBase>();
	}
};

// Class Marvel.MarvelGameplayEffectAmmo1Reduce
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectAmmo1Reduce final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectAmmo1Reduce">();
	}
	static class UMarvelGameplayEffectAmmo1Reduce* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectAmmo1Reduce>();
	}
};

// Class Marvel.MarvelVoiceItem
// 0x09B0 (0x09E8 - 0x0038)
class UMarvelVoiceItem final : public UPrimaryDataAsset
{
public:
	struct FChooseHeroVoiceConfig                 ChooseHeroVoice;                                   // 0x0038(0x001C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommonVoiceConfig                     ChangeHeroVoices;                                  // 0x0058(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FChatVoiceConfig>               ChatVoices;                                        // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FAbilityVoiceConfig                    UltimateVoices;                                    // 0x0098(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FAbilityVoiceConfig>            AbilitiesVoices;                                   // 0x00D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCommonVoiceConfig                     DamagedVoices;                                     // 0x00E0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FAbilityVoiceConfig                    ApplyDamagedVoices;                                // 0x0110(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FBuffVoiceConfig>               ApplyBuffVoices;                                   // 0x0148(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBuffVoiceConfig>               TakeBuffVoices;                                    // 0x0158(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bClassifyHpForHealBuffVo;                          // 0x0168(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x7];                                      // 0x0169(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBuffVoiceConfig                       LowHpHealBuffVoiceConfig;                          // 0x0170(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FBuffVoiceConfig                       NormalHpHealBuffVoiceConfig;                       // 0x0200(0x0090)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCommonVoiceConfig                     EnemySpottedVoices;                                // 0x0290(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCommonVoiceConfig                     SniperSpottedVoices;                               // 0x02C0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FBuildingVoiceConfig>           BuildingSpottedVoices;                             // 0x02F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBuildingVoiceConfig>           BuildingDestroyedVoices;                           // 0x0300(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FBuildingVoiceConfig>           BuildingBrokenVoices;                              // 0x0310(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FCommonVoiceConfig                     SawDamagedVoices;                                  // 0x0320(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCommonVoiceConfig                     TargetUnderAttackVoices;                           // 0x0350(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCommonVoiceConfig                     OccupyingTargetVoices;                             // 0x0380(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FEscortVoiceConfig                     EscortingPayloadVoices;                            // 0x03B0(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FDialogVoiceConfig>             EscortingInteractVoices;                           // 0x03E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FNpcDialogVoiceConfig>          NpcInteractVoices;                                 // 0x03F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FEscortVoiceConfig                     RemindEscortVoices;                                // 0x0400(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCommonVoiceConfig                     RunningOutTimeVoices;                              // 0x0430(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bClassifyAttackRole;                               // 0x0460(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_461[0x7];                                      // 0x0461(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCommonVoiceConfig                     AttackRunningOutTimeVoices;                        // 0x0468(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCommonVoiceConfig                     DefendRunningOutTimeVoices;                        // 0x0498(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCommonVoiceConfig                     TipBattleVoices;                                   // 0x04C8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCommonVoiceConfig                     TipAttackVoices;                                   // 0x04F8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCommonVoiceConfig                     TipCelebrateVoices;                                // 0x0528(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCommonVoiceConfig                     TipDefendVoices;                                   // 0x0558(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCommonVoiceConfig                     EnemyQuantityAdvantageVoices;                      // 0x0588(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FTriggerAmbientVoiceConfig             TriggerAmbientVoices;                              // 0x05B8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCommonVoiceConfig                     OnFireVoices;                                      // 0x05E8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCommonVoiceConfig                     HealthPackVoices;                                  // 0x0618(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FCommonVoiceConfig                     RebornVoices;                                      // 0x0648(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FReviveVoiceConfig>             ReviveVoices;                                      // 0x0678(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKillVoiceConfig                       AceKillConfig;                                     // 0x0688(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKillVoiceConfig                       FiveKillConfig;                                    // 0x06C0(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKillVoiceConfig                       ThreeKillConfig;                                   // 0x06F8(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKillVoiceConfig                       KillVoiceOfUltimateAbility;                        // 0x0730(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKillVoiceConfig                       KillSniperConfig;                                  // 0x0768(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKillVoiceConfig                       TerrainKillConfig;                                 // 0x07A0(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKillVoiceConfig                       AssistKillConfig;                                  // 0x07D8(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKillVoiceConfig                       RevengeVoiceConfig;                                // 0x0810(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FKillVoiceConfig                       KillVoices;                                        // 0x0848(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FKillVoiceConfig>               KillVoicesOfNormalAbility;                         // 0x0880(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FKillVoiceConfig                       KillVoiceOfNormalAttack;                           // 0x0890(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSawKillVoiceConfig                    SawAllyKillVoices;                                 // 0x08C8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FSawKillVoiceConfig                    SawEnemyKillVoices;                                // 0x08F8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FHeroBreathConfig                      BreathConfig;                                      // 0x0928(0x00A0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FAudioTagMapParams>             TagWhiteList;                                      // 0x09C8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FAudioTagMapParams>             TagBlackList;                                      // 0x09D8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelVoiceItem">();
	}
	static class UMarvelVoiceItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelVoiceItem>();
	}
};

// Class Marvel.VoiceStageWatcher
// 0x0070 (0x00A0 - 0x0030)
class UVoiceStageWatcher final : public UObject
{
public:
	uint8                                         Pad_30[0x70];                                      // 0x0030(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAbilityActivate();
	void OnAbilityBreak();
	void OnAbilityCancel();
	void OnAbilityEnd();
	void OnAbilityMissile();
	void OnAbilityStatusUpdate();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VoiceStageWatcher">();
	}
	static class UVoiceStageWatcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVoiceStageWatcher>();
	}
};

// Class Marvel.HeroVoiceBuffWatcher
// 0x0148 (0x0238 - 0x00F0)
class UHeroVoiceBuffWatcher final : public UActorComponent
{
public:
	uint8                                         Pad_F0[0x148];                                     // 0x00F0(0x0148)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroVoiceBuffWatcher">();
	}
	static class UHeroVoiceBuffWatcher* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeroVoiceBuffWatcher>();
	}
};

// Class Marvel.HighlightActorsWithinScopeComponent
// 0x0158 (0x0248 - 0x00F0)
class UHighlightActorsWithinScopeComponent : public UActorComponent
{
public:
	float                                         FadeTime;                                          // 0x00F0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            FadeInCurve;                                       // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            FadeOutCurve;                                      // 0x0100(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyHighlightWhenActivated;                       // 0x0108(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWantHighlightEnable;                              // 0x0109(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDeclarationHolder                     ViewSideWatcher;                                   // 0x0110(0x0010)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_120[0x58];                                     // 0x0120(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class AActor*>                           HighlightActors;                                   // 0x0178(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TArray<struct FHeroHighlightInfo>             HighlightInfo;                                     // 0x01C8(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D8[0x20];                                     // 0x01D8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TWeakObjectPtr<class AActor>, struct FMeshOverlayMaterialHandle> OverlayMaterialHandles;                            // 0x01F8(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)

public:
	static class UHighlightActorsWithinScopeComponent* GetOrCreateFromActor(class AActor* Actor);

	void AddScopeNeedHighlight(int32 AbilityID, const TMap<int32, int32>& ScopeIDs, bool bOnlyHighlightWhenActivated_0);
	void OnUserSettingUpdate();
	void OnViewTargetChange(class AActor* ViewingTarget);
	void RemoveScopeNeedHighlight(int32 AbilityID);
	void SetHighlightEnable(bool bEnable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HighlightActorsWithinScopeComponent">();
	}
	static class UHighlightActorsWithinScopeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHighlightActorsWithinScopeComponent>();
	}
};

// Class Marvel.MarvelGamepadOnlyInputKeySel
// 0x0010 (0x09E0 - 0x09D0)
class UMarvelGamepadOnlyInputKeySel final : public UInputKeySelector
{
public:
	TArray<class FName>                           GamepadThumbstickNames;                            // 0x09D0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGamepadOnlyInputKeySel">();
	}
	static class UMarvelGamepadOnlyInputKeySel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGamepadOnlyInputKeySel>();
	}
};

// Class Marvel.HighLightDataMananger
// 0x0020 (0x0050 - 0x0030)
class UHighLightDataMananger : public UObject
{
public:
	TArray<struct FCommonHighLightItem>           CommonHighLightItems;                              // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UMarvelGameplayEventManager*            GlobalEventManager;                                // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelGameState*                       MarvelGameState;                                   // 0x0048(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UHighLightDataMananger* Get(class UObject* WCO);

	void BindEvents();
	class UHighLightDataComponent* GetHighLightDataComponent(int32 PlayerUID);
	void Initialize();
	void K2_Initialize();
	void K2_Shutdown();
	void OnActorDeath(class AActor* Source, class AActor* Target, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void OnActorTakeDamage(class AActor* InInstigator, class AActor* InTarget, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void OnActorTakeHealth(class AActor* InInstigator, class AActor* InTarget, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void Shutdown();
	void UnbindEvnets();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HighLightDataMananger">();
	}
	static class UHighLightDataMananger* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHighLightDataMananger>();
	}
};

// Class Marvel.HighLightData_1034
// 0x0068 (0x00B0 - 0x0048)
class UHighLightData_1034 : public UHeroHighLightData
{
public:
	class UMarvelGameplayEventManager*            GlobalEventManager;                                // 0x0048(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayAbility*                 GameplayAbility;                                   // 0x0050(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, struct FKillData_103461>  SessionKillCount;                                  // 0x0058(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	int32                                         KillCount_103461;                                  // 0x00A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighLightID_103461;                                // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnActorDeath(class AActor* Killer, class AActor* Target, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FGlobalEventExtraData& ExtraData);
	void OnRecycleAgentTask(class AActor* SourceActor, class UMarvelGameplayAbility* SourceAbility, const struct FMarvelTargetActorGenerateInfo& GenerateInfo, const struct FEndAgentTaskInfo& EndAgentTaskInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HighLightData_1034">();
	}
	static class UHighLightData_1034* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHighLightData_1034>();
	}
};

// Class Marvel.HitImpactCueOverrideInterface
// 0x0000 (0x0030 - 0x0030)
class IHitImpactCueOverrideInterface final : public IInterface
{
public:
	class UHitImpactCueOverrideModifier* GetHitImpactCueOverrideModifier() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HitImpactCueOverrideInterface">();
	}
	static class IHitImpactCueOverrideInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IHitImpactCueOverrideInterface>();
	}
};

// Class Marvel.MarvelGameplay_ProjectileTraceType
// 0x0000 (0x0030 - 0x0030)
class UMarvelGameplay_ProjectileTraceType : public UMarvelGameplayTraceType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplay_ProjectileTraceType">();
	}
	static class UMarvelGameplay_ProjectileTraceType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplay_ProjectileTraceType>();
	}
};

// Class Marvel.HitReactSubAnimInstance
// 0x00A0 (0x04D0 - 0x0430)
class UHitReactSubAnimInstance final : public UAnimInstance
{
public:
	bool                                          BeingRepulse;                                      // 0x0428(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBeHitAmplitudeType                           HitAmplitudeType;                                  // 0x0429(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsBehiting;                                       // 0x042A(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsBehitStart;                                     // 0x042B(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBeCriticalStrike;                                 // 0x042C(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_42D[0x3];                                      // 0x042D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BeHitDirection;                                    // 0x0430(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSimulateRole;                                   // 0x0434(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_435[0x3];                                      // 0x0435(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SubTargetSpeed;                                    // 0x0438(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_43C[0x10];                                     // 0x043C(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseSimulateHit;                                   // 0x044C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseAmplitudeInLocal;                              // 0x044D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_44E[0x2];                                      // 0x044E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class UBlendSpace1D*                          HitBody_Local_Hard;                                // 0x0450(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBlendSpace1D*                          HitBody_Local_Medium;                              // 0x0458(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBlendSpace1D*                          HitBody_Local_Light;                               // 0x0460(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          HitHead_Local_Hard;                                // 0x0468(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          HitHead_Local_Medium;                              // 0x0470(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          HitHead_Local_Light;                               // 0x0478(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBlendSpace1D*                          HitBody_Remote_Hard;                               // 0x0480(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBlendSpace1D*                          HitBody_Remote_Medium;                             // 0x0488(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UBlendSpace1D*                          HitBody_Remote_Light;                              // 0x0490(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          HitHead_Remote_Hard;                               // 0x0498(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          HitHead_Remote_Medium;                             // 0x04A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          HitHead_Remote_Light;                              // 0x04A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsInAir;                                           // 0x04B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ForceUsingUpBody;                                  // 0x04B1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4B2[0x6];                                      // 0x04B2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          RepulseStart_Seq;                                  // 0x04B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          RepulseLoop_Seq;                                   // 0x04C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimSequence*                          RepulseEnd_Seq;                                    // 0x04C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetBeCriticalStrike(bool Op);
	void SetIsBeHitStart(bool Op);
	void SetIsBeHitting(bool Op);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HitReactSubAnimInstance">();
	}
	static class UHitReactSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHitReactSubAnimInstance>();
	}
};

// Class Marvel.ImGuiNetworkComponent
// 0x0058 (0x0148 - 0x00F0)
class UImGuiNetworkComponent final : public UActorComponent
{
public:
	int32                                         ImGuiServerAddressPort;                            // 0x00F0(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x54];                                      // 0x00F4(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyDamage(class AActor* InTarget, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void ApplyTreat(class AActor* InTarget, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnAttributeChanged(const struct FOnAttributeChangeDataExtend& AttributeChangeData);
	void OnRep_ImGuiServerAddress();
	void Server_GiveAbilityHandle(int32 AbilityID);
	void Server_RemoveAbility(int32 AbilityID);
	void TakeDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void TakeTreat(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ImGuiNetworkComponent">();
	}
	static class UImGuiNetworkComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UImGuiNetworkComponent>();
	}
};

// Class Marvel.InstancedVertexAnimMeshComponent
// 0x0010 (0x0AA0 - 0x0A90)
class UInstancedVertexAnimMeshComponent final : public UInstancedStaticMeshComponent
{
public:
	float                                         SampleAnimationRate;                               // 0x0A88(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A8C[0x4];                                      // 0x0A8C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVertexAnimationStateInfo>      AnimationStateInfos;                               // 0x0A90(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void BatchSetInstancesAnimationState(int32 StartInstanceIndex, const TArray<int32>& NewInstancesStates, bool SetStartPercent, const TArray<float>& StartPercents);
	void SetInstanceAnimationState(const int32 InstanceIndex, const int32 StateIndex, float StartPercent, bool MarkRenderStateDirty);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InstancedVertexAnimMeshComponent">();
	}
	static class UInstancedVertexAnimMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInstancedVertexAnimMeshComponent>();
	}
};

// Class Marvel.MarvelTriggerEffect_Feedback
// 0x0008 (0x0050 - 0x0048)
class UMarvelTriggerEffect_Feedback final : public UMarvelTriggerEffect_Base
{
public:
	uint8                                         position;                                          // 0x0048(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Strength;                                          // 0x0049(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTriggerEffect_Feedback">();
	}
	static class UMarvelTriggerEffect_Feedback* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTriggerEffect_Feedback>();
	}
};

// Class Marvel.InstantAmmo
// 0x0888 (0x0D80 - 0x04F8)
class AInstantAmmo : public AWeaponAmmoBase
{
public:
	uint8                                         Pad_4F8[0x794];                                    // 0x04F8(0x0794)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  HitCauserSP;                                       // 0x0C8C(0x0008)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C94[0x4];                                      // 0x0C94(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInstantHitSpec                        HitNotifySP;                                       // 0x0C98(0x0048)(Net, Transient, RepNotify, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_CE0[0x4];                                      // 0x0CE0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ImpulseLevel;                                      // 0x0CE4(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarvelImpulseLevelInfo                ImpulseLevelInfo;                                  // 0x0CE8(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FMarvelImpulseApplyFilter              ImpulseApplyFilter;                                // 0x0CF0(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_CF4[0x4];                                      // 0x0CF4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FFieldParams>                   HitFieldParams;                                    // 0x0CF8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	int32                                         BeHitAnimConfigID;                                 // 0x0D08(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D0C[0xC];                                      // 0x0D0C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInstantHitSpec                        HitNotify;                                         // 0x0D18(0x0048)(Net, Transient, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UAmmoAudioComponent*                    AudioComponent;                                    // 0x0D60(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                FinalAmmoDirection;                                // 0x0D68(0x0018)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnRep_HitNotify();
	void OnRep_HitNotifySP();

	const struct FMarvelInstantAmmoTable GetInstantAmmoData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InstantAmmo">();
	}
	static class AInstantAmmo* GetDefaultObj()
	{
		return GetDefaultObjImpl<AInstantAmmo>();
	}
};

// Class Marvel.InteractableComponent
// 0x0020 (0x0950 - 0x0930)
class UInteractableComponent final : public UStaticMeshComponent
{
public:
	float                                         Hitpoints;                                         // 0x0930(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_934[0x4];                                      // 0x0934(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         FXSystem;                                          // 0x0938(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UInteractableConstraintComponent*> Constraints;                                       // 0x0940(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InteractableComponent">();
	}
	static class UInteractableComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInteractableComponent>();
	}
};

// Class Marvel.InteractableMeshComponent
// 0x0270 (0x0BA0 - 0x0930)
class UInteractableMeshComponent final : public UStaticMeshComponent
{
public:
	TArray<class UStaticMesh*>                    ReplaceStaticMesh;                                 // 0x0930(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 ImpulseTimesToReplaceMesh;                         // 0x0940(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         ImpulseThreshold;                                  // 0x0950(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanMoveByImpulse;                                 // 0x0954(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_955[0x3];                                      // 0x0955(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ApplyImpulseInterval;                              // 0x0958(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95C[0x4];                                      // 0x095C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         TakeImpulseFX;                                     // 0x0960(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_968[0x8];                                      // 0x0968(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInteractableMeshEffectParams          TakeImpulseEffectParam;                            // 0x0970(0x0080)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ImpulseByOverlap;                                  // 0x09F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9F4[0x4];                                      // 0x09F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         ReplaceFX;                                         // 0x09F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             ReplaceFXTransform;                                // 0x0A00(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         DeathFx;                                           // 0x0A60(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          HitAudioEvent;                                     // 0x0A68(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHitAudioNum;                                    // 0x0A70(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A74[0x4];                                      // 0x0A74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AChaosDestructionActor>> LinkGCTypes;                                       // 0x0A78(0x0010)(Edit, BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class FName>                           LinkActorTags;                                     // 0x0A88(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         WeakLinkingClientDesActors;                        // 0x0A98(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA8[0x10];                                     // 0x0AA8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FVector& Impulse, const struct FVector& Location)> OnTakeImpulseDispatcher;                           // 0x0AB8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMoveDispatcher;                                  // 0x0AC8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UCurveFloat*                            EmissiveCurve;                                     // 0x0AD8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AE0[0x40];                                     // 0x0AE0(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class APhysicsSummoner*                       SummonedOwner;                                     // 0x0B20(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelInteractableActor*               InteractableActorOwner;                            // 0x0B28(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSet<class AMarvelInteractableActor*>         LinkedInteractableActors;                          // 0x0B30(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_B80[0x20];                                     // 0x0B80(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnFuncComponentHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnHit(const struct FVector& Dir, const struct FVector& Location);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InteractableMeshComponent">();
	}
	static class UInteractableMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UInteractableMeshComponent>();
	}
};

// Class Marvel.MarvelGameplay_DashTraceType
// 0x0000 (0x0030 - 0x0030)
class UMarvelGameplay_DashTraceType final : public UMarvelGameplayTraceType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplay_DashTraceType">();
	}
	static class UMarvelGameplay_DashTraceType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplay_DashTraceType>();
	}
};

// Class Marvel.IntersectionFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UIntersectionFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FPyramidTraceShape GetPyramidTraceShape(const struct FVector& Extend);
	static struct FSphereTraceShape GetSphereShape(const float Radius);
	static bool OverlapTest(const struct FTraceShape& ShapeA, const struct FTraceShape& ShapeB, const struct FTransform& TransformA, const struct FTransform& TransformB);
	static bool TraceTest(const struct FTraceShape& ShapeA, const struct FTraceShape& ShapeB, const struct FTransform& TransformA, const struct FTransform& TransformB, const struct FVector& Start, const struct FVector& End);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"IntersectionFunctionLibrary">();
	}
	static class UIntersectionFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UIntersectionFunctionLibrary>();
	}
};

// Class Marvel.ProcedureNotify
// 0x0100 (0x0130 - 0x0030)
class UProcedureNotify final : public UObject
{
public:
	bool                                          bActive;                                           // 0x0030(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           NotifyTag;                                         // 0x0034(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UObject>                 WorldContext;                                      // 0x0040(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UProcedureAudioManager>  ProcedureMgr;                                      // 0x0048(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FProcedureNotifyRule                   Rule;                                              // 0x0050(0x0014)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FProcedureNotifyParam                  Param;                                             // 0x0064(0x0008)(Transient, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FProcedureNotifyData                   Data;                                              // 0x0070(0x0080)(Transient, NativeAccessSpecifierPublic)
	struct FTimerHandle                           TimerHandle;                                       // 0x00F0(0x0018)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x28];                                     // 0x0108(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateNotifyNow();
	void DeactivateNotifyNow();
	void OnSetCurrentTime();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProcedureNotify">();
	}
	static class UProcedureNotify* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProcedureNotify>();
	}
};

// Class Marvel.MarvelBaseCharacter
// 0x0E00 (0x1810 - 0x0A10)
class AMarvelBaseCharacter : public ACharacter
{
public:
	uint8                                         Pad_A10[0x3B0];                                    // 0x0A10(0x03B0)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraParameterCollectionInstance*    SkinNiagaraColorCollectionInstance;                // 0x0DC0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastTimeCheckPenetrationRadius;                    // 0x0DC8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCapsuleChildrenLazyUpdate;                        // 0x0DCC(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_DCD[0xB];                                      // 0x0DCD(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                LazyUpdatedComponents;                             // 0x0DD8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_DE8[0x18];                                     // 0x0DE8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    LastValidBase;                                     // 0x0E00(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LastValidBoneName;                                 // 0x0E08(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E14[0x134];                                    // 0x0E14(0x0134)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<TWeakObjectPtr<class AChaosDestructionActor>> PlatformChaosDesActors;                            // 0x0F48(0x0050)(UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_F98[0x1C];                                     // 0x0F98(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxSavedPositionAge;                               // 0x0FB4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FB8[0x10];                                     // 0x0FB8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGameplayAbility*>               ActivatingAeroAbilities;                           // 0x0FC8(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_FD8[0x78];                                     // 0x0FD8(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bRagdollEnable;                                    // 0x1050(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1051[0x3];                                     // 0x1051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RagdollBlend;                                      // 0x1054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, bool>                       RagdollBones;                                      // 0x1058(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A8[0x18];                                    // 0x10A8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RagDollCacheVelocity;                              // 0x10C0(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCameraComponent*                       CameraComponent;                                   // 0x10D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RagdollActivationDelay;                            // 0x10E0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RagdollBlendInTime;                                // 0x10E4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RagdollBlendStartWeight;                           // 0x10E8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bCameraDecoupledFromCharacter;                     // 0x10EC(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EGender                                       Gender;                                            // 0x10ED(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECharacterBodySize                            BodySize;                                          // 0x10EE(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10EF[0x1];                                     // 0x10EF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(struct FHitResult& Hit)> MarvelFallingBlockedDelegate_ThreadSafe;           // 0x10F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FHitResult& Hit)> MarvelLandedDelegate_ThreadSafe;                   // 0x1100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EMovementMode MoveState)> MarvelCharacterMoveStateDelegate;                  // 0x1110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UMarvelBaseGameplayAbility* KnockAbility, bool bKnockStart)> KnockStateChangedDelegate;                         // 0x1120(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCharacterBeginPlay;                              // 0x1130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool Value)>    OnBattleStateChanged;                              // 0x1140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerState* MarvelPlayerState)> OnPlayerStateChangeDispatcher;                     // 0x1150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCharacterEndPlayDispatcher;                      // 0x1160(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1170[0x10];                                    // 0x1170(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AController* Controller)> OnPlayerControllerChangeDispatcher;                // 0x1180(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool Enable)>   OnCharacterInputDispatcher;                        // 0x1190(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* TargetActor, struct FCharacterRebornParam& Param)> OnRebornDispatcher;                                // 0x11A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* TargetActor, struct FCharacterRebornParam& Param)> OnRebornReadyDispatcher;                           // 0x11B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnUnPossessedDispatcher;                           // 0x11C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FGameplayTag& GameplayTag)> OnMontageEventDispatcher;                          // 0x11D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPawnInputComponentInit;                          // 0x11E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* TargetActor, int32 BuffID, class AActor* SourceActor, float Value)> OnBuffChangeOtherPlayerAttribute;                  // 0x11F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMarvelCharacterReconnectPostLogin;               // 0x1200(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float DashDistance)> OnMarvelCharacterDashDistanceDispatcher;           // 0x1210(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelCueNotify_Actor* ActiveCueActor)> OnMarvelAttachedCueActiveFX;                       // 0x1220(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UFXSystemComponent* FXComponent)> UnattachFXSpawnedDispatcher;                       // 0x1230(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 LODLevel)> OnMeshLODChangedDelegate;                          // 0x1240(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UMarvelTimelineComponent*               MarvelTimelineComponent;                           // 0x1250(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelHitEffectComponent*              MarvelHitEffectComponent;                          // 0x1258(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelMoveLogicBaseComponent*          MoveLogicComponent;                                // 0x1260(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelSpringArmComponent*              SpringArmComponent;                                // 0x1268(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelSolvePenetrationComponent*       SolvePenetrationComponent;                         // 0x1270(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAIStimuliSourceComponentBase*    AIStimuliSourceComponent;                          // 0x1278(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelCrosshairComponent*              CrosshairComponent;                                // 0x1280(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UEquipComponent*                        EquipComponent;                                    // 0x1288(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URenderShellComponent*                  RenderShellComponent;                              // 0x1290(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelSkinComponent*                   SkinComponent;                                     // 0x1298(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTeamComponent*                         TeamComponent;                                     // 0x12A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedCreateStencilComponent;                       // 0x12A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A9[0x7];                                     // 0x12A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStencilComponent*                      StencilComponent;                                  // 0x12B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReactivePropertyComponent*             ReactivePropertyComponent;                         // 0x12B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimTimelineComponent*                 AnimTimelineComponent;                             // 0x12C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBindingProxy_CharacterAbilities*       ProxyAbilities;                                    // 0x12C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetComponent*                       WidgetComponent_CharacterInfo;                     // 0x12D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetComponent*                       WidgetComponent_CharacterArrow;                    // 0x12D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetComponent*                       WidgetComponent_CharacterHpState;                  // 0x12E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetComponent*                       WidgetComponent_CharacterDeath;                    // 0x12E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        HeadWidgetRootComponent;                           // 0x12F0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeadWidgetZOffsetToPelvisWhenIdle;                 // 0x12F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12FC[0x4];                                     // 0x12FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMeshHiddenComponent*                   HiddenComponent;                                   // 0x1300(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshOverlayMaterialComponent*          OverlayMaterialComponent;                          // 0x1308(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCharacterMaterialComponent*            MaterialComponent;                                 // 0x1310(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshHitComponent*                      MeshHitComponent;                                  // 0x1318(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraViewInitPitch;                               // 0x1320(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraViewInitRoll;                                // 0x1324(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraViewPitchMin;                                // 0x1328(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraViewPitchMax;                                // 0x132C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutActiveRadius;                               // 0x1330(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FadeOutMaxRatio;                                   // 0x1334(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCameraArmCollision;                               // 0x1338(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1339[0x7];                                     // 0x1339(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAudioReverbComponent*            AudioReverbComponent;                              // 0x1340(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FProtagonistLightController            ProtagonistLightController;                        // 0x1348(0x0018)(NativeAccessSpecifierPublic)
	class UMarvelAbilitySystemCom*                AbilitySystemComponent;                            // 0x1360(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelCheatAnalyzer*                   CheatAnalyzer;                                     // 0x1368(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroID;                                            // 0x1370(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HeroUID;                                           // 0x1374(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinID;                                            // 0x1378(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bControlledByAI;                                   // 0x137C(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_137D[0x3];                                     // 0x137D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DeathTransitionHeroID;                             // 0x1380(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackTraceTime;                                     // 0x1384(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeathTransitionActivated;                         // 0x1388(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPreventDeathThisTime;                             // 0x1389(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleSide                                   DisguiseAsPlayerTeam;                              // 0x138A(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_138B[0x5];                                     // 0x138B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DisguiseAsPlayerName;                              // 0x1390(0x0010)(BlueprintVisible, Net, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APlayerState*                           DisguiseAsPlayerState;                             // 0x13A0(0x0008)(BlueprintVisible, Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESpawnMethod                                  CharacterSpawnMethod;                              // 0x13A8(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCharacterValid;                                   // 0x13A9(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReviving;                                         // 0x13AA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeathMorphing;                                    // 0x13AB(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13AC[0x4];                                     // 0x13AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTask*                          DashTask;                                          // 0x13B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsDoubleJumping;                                  // 0x13B8(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13B9[0x7];                                     // 0x13B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 GenerateID;                                        // 0x13C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EBattleSide                                   DefaultBattleSide;                                 // 0x13D0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_13D1[0x7];                                     // 0x13D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(struct FGameplayTag& Tag, bool TagExists)> OnOwnedTagUpdateDispatcher;                        // 0x13D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, BlueprintCallable, NativeAccessSpecifierProtected)
	class UCharacterAudioComponent*               AudioComponent;                                    // 0x13E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentSpeed;                                      // 0x13F0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13F4[0x4];                                     // 0x13F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, int32>                      MaterialNameToIndex;                               // 0x13F8(0x0050)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	bool                                          bBeingRepulseAnim;                                 // 0x1448(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELieDownState                                 LieDownState;                                      // 0x1449(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_144A[0x6];                                     // 0x144A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelPlayerController*                ControlController;                                 // 0x1450(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1458[0x6C];                                    // 0x1458(0x006C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bFastReplicationAsc;                               // 0x14C4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C5[0x43];                                    // 0x14C5(0x0043)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          ShouldPushTeammateOut;                             // 0x1508(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1509[0x7];                                     // 0x1509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector_NetQuantize10                  MovementAcceleration;                              // 0x1510(0x0018)(Net, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1528[0x14];                                    // 0x1528(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCapsuleSizeAdjust                     CapsuleSizeAdjust;                                 // 0x153C(0x0010)(Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_154C[0x4];                                     // 0x154C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnCapsuleSizeChanged;                              // 0x1550(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              BeforeCapsuleSizeChanged;                          // 0x1560(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1570[0x20];                                    // 0x1570(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FVector& LastPosition, const struct FVector& NewPosition)> TranslatedByPortalDelegate;                        // 0x1590(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class APortalViewActor* InPortal)> TranslatedByPortalOneParamDelegate;                // 0x15A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelBaseCharacter* InChar, class APortalViewActor* InPortal)> TranslatedByPortalTwoParamsDelegate;               // 0x15B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_15C0[0x10];                                    // 0x15C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* InActor)> OnOwnerPortalTrigger;                              // 0x15D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_15E0[0x28];                                    // 0x15E0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              JumpFailDelegate_ThreadSafe;                       // 0x1608(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_1618[0x10];                                    // 0x1618(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FReticleModifiersContainer             ReticleModifiers;                                  // 0x1628(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnModifiersChanged;                                // 0x1678(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UMarvelActorPoolComponent*              ActorPoolComponent;                                // 0x1688(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelSwiftProjectileManager*          SwiftProjectileManager;                            // 0x1690(0x0008)(Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FCharacterMoveImpulseConfig>    DefaultMoveImpulseLevelConfigs;                    // 0x1698(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMarvelImpulseLevelInfo                CurrentMoveImpulseLevelInfo;                       // 0x16A8(0x0008)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelImpulseApplyFilter              CurrentImpulseApplyFilter;                         // 0x16B0(0x0004)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         BeginPlayIdx;                                      // 0x16B4(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16B8[0x18];                                    // 0x16B8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            CachedOwnerChildren;                               // 0x16D0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_16E0[0x8];                                     // 0x16E0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Value)>    OnSlidingZiplineChanged;                           // 0x16E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_16F8[0xC0];                                    // 0x16F8(0x00C0)(Fixing Size After Last Property [ Dumper-7 ])
	class UAchievementComponent*                  AchievementComponent;                              // 0x17B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class URideOnCharacterManagementComponent*    RideOnCharacterManagementComponent;                // 0x17C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UJarvisReplayComponent*                 JarvisReplayComponent;                             // 0x17C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelBaseCharacter* DisguiseCharacter, class AMarvelBaseCharacter* OriginCharacter, bool bIsAvatorAlive)> OnDisguiseEndDispatcher;                           // 0x17D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              RMSDirChanged;                                     // 0x17E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bEnableCameraLagOnStepUp;                          // 0x17F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_17F1[0x1B];                                    // 0x17F1(0x001B)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableAimAssistToTeammate;                        // 0x180C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_180D[0x3];                                     // 0x180D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FVector GetHitDirection(const class AActor* SourceCharacter, const struct FAttributeModifierParameter& ModifierParameter);

	void AddMoveIgnoreActors(const TArray<class AActor*>& ActorArray);
	void AddPostProcessMaterial(class FName MaterialName, float Weight, class UMaterialInstanceDynamic* Mid);
	void AddReticleModifier(const struct FGameplayTag& InTag, const struct FReticleStyle& InStyle);
	void AddValueWithMaxAttribute(const struct FGameplayAttribute& attr, const struct FGameplayAttribute& MaxAttr, TSubclassOf<class UGameplayEffect> EffectClass, float AddValue);
	struct FTransform CalculateSocketInfoTransform(EMarvelScopeQuoteType InMarvelScopeQuoteType);
	class ULegacyCameraShake* CameraShake(TSubclassOf<class ULegacyCameraShake> CameraShakeClass, float Scale);
	void CancelCurrentInputPressAbilities();
	void CancelCurrentInputPressAbilitiesByInputKey(EAbilityInputBinds InputKey);
	void CancelCurrentPressAbilityBindInputs();
	bool CanPreventDeath(class AActor* InSourceAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	bool CanUseHealPack();
	void ChangeCapsuleSize(const float InRadius, const float InHalfHeight, const bool bInAdjustMesh);
	void ChangeCapsuleSizeWith(const struct FCapsuleSizeAdjust& InCapsuleSizeAdjust);
	void ClientShowEnemyOutLine(bool ShouldShow);
	void DisableHitShapes(bool InDisable);
	void EnableLeftHandIK(bool bEnable, const struct FVector& InEffectorLocation);
	class UMaterialInstanceDynamic* EnablePostProcessing(class FName PPName, bool bEnable);
	void GameplayTagUpdated(const struct FGameplayTag& InTag, bool bInExist);
	float GetAOPitch();
	float GetAOYaw();
	struct FVector GetCharacterLocalVelocity();
	class UMarvelBaseGameplayAbility* GetCollideKnockDownAbility(bool bCheckActivate);
	float GetCurrentHealth();
	struct FVector GetCurrentRMSDashDir();
	float GetCurrentSpeed();
	int32 GetFlyModeID();
	TArray<int32> GetGameplayAbilities();
	TArray<int32> GetGameplayAbilitiesByInputKey(EAbilityInputBinds InputKey);
	class UMarvelGameplayAbility* GetGameplayAbility(int32 AbilityID);
	class UMarvelGameplayAbility* GetGameplayAbilityByHandle(const struct FGameplayAbilitySpecHandle& AbilityHandle);
	int32 GetGameplayAbilityID(EAbilityInputBinds InputKey);
	int32 GetGameplayAbilityInputKey(int32 AbilityID);
	float GetHeightAboveGround(bool bTraceDestructible, bool bTraceSceneSummoned, float MaxGroundSlope, bool bTraceAirWall);
	class USceneComponent* GetHitComponent();
	bool GetLeftHandIKState(struct FVector* OutEffectorLocation);
	ELieDownState GetLieDownState();
	class AMarvelPlayerController* GetMarvelPlayerController();
	float GetMaxHealth();
	class UCapsuleComponent* GetMeshCapsuleComponent();
	struct FVector GetMeshCapsuleLocation();
	void HandleDeathCamera(bool bInDeath);
	void IgnoreClientMovementErrorChecksAndCorrection(bool bIgnore);
	bool IsEnemyOnClient();
	bool IsMeshHitComponentEnable();
	struct FVector K2_GetViewLocation();
	struct FRotator K2_GetViewRotation();
	void K2_OnSculptChanged(int32 SculptID);
	void MakeUpToMaxAttribute(const struct FGameplayAttribute& attr, const struct FGameplayAttribute& MaxAttr, TSubclassOf<class UGameplayEffect> EffectClass);
	void MulticastBeingRepulseAnim(bool bIsRepulseAnim);
	void MulticastCameraInfo(uint16 CameraPitch, uint16 CameraYaw);
	void MulticastCameraPitch(uint16 CameraPitch);
	void MulticastCameraYaw(uint16 CameraYaw);
	void MulticastNotifyActorForceChanged(const class APortalViewActor* InPortal, const struct FObjectForceChangedInfo& ChangedInfo);
	void MulticastPlayPersonality(int32 PersonalityIndex);
	void MulticastStopPersonality();
	void MulticastTeleportTo(const struct FVector& Location, const struct FRotator& Rotation, bool bForceControlAndChar);
	void NativeOnDashStateChanged(bool bIsDash);
	void NativeOnForceChangedMovement(const struct FVector& InOldLocation, const struct FVector& InNewLocation);
	void NativeOnSculptChanged(int32 SculptID);
	void OnAbilityInitStateChange(class AActor* InTarget);
	void OnActivateCameraInterp(int32 AbilityID, bool bActivate);
	void OnCapsuleSweepMulti(const TArray<struct FHitResult>& HitResults, const struct FVector& TraceStart, const struct FVector& TraceEnd);
	void OnCharacterStepUp();
	void OnChildAttached(class USceneComponent* SourceComponent, class USceneComponent* ChildComponent);
	void OnChildDetached(class USceneComponent* SourceComponent, class USceneComponent* ChildComponent);
	void OnControlInputAbilities(bool Enable);
	void OnControllerChange();
	void OnDebugTurninPlaceTick(float DeltaTime);
	void OnIntroMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void OnLazyChildComponentAttached(class USceneComponent* InComponent, class USceneComponent* InChildComponent);
	void OnLazyChildComponentDetached(class USceneComponent* InComponent, class USceneComponent* InChildComponent);
	void OnLivingStateChanged(EPlayerLivingState LivingState);
	void OnMeshLODChanged(int32 InLODLevel);
	void OnPlayerStateChange();
	void OnPostReplaceController(class AController* old_controller);
	void OnPreDelegateByAI();
	void OnPreReplaceController(class AController* new_controller);
	void OnPrintDebugInfo(const class FString& DebugInfo);
	void OnReconnectPostLogin();
	void OnRep_ActorPoolBeginPlayChanged();
	void OnRep_CameraDecoupledFromCharacter();
	void OnRep_CapsuleSizeAdjust();
	void OnRep_ControlledByAI();
	void OnRep_MovementAcceleration();
	void PlayerPersonality(int32 PersonalityIndex);
	void PlayIntroAnimation(TSoftObjectPtr<class UAnimMontage> IntroMontage);
	void RemoteMulticastLanded(const struct FHitResult& Hit);
	void RemoteOnActivateCameraInterp(int32 AbilityID, bool bActivate);
	void RemoteOnActivateCameraShake(TSubclassOf<class ULegacyCameraShake> CameraShakeClass, float Scale, float InDamageMultiplier);
	void RemoveReticleModifier(const struct FGameplayTag& InTag);
	void ResetAliveState();
	void ResetSpringArmTransformToDefault();
	void ResetVariables();
	void ServerHandleSceneObjectPenetration(class AActor* InHitActor);
	void ServerSetIsStuck(const bool InIsStuck);
	void SetCameraArmCollision(bool bInCameraArmCollision);
	void SetCameraDecoupledFromCharacter(bool IsDecoupled);
	void SetCharacterSpawnMethod(ESpawnMethod NewSpawnMethod);
	void SetControlledByAI(bool bInControlledByAI);
	void SetCustomCameraTransform(const struct FTransform& InTransform);
	void SetCustomCameraTransformEnabled(bool bInEnabled);
	void SetDeathState(bool bInDeath);
	void SetLieDownState(ELieDownState InLieDownState, float InAnimPlayRate);
	void SetOverridePlayerName(bool bInOverridePlayerName, const class FString& InPlayerName);
	void SetOverrideTeamID(bool bInOverrideTeamID, int32 InTeamID);
	void SetReviving(bool bInReviving);
	void SetShouldTakeDamageButNoDeath(bool bShould);
	void SetSlidingZipline(bool bInSlidingZiplie);
	void SetTempInstigator(class AActor* TargetInstigator);
	void ShowEnemyOutLine(bool ShouldShow);
	void StartFly(const class UGameplayAbility* CallerAbility, int32 InFlyModeID);
	void StopFly(const class UGameplayAbility* CallerAbility, int32 InFlyModeID);
	void StopPersonality();
	void TemporarilyDisableLeftHandIK(bool bDisable);
	void UpdateCharacterAoiDist();
	void UpdateSpringArmAttachmentForSpectation();
	bool WillRunOnGround(float HeightTolerance);

	void AddReplayEvent(class AActor* InSourceAvatar) const;
	void ClientDrawDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness, bool bCheckShowObTickRay) const;
	void ClientRecordCombatInfo(const class FString& InKey, const struct FProjExpInfo& InfoFromServer, class APawn* ProjOwner) const;
	struct FVector GetAimDirection() const;
	bool GetCameraArmCollision() const;
	class UCameraComponent* GetCameraComponent() const;
	bool GetCameraView(struct FVector* OutCamLoc, struct FRotator* OutCamRot, bool bUseOriginCamera) const;
	bool GetCameraViewEveryFrame(struct FVector* OutCamLoc, struct FRotator* OutCamRot) const;
	struct FHeroIdentifier GetHeroIdentifier() const;
	EHeroRole GetHeroRole() const;
	class UMarvelHitShapeComponent* GetHitShapeComponent(EStrikePartType Part) const;
	class FString GetPlayerName(bool bConsiderDeceptive) const;
	bool GetReloadingState() const;
	struct FMarvelHeroSkinSpec GetSkinSpec(bool bDefault) const;
	const bool GetSlidingZipline() const;
	int32 GetUID() const;
	bool GetUsingWeaponState() const;
	bool HasOwnedGameplayTag(const struct FGameplayTag& TagToCheck) const;
	bool IsAIControlled() const;
	bool IsAlive() const;
	bool IsRecentlyRendered(bool bOnlyUseMeshVisiblity) const;
	bool IsRenderCheckComponent(const class UActorComponent* InCom) const;
	struct FVector K2_GetAimDirection() const;
	bool K2_GetInBattleState() const;
	bool K2_GetIsTakingDamage() const;
	void TellClientToDrawDebugLine(const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelBaseCharacter">();
	}
	static class AMarvelBaseCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelBaseCharacter>();
	}
};

// Class Marvel.MarvelCueNotify_TakeDamage_Actor
// 0x0080 (0x0D48 - 0x0CC8)
class AMarvelCueNotify_TakeDamage_Actor : public AMarvelCueNotify_Actor
{
public:
	struct FHitParticleConfig                     HitParticleConfig;                                 // 0x0CC8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         FXSystemAsset;                                     // 0x0CD8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     DecalMaterial;                                     // 0x0CE0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FFeedBack_Decal                        HitDecal;                                          // 0x0CE8(0x0058)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         DamagedAudioID;                                    // 0x0D40(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D44[0x4];                                      // 0x0D44(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnExecuteFX(class AActor* MyTarget, const struct FGameplayCueParameters& Paramters);

	void OnExecuteAudio(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_TakeDamage_Actor">();
	}
	static class AMarvelCueNotify_TakeDamage_Actor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_TakeDamage_Actor>();
	}
};

// Class Marvel.JarvisCharacter
// 0x0010 (0x1820 - 0x1810)
class AJarvisCharacter final : public AMarvelBaseCharacter
{
public:
	EJarvisAbilityType                            AbilityType;                                       // 0x1810(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1811[0x7];                                     // 0x1811(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UJarvisMoveLogicBaseComponent*          JarvisMoveLogic;                                   // 0x1818(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JarvisCharacter">();
	}
	static class AJarvisCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AJarvisCharacter>();
	}
};

// Class Marvel.MarvelGameplayEffectEnergyModify
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectEnergyModify final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectEnergyModify">();
	}
	static class UMarvelGameplayEffectEnergyModify* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectEnergyModify>();
	}
};

// Class Marvel.MarvelMoveLogicBaseComponent
// 0x0300 (0x03F0 - 0x00F0)
class UMarvelMoveLogicBaseComponent : public UActorComponent
{
public:
	uint8                                         Pad_F0[0x3];                                       // 0x00F0(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         ReplicatedMovementInputSize;                       // 0x00F3(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x14];                                      // 0x00F4(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	EMoveDirectionState                           MoveDirectionState;                                // 0x0108(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ControllerOrientationTarget;                       // 0x0110(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               LookingRotation;                                   // 0x0118(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               PrevLookingRotation;                               // 0x0130(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	float                                         LookingYawRate;                                    // 0x0148(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Direction;                                         // 0x014C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccelerationDirection;                             // 0x0150(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(float InputYaw, float InputPitch)> OnControllerInputDispatcher;                       // 0x0158(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float MoveForward, float MoveRight)> OnControllerMoveInputDispatcher;                   // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float Val)>     OnMoveForwardDispatcher;                           // 0x0178(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float Val)>     OnMoveRightDispatcher;                             // 0x0188(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UAnimMontage* Montage)> TurnInPlaceDispatcher_ThreadSafe;                  // 0x0198(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(uint8 InMovementInputs, float DeltaTime)> ClientMovementInputsDispatcher_ThreadSafe;         // 0x01A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InSourceAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)> PostMoveSpeedAttributeChangedDispatcher;           // 0x01B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          IsFlying;                                          // 0x01C8(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C9[0x3];                                      // 0x01C9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DynamicPenetrationScale;                           // 0x01CC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0[0x1];                                      // 0x01D0(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableAeroTurn;                                   // 0x01D1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D2[0x2];                                      // 0x01D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxTIPRate;                                        // 0x01D4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RightMaxAngle;                                     // 0x01D8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LeftMaxAngle;                                      // 0x01DC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0[0xC];                                      // 0x01E0(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RealRightMaxAngle;                                 // 0x01EC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         RealLeftMaxAngle;                                  // 0x01F0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CurrentMontage;                                    // 0x01F8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_200[0x28];                                     // 0x0200(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelGameplayAbility*                 AbilityJump;                                       // 0x0228(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ACharacter*                             CharacterOwner;                                    // 0x0230(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x0238(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelCharacterMovementComponent*      CharacterMovement;                                 // 0x0240(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputComponent*                        PlayerInputComponent;                              // 0x0248(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ForwardWalkSpeed;                                  // 0x0250(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BackwardWalkSpeed;                                 // 0x0254(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BackwardWalkSpeedRatio;                            // 0x0258(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          AutoRotateEnable;                                  // 0x025C(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DisableActorRotateForDebug;                        // 0x025D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bForceNotSyncWithSpringArm;                        // 0x025E(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_25F[0x1];                                      // 0x025F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               TurninPlaceBeginCharacterRotation;                 // 0x0260(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UCurveFloat*                            ActiveTurnCurve;                                   // 0x0278(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           BlockBodyTurnTag;                                  // 0x0280(0x000C)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           BlockCameraTurnTag;                                // 0x028C(0x000C)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           BlockCameraLookUpTag;                              // 0x0298(0x000C)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           BlockJumpTag;                                      // 0x02A4(0x000C)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           BlockMoveTag;                                      // 0x02B0(0x000C)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           BlockHitStunTag;                                   // 0x02BC(0x000C)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           Block_FallingTag;                                  // 0x02C8(0x000C)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           BlockSlowWalkTag;                                  // 0x02D4(0x000C)(Edit, BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  WhetherReplicateMovementInputsTagsFilter;          // 0x02E0(0x0068)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	float                                         FortStyleTurninPlaceLimitMinOffset;                // 0x0348(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FortStyleTurninPlaceLimitMinOffset_C;              // 0x034C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FortStyleStartMovingLowerYawInterpSpeed;           // 0x0350(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FortStyleTurninPlaceLastCharacterYaw;              // 0x0354(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FortStyleLowerBodyYaw;                             // 0x0358(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFortStyleTurninPlaceIsInTurningState;             // 0x035C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_35D[0x3];                                      // 0x035D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FortStyleTurninPlaceIntepTime;                     // 0x0360(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurninPlaceMontagePlayLength;                      // 0x0364(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FortStyleTurninPlaceLimitMinOffsetInternal;        // 0x0368(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FortStyleLastRepWorldMeshYaw;                      // 0x036C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FortStyleLastMeshComponentYaw;                     // 0x0370(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FortStyleWorldMeshYawPerFrame;                     // 0x0374(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ENetworkSmoothingMode                         CachedSmoothingMode;                               // 0x0378(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableTurninPlaceInFlyStand;                      // 0x0379(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_37A[0x6];                                      // 0x037A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           TurnAnimL90;                                       // 0x0380(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAnimMontage*                           TurnAnimR90;                                       // 0x0388(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFellDown;                                         // 0x0390(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_391[0x7];                                      // 0x0391(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            JumpGravityCurve;                                  // 0x0398(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StartJumpTime;                                     // 0x03A0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsCustomHandleMoveInput;                          // 0x03A4(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3A5[0x3F];                                     // 0x03A5(0x003F)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CachedRemoteYaw;                                   // 0x03E4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MeshWorldSpaceYaw;                                 // 0x03E8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3EC[0x4];                                      // 0x03EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddCharacterRotation(const struct FRotator& AddRot);
	void AddTestTag(const struct FGameplayTag& Tag);
	void AISetAeroMovementInput(EInputControlType InputTypes);
	void CalculateTransformVariables(float DeltaTime);
	void ChangeWalkSpeed(float CurrentWalkSpeed);
	void CheckIfTurninPlaceMontagePlayEnd(float DeltaTime);
	float ChooseMaxWalkSpeedByMoveDirectionState();
	void DisableFortniteStyleTurninPlaceMontageRootMotion();
	void ForceInteruptFortniteStyleTurninPlaceMontage();
	void ForceRotateCharacterYaw(float ActorYaw);
	void ForceRotateControllerAndCharacterToTarget(class AActor* InTarget);
	void ForceRotateControllerAndCharacterYaw(float ActorYaw);
	void ForceRotateMeshYawInFortStyle(float MeshYaw);
	void ForceStopTurninPlaceMontage();
	void FortniteStyleUpdateRotation(float DeltaTime);
	void FortniteStyleUpdateRotation_RootMotion(float DeltaTime);
	void FortniteStyleUpdateRotation_Simulate(float DeltaTime);
	void FortniteStyleUpdateRotationInTurnInState(float DeltaTime);
	void FortniteStyleUpdateRotationOutOfTurnInState(float DeltaTime);
	float GetCurrentTurninPlaceMontagePosition();
	float GetFortStyleLowerBodyYaw();
	struct FVector GetMovementInputAcceleration();
	bool HasMovementInputs();
	void InteruptFortniteStyleTurninPlaceMontage();
	bool IsInAbilityRootState();
	bool IsInBlockBodyTurnState();
	bool IsInBlockCameraLookUpState();
	bool IsInBlockCameraTurnState();
	bool IsInBlockCharacterHitStunState();
	bool IsInBlockCharacterMoveState();
	bool IsInBlockFallingState();
	bool IsInBlockJumpState();
	bool IsInBlockSlowWalkState();
	bool IsInRange(float Value, float Min, float Max);
	bool IsInTurningState();
	bool IsMovingBackward();
	bool IsMovingDown();
	bool IsMovingForward();
	bool IsMovingLeft();
	bool IsMovingRight();
	bool IsMovingUp();
	void LookUp(float Val);
	void MoveForward(float Val);
	void MoveRight(float Val);
	void OnOwnerCharacterDeath(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnOwnerCharacterReborn(class AActor* TargetActor, const struct FCharacterRebornParam& RebornParam);
	void OnOwnerCharacterTagUpdate(const struct FGameplayTag& TagUpdated, bool TagExists);
	float PlayAnimMontage(EMontageCategory MontageCategory, class UAnimMontage* MontageToPlay, float InPlayRate, float StartTime);
	void PlayFortniteStyleTurninPlaceMontage_RootMotion(float StartTime, float DeltaTime);
	void QueryStopAbilityTurninPlaceMontage();
	void RemoveTestTag(const struct FGameplayTag& Tag);
	void ResetMeshOrientation();
	void ResetMovementInputs();
	void SetAutoRotateEnable(bool bEnable);
	void SetCharacterRotation(const struct FRotator& TargetRotation, bool bNeedInterpolation, float InterpSpeed, float DeltaTime);
	void SetForceNotSyncWithSpringArm(bool ForceNotSync);
	void SetIsCustomHandleMoveInput(bool IsCustom);
	void SetIsFellDown(bool bIsFellDown);
	void SetMovementInputs(uint8 NewInputs);
	void SetOrientationToTarget();
	void SetupPlayerInputComponent(class UInputComponent* InPlayerInputComponent);
	void StopAbilityTurninPlaceMontage();
	void StopAnimMontage(EMontageCategory MontageCategory, class UAnimMontage* MontageToStop);
	void ToggleControllerAndCharacterOrientatationToTarget(class AActor* InTarget);
	void Turn(float Val);
	void TurninPlaceSetCharacterRotation(float TurnYaw);
	void UpdateTransformVariables(float DeltaTime);
	void UpdateTurninPlaceAnimAssets();
	void UpdateTurninPlaceLimitMinOffsetByState_ThreadSafe();
	bool UpdateUseControllerDesiredRotation();
	void UpdateWalkSpeedByDirection(float DirectonThresholdMin, float DirectionThresholdMax, float Tolarence);
	void UpdateWalkSpeedByDirectionAlt(float DirectonThresholdMin, float DirectionThresholdMax, float Tolarence);

	bool GetIsFellDown() const;
	uint8 GetMovementInputs() const;
	bool MontageIsPlaying(const class UAnimMontage* Montage) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelMoveLogicBaseComponent">();
	}
	static class UMarvelMoveLogicBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelMoveLogicBaseComponent>();
	}
};

// Class Marvel.JarvisMoveLogicBaseComponent
// 0x0000 (0x03F0 - 0x03F0)
class UJarvisMoveLogicBaseComponent final : public UMarvelMoveLogicBaseComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"JarvisMoveLogicBaseComponent">();
	}
	static class UJarvisMoveLogicBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UJarvisMoveLogicBaseComponent>();
	}
};

// Class Marvel.UIController_BattleHUD_Energy
// 0x0050 (0x0080 - 0x0030)
class UUIController_BattleHUD_Energy : public UObject
{
public:
	uint8                                         Pad_30[0x48];                                      // 0x0030(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget_AbilityEnergy*                  Widget_Energy;                                     // 0x0078(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIController_BattleHUD_Energy">();
	}
	static class UUIController_BattleHUD_Energy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIController_BattleHUD_Energy>();
	}
};

// Class Marvel.UIController_BattleHUD_AbilityEnergy
// 0x0030 (0x00B0 - 0x0080)
class UUIController_BattleHUD_AbilityEnergy final : public UUIController_BattleHUD_Energy
{
public:
	class UMarvelGameplayAbility*                 Ability;                                           // 0x0080(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_88[0x28];                                      // 0x0088(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAttributeChanged(class AActor* InSourceAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIController_BattleHUD_AbilityEnergy">();
	}
	static class UUIController_BattleHUD_AbilityEnergy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIController_BattleHUD_AbilityEnergy>();
	}
};

// Class Marvel.MarvelKeyUIAsset
// 0x0240 (0x0278 - 0x0038)
class UMarvelKeyUIAsset final : public UDataAsset
{
public:
	TMap<struct FKey, struct FGamepadKeyBrush>    GamepadBrushAssetMap;                              // 0x0038(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<ESpecialUIKey, struct FGamepadKeyBrush>  SpecialKeyBrushAssetMap;                           // 0x0088(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<struct FKey, struct FSlateBrush>         BrushAssetMap;                                     // 0x00D8(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<struct FKey, class FText>                TextAssetMap;                                      // 0x0128(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<struct FKey, class FText>                ButtonAssetMap;                                    // 0x0178(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FKey>                           LeftToRight_KeyOrder;                              // 0x01C8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FKey, int32>                      KeyOrderMap;                                       // 0x01D8(0x0050)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	TMap<struct FKey, struct FKeySequenceFrameBrush> KeySequenceFrame;                                  // 0x0228(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	int32 GetKeyOrder(const struct FKey& Key);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelKeyUIAsset">();
	}
	static class UMarvelKeyUIAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelKeyUIAsset>();
	}
};

// Class Marvel.CommonKeyPressPrompt
// 0x0020 (0x0488 - 0x0468)
class UCommonKeyPressPrompt : public UMarvelSimpleUserWidget
{
public:
	class UImage*                                 Img_Press_Arrow;                                   // 0x0468(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Anim_Press_State;                                  // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Anim_Press_Loop;                                   // 0x0478(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_480[0x8];                                      // 0x0480(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonKeyPressPrompt">();
	}
	static class UCommonKeyPressPrompt* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonKeyPressPrompt>();
	}
};

// Class Marvel.CommonKeyWidget
// 0x02A0 (0x0708 - 0x0468)
class UCommonKeyWidget : public UMarvelSimpleUserWidget
{
public:
	class USizeBox*                               Text_SizeBox;                                      // 0x0468(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Text_Key;                                          // 0x0470(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Text_BgImg_Key;                                    // 0x0478(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USizeBox*                               Img_SizeBox;                                       // 0x0480(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UScaleBox*                              Img_ScaleBox;                                      // 0x0488(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Img_Key;                                           // 0x0490(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Img_Hold_Img_Bg;                                   // 0x0498(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Img_Hold_Img_Progress;                             // 0x04A0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Img_Hold_Img_Arrow;                                // 0x04A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Img_Hold_Text_Progress;                            // 0x04B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Img_Hold_Text_Arrow;                               // 0x04B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCommonKeyPressPrompt*                  PressPrompt;                                       // 0x04C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Anim_Hold;                                         // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnCommonKeyWidgetUpdateEvent;                      // 0x04D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCommonKeyWidgetHoldAnimFinishEvent;              // 0x04E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TDelegate<void(ESlateVisibility CurrentCalcVisibility)> KeyWidgetCalculateVisibilityDelegate;              // 0x04F0(0x0014)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_504[0x4];                                      // 0x0504(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIActionData                          ActionData;                                        // 0x0508(0x0058)(Edit, Protected, NativeAccessSpecifierProtected)
	ESpecialUIKey                                 SpecialKey;                                        // 0x0560(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_561[0x3];                                      // 0x0561(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FKeyWidgetStyle                        KeyWidgetStyle;                                    // 0x0564(0x00D4)(Edit, Protected, NativeAccessSpecifierProtected)
	float                                         HoldDurationTime;                                  // 0x0638(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EKeyWidgetState                               WidgetState;                                       // 0x063C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoExecuteRegister;                              // 0x063D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoControlVisible;                               // 0x063E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHiddenWhenKeyNotMatchInputType;                   // 0x063F(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHiddenWhenKeyIsEmpty;                             // 0x0640(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLoopPressAnim;                                    // 0x0641(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_642[0x2];                                      // 0x0642(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SequenceFrameRate;                                 // 0x0644(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FKeyWidgetZoomRateConfig>       ZoomRateConfigs;                                   // 0x0648(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	bool                                          bOverrideInputType;                                // 0x0658(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	Marvel::EInputType                            OverrideInputType;                                 // 0x0659(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_65A[0x26];                                     // 0x065A(0x0026)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelKeyUIAsset*                      CurentKeyAsset;                                    // 0x0680(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_688[0x80];                                     // 0x0688(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearAllRegister();
	void ClearCurrentData();
	void ClearCurrentDataAndUpdate();
	void EndHold();
	void ExecuteSequenceFrame();
	int32 GetDebugId();
	struct FKey GetDisplayKey();
	bool GetIsUseImageStyle();
	struct FKeyWidgetStyle GetKeyWidgetStyle();
	EKeyWidgetState GetWidgetState();
	bool IsSourceInputDataValid();
	bool IsUsingSpecivalKey();
	void MainPanelOnCascadingVisibleChangedEventCallback(bool bVisible);
	void NativeInputTypeUpdate(Marvel::EInputType OldInputType, Marvel::EInputType CurrentInputType);
	void NativeMappingInputChordChangedEvent();
	void RebuildControlMappingsNotifyCallback();
	void RegisterAll();
	void SetAction(class FName InActionName, bool TriggetUpdate);
	void SetActionData(const struct FUIActionData& InActionData, bool TriggetUpdate);
	void SetAutoControlVisible(bool InAutoControlVisible);
	void SetAutoExecuteRegister(bool InAutoExecuteRegister);
	void SetHiddenWhenKeyIsEmpty(bool Value);
	void SetInHold(float InDurationTime);
	void SetInputAction(class UInputAction* InInputAction, class FName InActionName, bool TriggetUpdate);
	void SetInputBind(EAbilityInputBinds InInputBind, bool TriggetUpdate);
	void SetKey(const struct FKey& InKey, bool TriggetUpdate);
	void SetKeyAssetName(const class FString& InKeyAssetName);
	void SetKeyWidgetStyle(const struct FKeyWidgetStyle& InKeyWidgetStyle);
	void SetOverrideInputType(bool bInOverrideInputType, Marvel::EInputType InOverrideInputType);
	void SetRichTextKey(const class FString& InRichTextKey, bool TriggetUpdate);
	void SetSpecialKey(ESpecialUIKey InSpecialUIKey, bool TriggetUpdate);
	void SetUIActionKeyMode(EUIActionKeyMode UIActionKeyMode);
	void SetWidgetState(EKeyWidgetState NewValue);
	void StartHold();
	void Update(bool ForceTriggerUpdate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonKeyWidget">();
	}
	static class UCommonKeyWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonKeyWidget>();
	}
};

// Class Marvel.CommonKeyWidgetManager
// 0x0098 (0x00C8 - 0x0030)
class UCommonKeyWidgetManager final : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCommonKeyWidget*>               AddUpdateList;                                     // 0x0038(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UCommonKeyWidget*>               UpdateList;                                        // 0x0048(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FTimerHandle                           UpdateTimerHandle;                                 // 0x0058(0x0018)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class FString, class UMarvelKeyUIAsset*> LoadKeyAssets;                                     // 0x0070(0x0050)(Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	class UDataTable*                             KeyWidgetStyleTable;                               // 0x00C0(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UCommonKeyWidgetManager* Get(class UObject* WCO);

	void ExecuteToUpdate();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonKeyWidgetManager">();
	}
	static class UCommonKeyWidgetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonKeyWidgetManager>();
	}
};

// Class Marvel.KeyWidgetExtension_UseViewTargetInputType
// 0x0000 (0x0030 - 0x0030)
class UKeyWidgetExtension_UseViewTargetInputType final : public UMarvelUserWidgetExtension
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KeyWidgetExtension_UseViewTargetInputType">();
	}
	static class UKeyWidgetExtension_UseViewTargetInputType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKeyWidgetExtension_UseViewTargetInputType>();
	}
};

// Class Marvel.WorldSingleton
// 0x0040 (0x0070 - 0x0030)
class UWorldSingleton : public UObject
{
public:
	uint8                                         Pad_30[0x40];                                      // 0x0030(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WorldSingleton">();
	}
	static class UWorldSingleton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWorldSingleton>();
	}
};

// Class Marvel.MarvelCueNotify_InstantHitImpact
// 0x0030 (0x0500 - 0x04D0)
class UMarvelCueNotify_InstantHitImpact : public UMarvelCueNotify_HitImpact
{
public:
	int32                                         TrajectoryAudioID;                                 // 0x04D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TrajectoryAudibleDistance;                         // 0x04D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FResponsiveHitAudioConfig              ResponsiveHitAudio;                                // 0x04D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FResponsiveHitFXConfig                 ResponsiveHitFX;                                   // 0x04E0(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_InstantHitImpact">();
	}
	static class UMarvelCueNotify_InstantHitImpact* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCueNotify_InstantHitImpact>();
	}
};

// Class Marvel.KeyWidgetExtensionManager_UseViewTargetInputType
// 0x0068 (0x00D8 - 0x0070)
class UKeyWidgetExtensionManager_UseViewTargetInputType final : public UWorldSingleton
{
public:
	Marvel::EInputType                            CacheViewTargetInputType;                          // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<TWeakObjectPtr<class UCommonKeyWidget>>  KeyWidgets;                                        // 0x0078(0x0050)(ExportObject, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_C8[0x10];                                      // 0x00C8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UKeyWidgetExtensionManager_UseViewTargetInputType* Get(class UObject* WCO);

	void RegisterWidget(class UCommonKeyWidget* InWidget);
	void UnregisterWidget(class UCommonKeyWidget* InWidget);
	void UpdateViewTargetInputType();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KeyWidgetExtensionManager_UseViewTargetInputType">();
	}
	static class UKeyWidgetExtensionManager_UseViewTargetInputType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKeyWidgetExtensionManager_UseViewTargetInputType>();
	}
};

// Class Marvel.KlyntarAnimInstance
// 0x0070 (0x04F0 - 0x0480)
class UKlyntarAnimInstance final : public UMarvelVehicleAnimInstance
{
public:
	class FName                                   IKBoneName;                                        // 0x0478(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_484[0x4];                                      // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           JointBoneNames;                                    // 0x0488(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<struct FVector>                        JointBoneLocations;                                // 0x0498(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         AnimState;                                         // 0x04A8(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4AC[0x4];                                      // 0x04AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class ULevelActorMoveComponent*               LevelActorMove;                                    // 0x04B0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4B8[0x38];                                     // 0x04B8(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"KlyntarAnimInstance">();
	}
	static class UKlyntarAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UKlyntarAnimInstance>();
	}
};

// Class Marvel.LazyWidget
// 0x0098 (0x0288 - 0x01F0)
class ULazyWidget final : public UContentWidget
{
public:
	TSoftClassPtr<class UClass>                   WidgetClass;                                       // 0x01F0(0x0030)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableEditorPreview;                              // 0x0220(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoCreateWidget;                                 // 0x0221(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoRegisterToManager;                            // 0x0222(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFixedSize;                                        // 0x0223(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EFrameLimitTaskPriority                       WidgetPriority;                                    // 0x0224(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OverrideSecondaryPopupPanelUIDataStyleName;        // 0x0225(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_226[0x2];                                      // 0x0226(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SecondaryPopupPanelUIDataStyleName;                // 0x0228(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_238[0x28];                                     // 0x0238(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UUserWidget*                            Widget;                                            // 0x0260(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_268[0x20];                                     // 0x0268(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void LoadAndCreateWidget();
	TDelegate<void(class UUserWidget* InWidget)> LoadAndCreateWidgetWithCallback(const TDelegate<void(class UUserWidget* InWidget)>& Callback);
	void OnScheduled();
	void UnloadAndReleaseWidget();
	void UnloadAndReleaseWidgetWithCallbackCancelled(TDelegate<void(class UUserWidget* InWidget)> Callback);

	class UUserWidget* GetWidget() const;
	bool HasRequestCreate() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LazyWidget">();
	}
	static class ULazyWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULazyWidget>();
	}
};

// Class Marvel.LazyWidgetManager
// 0x0140 (0x0170 - 0x0030)
class ULazyWidgetManager final : public UObject
{
public:
	uint8                                         Pad_30[0x50];                                      // 0x0030(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FName>                             LoadRequestedLazyWidgetNames;                      // 0x0080(0x0050)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, TMulticastInlineDelegate<void(class UUserWidget* Value)>> LoadRequestedLazyWidgetCallbacks;                  // 0x00D0(0x0050)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, TMulticastInlineDelegate<void()>> PostCreatedLazyWidgetCallbacks;                    // 0x0120(0x0050)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class ULazyWidgetManager* Get(class UObject* WCO);

	void AddLazyWidgetPostCreatedCallback(const class FName& LazyWidgetName, TDelegate<void()> PostCreatedCallback);
	void LoadAndCreateLazyWidget(const class FName& LazyWidgetName, TDelegate<void(class UUserWidget* InWidget)> CreatedCallback);
	void UnloadAndReleaseLazyWidget(const class FName& LazyWidgetName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LazyWidgetManager">();
	}
	static class ULazyWidgetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULazyWidgetManager>();
	}
};

// Class Marvel.LevelActorMoveComponent
// 0x0110 (0x0580 - 0x0470)
#pragma pack(push, 0x1)
class alignas(0x10) ULevelActorMoveComponent : public USceneComponent
{
public:
	class FString                                 CategoryValue;                                     // 0x0470(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentMoveSpeed;                                  // 0x0480(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_484[0x4];                                      // 0x0484(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USplineComponent*                       CurrentMarvelSpline;                               // 0x0488(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentDistance;                                   // 0x0490(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_494[0x4];                                      // 0x0494(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 MoveActor;                                         // 0x0498(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                VelocityDirection;                                 // 0x04A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AControlPointBase*                      Payload;                                           // 0x04B8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimelinePlayRate;                                  // 0x04C0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InterpSpeed;                                       // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurnDetectDistance;                                // 0x04C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsRotate;                                         // 0x04CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          MovementUpdated;                                   // 0x04CD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4CE[0x2];                                      // 0x04CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class AActor*, struct FRotator>          ActorsInitRot;                                     // 0x04D0(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TMap<class AActor*, struct FVector>           ActorsInitPos;                                     // 0x0520(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          TimelineEnable;                                    // 0x0570(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_571[0x7];                                      // 0x0571(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnableTimeline(bool bEnable);
	void MoveGroupActor(const struct FMoveGroupActorParams& Params_0);
	void OnRep_TimelineEnabled();
	void ProcessGroupActorTag(class FName TagName, bool bAdd);
	void PyTimelineUpdate(float DeltaTime);
	void SetAllComForceSkipOverlaps(class AActor* SkipActor, bool SetVal);
	void UpdateMovement(class USplineComponent* Spline, float Distance, float InMoveSpeed, bool FaceToMove, float DeltaSeconds);

	bool IsTimelineEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelActorMoveComponent">();
	}
	static class ULevelActorMoveComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelActorMoveComponent>();
	}
};
#pragma pack(pop)

// Class Marvel.MarvelPenetrateSceneObjectInterfaceUtils
// 0x0000 (0x0030 - 0x0030)
class UMarvelPenetrateSceneObjectInterfaceUtils final : public UBlueprintFunctionLibrary
{
public:
	static bool ShouldPenetrate(const struct FHitResult& InHit);
	static bool TryPenetrateSceneObject(class AActor* AbilityOwner, class AActor* InHitActor);
	static bool TryPenetrateSceneObjectWithHit(class AActor* AbilityOwner, const struct FHitResult& InHit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPenetrateSceneObjectInterfaceUtils">();
	}
	static class UMarvelPenetrateSceneObjectInterfaceUtils* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelPenetrateSceneObjectInterfaceUtils>();
	}
};

// Class Marvel.Widget_ReticleContainer
// 0x0070 (0x0618 - 0x05A8)
class UWidget_ReticleContainer final : public UMarvelUserWidget
{
public:
	TMulticastInlineDelegate<void(class AActor* InSourceAvatar, class AActor* InTargetAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)> ExtraDamageDelegate;                               // 0x05A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UScaleBox*                              ScaleBox;                                          // 0x05B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           Canvas_Reticles;                                   // 0x05C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UUserWidget*                            DefaultReticle;                                    // 0x05C8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               Overlay_Block;                                     // 0x05D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BlockMoveSpeed;                                    // 0x05D8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BlockOpacitySpeed;                                 // 0x05DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              CurPosition;                                       // 0x05E0(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              TargetPosition;                                    // 0x05F0(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EBlockMoveState                               BlockState;                                        // 0x0600(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsAimingBlocking;                                 // 0x0601(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsBattling;                                       // 0x0602(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsReloading;                                      // 0x0603(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_604[0x4];                                      // 0x0604(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UEquipComponent*                        EquipComponent;                                    // 0x0608(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_610[0x8];                                      // 0x0610(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UUserWidget* StaticGetCurrentReticleWidget(class UObject* WCO);
	static class UWidget_ReticleContainer* StaticGetReticleContainer(class UObject* WCO);

	void AddSpecialReticle(const TSoftClassPtr<class UClass>& InReticleClass);
	void OnSpecialReticleLoaded(class UObject* InReticleClass);
	void SetAimingBlocking(bool bIsBlocking, const struct FVector& BlockPosition);
	void SetEquipComponent(class UEquipComponent* InEquipComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_ReticleContainer">();
	}
	static class UWidget_ReticleContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_ReticleContainer>();
	}
};

// Class Marvel.LevelChaosAnimMoveComponent
// 0x01D0 (0x0640 - 0x0470)
class ULevelChaosAnimMoveComponent final : public USceneComponent
{
public:
	uint8                                         Pad_470[0xC8];                                     // 0x0470(0x00C8)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OwnerActor;                                        // 0x0538(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class USceneComponent>         OwnerWeakComponent;                                // 0x0540(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class ARecoveryEffectMeshActor> OwnerWeakRecoverActor;                             // 0x0548(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UGeometryCollectionComponent> GCTempWeakComp;                                    // 0x0550(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          AnimationSequence;                                 // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   BoneName;                                          // 0x0560(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsClientOnlyTick;                                 // 0x056C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCleanInitialPos;                                // 0x056D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_56E[0x72];                                     // 0x056E(0x0072)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FLevelAnimSimpleTransform>      BoneTransforms;                                    // 0x05E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TracePlaybackClientFixTimeStamp;                   // 0x05F0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F4[0x24];                                     // 0x05F4(0x0024)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TotalLength;                                       // 0x0618(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FrameRate;                                         // 0x061C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsOpenAffectNav;                                  // 0x0620(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyRenderOnScreen;                               // 0x0621(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOptimizeSkeletalMesh;                             // 0x0622(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVisibilityOptimizationMode                   VisibilityOptimizationMode;                        // 0x0623(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowTickInterval;                                  // 0x0624(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_628[0x18];                                     // 0x0628(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DelayInitDataFunc();
	void DelayRegisterBeginFunc();
	void OnChaosBreak(const struct FChaosBreakEvent& BreakEvent);
	void OnChaosReset();
	void RegisterWithStartUp();
	void SetPlaybackTickEnabled(bool bEnable);

	bool IsClientOnly() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelChaosAnimMoveComponent">();
	}
	static class ULevelChaosAnimMoveComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelChaosAnimMoveComponent>();
	}
};

// Class Marvel.LevelChaosMoveComponent
// 0x0030 (0x05B0 - 0x0580)
class ULevelChaosMoveComponent final : public ULevelActorMoveComponent
{
public:
	TArray<class AActor*>                         TraceList;                                         // 0x0578(0x0010)(Edit, BlueprintVisible, Net, ZeroConstructor, NativeAccessSpecifierPublic)
	class AActor*                                 CurrentTrace;                                      // 0x0588(0x0008)(Edit, BlueprintVisible, Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentTraceIndex;                                 // 0x0590(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalLength;                                       // 0x0594(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveSpeed;                                         // 0x0598(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentMoveDistance;                               // 0x059C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CurrentTraceMoveDistance;                          // 0x05A0(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverseMovement;                                  // 0x05A4(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCyclicMotion;                                     // 0x05A5(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A6[0xA];                                      // 0x05A6(0x000A)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelChaosMoveComponent">();
	}
	static class ULevelChaosMoveComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelChaosMoveComponent>();
	}
};

// Class Marvel.LevelCheckPenetrationActorInterface
// 0x0000 (0x0030 - 0x0030)
class ILevelCheckPenetrationActorInterface : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelCheckPenetrationActorInterface">();
	}
	static class ILevelCheckPenetrationActorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ILevelCheckPenetrationActorInterface>();
	}
};

// Class Marvel.UIUnit
// 0x0000 (0x0030 - 0x0030)
class UUIUnit : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIUnit">();
	}
	static class UUIUnit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIUnit>();
	}
};

// Class Marvel.UIUnit_ReceivedBuff
// 0x0078 (0x00A8 - 0x0030)
class UUIUnit_ReceivedBuff : public UUIUnit
{
public:
	struct FWidgetStyle_ReceivedBuff              Style;                                             // 0x0030(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bConstructed;                                      // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BuffHandle;                                        // 0x0054(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuffID;                                            // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelCueNotify_Actor*                 BuffCue;                                           // 0x0060(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 BuffOwner;                                         // 0x0068(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UReactivePropertyComponent*             BuffOwnerProperty;                                 // 0x0070(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbilitySystemComponent*                BuffOwnerASC;                                      // 0x0078(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_80[0x28];                                      // 0x0080(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CueActiveChanged();
	void ForceUpdate();
	void MainStyle();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIUnit_ReceivedBuff">();
	}
	static class UUIUnit_ReceivedBuff* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIUnit_ReceivedBuff>();
	}
};

// Class Marvel.LevelComponentOptimizationInterface
// 0x0000 (0x0030 - 0x0030)
class ILevelComponentOptimizationInterface final : public IInterface
{
public:
	bool IsParentRecentlyRendered();
	void OnParentChildAttached(class USceneComponent* SourceComponent, class USceneComponent* ChildComponent);
	void OnParentChildDetached(class USceneComponent* SourceComponent, class USceneComponent* ChildComponent);

	bool IsClientOnly() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelComponentOptimizationInterface">();
	}
	static class ILevelComponentOptimizationInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ILevelComponentOptimizationInterface>();
	}
};

// Class Marvel.LevelActorRegisterDelegateProxy
// 0x0010 (0x0040 - 0x0030)
class ULevelActorRegisterDelegateProxy final : public UObject
{
public:
	TMulticastInlineDelegate<void(class AActor* LevelActor)> AddActorEventDelegate;                             // 0x0030(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelActorRegisterDelegateProxy">();
	}
	static class ULevelActorRegisterDelegateProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelActorRegisterDelegateProxy>();
	}
};

// Class Marvel.LevelEventSubsystem
// 0x02B8 (0x02F0 - 0x0038)
class ULevelEventSubsystem : public UWorldSubsystem
{
public:
	TMulticastInlineDelegate<void()>              BattleStartDispatcher;                             // 0x0038(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPostLevelInitDispatcher;                         // 0x0048(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EMatchState MatchState)> MatchStateChangeDispatcher;                        // 0x0058(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EMatchState MatchState)> PreMatchStateChangeDispatcher;                     // 0x0068(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              PrepareStartDispatcher;                            // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              SelectHeroStartDispatcher;                         // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              FightEndDispatcher;                                // 0x0098(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              SlowMotionStartDispatcher;                         // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              TransitionStartDispatcher;                         // 0x00B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              QuittingStartDispatcher;                           // 0x00C8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              RequiredMapLoaded;                                 // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              BeforeLoadSubLevels;                               // 0x00E8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& PartName)> CurrentPartNameChangeDispatcher;                   // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Tag)> GroupActorMoveFinish;                              // 0x0108(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& Tag)> GroupActorBackFinish;                              // 0x0118(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 UID)>     PlayerEnterPayloadDispatcher;                      // 0x0128(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 UID)>     PlayerExitPayloadDispatcher;                       // 0x0138(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 UID)>     AttackPlayerEnterPayloadDispatcher;                // 0x0148(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 UID)>     AttackPlayerExitPayloadDispatcher;                 // 0x0158(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 UID)>     OccupyOrCompetitionPlayerAddDispatcher;            // 0x0168(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 UID)>     OccupyOrCompetitionPlayerRemoveDispatcher;         // 0x0178(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	EWorldSubsystemType                           WorldSubSystemType;                                // 0x0188(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(struct FLevelObjectEventExtraData& ExtraData)> OnLevelObjectDispatcher;                           // 0x0190(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 UID)>     MainAttackCountDispatcher;                         // 0x01A0(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 UID)>     MainAttackHitDispatcher;                           // 0x01B0(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 UID)>     MainAttackCriticalHitDispatcher;                   // 0x01C0(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 UID)>     KillDispatcher;                                    // 0x01D0(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 UID, float Damage)> InstigateDamageDispatcher;                         // 0x01E0(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EBattleSide BattleSide)> ControlOwnerChangedDispatcher;                     // 0x01F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_200[0x18];                                     // 0x0200(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* LevelActor)> ChaosFieldActorTriggerEventDispatcher;             // 0x0218(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              DestructionEnablePostProcess;                      // 0x0228(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	bool                                          IsGroupActorsMoving;                               // 0x0238(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              LikeMapLoadedDelegate;                             // 0x0240(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              SwitchBattleSide;                                  // 0x0250(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* BirthBase)> OnBirthBaseActive;                                 // 0x0260(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FWinterFestivalServerPaintParam& Param)> FillColorInRange;                                  // 0x0270(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* DesActor, const struct FChaosAchieveDamageMap& DamageDataMap)> ChaosDesCollapsed;                                 // 0x0280(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FChaosAchieveDamageMap& DamageDataMap)> OnBackTrackCollapsed;                              // 0x0290(0x0010)(ZeroConstructor, InstancedReference, NativeAccessSpecifierPublic)
	TMap<class UClass*, class ULevelActorRegisterDelegateProxy*> ActorEventProxyMap;                                // 0x02A0(0x0050)(NativeAccessSpecifierPrivate)

public:
	static class ULevelEventSubsystem* GetLevelEventSubsystem(const class UObject* WorldContextObject);
	static class ULevelEventSubsystem* GetLevelEventSubsystemByType(const class UObject* WorldContextObject, const EWorldSubsystemType SubType);

	void DispatchAddLevelActorEvent(class AActor* LevelActor);
	void DispatchLevelObject(class AActor* Trigger, class AActor* Target, const class FString& TargetName);
	bool IsMapLoaded();
	void PyPreDeinitialize();
	class ULevelActorRegisterDelegateProxy* RegisterClassEvent(class UClass* LevelActorClass);
	void SetGroupActorsMoveState(bool bIsMoving);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelEventSubsystem">();
	}
	static class ULevelEventSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelEventSubsystem>();
	}
};

// Class Marvel.LevelGameplayComponent
// 0x0000 (0x00F0 - 0x00F0)
class ULevelGameplayComponent : public UActorComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelGameplayComponent">();
	}
	static class ULevelGameplayComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelGameplayComponent>();
	}
};

// Class Marvel.LevelInputTriggerComponent
// 0x0028 (0x0118 - 0x00F0)
class ULevelInputTriggerComponent final : public ULevelGameplayComponent
{
public:
	EInputTriggerType                             InputTriggerType;                                  // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PressedTime;                                       // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F8[0x20];                                      // 0x00F8(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BroadCastDelegate(class AMarvelBaseCharacter* MBC);
	void ReceiveInput(class APlayerState* PS);
	void StopInput(class APlayerState* PS);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelInputTriggerComponent">();
	}
	static class ULevelInputTriggerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelInputTriggerComponent>();
	}
};

// Class Marvel.MarvelHittedDisplayInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelHittedDisplayInterface final : public IInterface
{
public:
	struct FGameplayTagContainer GetHittedDisplayCueTags();
	void HandleHittedDisplayCueLocal(class AActor* InSource, const struct FHitResult& InHit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelHittedDisplayInterface">();
	}
	static class IMarvelHittedDisplayInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelHittedDisplayInterface>();
	}
};

// Class Marvel.LevelLeaderComponent
// 0x0060 (0x04D0 - 0x0470)
class ULevelLeaderComponent final : public USceneComponent
{
public:
	uint8                                         Pad_470[0x60];                                     // 0x0470(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelLeaderComponent">();
	}
	static class ULevelLeaderComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelLeaderComponent>();
	}
};

// Class Marvel.LevelLoadSubsystem
// 0x0008 (0x0040 - 0x0038)
class ULevelLoadSubsystem : public UWorldSubsystem
{
public:
	EWorldSubsystemType                           WorldSubSystemType;                                // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class ULevelLoadSubsystem* GetLevelLoadSubsystem(const class UObject* WorldContextObject);
	static class ULevelLoadSubsystem* GetLevelLoadSubsystemByType(const class UObject* WorldContextObject, const EWorldSubsystemType SubType);

	void PyPostInitialize();
	void PyPreDeinitialize();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelLoadSubsystem">();
	}
	static class ULevelLoadSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelLoadSubsystem>();
	}
};

// Class Marvel.BilinerSampleResult
// 0x0028 (0x0058 - 0x0030)
class UBilinerSampleResult final : public UObject
{
public:
	bool                                          OutColor;                                          // 0x0030(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x27];                                      // 0x0031(0x0027)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SampleLocation(int32 LocX, int32 LocY);
	bool SampleUV(const struct FVector2D& UvLoc);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BilinerSampleResult">();
	}
	static class UBilinerSampleResult* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBilinerSampleResult>();
	}
};

// Class Marvel.Cue_Scope_Loop_WithAudioBeforeEnd
// 0x0020 (0x0D90 - 0x0D70)
class ACue_Scope_Loop_WithAudioBeforeEnd : public AMarvelCueNotify_Scope
{
public:
	int32                                         EarlyEndAudioID;                                   // 0x0D70(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EndAudioEarlyTime;                                 // 0x0D74(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D78[0x18];                                     // 0x0D78(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Scope_Loop_WithAudioBeforeEnd">();
	}
	static class ACue_Scope_Loop_WithAudioBeforeEnd* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Scope_Loop_WithAudioBeforeEnd>();
	}
};

// Class Marvel.LevelMaterialParameterSubsystem
// 0x0000 (0x0038 - 0x0038)
class ULevelMaterialParameterSubsystem final : public UWorldSubsystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelMaterialParameterSubsystem">();
	}
	static class ULevelMaterialParameterSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelMaterialParameterSubsystem>();
	}
};

// Class Marvel.MarvelLocalPlayer
// 0x0018 (0x0378 - 0x0360)
class UMarvelLocalPlayer final : public ULocalPlayer
{
public:
	class UMarvelInstantReplayManager*            InstantReplayManager;                              // 0x0360(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelCombatInfoManager*               CombatInfoManager;                                 // 0x0368(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class APlayerController>          DefaultPlayerControllerClass;                      // 0x0370(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class UMarvelCombatInfoManager* InitCombatInfoManager();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelLocalPlayer">();
	}
	static class UMarvelLocalPlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelLocalPlayer>();
	}
};

// Class Marvel.LevelModularFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class ULevelModularFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UActorComponent* GetRuleComp_Internal(class UObject* TargetObject, class UClass* TargetClass);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelModularFunctionLibrary">();
	}
	static class ULevelModularFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelModularFunctionLibrary>();
	}
};

// Class Marvel.LevelMoveActor
// 0x0028 (0x04B8 - 0x0490)
class ALevelMoveActor final : public AActor
{
public:
	uint8                                         Pad_490[0x20];                                     // 0x0490(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          UseEditorTick;                                     // 0x04B0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B1[0x7];                                      // 0x04B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BlueprintEditorTick(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelMoveActor">();
	}
	static class ALevelMoveActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALevelMoveActor>();
	}
};

// Class Marvel.LevelMoveComponent
// 0x00C8 (0x01B8 - 0x00F0)
class ULevelMoveComponent final : public ULevelGameplayComponent
{
public:
	uint8                                         Pad_F0[0x30];                                      // 0x00F0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bOnlyRenderOnScreen;                               // 0x0120(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClientOnly;                                       // 0x0121(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVisibilityOptimizationMode                   VisibilityOptimizationMode;                        // 0x0122(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOptimizeSkeletalMesh;                             // 0x0123(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SlowTickInterval;                                  // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTickHandledByManager;                             // 0x0128(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x3];                                      // 0x0129(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxTickInterval;                                   // 0x012C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Actor, bool bIsStart)> LevelMoveStateDelegate;                            // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AActor*                                 Owner;                                             // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETraceMoveMode                                TraceMoveMode;                                     // 0x0148(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsRotate;                                         // 0x0149(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyZRotate;                                      // 0x014A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14B[0x5];                                      // 0x014B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FTraceMoveConfig>               TraceMoveConfigs;                                  // 0x0150(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TimelinePlayRate;                                  // 0x0160(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableTimelineUpdate;                             // 0x0164(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_165[0x3];                                      // 0x0165(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentMoveSpeed;                                  // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C[0x4];                                      // 0x016C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VelocityDirection;                                 // 0x0170(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               RotationWithoutRoll;                               // 0x0188(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               AddRelativeRotation;                               // 0x01A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

public:
	void OnStartMove();
	void OnStopMove();
	void PyTimelineUpdate(float position);
	void SetTickEnable(bool Enable);
	void UpdateMovement(class USplineComponent* Spline, float Distance, bool bAddRotation, const struct FRotator& InRotator);

	struct FVector GetCurrentVelocity() const;
	bool IsClientOnly() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelMoveComponent">();
	}
	static class ULevelMoveComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelMoveComponent>();
	}
};

// Class Marvel.LevelMoveLeader
// 0x0008 (0x0498 - 0x0490)
class ALevelMoveLeader final : public AActor
{
public:
	class ULevelLeaderComponent*                  LeaderComponent;                                   // 0x0490(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void SetMoveLeaderLocation(const struct FVector& NewLocation);
	void SetMoveLeaderLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelMoveLeader">();
	}
	static class ALevelMoveLeader* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALevelMoveLeader>();
	}
};

// Class Marvel.LevelNPCActor
// 0x0030 (0x04C0 - 0x0490)
class ALevelNPCActor : public AActor
{
public:
	uint8                                         Pad_490[0x8];                                      // 0x0490(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         HeroID;                                            // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49C[0x4];                                      // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SpeakStyle;                                        // 0x04A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Speaker;                                           // 0x04B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelNPCActor">();
	}
	static class ALevelNPCActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ALevelNPCActor>();
	}
};

// Class Marvel.MarvelCueNotify_FX_BodySize
// 0x0038 (0x0D00 - 0x0CC8)
class AMarvelCueNotify_FX_BodySize final : public AMarvelCueNotify_Actor
{
public:
	float                                         BaseSize;                                          // 0x0CC8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseParameter;                                     // 0x0CCC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CCD[0x3];                                      // 0x0CCD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   SizeParameterName;                                 // 0x0CD0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseHeight;                                        // 0x0CDC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CDD[0x3];                                      // 0x0CDD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BaseHeight;                                        // 0x0CE0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CE4[0x4];                                      // 0x0CE4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ScaleFactor;                                       // 0x0CE8(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_FX_BodySize">();
	}
	static class AMarvelCueNotify_FX_BodySize* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_FX_BodySize>();
	}
};

// Class Marvel.LevelOptimizationComponent
// 0x0070 (0x0160 - 0x00F0)
class ULevelOptimizationComponent final : public UActorComponent
{
public:
	uint8                                         Pad_F0[0x30];                                      // 0x00F0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bOnlyRenderOnScreen;                               // 0x0120(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOptimizeSkeletalMesh;                             // 0x0121(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSkeletalMeshSlowTick;                             // 0x0122(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_123[0x1];                                      // 0x0123(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SkeletalMeshSlowTickInterval;                      // 0x0124(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTickHandledByManager;                             // 0x0128(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSlowTickIfNotRendered;                            // 0x0129(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxTickInterval;                                   // 0x012C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bRecentlyRendered)> RecentlyRenderedChangedDelegate;                   // 0x0130(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float DeltaTime)> OnTickEvent;                                       // 0x0140(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_150[0x10];                                     // 0x0150(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTickEnabled(bool bEnable);

	bool IsClientOnly() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelOptimizationComponent">();
	}
	static class ULevelOptimizationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelOptimizationComponent>();
	}
};

// Class Marvel.ScopeAudioComponent
// 0x0008 (0x04B0 - 0x04A8)
class UScopeAudioComponent final : public UMarvelAudioComponent
{
public:
	class AOneShotAudioActor*                     OneShotAudio;                                      // 0x04A8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnOwnerBeginTask(class AActor* InActor);
	void OnOwnerRecycle(class AActor* InActor);
	void PostTrajectoryAkEvent(int32 InTrajectoryAudioID, float AudibleDistance, const struct FVector& StartPosition, const struct FVector& EndPosition);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScopeAudioComponent">();
	}
	static class UScopeAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScopeAudioComponent>();
	}
};

// Class Marvel.LevelAttachRotationComponent
// 0x0090 (0x0500 - 0x0470)
class ULevelAttachRotationComponent final : public USceneComponent
{
public:
	uint8                                         Pad_470[0x30];                                     // 0x0470(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsRotating;                                       // 0x04A0(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A1[0x3];                                      // 0x04A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RotationRate;                                      // 0x04A4(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RotationAxis;                                      // 0x04A8(0x0018)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotationInLocalSpace;                             // 0x04C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRotationSelf;                                     // 0x04C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDraw;                                        // 0x04C2(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultMove;                                      // 0x04C3(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClientOnly;                                       // 0x04C4(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVisibilityOptimizationMode                   VisibilityOptimizationMode;                        // 0x04C5(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOptimizeSkeletalMesh;                             // 0x04C6(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C7[0x1];                                      // 0x04C7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SlowTickInterval;                                  // 0x04C8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTickHandledByManager;                             // 0x04CC(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4CD[0x3];                                      // 0x04CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxTickInterval;                                   // 0x04D0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D4[0x2C];                                     // 0x04D4(0x002C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_bIsRotating();
	void RotationUpdate(float DeltaTime);
	void StartRotation();
	void StopRotation();

	bool IsClientOnly() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelAttachRotationComponent">();
	}
	static class ULevelAttachRotationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelAttachRotationComponent>();
	}
};

// Class Marvel.MarvelEnhancedInputSetting
// 0x0000 (0x0140 - 0x0140)
class UMarvelEnhancedInputSetting final : public UEnhancedInputUserSettings
{
public:
	void GetMarvelPlayerMappableKeySettingsBySculptID(TArray<struct FEnhancedInputSettingMapping>* OutPlayerMappableKeySettings, int32 HeroSculptID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelEnhancedInputSetting">();
	}
	static class UMarvelEnhancedInputSetting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelEnhancedInputSetting>();
	}
};

// Class Marvel.LevelScopeCheckComponent
// 0x0460 (0x0D90 - 0x0930)
class ULevelScopeCheckComponent : public UStaticMeshComponent
{
public:
	TMulticastInlineDelegate<void(class AActor* Actor)> PlayerEnterArea;                                   // 0x0930(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Actor)> PlayerExitArea;                                    // 0x0940(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULevelScopeCheckComponent* ScopeCheck, class AActor* Actor)> PlayerEnterWithSelf;                               // 0x0950(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ULevelScopeCheckComponent* ScopeCheck, class AActor* Actor)> PlayerExitWithSelf;                                // 0x0960(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSet<class AActor*>                           InsidePlayerSet;                                   // 0x0970(0x0050)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	TSet<class AActor*>                           InsideWallPlayerSet;                               // 0x09C0(0x0050)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)
	TMap<class AActor*, struct FInsideComponents> InsidePlayerMap;                                   // 0x0A10(0x0050)(Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TSet<class AActor*>                           ValidPlayerSet;                                    // 0x0A60(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FTransform                             ControlTransform;                                  // 0x0AB0(0x0060)(Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                BorderHalfSize;                                    // 0x0B10(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B28[0x40];                                     // 0x0B28(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelGameState*                       MarvelGS;                                          // 0x0B68(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class ULevelScopeCheckComponent*              TargetComp;                                        // 0x0B70(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B78[0x28];                                     // 0x0B78(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TWeakObjectPtr<class AActor>, struct FCharBindTagEvents> CharTagEvents;                                     // 0x0BA0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	bool                                          bInitialActive;                                    // 0x0BF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ECheckMode                                    CheckMode;                                         // 0x0BF1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BF2[0x2];                                      // 0x0BF2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TimeInterval;                                      // 0x0BF4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EOverlapShape                                 OverlapShape;                                      // 0x0BF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BF9[0x7];                                      // 0x0BF9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BoxExtent;                                         // 0x0C00(0x0018)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SphereRadius;                                      // 0x0C18(0x0004)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FColor                                 ShapeColor;                                        // 0x0C1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineThickness;                                     // 0x0C20(0x0004)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C24[0x4];                                      // 0x0C24(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  IgnoreTag;                                         // 0x0C28(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequireTag;                                        // 0x0C90(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bNeedIgnoreCustomEffect;                           // 0x0CF8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedTraceWall;                                    // 0x0CF9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedToWard;                                       // 0x0CFA(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CFB[0x1];                                      // 0x0CFB(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ToWardDegree;                                      // 0x0CFC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedCheckForceKillState;                          // 0x0D00(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckSummoned;                                    // 0x0D01(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D02[0x6];                                      // 0x0D02(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelDistanceFieldVolumeData         RangeVolumeData;                                   // 0x0D08(0x0068)(NativeAccessSpecifierPublic)
	class FString                                 CategoryValue;                                     // 0x0D70(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBodySetup*                             ShapeBodySetup;                                    // 0x0D80(0x0008)(ZeroConstructor, Transient, DuplicateTransient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         BitPad_D88_0 : 1;                                  // 0x0D88(0x0001)(Fixing Bit-Field Size Between Bits [ Dumper-7 ])
	uint8                                         bDrawOnlyIfSelected : 1;                           // 0x0D88(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_D89[0x7];                                      // 0x0D89(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateScopeCheck();
	void CopyRangeVolumeData(class ULevelScopeCheckComponent* InRangeCheck);
	void DeActivateScopeCheck();
	float GetBottomHeightOfRangeMesh();
	bool HasRangeMesh();
	bool IsActorLocationInside(class AActor* InActor);
	bool IsPointInsideRange(const struct FVector& InLocation);
	void OnIgnoreGameplayTagUpdate(const struct FGameplayTag& InTag, int32 Count, class AActor* Character);
	void OnNewPawn(class APawn* NewPawn);
	void OnRequireGameplayTagUpdate(const struct FGameplayTag& InTag, int32 Count, class AActor* Character);
	void OverlapPlayerEnter(class UPrimitiveComponent* OverlappedComp, class AActor* Other, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OverlapPlayerExit(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex);
	void RefreshScopeCheck();
	void SetBoxExtent(const struct FVector& InVector);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelScopeCheckComponent">();
	}
	static class ULevelScopeCheckComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelScopeCheckComponent>();
	}
};

// Class Marvel.MarvelGameSession
// 0x0000 (0x04B0 - 0x04B0)
class AMarvelGameSession final : public AGameSession
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameSession">();
	}
	static class AMarvelGameSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelGameSession>();
	}
};

// Class Marvel.LevelSpawnRoomCheckComponent
// 0x0000 (0x0D90 - 0x0D90)
class ULevelSpawnRoomCheckComponent final : public ULevelScopeCheckComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSpawnRoomCheckComponent">();
	}
	static class ULevelSpawnRoomCheckComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSpawnRoomCheckComponent>();
	}
};

// Class Marvel.LevelTransitionRoomCheckComponent
// 0x0000 (0x0D90 - 0x0D90)
class ULevelTransitionRoomCheckComponent final : public ULevelScopeCheckComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelTransitionRoomCheckComponent">();
	}
	static class ULevelTransitionRoomCheckComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelTransitionRoomCheckComponent>();
	}
};

// Class Marvel.LevelSequenceFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class ULevelSequenceFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void RebindActorToBindingByName(class ALevelSequenceActor* LevelSequenceActor, const class FString& BindingName, class AActor* ActorToRebind);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSequenceFunctionLibrary">();
	}
	static class ULevelSequenceFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSequenceFunctionLibrary>();
	}
};

// Class Marvel.LevelStatisticsController
// 0x0070 (0x00A0 - 0x0030)
class ULevelStatisticsController : public UObject
{
public:
	class UActionLogController*                   LogController;                                     // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayEventManager*            GlobalEventManager;                                // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ULevelEventSubsystem*                   LevelEventSystem;                                  // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BattleStartTime;                                   // 0x0048(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FPresetDestructionStatistics> PresetDestructionStatistics;                       // 0x0050(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void BindEvents();
	void GetAllChaosDestructions();
	void GetAllPresetDestructions();
	void Initialize(class UActionLogController* InLogController);
	void K2_Initialize();
	void K2_OnChaosDestructionBroken(const struct FChaosDestructionStatistics& Statistics);
	void K2_OnPresetDestructionLevel(const struct FPresetDestructionStatistics& Statistics);
	void K2_Shutdown();
	void OnDestructionTakeDamage(class AActor* Destruction, float FinalDamage, const struct FAttributeModifierHandle& ModifierParameterHandle, const struct FDestructionExtraInfo& DestructionExtraInfo);
	void OnHealPackRefreshed(const class FString& HealPackName, class AActor* HealPackSpawner);
	void OnLevelObject(const struct FLevelObjectEventExtraData& ExtraData);
	void OnPresetDestructionLevelChanged(class AActor* Destruction, const class FString& InLastLevel, const class FString& InCurrentLevel);
	void Shutdown();
	void UnbindEvents();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelStatisticsController">();
	}
	static class ULevelStatisticsController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelStatisticsController>();
	}
};

// Class Marvel.LevelStreamingFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class ULevelStreamingFunctionLibrary final : public UObject
{
public:
	static TArray<class ULevelStreaming*> GetAllStreamingLevels(class UObject* WCO);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelStreamingFunctionLibrary">();
	}
	static class ULevelStreamingFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelStreamingFunctionLibrary>();
	}
};

// Class Marvel.LevelSubsystem
// 0x0140 (0x0178 - 0x0038)
class ULevelSubsystem : public UWorldSubsystem
{
public:
	float                                         BorderUpperLimit;                                  // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BorderLowerLimit;                                  // 0x003C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWorldSubsystemType                           WorldSubSystemType;                                // 0x0040(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsStartUp;                                         // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsPreparingMap;                                   // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43[0x1];                                       // 0x0043(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ADestructionPostProcessActor> DestructionPostProcess;                            // 0x0044(0x0008)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MapID;                                             // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           ModeTypeV2;                                        // 0x0050(0x000C)(NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           LevelDeathCueTag;                                  // 0x005C(0x000C)(BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMatchState                                   MatchState;                                        // 0x0068(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsMapLoaded;                                       // 0x0069(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 CurrentPartName;                                   // 0x0070(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelModeRuleHeroItem*                ModeRuleHeroItem;                                  // 0x0080(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_88[0xF0];                                      // 0x0088(0x00F0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class ULevelSubsystem* GetLevelSubsystem(const class UObject* WorldContextObject);
	static class ULevelSubsystem* GetLevelSubsystemByType(const class UObject* WorldContextObject, const EWorldSubsystemType SubType);
	static bool IsInBorder(class UObject* WCO, const struct FVector& InLocation);
	static bool IsZInBorder(class UObject* WCO, float LocationZ);
	static void SequencePlayerGoToStart(class ULevelSequencePlayer* LevelSequencePlayer);

	void ClearCachedTeamBirthBases();
	int32 GetBattleSideByTeamID(int32 TeamID);
	TArray<class AActor*> GetBirthBasesByTeam(int32 TeamID);
	TArray<class AActor*> GetBirthDoorsByTeam(int32 TeamID);
	TArray<class AActor*> GetCampInsideCharacterList();
	int32 GetCurrentPartIndex();
	const EBattleSide GetCurrentRoundWinnerSide();
	EOwnershipType GetCurrentShipType();
	class AActor* GetDeathCameraPoint(class AActor* Character);
	class AActor* GetFrontierActor();
	TArray<int32> GetHeroAllAbilityByLevel(int32 HeroID);
	int32 GetHeroChooseTime();
	bool GetIsMapLoaded();
	struct FGameplayTag GetLevelDeathCueTag();
	TMap<class FString, class FString> GetLevelInfo();
	int32 GetMapId();
	EMatchState GetMatchState();
	class AActor* GetPayload();
	float GetPayloadIndexAndProgress();
	class AActor* GetPayloadShowActorBase();
	TArray<class AActor*> GetPayloadTraceList();
	struct FVector GetPositionInPayloadTrace(float Distance);
	float GetRemainTime();
	int32 GetStageIndex();
	float GetTimeOfRespawn(class APlayerState* InPlayerState);
	bool HasDeathCameraZone();
	bool IsFormalTrainMode();
	bool IsNoviceMode();
	bool IsPointInsideBirthBase(const struct FVector& InLocation, int32 TeamID);
	bool IsPointInsideBirthBaseTransitionRoom(const struct FVector& InLocation, int32 TeamID);
	void PreCharacterDestroy(class AActor* Character);
	TArray<class AActor*> PyGetBirthBasesByTeam(int32 TeamID);
	TArray<class AActor*> PyGetBirthDoorsByTeam(int32 TeamID);
	const TArray<class ULevelStreaming*> PyGetStreamingLevels();
	bool PyIsInBorder(const struct FVector& InLocation);
	void PyPreDeinitialize();
	void ReceiveInitialize();
	void RecoverHeroChoosable(class APlayerState* InPlayerState);
	void Reset();
	void ResetCachedTeamBirthBases();
	void RouteAllActorSwitchRound();
	void SetModeTypeV2(const struct FGameplayTag& InModeType);
	void TeleportToBirthBase(class AMarvelBaseCharacter* Character);
	void TrySpawnPlayer(class AMarvelPlayerState* PS, bool bForceSpawn, ESpawnMethod Method, int32 HeroID, const struct FAttributeModifierParameter& ModifierParameter);
	void UpdateLevelStreaming();
	void WakeUpNiagaraComponentsFromScalability(const TArray<class UNiagaraComponent*>& NiagaraComponents);

	bool GetLevels(TMap<class FName, class ULevel*>* OutLevels) const;
	class UMarvelModeRuleHeroItem* GetModeRuleHeroItem() const;
	struct FGameplayTag GetModeTypeV2() const;
	void MarvelReplayEvent(uint16 EventType, const class FString& ExInfo) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSubsystem">();
	}
	static class ULevelSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSubsystem>();
	}
};

// Class Marvel.LevelSummonedComponent
// 0x0000 (0x0CA0 - 0x0CA0)
class ULevelSummonedComponent : public UMarvelSummonedComponent
{
public:
	void AbilitySysRegister();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSummonedComponent">();
	}
	static class ULevelSummonedComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSummonedComponent>();
	}
};

// Class Marvel.MarvelDragAbility
// 0x0BF0 (0x1CE8 - 0x10F8)
class UMarvelDragAbility : public UMarvelEffectGameplayAbility
{
public:
	EDragTarget                                   DragTarget;                                        // 0x10F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F9[0x7];                                     // 0x10F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDashAbilityInfo                       Info;                                              // 0x1100(0x0BA8)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FVector                                Direction;                                         // 0x1CA8(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x1CC0(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x1CD8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAbilityTask_Dash*                DragTask;                                          // 0x1CE0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnFinish(EDashStopReason Reason);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelDragAbility">();
	}
	static class UMarvelDragAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelDragAbility>();
	}
};

// Class Marvel.LevelSyncTransitionActorInterface
// 0x0000 (0x0030 - 0x0030)
class ILevelSyncTransitionActorInterface final : public IInterface
{
public:
	bool CanCollisionManagedByTransitionComponent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSyncTransitionActorInterface">();
	}
	static class ILevelSyncTransitionActorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ILevelSyncTransitionActorInterface>();
	}
};

// Class Marvel.LevelSyncTransitionComponent
// 0x0180 (0x0428 - 0x02A8)
class ULevelSyncTransitionComponent final : public UEnvironmentActorTransitionComponent
{
public:
	uint8                                         Pad_2A8[0x50];                                     // 0x02A8(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	ELevelInteractiveObjectHitType                HitType;                                           // 0x02F8(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F9[0x3];                                      // 0x02F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HPMax;                                             // 0x02FC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxNumHits;                                        // 0x0300(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_304[0x4];                                      // 0x0304(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnSyncTransitionPerformDelegate;                   // 0x0308(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnSyncTransitionResetDelegate;                     // 0x0318(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_328[0x9];                                      // 0x0328(0x0009)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bTransitioned;                                     // 0x0331(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_332[0xF6];                                     // 0x0332(0x00F6)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DoTransition_External();
	void MulticastDealWithHit(class AActor* InSourceAvatar, const struct FHitResult& HitInfo);
	void OnRep_Transitioned();
	void OnTakeDamage(class AActor* InSourceAvatar, float InDamage, const struct FHitResult& HitInfo);
	void ResetTransition_External();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LevelSyncTransitionComponent">();
	}
	static class ULevelSyncTransitionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULevelSyncTransitionComponent>();
	}
};

// Class Marvel.LifetimeFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class ULifetimeFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ActivateLifetimeControl(struct FLifetimeControlParam& ControlParam, class UObject* Target);
	static void DeactiveLifetimeControl(struct FLifetimeControlParam& ControlParam);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LifetimeFunctionLibrary">();
	}
	static class ULifetimeFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULifetimeFunctionLibrary>();
	}
};

// Class Marvel.LifetimeManager
// 0x0000 (0x0030 - 0x0030)
class ULifetimeManager final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LifetimeManager">();
	}
	static class ULifetimeManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULifetimeManager>();
	}
};

// Class Marvel.LLMFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class ULLMFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void CreateLLMSnapShot();
	static TMap<class FName, int64> GetAllUserWigetCount();
	static TMap<class FString, int64> GetCharacterAnimationDetail();
	static TMap<class FString, int64> GetCharacterAudioDetail();
	static TMap<class FString, int64> GetCharacterSkeletalMeshDetail();
	static TMap<class FString, int64> GetCharacterStaticMeshDetail();
	static TMap<class FString, int64> GetCharacterTextureDetail();
	static class AMarvelPlayerController* GetCurrentPlayerController();
	static int32 GetLLMCsvWriteCount();
	static TMap<class FName, int64> GetLLMDefaultReport();
	static TMap<class FName, int64> GetLLMPeakReport();
	static TMap<class FName, int64> GetLLMSnapShotReport();
	static float GetRequiredPoolPercentage();
	static TMap<class FString, int64> GetStreamingRequiredDetail();
	static TMap<class FName, int64> GetWidgetBPMemory();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LLMFunctionLibrary">();
	}
	static class ULLMFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULLMFunctionLibrary>();
	}
};

// Class Marvel.MarvelReplicationGraphNode_AlwaysRelevant_ForConnection
// 0x0008 (0x0170 - 0x0168)
class UMarvelReplicationGraphNode_AlwaysRelevant_ForConnection final : public UReplicationGraphNode_AlwaysRelevant_ForConnection
{
public:
	uint8                                         Pad_168[0x8];                                      // 0x0168(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelReplicationGraphNode_AlwaysRelevant_ForConnection">();
	}
	static class UMarvelReplicationGraphNode_AlwaysRelevant_ForConnection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelReplicationGraphNode_AlwaysRelevant_ForConnection>();
	}
};

// Class Marvel.TriggerHapticFeedbackEffect_MultiFeedback
// 0x0010 (0x00F0 - 0x00E0)
class UTriggerHapticFeedbackEffect_MultiFeedback final : public UTriggerHapticFeedbackEffect_Base
{
public:
	TArray<uint8>                                 Strengths;                                         // 0x00E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TriggerHapticFeedbackEffect_MultiFeedback">();
	}
	static class UTriggerHapticFeedbackEffect_MultiFeedback* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTriggerHapticFeedbackEffect_MultiFeedback>();
	}
};

// Class Marvel.Widget_LoadingGamePanel
// 0x0000 (0x03B8 - 0x03B8)
class UWidget_LoadingGamePanel final : public UUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_LoadingGamePanel">();
	}
	static class UWidget_LoadingGamePanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_LoadingGamePanel>();
	}
};

// Class Marvel.Widget_LoadingPanelContainer
// 0x0028 (0x03E0 - 0x03B8)
class UWidget_LoadingPanelContainer : public UUserWidget
{
public:
	class UTextBlock*                             Text_DebugInfo;                                    // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Text_ThreadInfo;                                   // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 DebugString;                                       // 0x03C8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bVisible;                                          // 0x03D8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D9[0x7];                                      // 0x03D9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_LoadingPanelContainer">();
	}
	static class UWidget_LoadingPanelContainer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_LoadingPanelContainer>();
	}
};

// Class Marvel.UIC_Loading
// 0x0060 (0x0090 - 0x0030)
class alignas(0x10) UUIC_Loading : public UObject
{
public:
	TMulticastInlineDelegate<void(const class FString& MapName)> OnPreLoadMapDelegate;                              // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UWorld* LoadedWorld)> OnPostLoadMapDelegate;                             // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnLoadingScreenStartedDelegate;                    // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnLoadingScreenFinishedDelegate;                   // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameInstance*                          GameInstance;                                      // 0x0078(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_80[0x10];                                      // 0x0080(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UUIC_Loading* Get(class UObject* WCO);

	void AddDebugMsg(const class FString& NewString);
	void ClearDebugMsg();
	void Destruct();
	void Init();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIC_Loading">();
	}
	static class UUIC_Loading* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIC_Loading>();
	}
};

// Class Marvel.LocalizationLibrary
// 0x0000 (0x0030 - 0x0030)
class ULocalizationLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddEntry(class UStringTable* InTable, const class FString& InKey, const class FString& InSourceString);
	static bool CheckDoesPackageExist(const class FString& InPackageName);
	static TMap<class FString, class FString> GetAllEntries(class UStringTable* InTable);
	static TArray<class FString> GetAllKeys(class UStringTable* InTable);
	static bool GetEntry(class UStringTable* InTable, const class FString& InKey, class FString* OutSourceString);
	static class FText GetFormattedText(const class FString& InNameSpace, const class FString& InKey, const TMap<class FString, class FText>& Args);
	static class FString GetNamespace(class UStringTable* InTable);
	static class UStringTable* GetStringTableByTableId(class FName InTableName, bool bLoadIfNotExist);
	static class FText GetTextFromStringTable(const class FString& InNameSpace, const class FString& InKey);
	static class FString GetTextKey(const class FText& InText);
	static class FString GetTextNamespace(const class FText& InText);
	static class FString GetTextSourceString(const class FText& InText);
	static void InitNamespace2TableId();
	static void RemoveEntry(class UStringTable* InTable, const class FString& InKey);
	static void SetNamespace(class UStringTable* InTable, const class FString& InNameSpace);
	static void SetYIFANSnapShotDelayFrame(int32 DelayFrameNum);
	static bool TextShouldGatherForLocalization(const class FText& InText);
	static void ToggleYIFANSnapShot();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LocalizationLibrary">();
	}
	static class ULocalizationLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULocalizationLibrary>();
	}
};

// Class Marvel.MantleFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UMantleFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool MantleCheck(class ACharacter* InCharacter, const struct FMantleTraceSettings& TraceSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MantleFunctionLibrary">();
	}
	static class UMantleFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMantleFunctionLibrary>();
	}
};

// Class Marvel.MapAgent
// 0x0030 (0x03E8 - 0x03B8)
class UMapAgent final : public UUserWidget
{
public:
	class UMapWidget*                             MapWidget;                                         // 0x03B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDockEdge;                                         // 0x03C0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C1[0x7];                                      // 0x03C1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                RotationWidget;                                    // 0x03C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                PositionWidget;                                    // 0x03D0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget*                                RootWidget;                                        // 0x03D8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanelSlot*                       PositionSlot;                                      // 0x03E0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	struct FMapTransform GetMapTransform();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MapAgent">();
	}
	static class UMapAgent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMapAgent>();
	}
};

// Class Marvel.MapUtil
// 0x0000 (0x0030 - 0x0030)
class UMapUtil final : public UBlueprintFunctionLibrary
{
public:
	static struct FVector2D CaclUVFromLocation(const struct FMapViewport& MapViewport, const struct FVector& Location);
	static struct FMapTransform CalcMapViewportTransform(const struct FMapViewport& MapViewport, const struct FMapTransform& TargetTransform);
	static struct FMapTransform Conv_TransformToMapTransform(const struct FTransform& Transform);
	static struct FVector2D Conv_Vector2DToUV(const struct FVector2D& ViewportLocation);
	static struct FVector2D GetViewportSize(const struct FMapViewport& Viewport);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MapUtil">();
	}
	static class UMapUtil* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMapUtil>();
	}
};

// Class Marvel.MapWidget
// 0x0148 (0x0500 - 0x03B8)
class UMapWidget final : public UUserWidget
{
public:
	uint8                                         Pad_3B8[0x8];                                      // 0x03B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMapData                               MapData;                                           // 0x03C0(0x0100)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMapStyle                              MapStyle;                                          // 0x04C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FMapViewport                           MapViewport;                                       // 0x04C8(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class UImage*                                 ImageMap;                                          // 0x04E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanel*                           PanelAgentContainer;                               // 0x04F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F8[0x8];                                      // 0x04F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddAgent(class UMapAgent* MapAgent);
	void SetMapData(const struct FMapData& Data);
	void SetMapStyle(const struct FMapStyle& Style);
	void SetMapTransform(const struct FMapTransform& Transform);
	void SetMapViewport(const struct FMapViewport& Viewport);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MapWidget">();
	}
	static class UMapWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMapWidget>();
	}
};

// Class Marvel.MarvelLevelCtrlPawn
// 0x0048 (0x0578 - 0x0530)
class AMarvelLevelCtrlPawn : public APawn
{
public:
	uint8                                         Pad_530[0x30];                                     // 0x0530(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UTeamComponent*                         TeamComponent;                                     // 0x0560(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelBaseAbilitySystemComponent*      AbilitySystemComponent;                            // 0x0568(0x0008)(Edit, ExportObject, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_570[0x8];                                      // 0x0570(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UGameplayAbility* GetLevelCommonAbility();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelLevelCtrlPawn">();
	}
	static class AMarvelLevelCtrlPawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelLevelCtrlPawn>();
	}
};

// Class Marvel.Marvel3DWidgetManager
// 0x01A8 (0x0218 - 0x0070)
class UMarvel3DWidgetManager final : public UWorldSingleton
{
public:
	TSet<class UMarvelWidgetComponent*>           WidgetComponents;                                  // 0x0070(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TSet<class UMarvel3DWidget*>                  ScreenSpaceWidgets;                                // 0x00C0(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UMarvel3DWidget*>                ScreenSpaceWidgetsNotAddedToViewport;              // 0x0110(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TSet<class UMarvel3DWidget*>                  ScreenSpaceWidgets_SourceLevel;                    // 0x0120(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TSet<class UMarvel3DWidget*>                  ScreenSpaceWidgets_DuplicateLevel;                 // 0x0170(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TSet<class UMarvel3DWidget*>                  WorldSpaceWidgets;                                 // 0x01C0(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_210[0x8];                                      // 0x0210(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnReplayStateChanged(EMarvelReplayState NewState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Marvel3DWidgetManager">();
	}
	static class UMarvel3DWidgetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvel3DWidgetManager>();
	}
};

// Class Marvel.SpiderDesConstraintClientActor
// 0x03F8 (0x08B0 - 0x04B8)
class alignas(0x10) ASpiderDesConstraintClientActor final : public ADestructionConstraintClientMesh
{
public:
	uint8                                         Pad_4B8[0x38];                                     // 0x04B8(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<int32>                                   BreakIndexs;                                       // 0x04F0(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_540[0x8];                                      // 0x0540(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               WetMatDynamicIns;                                  // 0x0548(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_550[0x2C0];                                    // 0x0550(0x02C0)(Fixing Size After Last Property [ Dumper-7 ])
	ESpiderState                                  SpiderState;                                       // 0x0810(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsMoving;                                         // 0x0811(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_812[0x2];                                      // 0x0812(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ShiftBrokenDegree;                                 // 0x0814(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WebTickGap;                                        // 0x0818(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WebTickScale;                                      // 0x081C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceThresholdForScale;                         // 0x0820(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceDiv;                                       // 0x0824(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     WetMat;                                            // 0x0828(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AStaticMeshActor*                       TargetSM;                                          // 0x0830(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MouthSocketName;                                   // 0x0838(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetShootTime;                                      // 0x0844(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WetShootLengthName;                                // 0x0848(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_854[0x4];                                      // 0x0854(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpiderMaterialParam>           WebShootCurveParams;                               // 0x0858(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         WebShootFXAsset;                                   // 0x0868(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          WebShootAudioEvent;                                // 0x0870(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WetDestroyTime;                                    // 0x0878(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_87C[0x4];                                      // 0x087C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpiderMaterialParam>           WebDestroyCurveParams;                             // 0x0880(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         WebDestroyFXAsset;                                 // 0x0890(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          WebDestroyAudioEvent;                              // 0x0898(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeathTimePlayEffThreshold;                         // 0x08A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckActorMovingTickGap;                           // 0x08A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A8[0x8];                                      // 0x08A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DeathBreakDispatcher(const int32& Index_0, const float& ServerTime);
	void LoopCheckActorMoving();
	void LoopDestroyWebTick();
	void LoopWebTick();
	void ResetAllState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiderDesConstraintClientActor">();
	}
	static class ASpiderDesConstraintClientActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASpiderDesConstraintClientActor>();
	}
};

// Class Marvel.MarvelActorPredictedSpawnTaskInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelActorPredictedSpawnTaskInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelActorPredictedSpawnTaskInterface">();
	}
	static class IMarvelActorPredictedSpawnTaskInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelActorPredictedSpawnTaskInterface>();
	}
};

// Class Marvel.MarvelPhysicsFuncLibrary
// 0x0000 (0x0030 - 0x0030)
class UMarvelPhysicsFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static TArray<class AActor*> GetAllChaosActors(class UObject* WOC);
	static struct FChaosDestructionInfo GetChaosActorInfo(class UObject* WOC, class AActor* Actor);
	static bool GetChaosDestructionBounds(class UGeometryCollectionComponent* GCComp, int32 InItem, struct FTransform* OutBoundsTransform, struct FBoxSphereBounds* OutLocalBounds);
	static bool IsDestructionActor(const class AActor* InActor);
	static bool IsDestructionComponent(const class UPrimitiveComponent* InComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPhysicsFuncLibrary">();
	}
	static class UMarvelPhysicsFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelPhysicsFuncLibrary>();
	}
};

// Class Marvel.MarvelActorPredictedInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelActorPredictedInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelActorPredictedInterface">();
	}
	static class IMarvelActorPredictedInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelActorPredictedInterface>();
	}
};

// Class Marvel.MarvelAbilityActorPoolSubsystem
// 0x0118 (0x0150 - 0x0038)
class UMarvelAbilityActorPoolSubsystem final : public UWorldSubsystem
{
public:
	TMap<struct FMarvelActorPoolHanle, struct FMarvelActorPool> ActorPools;                                        // 0x0038(0x0050)(NativeAccessSpecifierPublic)
	TSet<class AActor*>                           RemoteItems;                                       // 0x0088(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x78];                                      // 0x00D8(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityActorPoolSubsystem* GetActorPoolSubsystem(const class UObject* Object);

	void LogAll();
	void OnActorEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityActorPoolSubsystem">();
	}
	static class UMarvelAbilityActorPoolSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityActorPoolSubsystem>();
	}
};

// Class Marvel.MarvelAbilityChargeComponent
// 0x0150 (0x0240 - 0x00F0)
class UMarvelAbilityChargeComponent final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(int32 ChargeID, int32 AbilityID, int32 CurrentCount, float CurrentTick)> AbilityChargeInfoDelegate;                         // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 ChargeID, int32 AbilityID, int32 CurrentCount, float CurrentTick)> AbilityChargeCostDelegate;                         // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          bNeedCostChargeCount;                              // 0x0110(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111[0x7];                                      // 0x0111(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAbilityChargeInfoContainer            AbilityChargeInfoContainer;                        // 0x0118(0x0128)(Net, ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	void EnableAbilityCharge(int32 AbilityID, bool Enable);
	const TArray<struct FAbilityChargeInfo> GetAllChargeAbilities();
	int32 GetCurrentChargeCount(int32 AbilityID);
	void OnChargeInfoChanged(struct FAbilityChargeInfo* Info);
	void RegisterChargeAbility(int32 AbilityID, const struct FAbilityChargeInfo& ChargeInfo);
	void RemoveChargeAbility(int32 AbilityID);
	void ResetAbilityChargeCurrentCount(int32 AbilityID);
	void SetNeedCostChargeCount(bool NeedChargeCost);
	bool TryActiveAbility(int32 AbilityID);

	bool GetAbilityChargeInfo(int32 AbilityID, struct FAbilityChargeInfo* AbilityInfo) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityChargeComponent">();
	}
	static class UMarvelAbilityChargeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityChargeComponent>();
	}
};

// Class Marvel.MarvelAbilityCrosshair
// 0x0018 (0x0048 - 0x0030)
class UMarvelAbilityCrosshair final : public UObject
{
public:
	float                                         CrosshairRadius;                                   // 0x0030(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x14];                                      // 0x0034(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityCrosshair">();
	}
	static class UMarvelAbilityCrosshair* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityCrosshair>();
	}
};

// Class Marvel.MarvelGameplay_BoxTraceType
// 0x0000 (0x0030 - 0x0030)
class UMarvelGameplay_BoxTraceType final : public UMarvelGameplay_LineTraceType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplay_BoxTraceType">();
	}
	static class UMarvelGameplay_BoxTraceType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplay_BoxTraceType>();
	}
};

// Class Marvel.MarvelAbilitySystemInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelAbilitySystemInterface : public IAbilitySystemInterface
{
public:
	bool DetermineDeathCue(const struct FAttributeModifierHandle& ModifierParameterHandle, struct FGameplayTag* InOutDeathTag);
	void OnApplyDamage(class AController* InTarget, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnApplyDamageByField(class AController* InTarget, class AActor* InTargetAvatar, const float RealDeltaValue);
	void OnApplyTreat(class AController* InTarget, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnDeath(class AController* InSource, class AActor* InSourceAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnKillOther(class AController* InTarget, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnPreDeath(class AController* InSource, class AActor* InSourceAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnPreKillOther(class AController* InTarget, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnPreReborn(const struct FCharacterRebornParam& RebornParameter);
	void OnReborn(const struct FCharacterRebornParam& RebornParameter);
	void OnTakeDamage(class AController* InSource, class AActor* InSourceAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnTakeTreat(class AController* InSource, class AActor* InSourceAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	bool ShouldApplyEffect();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilitySystemInterface">();
	}
	static class IMarvelAbilitySystemInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelAbilitySystemInterface>();
	}
};

// Class Marvel.MarvelIronChainActor
// 0x00E0 (0x0570 - 0x0490)
class AMarvelIronChainActor final : public AActor
{
public:
	uint8                                         Pad_490[0x28];                                     // 0x0490(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStaticMeshComponent*>           ChildStaticMeshs;                                  // 0x04B8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4C8[0x10];                                     // 0x04C8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UPrimitiveComponent*> ChildStateMeshsMap;                                // 0x04D8(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	float                                         AudioSpeedMin;                                     // 0x0528(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AudioSpeedMax;                                     // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RiseFactor;                                        // 0x0530(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickRate;                                          // 0x0534(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         KillSoundDistance;                                 // 0x0538(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53C[0x4];                                      // 0x053C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           LimitComponents;                                   // 0x0540(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShowSpeed;                                        // 0x0550(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_551[0x3];                                      // 0x0551(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AdjustTickDistance;                                // 0x0554(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelIronChainVoiceParam             VoiceParam;                                        // 0x0558(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelIronChainActor">();
	}
	static class AMarvelIronChainActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelIronChainActor>();
	}
};

// Class Marvel.MarvelAbilityExecuteInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelAbilityExecuteInterface final : public IMarvelAbilitySystemInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityExecuteInterface">();
	}
	static class IMarvelAbilityExecuteInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelAbilityExecuteInterface>();
	}
};

// Class Marvel.SpiderDesConstraintAnimInstance
// 0x0280 (0x06B0 - 0x0430)
class USpiderDesConstraintAnimInstance final : public UAnimInstance
{
public:
	bool                                          bEnableIK;                                         // 0x0428(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_429[0x3];                                      // 0x0429(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   IKRootBoneName;                                    // 0x042C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IKTraceLength;                                     // 0x0438(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_43C[0x4];                                      // 0x043C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FVehicleIKTraceInfo> IKBoneTraceInfoMap;                                // 0x0440(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         DefaultIKUpdateInterval;                           // 0x0490(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpikeAnimInterval;                                 // 0x0494(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FIKBoneOffsetUpdateConfig>      AnimStateIKUpdateConfig;                           // 0x0498(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FIKBoneOffsetCacheConfig>       IKBoneOffsetCacheConfig;                           // 0x04A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAnimGraphPBIKEffector>         IKSetupArrayDynamic;                               // 0x04B8(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsIKActivated;                                    // 0x04C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USkeletalMeshComponent*                 SkeletalMeshComp;                                  // 0x04D0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MeshHeight;                                        // 0x04D8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4DC[0x9];                                      // 0x04DC(0x0009)(Fixing Size After Last Property [ Dumper-7 ])
	ESpiderDesAnimState                           SpiderAnimState;                                   // 0x04E5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4E6[0x2];                                      // 0x04E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class ASpiderDesConstraintClientActor*        SpiderDesConstraintActor;                          // 0x04E8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StartSpikeTime;                                    // 0x04F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentIKUpdateInterval;                           // 0x04F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4F8[0x1B8];                                    // 0x04F8(0x01B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiderDesConstraintAnimInstance">();
	}
	static class USpiderDesConstraintAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpiderDesConstraintAnimInstance>();
	}
};

// Class Marvel.MarvelGameplayTagRequirementsInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelGameplayTagRequirementsInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayTagRequirementsInterface">();
	}
	static class IMarvelGameplayTagRequirementsInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelGameplayTagRequirementsInterface>();
	}
};

// Class Marvel.MarvelGameplayEffectEnergyRegen
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectEnergyRegen final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectEnergyRegen">();
	}
	static class UMarvelGameplayEffectEnergyRegen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectEnergyRegen>();
	}
};

// Class Marvel.MarvelMovableActorInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelMovableActorInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelMovableActorInterface">();
	}
	static class IMarvelMovableActorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelMovableActorInterface>();
	}
};

// Class Marvel.MarvelHUD
// 0x0178 (0x06F8 - 0x0580)
class AMarvelHUD : public AHUD
{
public:
	TMap<class FString, class UCanvasPanel*>      WidgetLayerPanels;                                 // 0x0580(0x0050)(BlueprintVisible, ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, class UWidget*>     PanelWidgetMap;                                    // 0x05D0(0x0050)(BlueprintVisible, ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_620[0x50];                                     // 0x0620(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   Class_FunctionLibrary;                             // 0x0670(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                UIFunctionLibrary;                                 // 0x06A0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAsync;                                            // 0x06A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A9[0x3];                                      // 0x06A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InputModeUINeededCnt;                              // 0x06AC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInputModeGaming;                                  // 0x06B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6B1[0x7];                                      // 0x06B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UUserWidget>                AbilityDebugUIClass;                               // 0x06B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            DebugUI;                                           // 0x06C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UActionTipsManager*                     ActionTipsManager;                                 // 0x06C8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D0[0x28];                                     // 0x06D0(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void StaticMarvelAddWidgetToLayer(class UUserWidget* InWidget, EMarvelWidgetLayer InLayer);

	bool AddWidgetToLayer_Enum(class UUserWidget* Widget, EMarvelWidgetLayer Layer);
	bool AddWidgetToLayer_String(class UUserWidget* Widget, const class FString& LayerName);
	void CleanupWidgetsByTypeTags(const struct FGameplayTagContainer& TypeTags);
	bool GetNeedInputModeUI();
	void GetWidgetsOfTag(const struct FGameplayTag& InTag, TArray<class UWidget*>* OutWidgets);
	void HideTransitionPanel();
	void MarvelAddToViewport(class UUserWidget* Widget);
	void MarvelSetInputModeGame();
	void MarvelSetInputModeUI(class UWidget* InWidgetToFocus);
	void NeedInputModeUI(class UWidget* InWidgetToFocus);
	void RegisterWidgetLayer_Enum(class UCanvasPanel* Panel, EMarvelWidgetLayer Layer);
	void RegisterWidgetLayer_String(class UCanvasPanel* Panel, const class FString& LayerName);
	void SetBlockPawnInput(const bool bBlock);
	void SetCursorVisibility(bool bVisible);
	void ShowTransitionPanel(float TransTime, float BlackTime);
	void StopNeedInputModeUI();
	void TriggerButtonClickByTag(const struct FGameplayTag& InTag);
	void TriggerButtonClickByTagAndIndex(const struct FGameplayTag& InTag, int32 ButtonIndex);
	void TriggerListItemClickByTagAndIndex(const struct FGameplayTag& InTag, int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelHUD">();
	}
	static class AMarvelHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelHUD>();
	}
};

// Class Marvel.MarvelAbilityGameMode
// 0x0000 (0x0530 - 0x0530)
class AMarvelAbilityGameMode final : public AGameModeBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityGameMode">();
	}
	static class AMarvelAbilityGameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelAbilityGameMode>();
	}
};

// Class Marvel.MarvelAbilityItem
// 0x0330 (0x0368 - 0x0038)
class UMarvelAbilityItem final : public UPrimaryDataAsset
{
public:
	TSubclassOf<class UMarvelGameplayAbility>     GrantedAbility;                                    // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAbilityConfig*                   ExtendConfigInline;                                // 0x0040(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CustomActivateInterval;                            // 0x0048(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UMarvelAbilityConfig>       ExtendConfigClass;                                 // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMarvelAbilityComboSection>     AbilityComboSections;                              // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMarvelTimelineSpec>            TimelineToPlayMontage;                             // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMarvelAbilityInputConfig              ActivateInput;                                     // 0x0078(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_84[0x4];                                       // 0x0084(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EAbilityInputBinds>                    StandByActivateInput;                              // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EAbilityInputBinds                            ConfirmInput;                                      // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConfirmInputDelayTime;                             // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionTipsParam                       ConfirmTipsParam;                                  // 0x00A0(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	EAbilityInputBinds                            CancelInput;                                       // 0x0108(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x3];                                      // 0x0109(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CancelInputDelayTime;                              // 0x010C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FActionTipsParam                       CancelTipsParam;                                   // 0x0110(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bStopLoopActivateWhenUserCancel;                   // 0x0178(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_179[0x7];                                      // 0x0179(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarvelAbilityInputBind>        BindInputs;                                        // 0x0180(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class UAbilityActivateData_Base*              ActivateData;                                      // 0x0190(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UInputAction*>                   CancelLoopAbilityActions;                          // 0x0198(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAbilityBindInputConfig>        BindInputConfigs;                                  // 0x01A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<EAbilityInputBinds>                    BlockInputBinds;                                   // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FMarvelAbilityCueSection>       AbilityGameplayCues;                               // 0x01C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EMarvelAbilityStage                           ReadyCooldownStage;                                // 0x01D8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9[0x3];                                      // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ReadyCooldownStageTag;                             // 0x01DC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelAbilityStage                           CommitCooldownStage;                               // 0x01E8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E9[0x3];                                      // 0x01E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CommitCooldownStageTag;                            // 0x01EC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelAbilityStage                           ReadyCostStage;                                    // 0x01F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F9[0x3];                                      // 0x01F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ReadyCostStageTag;                                 // 0x01FC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FAbilityCostActionStruct>       CostAttrActions;                                   // 0x0208(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EAmmoClipType                                 CostClipType;                                      // 0x0218(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CostRequireTag;                                    // 0x021C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CostIgnoreTag;                                     // 0x0228(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          PrimaryCost;                                       // 0x0234(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_235[0x3];                                      // 0x0235(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitValue;                                         // 0x0238(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x023C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageRegen;                                       // 0x0240(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TreatRegen;                                        // 0x0244(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RegenValue;                                        // 0x0248(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReduceValue;                                       // 0x024C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultRegen;                                     // 0x0250(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRestartRegenWhernCost;                            // 0x0251(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_252[0x2];                                      // 0x0252(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RecoverDelayTime;                                  // 0x0254(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActivateCostValue;                                 // 0x0258(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckActivateCostValue;                            // 0x025C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCanActiveWithoutEnoughEnergy : 1;                 // 0x0260(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bEndWithoutEnoughEnergy : 1;                       // 0x0260(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bUseLocalClientCost : 1;                           // 0x0260(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	EMarvelAbilityStage                           AutoBeginGather;                                   // 0x0261(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_262[0x6];                                      // 0x0262(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<float>                                 GatherCallbackValues;                              // 0x0268(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         bDisableAudioOnFailCooldown : 1;                   // 0x0278(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableAudioOnFailCost : 1;                       // 0x0278(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableAudioOnFailBlock : 1;                      // 0x0278(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableAudioOnUserLogic : 1;                      // 0x0278(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDisableAudioOnOtherCanActivate : 1;               // 0x0278(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_279[0x3];                                      // 0x0279(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          EnableCameraShake;                                 // 0x027C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitCharactersAndNonShieldSummons;                  // 0x027D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitShieldSummons;                                  // 0x027E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitScenes;                                         // 0x027F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HitDestructibleScenes;                             // 0x0280(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AcivateAbilityShake;                               // 0x0281(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_282[0x6];                                      // 0x0282(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class ULegacyCameraShake>         HitCameraShakeClass;                               // 0x0288(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class ULegacyCameraShake>         HitEnemyCameraShakeClass;                          // 0x0290(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChooseCameraShakeByCombo;                         // 0x0298(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class ULegacyCameraShake>> HitEnemyCameraShakeClassesByCombo;                 // 0x02A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TSubclassOf<class ULegacyCameraShake>         AbilityCameraShakeClass;                           // 0x02B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoActiveCameraInterp;                            // 0x02B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2B9[0x7];                                      // 0x02B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraInterp*                          CameraInterpAsset;                                 // 0x02C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EnableAnimFrameFreeze;                             // 0x02C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C9[0x7];                                      // 0x02C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAnimFrameFreezeConfig>         AnimFrameFreezeConfig;                             // 0x02D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	EMarvelAbilityStage                           AutoShakeHUD;                                      // 0x02E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelAbilityUIHudAnim                       ShakeHUDType;                                      // 0x02E1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2E2[0x6];                                      // 0x02E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStencilModifier_PPTransparentDistanceOffset PPTransparentDistanceOffset;                       // 0x02E8(0x0010)(Edit, BlueprintVisible, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	int32                                         ScopeIDNeedHighlight;                              // 0x02F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsingDifferentComboRange;                         // 0x02FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2FD[0x3];                                      // 0x02FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            HighlightComboScopes;                              // 0x0300(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bOnlyHighlightWhenActivated;                       // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_351[0x7];                                      // 0x0351(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAbilityConfig*                   AbilityConfig;                                     // 0x0358(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_360[0x8];                                      // 0x0360(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UMarvelAbilityConfig* GetMarvelAbilityConfig();

	bool ContainAutoCommitCostStage() const;
	EMarvelAbilityStage FindAnyCommitCostStage() const;
	EAbilityInputBinds GetBindInputConfigByInputType(EBindInputType BindInputType, struct FAbilityBindInputConfig* OutBindInputConfig) const;
	EAbilityInputBinds GetBindInputConfigByMethodName(class FName MethodName, struct FAbilityBindInputConfig* OutBindInputConfig, int32* OutIndex) const;
	const struct FGameplayTag GetCostTag() const;
	TArray<class UInputAction*> GetInputActionsByInputType(EBindInputType InputType) const;
	EAbilityInputBinds GetInputBindsByIndex(int32 Index_0) const;
	EAbilityInputBinds GetInputBindsByType(EBindInputType InputType) const;
	int32 GetMarvelAbilityID() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityItem">();
	}
	static class UMarvelAbilityItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityItem>();
	}
};

// Class Marvel.Widget_BattleTipsPanel
// 0x0000 (0x05A8 - 0x05A8)
class UWidget_BattleTipsPanel final : public UMarvelUserWidget
{
public:
	static class UWidget_BattleTipsPanel* Get(class UObject* WCO);

	int32 AddPersistentTip(const struct FWidgetStyle_BattlePersistentTip& TipStyle);
	void AddTransientTip(const struct FWidgetStyle_BattleTransientTip& TipStyle);
	void RemovePersistentTip(int32 Handle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_BattleTipsPanel">();
	}
	static class UWidget_BattleTipsPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_BattleTipsPanel>();
	}
};

// Class Marvel.MarvelBaseAbilitySystemComponent
// 0x2D00 (0x6500 - 0x3800)
class UMarvelBaseAbilitySystemComponent : public UAbilitySystemComponent
{
public:
	uint8                                         Pad_3800[0x60];                                    // 0x3800(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 AbilityID)> OnEndAbilityDispatcher;                            // 0x3860(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UGameplayAbility* Ability)> OnEndAbilityDispatcherEx;                          // 0x3870(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 AbilityID)> OnCancelAbilityDispatcher;                         // 0x3880(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnAvatarBeginPlay;                                 // 0x3890(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 AbilityID)> OnActivateAbilityDispatcher;                       // 0x38A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UGameplayAbility* InAbility)> OnActivateAbilityDispatcher_WithAbility;           // 0x38B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 AbilityID, float Magnitude)> OnCoolDownAbilityDispatcher;                       // 0x38C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(TArray<int32>& AbilityIDs, bool bBlock)> OnBlockAbilityDispatcher;                          // 0x38D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UGameplayAbility* Ability)> OnBreakedAbilityDispatcher;                        // 0x38E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UGameplayAbility* Ability)> OnMissileAbilityDispatcher;                        // 0x38F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 AbilityID)> OnAbilityInitializeDispatcher;                     // 0x3900(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UGameplayAbility* InAbility)> OnAbilityInitializeDispatcher_WithAbility;         // 0x3910(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Value)>   OnAbilityDestroiedDispatcher;                      // 0x3920(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Source)> OnAbilityFinishedDispatcher;                       // 0x3930(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UMarvelGameplayAbility* Ability, float CostValue, const struct FGameplayTag& CostTag)> OnAbilityConsumeCostDispatcher;                    // 0x3940(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_3950[0x18];                                    // 0x3950(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UMarvelGameplayAbility* Ability)> OnAbilityStateChangeDispatcher;                    // 0x3968(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UAbilitySystemComponent* Source, class UAbilitySystemComponent* Target, struct FGameplayEffectSpecStackHandle& EffectSpecHandle, const struct FActiveGameplayEffectHandle& EffectHandle)> OnGameplayEffectAppliedToSelfDispatcher;           // 0x3978(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_3988[0x10];                                    // 0x3988(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UAbilitySystemComponent* Source, class UAbilitySystemComponent* Target, struct FGameplayEffectSpecStackHandle& EffectSpecHandle, const struct FActiveGameplayEffectHandle& EffectHandle)> OnGameplayEffectAppliedToTargetDispatcher;         // 0x3998(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FGameplayEffectSpecStackHandle& ExpiredEffectHandle, bool bPrematureRemoval)> OnGameplayEffectRemovedFromSelfDispatcher;         // 0x39A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FActiveGameplayEffectHandle& EffectHandle, struct FGameplayEffectSpecStackHandle& AppliedEffectHandle)> OnGameplayEffectAppliedDispatcher;                 // 0x39B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_39C8[0x10];                                    // 0x39C8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(const struct FActiveGameplayEffectHandle& EffectHandle, struct FGameplayEffectSpecStackHandle& ExpiredEffectHandle)> OnGameplayEffectRemovedDispatcher;                 // 0x39D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_39E8[0x4F8];                                   // 0x39E8(0x04F8)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRepAbilityComboSpec>           RepActiveComboSpecs;                               // 0x3EE0(0x0010)(Net, ZeroConstructor, Transient, RepNotify, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(TArray<struct FRepAbilityComboSpec>& AbilityComboSpecArray)> OnRepAbilityComboSpecUpdated;                      // 0x3EF0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	struct FTerrainRelevancyData                  TerrainRelevancyData;                              // 0x3F00(0x0098)(NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FGameplayTagContainer& Tags)> OnAbilityTruncated;                                // 0x3F98(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UMarvelGameplayAbility* Ability, struct FGameplayTagContainer& FailureReason)> OnAbilityActivateFailed;                           // 0x3FA8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName Value)> OnTagNameAdded;                                    // 0x3FB8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName Value)> OnTagNameRemoved;                                  // 0x3FC8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName Value)> OnCueTagActivated;                                 // 0x3FD8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName GameplayCueTag, EGameplayCueEvent EventType, struct FGameplayCueParameters& Parameters)> OnHandleGameplayCue;                               // 0x3FE8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float PercentDamageValue, struct FGameplayEffectSpec& SourceSpec)> OnApplyPercentDamageDispatcher;                    // 0x3FF8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Actor, struct FVector& OldLocation, struct FVector& NewLocation)> OnTakenTeleportDispatcher;                         // 0x4008(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_4018[0x190];                                   // 0x4018(0x0190)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 WaitingToActivateAbilities;                        // 0x41A8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FIgnoreCommitAbilityContainer>  IgnoreCommitAbilityContainers;                     // 0x41B8(0x0010)(BlueprintVisible, Net, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         WaitingToActivateAbilityUntilSuccess;              // 0x41C8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         ClientWaitingToActivateAbilityUntilSuccess;        // 0x41CC(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_41D0[0x8];                                     // 0x41D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ImmunityGameplayTags;                              // 0x41D8(0x0068)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  FallingModeBlockTags;                              // 0x4240(0x0068)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  NoFallingModeAbilitiesTags;                        // 0x42A8(0x0068)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  PreserveDerivativeWithTagsWhenMatchEnd;            // 0x4310(0x0068)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  PreserveGameplayEffectWithTagsWhenMatchEnd;        // 0x4378(0x0068)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class AActor* InSourceAvatar, class AActor* InTargetAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)> OnTakeDamageDelegate;                              // 0x43E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InSourceAvatar, class AActor* InTargetAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)> OnTakeDamage_NextFrame_Delegate;                   // 0x43F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	struct FAttributeModifierParameter            LastTakeDamageParameter;                           // 0x4400(0x06B8)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InSourceAvatar, class AActor* InTargetAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)> OnPostTakeDamageDelegate;                          // 0x4AB8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InSourceAvatar, class AActor* InTargetAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)> OnApplyDamageDelegate;                             // 0x4AC8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_4AD8[0x18];                                    // 0x4AD8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* InSourceAvatar, class AActor* InTargetAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)> OnApplyDamage_NextFrame_Delegate;                  // 0x4AF0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InSourceAvatar, class AActor* InTargetAvatar, float RealDeltaValue)> OnApplyDamageByField_Delegate;                     // 0x4B00(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InSourceAvatar, class AActor* InTargetAvatar, float RealDeltaValue)> OnApplyDamageByField_NextFrame_Delegate;           // 0x4B10(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InSourceAvatar, class AActor* InTargetAvatar, float RealDeltaValue)> OnApplyDamageOnDestruction_Delegate;               // 0x4B20(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InSourceAvatar, class AActor* InTargetAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)> OnPostApplyDamageDelegate;                         // 0x4B30(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InSourceAvatar, class AActor* InTargetAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)> OnTakeTreatDelegate;                               // 0x4B40(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InSourceAvatar, class AActor* InTargetAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)> OnApplyTreatDelegate;                              // 0x4B50(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B60[0x18];                                    // 0x4B60(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UGameplayAbility* InAbility, struct FMarvelAbilityHitParams& HitParams, TArray<struct FHitResult>& HitResults)> OnAbilityHitDelegate;                              // 0x4B78(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UGameplayAbility* InAbility, int32 BounceIndex)> OnProjectileBounceDelegate;                        // 0x4B88(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FGameplayTagContainer& ImmunitySpecTags)> OnDamageImmunizedDelegate;                         // 0x4B98(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_4BA8[0xB8];                                    // 0x4BA8(0x00B8)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharacterDeathInfo                    LastDeathInfo;                                     // 0x4C60(0x0280)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FAttributeModifierParameter            LastDeathParameter;                                // 0x4EE0(0x06B8)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	EPlayerLivingState                            LivingState;                                       // 0x5598(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5599[0x7];                                     // 0x5599(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EPlayerLivingState Value)> OnLivingStateChangedDelegate;                      // 0x55A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EPlayerLivingState Value)> OnLivingStateChangedCueDelegate;                   // 0x55B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InSourceAvatar, class AActor* InTargetAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)> OnPreDeathDelegate;                                // 0x55C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_55D0[0x18];                                    // 0x55D0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDeathCueParamData                     DeathCueData;                                      // 0x55E8(0x0010)(Net, Transient, RepNotify, NoDestructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InSourceAvatar, class AActor* InTargetAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)> OnWillDeathDelegate;                               // 0x55F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InSourceAvatar, class AActor* InTargetAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)> OnDeathDelegate;                                   // 0x5608(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InSourceAvatar, class AActor* InTargetAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)> OnDeathCueDelegate;                                // 0x5618(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_5628[0x28];                                    // 0x5628(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCharacterRebornParam                  LastRebornParameter;                               // 0x5650(0x0730)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InSourceActor, struct FCharacterRebornParam& RebornParam)> OnRebornDelegate;                                  // 0x5D80(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InSourceActor, struct FCharacterRebornParam& RebornParam)> OnRebornCueDelegate;                               // 0x5D90(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InSourceAvatar, class AActor* InTargetAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)> OnPreKillOtherDelegate;                            // 0x5DA0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InSourceAvatar, class AActor* InTargetAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)> OnKillOtherDelegate;                               // 0x5DB0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InSourceAvatar, class AActor* InTargetAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)> OnKillOtherDelegate_SelfAndAgent;                  // 0x5DC0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          bForwardKillToInstigator;                          // 0x5DD0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5DD1[0x7];                                     // 0x5DD1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* InSourceAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)> OnAttributeChangedDelegate;                        // 0x5DD8(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FOnAttributeChangeDataExtend& AttributeChangeData)> OnAttributeChangedDelegateData;                    // 0x5DE8(0x0010)(ZeroConstructor, Transient, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_5DF8[0x78];                                    // 0x5DF8(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(struct FGameplayTag& TagUpdated, bool TagExists)> OnBlockTagUpdatedDelegate;                         // 0x5E70(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TScriptInterface<class IMarvelAbilitySystemInterface> AbilityInterfaceOwner;                             // 0x5E80(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSet<int32>                                   BlockedBindInputs;                                 // 0x5E90(0x0050)(Protected, NativeAccessSpecifierProtected)
	TSet<int32>                                   UnBlockedAbilityWhiteList;                         // 0x5EE0(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(struct FGameplayTag& TagUpdated, bool TagExists)> OnTagUpdatedDelegate;                              // 0x5F30(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         GameplayActors;                                    // 0x5F40(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* GameplayActor)> OnGameplayActorAdded;                              // 0x5F50(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* GameplayActor)> OnGameplayActorRemoved;                            // 0x5F60(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_5F70[0x50];                                    // 0x5F70(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	struct FReplicateTimerSpecContainer           ReplicateTimerSpecContainer;                       // 0x5FC0(0x0138)(Net, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_60F8[0x18];                                    // 0x60F8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAbilityGatherDataContainer            AbilityGatherDataContainer;                        // 0x6110(0x0138)(Net, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FMarvelAbilityContextContainer         AbilityContexts;                                   // 0x6248(0x0130)(NativeAccessSpecifierPublic)
	TMap<struct FActiveGameplayEffectHandle, struct FMarvelAbilityContextHandle> WaitingRemoveAbilityContextEffects;                // 0x6378(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_63C8[0x90];                                    // 0x63C8(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAbilityPersonalizedRuntimeData> AbilityPersonalizedRuntimeData;                    // 0x6458(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FAbilityPersonalizedRuntimeData> AbilityPersonalRepRuntimeDatas;                    // 0x6468(0x0010)(BlueprintVisible, Net, ZeroConstructor, NativeAccessSpecifierPublic)
	Marvel::EInputType                            InputType;                                         // 0x6478(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6479[0x7];                                     // 0x6479(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnUserSettingChanged;                              // 0x6480(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TArray<struct FAbilityWaitingInputParam>      WaitingInputBindIndexList;                         // 0x6490(0x0010)(BlueprintVisible, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	TArray<EAbilityInputBinds>                    OccupancyGamepadInputBinds;                        // 0x64A0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnActionTipsChanged;                               // 0x64B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AAbilityActivateResolver*               AbilityActivateResolver;                           // 0x64C0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         NowBlindEffect_Angle;                              // 0x64C8(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NowBlindEffect_Distance;                           // 0x64CC(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64D0[0x20];                                    // 0x64D0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AMarvelBaseCharacter* Value)> OnAttributeInitedDelegate;                         // 0x64F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static void ExecuteScopeClientImpulseField(int32 ScopeId, const TArray<int32>& ScopeFieldIDs, class AActor* Causer, const TArray<struct FHitResult>& Hits, const struct FVector& TraceStart, const struct FVector& TraceEnd, const TArray<uint32>& StaticCacheIDs, const TArray<struct FVector>& CustomDirs);

	bool ActivateAbilitiesWithID(int32 AbilityID, bool bAllowRemoteActivation);
	bool ActivateAbilitiesWithInputBinds(EAbilityInputBinds InputKey, bool bAllowRemoteActivation);
	bool ActivateAbilitiesWithTags(const struct FGameplayTagContainer& AbilityTags, bool bAllowRemoteActivation);
	void AddGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	void AddImmunityTags(const struct FGameplayTagContainer& Tags);
	void AddOnGEAdded_AssetTag(const struct FGameplayTagQuery& InTagQuery, const TDelegate<void(const struct FActiveGameplayEffectHandle& EffectHandle, struct FGameplayEffectSpec& AppliedEffect)>& Callback);
	void AddOnGEApplied_AssetTag(const struct FGameplayTagQuery& InTagQuery, const TDelegate<void(class UAbilitySystemComponent* Source, class UAbilitySystemComponent* Target, struct FGameplayEffectSpec& EffectSpec, const struct FActiveGameplayEffectHandle& EffectHandle)>& Callback);
	void AddReplicationDeathCue(const struct FGameplayTag& InTag, class AActor* Causer);
	void AddResurrectHandler(TDelegate<void(class AActor* TargetActor)> ResurrectHandler, int32 InPriority);
	bool AddTagsToOwnerGranted(const struct FGameplayTagContainer& TagContainer);
	void AddTruncateAbilities(const struct FGameplayTagContainer& Tags);
	void AddUntruncatedAbilities(const struct FGameplayTagContainer& Tags);
	void AddWaitingInputBindIndex(const struct FAbilityWaitingInputParam& TempParam);
	void ApplyModifyAttributeEffectToSelf(TSubclassOf<class UGameplayEffect> EffectClass, float ModifyValue);
	void AuthorityOnKillOther(class AController* InTarget, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void AuthorityOnReachZeroHealth(class AController* InSource, class AActor* InSourceAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void BlockAbilitiesWithTagsSelf(const struct FGameplayTagContainer& Tags, bool bLock);
	int32 CalcNextComboFromAbility(class UMarvelGameplayAbility* Ability);
	struct FTransform CalculateSocketInfoTransform(EMarvelScopeQuoteType InMarvelScopeQuoteType);
	void CancelAbilities(const struct FGameplayTagContainer& WithTags, bool bForce, EGACancelType CancelType, EAbilityEndReason EndReason, const struct FGameplayTagContainer& SourceTags);
	void CancelAbilitiesByBuff(const struct FGameplayTagContainer& WithTags, const struct FGameplayTagContainer& StatusTags);
	void CancelAbilitiesWithID(int32 AbilityID, bool bForce, EAbilityEndReason EndReason);
	void ChangeAbilityCooldown(int32 AbilityID, float NewCooldown);
	void CheckAndTryActivateLoopAbilities();
	bool CheckBindInputIsBlocked(int32 InputID, int32 AbilityID);
	void ClearCacheAbilityId();
	void ClearDerivative(const struct FGameplayTagContainer& IgnoreDerivativeMatchesAnyTag, const struct FGameplayTagContainer& IgnoreBuffMatchesAnyTag);
	void ClearDerivativeAndIgnoreBuff(const struct FGameplayTagContainer& IgnoreDerivativeMatchesAnyTag);
	void ClearTruncateAbilities();
	void ClearWaitingToActivateAbilities();
	void ClientChangeAbilityCooldown(int32 AbilityID, int32 NewCooldown);
	void ClientExecuteAbilityCue(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	void ClientOnReconnect(const struct FGameplayAbilitySpecHandle& AbilityToActivate, const struct FPredictionKey& PredictionKey);
	void ClientPaybackAbilitiesCharge(const TArray<int32>& AbilityIDs, const TArray<float>& DurationList);
	void ClientPaybackAbilitiesCooldown(const TArray<int32>& AbilityIDs, const TArray<float>& DurationList);
	float DoPaybackAbilityCharge(int32 AbilityID, float Duration);
	float DoPaybackAbilityCooldown(int32 AbilityID, float Duration);
	void EnableMontageRepPosition(bool Enable);
	void ExecuteAbilityCue(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	void ExecuteGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	void ExecuteScopeClientImpulse(const struct FScopeApplyImpulseParam& ImpulseParam);
	void ExecuteScopeNoActorCue(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	void ExecuteScopeNoActorHitCue(const TArray<struct FGameplayTag>& GameplayCueTags, const TArray<struct FHitResult>& HitResults, const struct FGameplayCueParameters& Parameters);
	void FlushLocalInputPressedAbilities();
	class UGameplayAbility* GetActivatingAbilityFromTimeline(class UAnimTimeline* InTimeline);
	void GetActiveAbilitiesWithTags(const struct FGameplayTagContainer& GameplayTagContainer, TArray<class UMarvelGameplayAbility*>* ActiveAbilities);
	TArray<int32> GetBlockedBindInput();
	bool GetCooldownRemainingForTag(const struct FGameplayTagContainer& CooldownTags, float* TimeRemaining, float* CooldownDuration);
	class UGameplayAbility* GetCurrentMontageOwningAbility();
	float GetFloatValFromPersonalRepData(class FName SettingKey, const class UGameplayAbility* OwningAbility);
	void GiveAbilityHandle(int32 AbilityID);
	void GiveAbilityHandles(const TArray<int32>& AbilityIDs);
	bool IsAbilityIgnoreTargetCommitType(const class UMarvelGameplayAbility* InAbility, const struct FGameplayTag& IgnoreType);
	bool IsAbilityIgnoreTargetCommitTypeByTag(const struct FGameplayTag& AbilityTag, const struct FGameplayTag& IgnoreType);
	bool IsAbilitySysComOwnerAlive();
	bool IsZeroHealth();
	class UMarvelBaseAttributeSet* K2_GetMarvelAttributeSet();
	void MarvelBlockAbilitiesWithID(const int32 AbilityID, bool bLock);
	void MarvelBlockAbilitiesWithInputKey(EAbilityInputBinds InputKey, bool bLock);
	void MarvelBlockAbilitiesWithTags(const struct FGameplayTagContainer& Tags, bool bLock);
	void MulticastExecuteAbilityCue(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	void MulticastExecuteScopeNoActorClientImpulse(const struct FScopeApplyImpulseParam& ImpulseParam);
	void MulticastExecuteScopeNoActorClientImpulseField(int32 ScopeId, const TArray<int32>& ScopeFieldIDs, class AActor* Causer, const TArray<struct FHitResult>& Hits, const struct FVector& TraceStart, const struct FVector& TraceEnd, const TArray<uint32>& StaticCacheIDs, const TArray<struct FVector>& CustomDirs);
	void MulticastExecuteScopeNoActorCue(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	void MulticastExecuteScopeNoActorHitCue(const TArray<struct FGameplayTag>& GameplayCueTags, const TArray<struct FHitResult>& HitResults, const struct FGameplayCueParameters& Parameters);
	void MulticastOnApplyTreat(class AController* InTarget, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void MulticastOnDamageImmunized(const struct FGameplayTagContainer& ImmunitySpecTags);
	void MulticastOnKillOther(class AController* InTarget, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void MulticastOnTakeTreat(class AController* InSource, class AActor* InSourceAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	bool NextAbilityCombo(int32 AbilityID);
	void OnGameMatchEvent(EMatchState MatchState);
	void OnInputTypeChanged(Marvel::EInputType Old, Marvel::EInputType New);
	void OnLivingStateChanged();
	void OnPreGameMatchEvent(EMatchState MatchState);
	void OnReborn(const struct FCharacterRebornParam& RebornParam);
	void OnRep_AbilityComboSpecUpdated();
	void OnRep_ClientWaitingToActivateAbilityUntilSuccess();
	void OnRep_DeathCueData();
	void OnRep_LivingState();
	void OnReplicateTimerChanged(const struct FReplicateTimerSpecHandle& SpecHandle);
	void OnServerTimeChanged();
	void OnWaitingInputBindIndexChanged();
	void PaybackTargetAbilitiesCooldown(const TArray<int32>& AbilityIDs, float Duration, bool bApplyCharge);
	void PaybackTargetAbilitiesCooldownWithPercent(const TArray<int32>& AbilityIDs, float Percent, bool bApplyCharge);
	void PushWaitingToActivateAbility(int32 AbilityID);
	void RealMulticastExecuteScopeNoActorHitCue(const TArray<struct FGameplayTag>& GameplayCueTags, const TArray<struct FHitResult>& HitResults, const struct FGameplayCueParameters& Parameters);
	void RecoverDeadStateWhenRevivingFailed();
	void RemoveBlindEffect(const struct FActiveGameplayEffectHandle& Handle);
	void RemoveGameplayCueLocal(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	void RemoveImmunityTags(const struct FGameplayTagContainer& Tags);
	void RemoveLocalDeathCue();
	void RemoveOnGEAdded_AssetTag(const struct FGameplayTagQuery& InTagQuery, const TDelegate<void(const struct FActiveGameplayEffectHandle& EffectHandle, struct FGameplayEffectSpec& AppliedEffect)>& Callback);
	void RemoveOnGEApplied_AssetTag(const struct FGameplayTagQuery& InTagQuery, const TDelegate<void(class UAbilitySystemComponent* Source, class UAbilitySystemComponent* Target, struct FGameplayEffectSpec& EffectSpec, const struct FActiveGameplayEffectHandle& EffectHandle)>& Callback);
	void RemoveReplicationDeathCue();
	void RemoveResurrectHandler(TDelegate<void(class AActor* TargetActor)> ResurrectHandler);
	bool RemoveTagsFromOwnerGranted(const struct FGameplayTagContainer& TagContainer);
	void RemoveTruncateAbilities(const struct FGameplayTagContainer& Tags);
	void RemoveUntruncatedAbilities(const struct FGameplayTagContainer& Tags);
	void RemoveWaitingInputBindIndex(const struct FAbilityWaitingInputParam& TempParam);
	void RemoveWaitingToActivateAbilityUtilSuccess(int32 AbilityID);
	void ResetAbilityComboStates();
	void Server_UpdateAbilityUserSetting(const TArray<struct FAbilityPersonalizedRuntimeData>& ClientAbilityUserSetting);
	void Server_UpdateUserSetting(Marvel::EInputType NewInputType);
	void ServerActivateNotifyComboState(const struct FRepAbilityComboSpec& Spec, const class FString& ActivationKey);
	void ServerNotifyAbilitiesTruncated(const struct FGameplayTagContainer& Tags);
	bool SetAbilityNextCombo(int32 AbilityID, int32 ComboState);
	void SetBlindEffect(const struct FActiveGameplayEffectHandle& Handle, float Angle, float Distance);
	void SetBlockBindInput(int32 InputID, bool bBlock);
	void SetBlockBindInputs(const TArray<int32>& InIds, bool bBlock, const TArray<int32>& InWhiteList);
	void SetClientWaitingToActivateAbility(int32 AbilityID);
	void SetLivingState(EPlayerLivingState InLivingState);
	void SetWaitingToActivateAbilityUntilSuccess(int32 AbilityID);
	bool TryActivateAbilityGeneric(const struct FGameplayAbilitySpecHandle& AbilityHandle, bool bAllowRemoteActivation);
	void UpdateAbilitiesIgnoreCommitState(const TArray<class UMarvelGameplayAbility*>& InAbilities, const struct FGameplayTag& IgnoreType, bool bIgnore);
	void UpdateAbilitiesIgnoreCommitStateByTag(const TArray<struct FGameplayTag>& AbilityTags, const struct FGameplayTag& IgnoreTypeTag, bool bIgnore);
	void UpdateAbilityIgnoreCommitState(const class UMarvelGameplayAbility* InAbility, const struct FGameplayTag& IgnoreType, bool bIgnore);
	void UpdateAbilityIgnoreCommitStateByTag(const struct FGameplayTag& AbilityTag, const struct FGameplayTag& IgnoreTypeTag, bool bIgnore);
	void UpdateAbilityPersonalRepRuntimeDatas(const struct FAbilityPersonalizedRuntimeData& Data);
	void UpdateAbilityUserSetting();
	void UpdateComboAbilityActivationInfo(class UMarvelGameplayAbility* InAbility);
	void UpdateDiffAbilityUserSetting(const TArray<struct FAbilityPersonalizedRuntimeData>& ClientAbilityUserSetting);
	void UpdateDiffUserSetting(Marvel::EInputType NewInputType);
	void UpdateUserSetting();

	bool BlockedAbilityTagsHasTagExact(const struct FGameplayTag& TagToCheck) const;
	int32 GetAbilityComboAbilityID(int32 AbilityID) const;
	int32 GetAbilityComboState(int32 AbilityID, bool bStartFromZero) const;
	TArray<class UAnimTimeline*> GetAllLocalTimelines() const;
	TArray<int32> GetGameplayAbilities() const;
	class UGameplayAbility* GetGameplayAbility(int32 AbilityID) const;
	bool GetIsPlayingTimeline(class UAnimTimeline* InTimeline) const;
	int32 GetTimelineCurrentSectionID(class UAnimTimeline* InTimeline) const;
	float GetTimelineCurrentSectionLength(class UAnimTimeline* InTimeline) const;
	class FName GetTimelineCurrentSectionName(class UAnimTimeline* InTimeline) const;
	float GetTimelineCurrentSectionTimeLeft(class UAnimTimeline* InTimeline) const;
	float GetTimelinePosition(class UAnimTimeline* InTimeline) const;
	int32 GetWaitingToActivateAbilityUtilSuccess() const;
	bool IsAbilitiesTruncated(const struct FGameplayTagContainer& Tags) const;
	bool IsAlive() const;
	bool IsDead() const;
	bool IsOccupancyInputId(EAbilityInputBinds InputBind) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelBaseAbilitySystemComponent">();
	}
	static class UMarvelBaseAbilitySystemComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelBaseAbilitySystemComponent>();
	}
};

// Class Marvel.MarvelAbilitySystemCom
// 0x01E0 (0x66E0 - 0x6500)
class UMarvelAbilitySystemCom final : public UMarvelBaseAbilitySystemComponent
{
public:
	uint8                                         Pad_6500[0x38];                                    // 0x6500(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, TScriptInterface<class IMarvelActorPredictedInterface>> FakeActors;                                        // 0x6538(0x0050)(UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_6588[0xB8];                                    // 0x6588(0x00B8)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         bAllAbilityInitFinished : 1;                       // 0x6640(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_6641[0x7];                                     // 0x6641(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class FName SectionName)> OnMontageJumpToSection;                            // 0x6648(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMap<class FString, struct FHitResult>        ProjectileInfo;                                    // 0x6658(0x0050)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const class FString& SpawnKeyName)> OnProjectileInfoCheckFail;                         // 0x66A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_66B8[0x28];                                    // 0x66B8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ChangeMoveSpeed(const float NewMoveSpeed);
	void ClientGetActivatableGAHanders(const TArray<class FString>& GAHanders);
	void ClientSendProjectileInfo(const class FString& ProjectileKey, const struct FHitResult& HitResult);
	struct FMarvelAbilityCostData GetAbilityCostData(const struct FGameplayTag& Tag);
	void InitGameplayAbilityCost(class UMarvelAbilityItem* AbilityAsset);
	void MarvelBindAxisToInputComponent();
	void MarvelTriggerAllAbilitiesInput(int32 InputID, bool bPressd, int32 AbilityID);
	void MarvelTriggerAllAbilitiesInputWithDuration(EAbilityInputBinds InputAction, float Duration, int32 AbilityID);
	void OnLevelPenetrationSolved(const struct FVector& LocationDelta);
	void OnReloadDoneBP(bool IsAsset, class UClass* ReloadClass, class UObject* ReloadObject);
	void OnServerTimeDeltaChanged();
	void ServerRequestActivatableGAHanders();
	void ServerSendProjectileInfo(const class FString& ProjectileKey, const struct FHitResult& HitResult);
	void ServerSendProjectileMoveData(const struct FVisualLogMapKey& Key, const struct FVisualLogMapValues& Values);
	void SetAbilityCostData(const struct FGameplayTag& Tag, const struct FMarvelAbilityCostData& AbilityCostData);

	class AMarvelBaseCharacter* GetAbilitySystemOwner() const;
	float GetBaseMoveSpeed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilitySystemCom">();
	}
	static class UMarvelAbilitySystemCom* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilitySystemCom>();
	}
};

// Class Marvel.MarvelAbilitySystemDebugger
// 0x0008 (0x0498 - 0x0490)
class AMarvelAbilitySystemDebugger : public AActor
{
public:
	bool                                          bDebugProjectile;                                  // 0x0490(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_491[0x7];                                      // 0x0491(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void DrawDebugLineInForground(const class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& LineColor, float Duration, float Thickness);
	static void SetDebugForPlayerState(class APlayerState* InPS, EMarvelABSDebugType InDebugType, bool bEnableDebug);
	static void ToggleDebugForPlayerState(class APlayerState* InPS, EMarvelABSDebugType InDebugType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilitySystemDebugger">();
	}
	static class AMarvelAbilitySystemDebugger* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelAbilitySystemDebugger>();
	}
};

// Class Marvel.MarvelAbilitySystemGlobals
// 0x00F8 (0x0558 - 0x0460)
class UMarvelAbilitySystemGlobals final : public UAbilitySystemGlobals
{
public:
	bool                                          AbilityFailedInClient;                             // 0x0460(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AbilityFailedInServer;                             // 0x0461(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_462[0x2];                                      // 0x0462(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ActivateFailIsUserLogicTag;                        // 0x0464(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivateFailIsUserLogicName;                       // 0x0470(0x000C)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ActivateFailIsTruncatedTag;                        // 0x047C(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivateFailIsTruncatedName;                       // 0x0488(0x000C)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ActivateFailLoopTagsBlockedTag;                    // 0x0494(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivateFailLoopTagsBlockedName;                   // 0x04A0(0x000C)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4AC[0x4];                                      // 0x04AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 EffectTemplatePath;                                // 0x04B0(0x0010)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PreAllocatedCueActorMaxLifeSpan;                   // 0x04C0(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C4[0x74];                                     // 0x04C4(0x0074)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UAbilitySystemComponent* ASC, struct FGameplayTag& TagUpdated, bool TagExists)> OnTagUpdatedDelegate;                              // 0x0538(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_548[0x10];                                     // 0x0548(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ToggleShouldTakeDamageButNoDeath();

	bool ShouldTakeDamageButNoDeath() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilitySystemGlobals">();
	}
	static class UMarvelAbilitySystemGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilitySystemGlobals>();
	}
};

// Class Marvel.MarvelAbilitySystemLibrary
// 0x0000 (0x0030 - 0x0030)
class UMarvelAbilitySystemLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool ActorHasMatchingGameplayTag(class AActor* InActor, const struct FGameplayTag& TagToCheck);
	static void AddGameplayCueLocal(class AActor* TargetActor, const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& Parameters);
	static void AddGameplayTagToTarget(class UAbilitySystemComponent* ASC, const struct FGameplayTag& Tag, int32 Count);
	static void AddReplicationGameplayTag(class UAbilitySystemComponent* Target, const struct FGameplayTag& Tag, bool bLocalPredictable);
	static void AddReplicationGameplayTags(class UAbilitySystemComponent* ASC, const struct FGameplayTagContainer& GameplayTags);
	static void AddUniqueGameplayTagToTarget(class UAbilitySystemComponent* ASC, const struct FGameplayTag& Tag);
	static void ApplyDamageToTarget(float BaseValue, class UAbilitySystemComponent* SourceASC, class UAbilitySystemComponent* TargetASC, class AActor* Causer, class UGameplayAbility* Ability, const struct FHitResult& InHitResult, ETotalHealthType PercentDamageHealthType, float PercentDamagePercent, TSubclassOf<class UMarvelGameplayEffectDamage> DerivedDamageClass);
	static struct FActiveGameplayEffectHandle ApplyGameplayBuffSpecToTarget(int32 BuffID, class UAbilitySystemComponent* Source, class UAbilitySystemComponent* Target, class AActor* Causer, class UGameplayAbility* Ability, float ValueOverride, float DurationOverride, int32 QuoteDepth, const struct FMarvelAbilityContextHandle& InAbilityContextHandle, const float PeriodOverride);
	static struct FActiveGameplayEffectHandle ApplyGameplayEffectSpecToTarget(TSubclassOf<class UGameplayEffect> EffectClass, class UAbilitySystemComponent* Source, class UAbilitySystemComponent* Target, const struct FGameplayTag& DataTag, float CallerMagnitude, float Period, class AActor* EffectCauser, class UMarvelBaseGameplayAbility* Ability);
	static struct FActiveGameplayEffectHandle ApplyGameplayEffectSpecToTargetWithParams(TSubclassOf<class UGameplayEffect> EffectClass, class UAbilitySystemComponent* Source, class UAbilitySystemComponent* Target, const struct FAttributeModifierParameter& Params_0, const struct FGameplayTag& DataTag, float CallerMagnitude, float Period, class AActor* EffectCauser);
	static ESetMovementModePriority AutoGenerateMovementModePriority(const class UObject* Source);
	static class FString BoolToString(bool Value);
	static void BoxTraceMulti_AbilityTarget(class UObject* WorldContextObject, class AActor* Source, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, struct FMarvelAbilityTargetFilter& Filter, const struct FOtherFilterParameter& Parameters, const struct FOcclusionParameter& Occlusion, TArray<struct FHitResult>* OutHits, EDrawDebugTrace DrawDebugType);
	static bool BoxTraceSingle_AbilityTarget(class UObject* WorldContextObject, class AActor* Source, const struct FVector& Start, const struct FVector& End, const struct FVector& HalfSize, const struct FRotator& Orientation, bool bClosest, struct FMarvelAbilityTargetFilter& Filter, const struct FOtherFilterParameter& Parameters, const struct FOcclusionParameter& Occlusion, struct FHitResult* OutHit, EDrawDebugTrace DrawDebugType);
	static void BreakGameplayEffectSpec(const struct FGameplayEffectSpec& Spec, class UGameplayAbility** Ability, class AActor** Instigator, class AActor** Causer, struct FHitResult* HitResult);
	static float CalculateEffectMagnitudeWithTag(class UAbilitySystemComponent* InAbilitySystemComponent, const struct FGameplayTag& InTag);
	static bool CanActivateAbility(class UMarvelBaseAbilitySystemComponent* InAbilitySystemComponent, int32 AbilityID);
	static bool CanBeCollideKnockDown(class AActor* Target, const int32 InKnockDownBuffID, class AMarvelBaseCharacter* Source, class UGameplayAbility* SourceAbility, bool bDamageTarget, bool bDamageSource);
	static bool CanMakeUpAmmo(class AMarvelBaseCharacter* Character, EAmmoClipType AmmoClip);
	static void CapsuleTraceMulti_AbilityTarget(class UObject* WorldContextObject, class AActor* Source, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FRotator& Orientation, struct FMarvelAbilityTargetFilter& Filter, const struct FOtherFilterParameter& Parameters, const struct FOcclusionParameter& Occlusion, TArray<struct FHitResult>* OutHits, EDrawDebugTrace DrawDebugType);
	static bool CapsuleTraceSingle_AbilityTarget(class UObject* WorldContextObject, class AActor* Source, const struct FVector& Start, const struct FVector& End, float Radius, float HalfHeight, const struct FRotator& Orientation, bool bClosest, struct FMarvelAbilityTargetFilter& Filter, const struct FOtherFilterParameter& Parameters, const struct FOcclusionParameter& Occlusion, struct FHitResult* OutHit, EDrawDebugTrace DrawDebugType);
	static bool CharacterCheckLevelMovablePenetration(class ACharacter* InCharacter, TArray<struct FHitResult>* OutHits, struct FVector* OutDirection, class UPrimitiveComponent* BaseComponentToIgnore);
	static void CharacterMoveIgnoreActorAdd(class AMarvelBaseCharacter* SourceCharacter, class AMarvelBaseCharacter* TargetCharacter);
	static void CharacterMoveIgnoreActorRemove(class AMarvelBaseCharacter* SourceCharacter, class AMarvelBaseCharacter* TargetCharacter);
	static bool CheckActiveGameplayEffectHandleEqual(struct FActiveGameplayEffectHandle& Handle, struct FActiveGameplayEffectHandle& Handle1);
	static bool CheckActiveGameplayEffectIsValid(struct FActiveGameplayEffectHandle& Handle);
	static struct FGameplayAttribute CheckAttribute(const struct FGameplayTag& DataTag);
	static struct FGameplayAttribute CheckMaxAttribute(const struct FGameplayTag& DataTag);
	static void ClearAbilityCacheData(const class UObject* WOC);
	static struct FGameplayTagContainer CreateTagContainerFromNameArray(const TArray<class FName>& TagNames);
	static TArray<struct FHitResult> DebugGetAimAllHits(class APawn* InPawn, float Length);
	static void DebugPrintTargetFilterFlags(const TArray<class UPrimitiveComponent*>& TargetComps);
	static int32 EffectContextGetInstigatorUID(const struct FGameplayEffectContextHandle& EffectContext);
	static void ExecuteDynamicCustomCueEvent(class AActor* TargetActor, const TDelegate<void()>& Delegate, bool bIsSecondary);
	static void ExecuteGameplayCueLocal(class AActor* TargetActor, const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& Parameters);
	static void ExecuteSecondaryGameplayCueLocal(class AActor* TargetActor, const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& Parameters);
	static bool FindActorNearestPlacingLocation(struct FVector* OutLocation, class UActorComponent* InComponent, const struct FVector& LocationXY, float TraceMinZ, float TraceMaxZ, bool bIgnorePawn, EDrawDebugTrace DrawDebugType, float DrawDebugTime);
	static int32 FixImpactPointWhileStartPenetrating(struct FHitResult& HitResult);
	static void ForceChangeProjectileInfo(class AMarvelAbilityTargetActor_Projectile* Projectile, struct FProjectileForceChangedInfo& InOutChangeParam, bool bSetOldInfo);
	static class FString GenerateUniqueID();
	static class FString GetAbilityActivationInfoPredictionKey(class UMarvelGameplayAbility* AbilityActivation);
	static float GetAbilityBuffDuration(int32 BuffSpecId);
	static class UMarvelBaseGameplayAbility* GetAbilityByTimelineContext(const struct FTimelineNotifyContext& TimelineContext);
	static struct FCachedAbilityData GetAbilityCacheData(const class UMarvelGameplayAbility* InAbility);
	static float GetAbilityCooldownDuration(int32 AbilityID);
	static struct FGameplayTagContainer GetAbilityCooldownTags(class UMarvelGameplayAbility* Ability);
	static float GetAbilityCostSaveValue(const class UMarvelGameplayAbility* InAbility);
	static int32 GetAbilityIDByEffectSpec(const struct FGameplayEffectSpec& GameplayEffectSpec);
	static EMarvelAbilityStage GetAbilityStage(class UMarvelGameplayAbility* InAbility);
	static class UMarvelAbilitySystemGlobals* GetAbilitySystemGlobals();
	static class FString GetAbilitySystemScopedPredictionKey(class AMarvelBaseCharacter* AbilityOwner);
	static struct FVector GetAbilityTargetLocation(const struct FVector& CameraLocation, const struct FVector& CameraForward, const struct FVector& ActorLocation, float ActorToTargetDist);
	static class UAbilityTargetMgmtSys* GetAbilityTargetMgmtSys(const class UObject* WorldContextObject);
	static class UAnimTimeline* GetAbilityTimeline(int32 AbilityID, int32 Index_0);
	static TArray<struct FGameplayAbilitySpec> GetActivatableAbilitiesByCharacter(class AMarvelBaseCharacter* Owner);
	static void GetActiveAbilitiesWithOwnedTags(class UAbilitySystemComponent* AbilityComponent, const struct FGameplayTagContainer& TagContainer, bool ExactMatch, TArray<class UGameplayAbility*>* ActiveAbilities);
	static int32 GetActiveEffectCountWithTags(class UAbilitySystemComponent* Target, const struct FGameplayTagContainer& TagContainer);
	static TArray<struct FActiveGameplayEffectHandle> GetActiveEffectHandles(class UAbilitySystemComponent* Target, const struct FGameplayTagContainer& HasGrantTag);
	static class FString GetActiveEffectHandleToString(struct FActiveGameplayEffectHandle& Handle);
	static class AActor* GetActiveEffectInstigator(struct FActiveGameplayEffect& ActiveEffect);
	static float GetActiveEffectMagnitudeByCaller(struct FActiveGameplayEffectHandle& Handle, const struct FGameplayTag& DataTag);
	static struct FActiveGameplayEffect GetActiveGameplayEffectByBuffID(int32 BuffID, class UAbilitySystemComponent* Target);
	static struct FActiveGameplayEffectHandle GetActiveGameplayEffectHandle(struct FActiveGameplayEffect& Effect);
	static struct FActiveGameplayEffectHandle GetActiveGameplayEffectHandleByBuffID(int32 BuffID, class UAbilitySystemComponent* Target);
	static void GetActiveGameplayEffectSpecsWithAssetTags(class UAbilitySystemComponent* AbilityComponent, const struct FGameplayTagContainer& TagContainer, bool ExactMatch, TArray<struct FGameplayEffectSpec>* EffectsSpec);
	static void GetActiveGameplayEffectSpecsWithGrantedTags(class UAbilitySystemComponent* AbilityComponent, const struct FGameplayTagContainer& TagContainer, bool ExactMatch, TArray<struct FGameplayEffectSpec>* EffectsSpec);
	static class UGameplayAbility* GetActiveGrantedAbilityByBuffID(int32 BuffID, class UAbilitySystemComponent* Target, TSubclassOf<class UGameplayAbility> AbilityClassFilter);
	static class FString GetActorDestroyReasonString(ETargetActorDestroyReason DestroyReason);
	static TArray<struct FGameplayTag> GetActorOwnedGameplayTagArr(class AActor* InActor);
	static void GetActorOwnedGameplayTags(class AActor* InActor, struct FGameplayTagContainer* OutTagContainer);
	static void GetAimDirection(class AMarvelBaseCharacter* OriginCharacter, const struct FVector& OriginPosition, struct FVector* AimDirection, float CheckLength, EAimTargetType CheckType);
	static struct FVector GetAimLocation(class AActor* EvaluateActor, const struct FVector& AnchorStart, const struct FVector& CameraLocation, const struct FRotator& CameraRotation, const struct FMarvelAbilityTraceContext& InTraceContext, float MaxAimLength);
	static void GetAllAbilityBindKey(class UMarvelGameplayAbility* InAbility, TArray<struct FKey>* OutMappings);
	static TArray<struct FGameplayEffectSpec> GetAllActiveGameplayEffectSpecs(class UAbilitySystemComponent* TargetAbilityComponent);
	static TArray<struct FGameplayEffectSpec> GetAllBuffSpecFromId(int32 BuffID, class UAbilitySystemComponent* Target);
	static TArray<struct FHitResult> GetAllHitResults(const struct FGameplayAbilityTargetDataHandle& TargetData);
	static struct FGameplayAttribute GetAmmoAttribute(EAmmoClipType AmmoClip);
	static EAmmoClipType GetAmmoClipType(const struct FGameplayAttribute& AmmoAttribute);
	static EAmmoClipType GetAmmoClipTypeByTag(const struct FGameplayTag& InTag);
	static const struct FGameplayTag GetAmmoClipTypeTag(EAmmoClipType AmmoClip);
	static TSubclassOf<class UGameplayEffect> GetAmmoCostEffectClass(EAmmoClipType AmmoClip);
	static bool GetAreAbilityTagsBlocked(class UAbilitySystemComponent* ASC, const struct FGameplayTagContainer& BlockTags);
	static struct FGameplayAttribute GetAttributeByEnum(EMarvelAttributeType AttrType);
	static struct FAttributeModifierParameter GetAttributeModifierParameter(const struct FAttributeModifierHandle& ModifierParameterHandle);
	static class AActor* GetBuffEffectCauser(int32 BuffID, class UAbilitySystemComponent* Target, class UAbilitySystemComponent* Source);
	static class AActor* GetBuffInstigator(int32 BuffID, class UAbilitySystemComponent* Target, class UAbilitySystemComponent* Source);
	static struct FGameplayEffectSpec GetBuffSpec(int32 BuffID, class UAbilitySystemComponent* Target, class UAbilitySystemComponent* Source);
	static int32 GetBuffStackNumFromBuffID(int32 BuffID, class UAbilitySystemComponent* Target);
	static uint8 GetCapsuleComponentMoveIgnoreMask(class UCapsuleComponent* Capsule);
	static uint8 GetCharacterAllyMaskFilter(class AMarvelBaseCharacter* Character);
	static EStrikePartType GetCharacterStrikePartName(const struct FHitResult& HitResult);
	static struct FGameplayAbilitySpecHandle GetCurrentAbilitySpecHandle(class UGameplayAbility* Ability);
	static float GetCurrentAmmoWithMode(class AMarvelBaseCharacter* Character, EAmmoClipType AmmoClip);
	static class UMarveSculptConfigComponent* GetCurrentSculptConfigComponent(class AMarvelBaseCharacter* InMarvelCharacter);
	static TArray<class FString> GetDataTableColumnAsString_Flags(const class UDataTable* DataTable, class FName PropertyName);
	static class UDataTable* GetDataTableFromName(class FName TableName);
	static class FString GetDebugStringFromAttributeModifierParam(const struct FAttributeModifierParameter& ModifierParam);
	static const class UGameplayAbility* GetEffect_Ability(const struct FGameplayEffectSpecStackHandle& SpecStackHandle);
	static const class UGameplayEffect* GetEffect_Def(const struct FGameplayEffectSpecStackHandle& SpecStackHandle);
	static struct FMarvelTargetActorGenerateInfo GetEffect_GenerateInfo(const struct FGameplayEffectSpecStackHandle& SpecStackHandle);
	static int32 GetEffect_InstanceId(const struct FGameplayEffectSpecStackHandle& SpecStackHandle);
	static struct FGameplayTagContainer GetEffectAssetTagsByEffectSpec(const struct FGameplayEffectSpec& GameplayEffectSpec);
	static struct FGameplayTagContainer GetEffectGrantedTagsByEffectSpec(const struct FGameplayEffectSpec& GameplayEffectSpec);
	static TArray<class AActor*> GetEffectInstigatorsByGrantedTag(class AActor* Target, const struct FGameplayTag& InGrantedTag);
	static float GetFloatAttributeByEnum(const class AActor* Actor, EMarvelAttributeType AttrType);
	static class UMarvelGameplayAbility* GetGameplayAbilityInstance(class UMarvelBaseAbilitySystemComponent* AbilityComponent, int32 AbilityID);
	static struct FGameplayAbilitySpec GetGameplayAbilitySpec(class UMarvelBaseAbilitySystemComponent* Target, int32 AbilityID);
	static TArray<class AActor*> GetGameplayActorsByID(class UMarvelBaseAbilitySystemComponent* ASC, int32 TargetId, ETargetActorType TargetType);
	static struct FGameplayEffectSpec GetGameplayEffectSpecByEffectHandle(const struct FGameplayEffectSpecHandle& Handle);
	static struct FGameplayEffectSpec GetGameplayEffectSpecByHandle(struct FActiveGameplayEffectHandle& Handle);
	static int32 GetGameplayTagCount(class UAbilitySystemComponent* Target, const struct FGameplayTag& Tag);
	static TArray<class FString> GetGlobalActiveGameplayEffectHandles();
	static float GetGlobalEffectPeriod();
	static class UGameplayAbility* GetGrantedAbilityByBuffID(int32 BuffID, class UAbilitySystemComponent* Target, TSubclassOf<class UGameplayAbility> AbilityClassFilter);
	static class UGameplayAbility* GetGrantedAbilityByBuffSpec(const struct FGameplayEffectSpec& BuffSpec, class UAbilitySystemComponent* Target, TSubclassOf<class UGameplayAbility> AbilityClassFilter);
	static struct FTransform GetHeadSocketTransform(class ACharacter* InCharacter);
	static int32 GetHeroSculptID(const class AMarvelBaseCharacter* MarvelBaseCharacter);
	static int32 GetInstigatorUIDByEffectSpec(const struct FGameplayEffectSpec& GameplayEffectSpec);
	static class FName GetLeftHandSocketName();
	static struct FTransform GetLeftHandSocketTransform(class ACharacter* InCharacter);
	static class UMarvelBaseAbilitySystemComponent* GetMarvelAbilitySystemComponent(class AActor* InActor);
	static class UMarvelAbilitySystemGlobals* GetMarvelAbilitySystemGlobals();
	static class UMarvelAgentHandleCom* GetMarvelAgentHandleComponent(class APawn* Owner, bool bFirstPlay);
	static void GetMarvelAttachChildCharacters(class AActor* InActor, TArray<class AMarvelBaseCharacter*>* OutCharacters);
	static class AMarvelBaseCharacter* GetMarvelAttachParentCharacter(class AActor* InActor);
	static class UMarvelGameInstance* GetMarvelGameInstance(const class UObject* WorldContextObject);
	static class AMarvelGameState* GetMarvelGameState(const class UObject* WorldContextObject);
	static class UMarvelTickFunctionSubSystem* GetMarvelTickFunctionSubSystem(const class UObject* WorldContextObject);
	static struct FGameplayAttribute GetMaxAmmoAttribute(EAmmoClipType AmmoClip);
	static struct FGameplayAttribute GetMaxAttribute(EMarvelAttributeType AttrType);
	static float GetModifiedAttributeMagnitude(const struct FActiveGameplayEffectHandle& Handle, const struct FGameplayAttribute& Attribute);
	static class FString GetModifierParam_ActivateKey(const struct FAttributeModifierHandle& ModifierParameterHandle);
	static struct FGameplayTagContainer GetModifierParam_AssetTag(const struct FAttributeModifierHandle& ModifierParameterHandle);
	static struct FGameplayAttribute GetModifierParam_Attribute(const struct FAttributeModifierHandle& ModifierParameterHandle);
	static int32 GetModifierParam_bFakeModifier(const struct FAttributeModifierHandle& ModifierParameterHandle);
	static int32 GetModifierParam_bTerrainKill(const struct FAttributeModifierHandle& ModifierParameterHandle);
	static class AActor* GetModifierParam_Causer(const struct FAttributeModifierHandle& ModifierParameterHandle);
	static struct FCharacterDeathInfo GetModifierParam_DeathInfo(const struct FAttributeModifierHandle& ModifierParameterHandle);
	static struct FHitResult GetModifierParam_EffectCauserHitResult(const struct FAttributeModifierHandle& ModifierParameterHandle);
	static int32 GetModifierParam_EffectSpecID(const struct FAttributeModifierHandle& ModifierParameterHandle);
	static struct FGameplayTagContainer GetModifierParam_GrantedTag(const struct FAttributeModifierHandle& ModifierParameterHandle);
	static class AActor* GetModifierParam_Instigator(const struct FAttributeModifierHandle& ModifierParameterHandle);
	static float GetModifierParam_PreSpecDeltaPer(const struct FAttributeModifierHandle& ModifierParameterHandle);
	static float GetModifierParam_PreSpecDeltaValue(const struct FAttributeModifierHandle& ModifierParameterHandle);
	static float GetModifierParam_RealDeltaValue(const struct FAttributeModifierHandle& ModifierParameterHandle);
	static int32 GetModifierParam_SourceAbilityID(const struct FAttributeModifierHandle& ModifierParameterHandle);
	static int32 GetModifierParam_SourceInstigatorUID(const struct FAttributeModifierHandle& ModifierParameterHandle);
	static class AActor* GetModifierParam_Target(const struct FAttributeModifierHandle& ModifierParameterHandle);
	static int32 GetModifierParam_TargetActorType(const struct FAttributeModifierHandle& ModifierParameterHandle);
	static struct FActiveGameplayEffectHandle GetModifierParam_TargetModifiedEffectHandle(const struct FAttributeModifierHandle& ModifierParameterHandle);
	static int32 GetModifierParam_TargetUID(const struct FAttributeModifierHandle& ModifierParameterHandle);
	static bool GetNotTreatMaxAttributeValueByBuffId(int32 BuffID, struct FGameplayAttribute* OutAttribute, float* OutMaxAttributeValue);
	static TArray<float> GetOneBuffTimeRemainingAndDuration(int32 BuffID, class UAbilitySystemComponent* Target, class UAbilitySystemComponent* Source, bool bToFindLongest);
	static TArray<struct FGameplayTag> GetOwnedGameplayTags(class UAbilitySystemComponent* ASC);
	static float GetProjectileAttachedScopesDamage(const int32 ProjectileID);
	static class FName GetRightHandSocketName();
	static struct FTransform GetRightHandSocketTransform(class ACharacter* InCharacter);
	static class UMarvelSummonedComponent* GetSummonedComp(class AActor* SummonerActor);
	static bool GetTotalHealthCurAndMax(const class AActor* InActor, float* TotalHpCur, float* TotalHpMax);
	static int32 GetUIDByAbilityOwner(class AMarvelBaseCharacter* AbilityOwner);
	static class UMarvelGameplayAbility* GetUltimateAbility(class AMarvelBaseCharacter* TargetCharacter);
	static bool HasAuthorityOrPredictionKey(const class UGameplayAbility* InOwnerAbility);
	static bool HasBuffSpec(int32 BuffID, class UAbilitySystemComponent* Target, class UAbilitySystemComponent* Source);
	static bool HasBuffSpecFromEnemy(class UAbilitySystemComponent* Target);
	static bool HasEffectTemplate(int32 EffectID, class UAbilitySystemComponent* Target, class UAbilitySystemComponent* Source);
	static bool HasGameplayTag(const struct FGameplayTagContainer& TagContainer, const struct FGameplayTag& Tag);
	static int32 InputActionToInputID(class UInputAction* InputAction);
	static bool IsAbilityBelongToCurrentSculpt(const class UMarvelGameplayAbility* InAbility);
	static bool IsAbilityCanBeCanceled(class UGameplayAbility* InAbility, EGACancelType InCancelType);
	static bool IsAbilityIgnoreActivatedLog(class UGameplayAbility* InAbility);
	static bool IsAbilitySpecInputPressed(class UMarvelGameplayAbility* InAbility);
	static bool IsActiveGameplayEffectHasAssetTag(class UAbilitySystemComponent* Target, const struct FActiveGameplayEffectHandle& Handle, const struct FGameplayTag& Tag);
	static bool IsActiveGameplayEffectHasTag(class UAbilitySystemComponent* Target, const struct FActiveGameplayEffectHandle& Handle, const struct FGameplayTag& Tag);
	static bool IsActorValidAbilityTarget_Filter(class AActor* Source, class AActor* InActor, const struct FMarvelTraceRule& TraceRule);
	static bool IsAI(class UGameplayAbility* OwnerAbility);
	static bool IsCharacterHasAnyGameplayTag(class AActor* AbilityOwner, const struct FGameplayTagContainer& GameplayTagContainer);
	static bool IsCharacterHasGameplayTag(class AMarvelBaseCharacter* AbilityOwner, const struct FGameplayTag& TargetTag);
	static bool IsCollisionPawn(const struct FHitResult& InHitResult);
	static bool IsCombatWorld(const class UWorld* InWorld);
	static bool IsDemoNetDriver_Playing(class UWorld* InWorld);
	static bool IsEnemyOfTagInstigator(class AActor* SourceActor, class AActor* TargetActor, const struct FGameplayTag& TargetTag);
	static bool IsFullOfEnergy(const class AActor* InActor);
	static bool IsFullOfHealth(const class AActor* InActor);
	static bool IsHitResultValidAbilityTarget_Filter(class AActor* Source, const struct FHitResult& InHit, const struct FMarvelTraceRule& TraceRule);
	static bool IsHitSourceInFrontOfTarget(const class APawn* Target, const struct FHitResult& Hit);
	static bool IsInstigatorOfGrantedTag(class AActor* SourceActor, class AActor* TargetActor, const struct FGameplayTag& TargetTag);
	static bool IsJarvisDemoNetDriver_Playing(class UWorld* InWorld);
	static bool IsMarvelCharacterAttachedToOther(class AActor* InActor);
	static bool IsNearDeath(const class AActor* InActor, float Value);
	static bool IsNetAuthorityOrPredictingClient(const class UGameplayAbility* InOwnerAbility);
	static bool IsPackagedRuntime();
	static bool IsPortalBlocked_Loc2Loc(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius);
	static bool IsPredictingClient(const class UGameplayAbility* InOwnerAbility);
	static bool IsSceneBlocked_Actor2Actor(class AActor* Source, class AActor* Target);
	static bool IsUltimateAbility(class UGameplayAbility* InAbility);
	static bool K2_CanApplyGameplayBuffSpecToTarget(int32 BuffID, class UAbilitySystemComponent* Source, class UAbilitySystemComponent* Target, class AActor* Causer, class UGameplayAbility* SourceAbility);
	static bool K2_IsValidAbilityTarget_Occlusion(class AActor* Source, class AActor* InActor, const struct FOcclusionParameter& Occlusion, const struct FGameplayTag& TraceType);
	static void LineTraceMulti_AbilityTarget(class UObject* WorldContextObject, class AActor* Source, const struct FVector& Start, const struct FVector& End, struct FMarvelAbilityTargetFilter& Filter, struct FOtherFilterParameter& Parameters, const struct FOcclusionParameter& Occlusion, TArray<struct FHitResult>* OutHits, EDrawDebugTrace DrawDebugType);
	static void LineTraceSingle_AbilityTarget(class UObject* WorldContextObject, class AActor* Source, const struct FVector& Start, const struct FVector& End, bool bClosest, struct FMarvelAbilityTargetFilter& Filter, struct FOtherFilterParameter& Parameters, const struct FOcclusionParameter& Occlusion, struct FHitResult* OutHit, EDrawDebugTrace DrawDebugType);
	static class UClass* LoadCommonEffect(int32 BuffID);
	static struct FGameplayAbilityTargetDataHandle MakeDirectionTargetData(const struct FVector& Direction);
	static struct FGameplayEffectContextHandle MakeEffectContext();
	static struct FGameplayAbilityTargetDataHandle MakeLocationTargetData(const struct FVector& Location);
	static TDelegate<void(class AActor* InSourceAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)> MarvelBindAttributeChanged(class UMarvelBaseAbilitySystemComponent* InAbilitySystemComponent, const struct FGameplayAttribute& InAttribute, const TDelegate<void(class AActor* InSourceAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)>& OnAttributeChanged);
	static TDelegate<void(class AActor* InSourceAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)> MarvelBindAttributeChangedByEnum(class UMarvelBaseAbilitySystemComponent* InAbilitySystemComponent, const EMarvelAttributeType& InAttributeType, const TDelegate<void(class AActor* InSourceAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)>& OnAttributeChanged);
	static TDelegate<void(struct FOnAttributeChangeDataExtend& AttributeChangeData)> MarvelBindAttributeChangedByEnumData(class UMarvelBaseAbilitySystemComponent* InAbilitySystemComponent, const EMarvelAttributeType& InAttributeType, const TDelegate<void(struct FOnAttributeChangeDataExtend& AttributeChangeData)>& OnAttributeChanged);
	static TDelegate<void(struct FOnAttributeChangeDataExtend& AttributeChangeData)> MarvelBindAttributeChangedData(class UMarvelBaseAbilitySystemComponent* InAbilitySystemComponent, const struct FGameplayAttribute& InAttribute, const TDelegate<void(struct FOnAttributeChangeDataExtend& AttributeChangeData)>& OnAttributeChanged);
	static TDelegate<void(struct FGameplayTag& InTag, bool bExists)> MarvelBindTagsUpdated(class UMarvelBaseAbilitySystemComponent* InAbilitySystemComponent, const struct FGameplayTagContainer& InTagContainer, const TDelegate<void(struct FGameplayTag& InTag, bool bExists)>& OnTagUpdated, bool bBind, bool bExactMatch);
	static TDelegate<void(struct FGameplayTag& InTag, bool bExists)> MarvelBindTagUpdated(class UMarvelBaseAbilitySystemComponent* InAbilitySystemComponent, const struct FGameplayTag& InTag, const TDelegate<void(struct FGameplayTag& InTag, bool bExists)>& OnTagUpdated, bool bBind, bool bExactMatch);
	static void MarvelUnBindAttributeChanged(class UMarvelBaseAbilitySystemComponent* InAbilitySystemComponent, const struct FGameplayAttribute& InAttribute, const TDelegate<void(class AActor* InSourceAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)>& OnAttributeChanged);
	static void MarvelUnBindAttributeChangedByEnum(class UMarvelBaseAbilitySystemComponent* InAbilitySystemComponent, const EMarvelAttributeType& InAttributeType, const TDelegate<void(class AActor* InSourceAvatar, struct FAttributeModifierHandle& ModifierParameterHandle)>& OnAttributeChanged);
	static void MarvelUnBindAttributeChangedByEnumData(class UMarvelBaseAbilitySystemComponent* InAbilitySystemComponent, const EMarvelAttributeType& InAttributeType, const TDelegate<void(struct FOnAttributeChangeDataExtend& AttributeChangeData)>& OnAttributeChanged);
	static void MarvelUnBindAttributeChangedData(class UMarvelBaseAbilitySystemComponent* InAbilitySystemComponent, const struct FGameplayAttribute& InAttribute, const TDelegate<void(struct FOnAttributeChangeDataExtend& AttributeChangeData)>& OnAttributeChanged);
	static class FString NetRoleToString(const ENetRole Role);
	static void PrintActivatingAbilityContextHandle(class AActor* InActor, int32 InAbilityId);
	static struct FVector RandomUnitVectorInConeDegreesSeed(class UMarvelBaseGameplayAbility* OwningAbility, const struct FVector& ConeDir, float ConeHalfAngleInRadians, int32 Index_0);
	static void ReinitAttribute(class UAbilitySystemComponent* AbilityComponent, const struct FGameplayTag& DataTag, float NewVal);
	static bool RemoveActiveEffectWithAssetTags(class UAbilitySystemComponent* Target, const struct FGameplayTagContainer& WithTags, class UAbilitySystemComponent* Source, int32 RemoveLayerNum, bool bAssetTagWithGrantTags);
	static void RemoveAllActiveGameplayEffects(class UMarvelBaseAbilitySystemComponent* AbilitySystemCom);
	static void RemoveAllEnemyActiveGameplayEffects(class AMarvelBaseCharacter* AbilityOwner);
	static void RemoveAllOtherActiveGameplayEffects(class AMarvelBaseCharacter* AbilityOwner);
	static bool RemoveBuffSpec(int32 BuffID, class UAbilitySystemComponent* Target, class UAbilitySystemComponent* Source, int32 RemoveLayerNum);
	static void RemoveGameplayCueLocal(class AActor* TargetActor, const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& Parameters);
	static void RemoveGameplayTagFromTarget(class UAbilitySystemComponent* ASC, const struct FGameplayTag& Tag, int32 Count);
	static int32 RemoveNeedlessHitResultsByDistance(TArray<struct FHitResult>& HitResults);
	static void RemoveNihilityBuff(class UAbilitySystemComponent* InASC);
	static void RemoveNihilityBuffForContinuousAbility(const class UGameplayAbility* InAbility);
	static void RemoveReplicationGameplayTag(class UAbilitySystemComponent* Target, const struct FGameplayTag& Tag, bool bLocalPredictable);
	static void RemoveReplicationGameplayTags(class UAbilitySystemComponent* ASC, const struct FGameplayTagContainer& GameplayTags);
	static void ResetBuffTime(int32 BuffID, class UAbilitySystemComponent* Target, class UAbilitySystemComponent* Source, float NewTime);
	static void RestartActiveGameplayEffectDuration(const struct FActiveGameplayEffectHandle& Handle);
	static void RestartActiveGameplayEffectStartTime(const struct FActiveGameplayEffectHandle& Handle, float StartTimeDiff);
	static void RestartGameplayEffectTime(struct FActiveGameplayEffectHandle& Handle, float NewTime);
	static void SetAbilityIgnoreActivatedLog(class UGameplayAbility* InAbility, bool bIgnore);
	static void SetAbilityTaskIsWithAbilityEnd(class UAbilityTask* AbilityTask, bool bIsWithAbility);
	static void SetActiveEffectByCallerMagnitude(struct FActiveGameplayEffectHandle& Handle, const struct FGameplayTag& DataTag, float NetModifierMagnitude);
	static void SetBlockAbilitiesWithTags(class UAbilitySystemComponent* ASC, const struct FGameplayTagContainer& BlockTags, const bool bIsBlocked);
	static void SetBlockAbilityWithInputBinds(class UAbilitySystemComponent* ASC, EAbilityInputBinds InputBinds, const bool bIsBlocked);
	static void SetCancelAllowedPolicy(class UGameplayAbility* InAbility, int32 InPolicy);
	static void SetCancelAllowedPolicyDirect(class UGameplayAbility* InAbility, EGACancelType InPolicy);
	static void SetCapsuleComponentMoveIgnoreMask(class UCapsuleComponent* Capsule, uint8 Mask);
	static bool SetCurrentAmmoWithMode(class AMarvelBaseCharacter* Character, EAmmoClipType AmmoClip, float TargetValue);
	static void SetFloatAttributeByEnum(class AMarvelBaseCharacter* InCharacter, EMarvelAttributeType AttrType, float NewValue);
	static void SetNumericAttributeByEnum(class AActor* Actor, EMarvelAttributeType AttrType, float NewValue, bool bWithBase);
	static bool SimulateMoveComponentCollionHit(const class AMarvelBaseCharacter* Character, const class USceneComponent* RootComponent, class UPrimitiveComponent* MoveCom, float DeltaTime, struct FHitResult* OutHit);
	static class UMarvelAbilityTask_Projectile* SpawnProjectileTask(class UGameplayAbility* OwnerAbility, class AActor* SourceActor, int32 ProjectileID, const struct FMarvelAbilitySocketInfo& SocketInfo, bool bShouldPredict, const struct FMarvelAgentOriginInfo& AgentOriginInfo);
	static class UMarvelAbilityTask_Projectile* SpawnProjectileTaskEx(class UGameplayAbility* OwnerAbility, class AActor* SourceActor, int32 ProjectileID, const struct FMarvelAbilitySourceLocationInfo& LocationInfo, bool bShouldPredict);
	static class UMarvelAbilityTask_Projectile* SpawnScopeTask(class UGameplayAbility* OwnerAbility, class AActor* SourceActor, int32 ScopeId, const struct FMarvelAbilitySocketInfo& SocketInfo, bool bShouldPredict, const struct FMarvelAgentOriginInfo& AgentOriginInfo);
	static class UMarvelAbilityTask_SpawnSummoner* SpawnSummonedTask(class UGameplayAbility* OwnerAbility, class AActor* SourceActor, int32 SummonerId, const struct FMarvelAbilitySocketInfo& SocketInfo, bool bShouldPredict, class AActor* InQuoteScope);
	static void SphereTraceMulti_AbilityTarget(class UObject* WorldContextObject, class AActor* Source, const struct FVector& Start, const struct FVector& End, float Radius, struct FMarvelAbilityTargetFilter& Filter, const struct FOtherFilterParameter& Parameters, const struct FOcclusionParameter& Occlusion, TArray<struct FHitResult>* OutHits, EDrawDebugTrace DrawDebugType);
	static bool SphereTraceSingle_AbilityTarget(class UObject* WorldContextObject, class AActor* Source, const struct FVector& Start, const struct FVector& End, float Radius, bool bClosest, struct FMarvelAbilityTargetFilter& Filter, const struct FOtherFilterParameter& Parameters, const struct FOcclusionParameter& Occlusion, struct FHitResult* OutHit, EDrawDebugTrace DrawDebugType);
	static EAbilityInputBinds ToInputBind(int32 InputID);
	static void TriggerAbilityStateChange(class UMarvelGameplayAbility* InAbility);
	static bool UpdateAbilityEngagedCharge(class UMarvelBaseGameplayAbility* Ability, int32 InValue, bool bIsAdditive);
	static float UpdateDurationEffectModifier(struct FActiveGameplayEffectHandle& Handle, const struct FGameplayAttribute& Attribute, float EvaluatedData, float MaxMagnitude);
	static class UMarvelAbilityTask_WaitAbilityTargetData* WaitTargetData_CustomPawnPlacement(class UGameplayAbility* OwnerAbility, TSubclassOf<class AMarvelAbilityTargetActor_PawnPlacement> TargetActorClass, const struct FFindGroundParam& TraceParams, const struct FGameplayTag& PlacementCueTag);
	static class UMarvelAbilityTask_WaitAbilityTargetData* WaitTargetData_PawnPlacement(class UGameplayAbility* OwnerAbility, const struct FFindGroundParam& TraceParams, const struct FGameplayTag& PlacementCueTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilitySystemLibrary">();
	}
	static class UMarvelAbilitySystemLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilitySystemLibrary>();
	}
};

// Class Marvel.MarvelCueNotify_Laser
// 0x0120 (0x0FE8 - 0x0EC8)
class AMarvelCueNotify_Laser : public AMarvelCueNotify_Loop
{
public:
	bool                                          bUseHitPosParameter;                               // 0x0EC8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAimDirection;                                  // 0x0EC9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_ECA[0x2];                                      // 0x0ECA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   FxParameter;                                       // 0x0ECC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDistaceShowFx;                                  // 0x0ED8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EDC[0x4];                                      // 0x0EDC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFXSystemAsset*                         SceneHitFx;                                        // 0x0EE0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemAsset*                         CharacterHitFx;                                    // 0x0EE8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitFxHeight;                                       // 0x0EF0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayAudioLaserHitChar;                            // 0x0EF4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPlayAudioLaserHitScene;                           // 0x0EF5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EF6[0x2];                                      // 0x0EF6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LaserHitAudio;                                     // 0x0EF8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LaserLoopAudio;                                    // 0x0EFC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x0F00(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelAbilityTargetActor_Scope*        OwnerScope;                                        // 0x0F08(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     ScopeHitResult;                                    // 0x0F10(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UFXSystemComponent*                     InstanceSceneHitFXComponent;                       // 0x0F20(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UFXSystemComponent*                     InstanceCharacterHitFXComponent;                   // 0x0F28(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F30[0x38];                                     // 0x0F30(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraComponent*                      NS_Laser;                                          // 0x0F68(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   LaserSocketName;                                   // 0x0F70(0x000C)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F7C[0x4];                                      // 0x0F7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class AActor*, class AOneShotAudioActor*> LaserHitCharAudioMap;                              // 0x0F80(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UPhysicalMaterial>       LastLaserHitMaterial;                              // 0x0FD0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AOneShotAudioActor*                     LaserHitSceneAudioActor;                           // 0x0FD8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AOneShotAudioActor*                     LoopAudioActor;                                    // 0x0FE0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	class USkeletalMeshComponent* GetAttachedMesh();
	struct FVector GetLaserFXDirection();
	float GetLaserFXDistance(const struct FVector& MuzzleLocation);
	void OnTraceHitResult(const TArray<struct FHitResult>& HitResults);
	void ResetLaserFX();
	void UpdateLaserNiagara(class UNiagaraComponent* NiagaraLaserComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_Laser">();
	}
	static class AMarvelCueNotify_Laser* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_Laser>();
	}
};

// Class Marvel.MarvelToolAbilityPyCode
// 0x0050 (0x0088 - 0x0038)
class UMarvelToolAbilityPyCode final : public UPrimaryDataAsset
{
public:
	TMap<class FString, class FString>            PyCodeMaps;                                        // 0x0038(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelToolAbilityPyCode">();
	}
	static class UMarvelToolAbilityPyCode* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelToolAbilityPyCode>();
	}
};

// Class Marvel.MarvelGameplayEffectAmmo3Cost
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectAmmo3Cost final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectAmmo3Cost">();
	}
	static class UMarvelGameplayEffectAmmo3Cost* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectAmmo3Cost>();
	}
};

// Class Marvel.MarvelAbilityTargetActor_Trace
// 0x00B0 (0x07E0 - 0x0730)
class AMarvelAbilityTargetActor_Trace : public AGameplayAbilityTargetActor
{
public:
	uint8                                         Pad_730[0x8];                                      // 0x0730(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BaseSpread;                                        // 0x0738(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimingSpreadMod;                                   // 0x073C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetingSpreadIncrement;                          // 0x0740(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetingSpreadMax;                                // 0x0744(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_748[0x4];                                      // 0x0748(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseAimingSpreadMod;                               // 0x074C(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_74D[0x3];                                      // 0x074D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           AimingTag;                                         // 0x0750(0x000C)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           AimingRemovalTag;                                  // 0x075C(0x000C)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxRange;                                          // 0x0768(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCollisionProfileName                  TraceProfile;                                      // 0x076C(0x000C)(Edit, BlueprintVisible, Config, NoDestructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	bool                                          bTraceAffectsAimPitch;                             // 0x0778(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_779[0x3];                                      // 0x0779(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxHitResultsPerTrace;                             // 0x077C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         NumberOfTraces;                                    // 0x0780(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreBlockingHits;                               // 0x0784(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceFromPlayerViewPoint;                         // 0x0785(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUsePersistentHitResults;                          // 0x0786(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_787[0x1];                                      // 0x0787(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0788(0x000C)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_794[0x4];                                      // 0x0794(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAudioComponent*                  AudioComponent;                                    // 0x0798(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7A0[0x40];                                     // 0x07A0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ResetSpread();
	void SetDestroyOnConfirmation(bool bInDestroyOnConfirmation);
	void SetShouldProduceTargetDataOnServer(bool bInShouldProduceTargetDataOnServer);
	void SetStartLocation(const struct FGameplayAbilityTargetingLocationInfo& InStartLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTargetActor_Trace">();
	}
	static class AMarvelAbilityTargetActor_Trace* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelAbilityTargetActor_Trace>();
	}
};

// Class Marvel.MarvelAbilityTargetActor_GroundTrace
// 0x0FD0 (0x17B0 - 0x07E0)
class AMarvelAbilityTargetActor_GroundTrace final : public AMarvelAbilityTargetActor_Trace
{
public:
	struct FFindGroundParam                       InParam;                                           // 0x07E0(0x0FD0)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void Configure(const struct FFindGroundParam& TraceParams);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTargetActor_GroundTrace">();
	}
	static class AMarvelAbilityTargetActor_GroundTrace* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelAbilityTargetActor_GroundTrace>();
	}
};

// Class Marvel.MarvelAbilityTargetActor_MultiSphereTrace
// 0x05F0 (0x0D20 - 0x0730)
class AMarvelAbilityTargetActor_MultiSphereTrace final : public AGameplayAbilityTargetActor
{
public:
	uint8                                         Pad_730[0x4];                                      // 0x0730(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxRange;                                          // 0x0734(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0738(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_73C[0x4];                                      // 0x073C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTargetFilter             TargetFilter;                                      // 0x0740(0x0500)(BlueprintVisible, ContainsInstancedReference, ExposeOnSpawn, NativeAccessSpecifierPublic)
	struct FOtherFilterParameter                  ExtendFilter;                                      // 0x0C40(0x0030)(BlueprintVisible, NoDestructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	struct FOcclusionParameter                    Occlusion;                                         // 0x0C70(0x00B0)(BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTargetActor_MultiSphereTrace">();
	}
	static class AMarvelAbilityTargetActor_MultiSphereTrace* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelAbilityTargetActor_MultiSphereTrace>();
	}
};

// Class Marvel.MarvelAbilityTargetActor_MultiSphereTraceReachOne
// 0x0600 (0x0D30 - 0x0730)
class AMarvelAbilityTargetActor_MultiSphereTraceReachOne final : public AGameplayAbilityTargetActor
{
public:
	uint8                                         Pad_730[0x4];                                      // 0x0730(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxRange;                                          // 0x0734(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Radius;                                            // 0x0738(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_73C[0x4];                                      // 0x073C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTargetFilter             TargetFilter;                                      // 0x0740(0x0500)(BlueprintVisible, ContainsInstancedReference, ExposeOnSpawn, NativeAccessSpecifierPublic)
	struct FOtherFilterParameter                  ExtendFilter;                                      // 0x0C40(0x0030)(BlueprintVisible, NoDestructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	struct FOcclusionParameter                    Occlusion;                                         // 0x0C70(0x00B0)(BlueprintVisible, ExposeOnSpawn, NativeAccessSpecifierPublic)
	bool                                          bClosest;                                          // 0x0D20(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D21[0xF];                                      // 0x0D21(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTargetActor_MultiSphereTraceReachOne">();
	}
	static class AMarvelAbilityTargetActor_MultiSphereTraceReachOne* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelAbilityTargetActor_MultiSphereTraceReachOne>();
	}
};

// Class Marvel.MarvelAbilityTargetActor_PawnPlacement
// 0x1050 (0x1780 - 0x0730)
class AMarvelAbilityTargetActor_PawnPlacement : public AGameplayAbilityTargetActor
{
public:
	uint8                                         Pad_730[0x38];                                     // 0x0730(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SkinID;                                            // 0x0768(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PlacementCueTag;                                   // 0x076C(0x000C)(Edit, BlueprintVisible, Net, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_778[0x8];                                      // 0x0778(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFindGroundParam                       TraceParams;                                       // 0x0780(0x0FD0)(Edit, BlueprintVisible, Net, ContainsInstancedReference, ExposeOnSpawn, NativeAccessSpecifierPublic)
	uint8                                         Pad_1750[0x8];                                     // 0x1750(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EPreviewState                                 VisualizationState;                                // 0x1758(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLoaded;                                         // 0x1759(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_175A[0x2];                                     // 0x175A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetId;                                          // 0x175C(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelActorPoolComponent*              ActorPoolComponent;                                // 0x1760(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeginPlayIdx;                                      // 0x1768(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_176C[0x4];                                     // 0x176C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDeclarationHolder                     DeclarePlayerViewSideHolder;                       // 0x1770(0x0010)(Protected, NativeAccessSpecifierProtected)

public:
	void ActivateActorVisualization();
	void CloseActorVisualization();
	void ConfirmActorVisualization();
	void DestroyActorVisualization();
	class UClass* GetStaticClass();
	void OnActorVisualizationStateChanged();
	void OnPlayerViewSideChanged(EClientPlayerViewSide InViewSide);
	void OnRep_ActorPoolBeginPlayChanged();
	void OnRep_VisualizationState();
	void OpenActorVisualization();
	void RegisterPlayerViewSide();
	void SetActorVisualizationState(EPreviewState NewState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTargetActor_PawnPlacement">();
	}
	static class AMarvelAbilityTargetActor_PawnPlacement* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelAbilityTargetActor_PawnPlacement>();
	}
};

// Class Marvel.MarvelAbilityTask_Adsorb
// 0x6388 (0x6560 - 0x01D8)
class UMarvelAbilityTask_Adsorb final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(struct FAdsorbResult& AdsorbResult)> OnAdsorbResultDispatcher;                          // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              ApplyEffectSuccessDispatcher;                      // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F8[0x8];                                      // 0x01F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAdsorbParam                           AdsorbParam;                                       // 0x0200(0x2EF0)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FTimerHandle                           LoopTraceTimerHandle;                              // 0x30F0(0x0018)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHitResult                             TargetHit;                                         // 0x3108(0x0170)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FHitResult                             VisualHit;                                         // 0x3278(0x0170)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarvelGameplayEffectContainerSpec     AdsorbEffectSpec;                                  // 0x33E8(0x0E90)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarvelGameplayEffectContainerSpec     NotAdsorbEffectSpec;                               // 0x4278(0x0E90)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_5108[0x1458];                                  // 0x5108(0x1458)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_Adsorb* StartAdsorb(class UGameplayAbility* OwningAbility, const struct FAdsorbParam& InAdsorbParam);

	void ApplyAdsorbEffect(const struct FAdsorbResult& InAdsorbResult);
	int32 FindCharacterIndex(const TArray<struct FHitResult>& InTraceResults);
	struct FAdsorbResult GetAdsorbResult();
	bool GetVisualHitLocation(const struct FAdsorbResult& InAdsorbResult, struct FVector* OutHitLocation);
	bool IsBlockedFormOwner(const struct FHitResult& InHitResult, struct FHitResult* OutBlockHit);
	bool IsSameTarget(struct FHitResult* HitResult);
	bool IsTargetNeedToAdsorb();
	void LoopTraceSpec();
	void OnAdsorbResult(const struct FAdsorbResult& InAdsorbResult);
	void SelectTarget(const TArray<struct FHitResult>& InHitResults);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_Adsorb">();
	}
	static class UMarvelAbilityTask_Adsorb* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_Adsorb>();
	}
};

// Class Marvel.MarvelAbilityTask_ApplyRootMotionGlide
// 0x0030 (0x0278 - 0x0248)
class UMarvelAbilityTask_ApplyRootMotionGlide final : public UAbilityTask_ApplyRootMotion_Base
{
public:
	struct FTaskGlideParam                        GlideParam;                                        // 0x0248(0x0030)(Transient, NoDestructor, NativeAccessSpecifierPrivate)

public:
	static class UMarvelAbilityTask_ApplyRootMotionGlide* ApplyRootMotionGlide(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const struct FTaskGlideParam& Param);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_ApplyRootMotionGlide">();
	}
	static class UMarvelAbilityTask_ApplyRootMotionGlide* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_ApplyRootMotionGlide>();
	}
};

// Class Marvel.Widget_Reticle
// 0x0000 (0x03B8 - 0x03B8)
class UWidget_Reticle final : public UUserWidget
{
public:
	void SetAiming(bool bInAiming);
	void SetColor(const struct FLinearColor& InColor);
	void SetSpread(float InDistance, float InRadius);
	void SetSpreadPixel(float InPixelGap);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_Reticle">();
	}
	static class UWidget_Reticle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_Reticle>();
	}
};

// Class Marvel.MarvelAbilityTask_ApplyPinnedMotion
// 0x0340 (0x0588 - 0x0248)
class UMarvelAbilityTask_ApplyPinnedMotion final : public UAbilityTask_ApplyRootMotion_Base
{
public:
	uint8                                         Pad_248[0x18];                                     // 0x0248(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, struct FHitResult& Hit)> OnActorHit;                                        // 0x0260(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EDashStopReason Reason)> OnFinish;                                          // 0x0270(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_280[0x18];                                     // 0x0280(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SourceActor;                                       // 0x0298(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ACharacter*                             TargetActor;                                       // 0x02A0(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Duration;                                          // 0x02A8(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationOffset;                                    // 0x02B0(0x0018)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  TargetGrantedTags;                                 // 0x02C8(0x0068)(BlueprintVisible, BlueprintReadOnly, Net, Transient, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  SourceGrantedTags;                                 // 0x0330(0x0068)(BlueprintVisible, BlueprintReadOnly, Net, Transient, Protected, NativeAccessSpecifierProtected)
	EMovementMode                                 NewMovementMode;                                   // 0x0398(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCheckForward;                                     // 0x0399(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseActorForward;                                  // 0x039A(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseDragForce;                                     // 0x039B(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   DragName;                                          // 0x039C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbilitySystemComponent*                TargetASC;                                         // 0x03A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelCharacterMovementComponent*      TargetMovementComponent;                           // 0x03B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPrimitiveComponent*                    TargetUpdatedComponent;                            // 0x03B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelCharacterMovementComponent*      SourceMovementComponent;                           // 0x03C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPrimitiveComponent*                    SourceUpdatedComponent;                            // 0x03C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3D0[0x20];                                     // 0x03D0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	uint16                                        DragRootMotionSourceID;                            // 0x03F0(0x0002)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3F2[0x2];                                      // 0x03F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastHitWorldTime;                                  // 0x03F4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LastHitImpulse;                                    // 0x03F8(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHitResult                             LastHitResult;                                     // 0x0410(0x0170)(Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_580[0x8];                                      // 0x0580(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_ApplyPinnedMotion* ApplyPinnedMotion(class UGameplayAbility* OwningAbility, class FName InstName, class AActor* InSourceActor, class AActor* InTargetActor, float InDuration, const struct FVector& InLocationOffset, const struct FGameplayTagContainer& InTargetGrantedTags, EMovementMode InNewMovementMode, bool bCheckForward_0, bool bUseActorForward_0, bool bUseDragForce_0, const struct FGameplayTagContainer& InSourceGrantedTags);

	bool ClearForceButKeepMotion();
	void NativeOnCharacterHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void NativeOnCharacterMovementUpdated(float DeltaSeconds, const struct FVector& OldLocation, const struct FVector& OldVelocity);
	void OnTargetActorTagUpdated(const struct FGameplayTag& InTag, bool bInExist);
	void OnTargetTranslatedByPortal(class AMarvelBaseCharacter* Character, class APortalViewActor* Portal);
	void SetTargetLocationAndEnd();
	bool SetToInfiniteDuration();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_ApplyPinnedMotion">();
	}
	static class UMarvelAbilityTask_ApplyPinnedMotion* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_ApplyPinnedMotion>();
	}
};

// Class Marvel.MarvelAbilityTask_ApplyPinnedMotion_V2
// 0x03C0 (0x0608 - 0x0248)
class UMarvelAbilityTask_ApplyPinnedMotion_V2 final : public UAbilityTask_ApplyRootMotion_Base
{
public:
	uint8                                         Pad_248[0x18];                                     // 0x0248(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(EDashStopReason Reason)> OnFinish;                                          // 0x0260(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FMarvelApplyPinnedMotionConfig         Config;                                            // 0x0270(0x0230)(BlueprintVisible, BlueprintReadOnly, Net, Transient, Protected, NativeAccessSpecifierProtected)
	class UMarvelCharacterMovementComponent*      TargetMovementComponent;                           // 0x04A0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A8[0x10];                                     // 0x04A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	EDashStopReason                               Reason;                                            // 0x04B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4B9[0x7];                                      // 0x04B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         AuthorityTaskEndReplicationKey;                    // 0x04C0(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         PredictingClientTaskEndReplicationKey;             // 0x0560(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_600[0x8];                                      // 0x0600(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_ApplyPinnedMotion_V2* ApplyPinnedMotion(class UGameplayAbility* OwningAbility, class FName InstName, const struct FMarvelApplyPinnedMotionConfig& Config_0);

	void ExecuteEndTask(EDashStopReason Reason_0);
	void NativeOnFinish(EDashStopReason InReason);
	void NativeOnGameplayEffectRemoved(const struct FGameplayEffectRemovalInfo& Info);
	void NativeOnSourceHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void NativeOnSourceLanded(const struct FHitResult& Hit);
	void NativeOnTargetHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void NativeOnTargetLanded(const struct FHitResult& Hit);
	void OnAuthorityEffectRemoveCallback();
	void OnLocalPredictClientTaskEndCallback(const struct FGameplayAbilityTargetDataHandle& LocalDataHandle);
	void OnLookAtDelayEnd();
	void OnMergePredictClientTaskEndCallback(const struct FGameplayAbilityTargetDataHandle& RemoteDataHandle, const struct FGameplayAbilityTargetDataHandle& LocalDataHandle);
	void OnTargetTranslatedByPortal(class AMarvelBaseCharacter* Character, class APortalViewActor* Portal);
	void PredictingClientFakeRemove();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_ApplyPinnedMotion_V2">();
	}
	static class UMarvelAbilityTask_ApplyPinnedMotion_V2* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_ApplyPinnedMotion_V2>();
	}
};

// Class Marvel.MarvelAbilityTask_ChargeTask
// 0x0070 (0x0248 - 0x01D8)
class UMarvelAbilityTask_ChargeTask final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(const struct FChargeInfo& ChargeInfo)> OnStopDelegate;                                    // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(const struct FChargeInfo& ChargeInfo)> OnChangeDelegate;                                  // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(const struct FChargeInfo& ChargeInfo)> OnPauseDelegate;                                   // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(const struct FChargeInfo& ChargeInfo)> OnMaxChargeTimeDelegate;                           // 0x0208(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	struct FChargeConfigParam                     ChargeConfigParams;                                // 0x0218(0x0020)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FChargeInfo                            ChargeInfo;                                        // 0x0238(0x000C)(Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bIsPlaying;                                        // 0x0244(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_245[0x3];                                      // 0x0245(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_ChargeTask* ChargeAbilityTask(class UGameplayAbility* OwningAbility, const struct FChargeConfigParam& ChargeParam);

	void BeginCharge();
	void InterruptCharge();
	void OnChargeLevelChangedCallBack();
	void OnMaxChargeTimeCallBack();
	void OnPauseChargeCallBack();
	void OnStopChargeCallBack();
	void PauseCharge();
	void StopCharge();

	struct FChargeConfigParam GetChargeConfig() const;
	struct FChargeInfo GetChargeInfo() const;
	bool IsPlaying() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_ChargeTask">();
	}
	static class UMarvelAbilityTask_ChargeTask* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_ChargeTask>();
	}
};

// Class Marvel.MarvelAbilityTask_ConfirmAndLocalRelease
// 0x0048 (0x0220 - 0x01D8)
class UMarvelAbilityTask_ConfirmAndLocalRelease final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(float TimeHeld)> OnLocalRelease;                                    // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnConfirm;                                         // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnConfirmAndLocalRelease;                          // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         bTestInitialState : 1;                             // 0x0208(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bIsInputReleased : 1;                              // 0x0208(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bIsServerConfirmed : 1;                            // 0x0208(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_209[0x3];                                      // 0x0209(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TaskStartTime;                                     // 0x020C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_210[0x10];                                     // 0x0210(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_ConfirmAndLocalRelease* WaitConfirmAndLocalRelease(class UGameplayAbility* OwningAbility, bool bTestAlreadyReleased);

	void OnConfirmCallback(class UGameplayAbility* InAbility);
	void OnReleaseCallback();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_ConfirmAndLocalRelease">();
	}
	static class UMarvelAbilityTask_ConfirmAndLocalRelease* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_ConfirmAndLocalRelease>();
	}
};

// Class Marvel.MarvelAbilityTask_Dash_Base
// 0x0930 (0x0B78 - 0x0248)
class UMarvelAbilityTask_Dash_Base : public UAbilityTask_ApplyRootMotion_Base
{
public:
	bool                                          bIsRMSAdded;                                       // 0x0248(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMarvelDashType                               DashType;                                          // 0x0249(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bStartDash;                                        // 0x024A(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUpdateDashType;                                   // 0x024B(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_24C[0x4];                                      // 0x024C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldDirection;                                    // 0x0250(0x0018)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Strength;                                          // 0x0268(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Duration;                                          // 0x026C(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsAdditive;                                       // 0x0270(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_271[0x7];                                      // 0x0271(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            StrengthOverTime;                                  // 0x0278(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableGravity;                                    // 0x0280(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_281[0x7];                                      // 0x0281(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DistanceOverTime;                                  // 0x0288(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bProjected;                                        // 0x0290(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bNeedTickUpdateRMSForce;                           // 0x0291(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSimulatedAddRMS;                                  // 0x0292(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSimulatedRemoveRMS;                               // 0x0293(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelRootMotionContext_TargetForce   RootMotionContext;                                 // 0x0298(0x00D0)(Net, Transient, Protected, NativeAccessSpecifierProtected)
	struct FPortalSegments                        MoveToPortalSegments;                              // 0x0368(0x0050)(Protected, NativeAccessSpecifierProtected)
	struct FVector                                MoveToStartLocation;                               // 0x03B8(0x0018)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                MoveToTargetLocation;                              // 0x03D0(0x0018)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRestrictSpeedToExpected;                          // 0x03E8(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3E9[0x7];                                      // 0x03E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           PathOffsetCurve;                                   // 0x03F0(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 MoveToTargetActor;                                 // 0x03F8(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                MoveToTargetLocationOffset;                        // 0x0400(0x0018)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ERootMotionMoveToActorTargetOffsetType        OffsetAlignment;                                   // 0x0418(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDisableDestinationReachedInterrupt;               // 0x0419(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_41A[0x6];                                      // 0x041A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            TimeMappingCurve;                                  // 0x0420(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            TargetLerpSpeedHorizontalCurve;                    // 0x0428(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            TargetLerpSpeedVerticalCurve;                      // 0x0430(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FCapsuleDashInfo                       CapsuleDashInfo;                                   // 0x0438(0x0740)(Net, Transient, NativeAccessSpecifierPublic)

public:
	void OnActorForceChangedByPortal(class APortalViewActor* InPortal);
	void OnLocationActorPortal(const struct FVector& LastPosition, const struct FVector& NewPosition);
	void OnLocationActorTakenLevelTeleport(class AActor* InActor, const struct FVector& OldLocation, const struct FVector& NewLocation);
	void OnRep_DashType();
	void OnRep_MoveToTargetLocation();
	void OnRootMotionTaskFinished(ERootMotionTaskEndReason EndReason);
	void SetRootMotionVelocityEnabled(bool bEnabled);
	void UpdateTarget(const struct FVector& InLocation, class AActor* InLocationActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_Dash_Base">();
	}
	static class UMarvelAbilityTask_Dash_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_Dash_Base>();
	}
};

// Class Marvel.MarvelNotTreatImmunityBlockFallAbility
// 0x0148 (0x1320 - 0x11D8)
class UMarvelNotTreatImmunityBlockFallAbility : public UMarvelAttributeFallBaseAbility
{
public:
	uint8                                         Pad_11D8[0x8];                                     // 0x11D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlockToShieldRatio;                                // 0x11E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11E4[0x4];                                     // 0x11E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  DamageSourceRequire;                               // 0x11E8(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  DamageSourceAssetTagExclude;                       // 0x1250(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  OwnerTagRequire;                                   // 0x12B8(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelNotTreatImmunityBlockFallAbility">();
	}
	static class UMarvelNotTreatImmunityBlockFallAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelNotTreatImmunityBlockFallAbility>();
	}
};

// Class Marvel.MarvelAbilityTask_Dash
// 0x12F0 (0x1E68 - 0x0B78)
class UMarvelAbilityTask_Dash : public UMarvelAbilityTask_Dash_Base
{
public:
	struct FDashAbilityInfo                       DashInfo;                                          // 0x0B78(0x0BA8)(Protected, NativeAccessSpecifierProtected)
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x1720(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASummonedCharacterBase*                 OwnerSummoned;                                     // 0x1728(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelCharacterMovementComponent*      OwnerMovement;                                     // 0x1730(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCharacterCollisionComponent*           OwnerCapsule;                                      // 0x1738(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                DashDirection;                                     // 0x1740(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                TargetLocation;                                    // 0x1758(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 TargetActor;                                       // 0x1770(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   TargetActorSocket;                                 // 0x1778(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1784[0x4];                                     // 0x1784(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetActorOffset;                                 // 0x1788(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                StartLocation;                                     // 0x17A0(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x17B8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         ExtraTraceScopeID;                                 // 0x17C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17CC[0x14];                                    // 0x17CC(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                CustomHitFilterObject;                             // 0x17E0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17E8[0x18];                                    // 0x17E8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CustomDirection;                                   // 0x1800(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSetParam;                                       // 0x1818(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsDashStopped;                                    // 0x1819(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsDashStarted;                                    // 0x181A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRootMotionApplied;                                // 0x181B(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CustomDashDuration;                                // 0x181C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsOnFinishBroadcast;                              // 0x1820(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1821[0x3];                                     // 0x1821(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TotalDashDistance;                                 // 0x1824(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAbilityTask_Projectile*          ExtraTraceScopeTask;                               // 0x1828(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, struct FHitResult& Hit)> OnActorHit;                                        // 0x1830(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EDashStopReason Reason)> OnFinish;                                          // 0x1840(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FVector& MoveDir)> OnConstantDirMoveStart;                            // 0x1850(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FPredictionKey                         RootMotionTaskActivateKey;                         // 0x1860(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPredictionKey                         RPCKey;                                            // 0x1900(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPredictionKey                         DashKey;                                           // 0x19A0(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPredictionKey                         RootMotionEndReplicationKey;                       // 0x1A40(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPredictionKey                         StopKey;                                           // 0x1AE0(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPredictionKey                         StartDashMoveLogicFrameSyncSignature;              // 0x1B80(0x00A0)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPredictionKey                         StopDashMoveLogicFrameSyncSignature;               // 0x1C20(0x00A0)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bRequireMoveLogicSync;                             // 0x1CC0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EDashStopReason                               RemoteStopReason;                                  // 0x1CC1(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	EDashStopReason                               LocalStopReason;                                   // 0x1CC2(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1CC3[0x5];                                     // 0x1CC3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHitResult                             RemoteStopHitResult;                               // 0x1CC8(0x0170)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FVector                                RemoteEndLocation;                                 // 0x1E38(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FVector>                        PathPoints;                                        // 0x1E50(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	bool                                          RemoteCheckStatus;                                 // 0x1E60(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAbandonRemoteData;                                // 0x1E61(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bUseMoveFramToRevertDash;                          // 0x1E62(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1E63[0x5];                                     // 0x1E63(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_Dash* ApplyDash(class UMarvelBaseGameplayAbility* OwningAbility, class FName TaskInstanceName, const struct FDashAbilityInfo& Info, const struct FVector& InDirection, const struct FVector& InTargetLocation, class AActor* InTargetActor, class FName InTargetActorSocket, int32 ExtraScopeID);

	void AddIgnoreActor(class AActor* Actor);
	void AddIgnoreActors(const TArray<class AActor*>& Actors);
	bool CheckHitNormalDegreeSmaller(float InDegree, const struct FHitResult& InHit);
	struct FHitResult GetStopHitResult();
	bool HasRootMotionApplied();
	void OnArrived();
	void OnCharacterHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnCharacterMovementDash(float CurrentDashDistance);
	void OnForceStopBecauseTimeout();
	void OnLocalDashStopCallback(const struct FGameplayAbilityTargetDataHandle& LocalDataHandle);
	void OnMergeDashStopCallback(const struct FGameplayAbilityTargetDataHandle& RemoteDataHandle, const struct FGameplayAbilityTargetDataHandle& LocalDataHandle);
	void OnMoveToActorFinish(bool DestinationReached, bool TimedOut, const struct FVector& FinalTargetLocation);
	void OnOwnerCharacterPortal(const struct FVector& LastPosition, const struct FVector& NewPosition);
	void OnReplicateDataCallback(const struct FGameplayAbilityTargetDataHandle& Data);
	void OnReplicatedDashStop(EDashStopReason Reason);
	void OnTargetForceFinish(bool bTimeOut, bool bArrived);
	void OnTaskFinish();
	void RemoveRootMotionSource_ThreadSafe();
	void StopDash(EDashStopReason Reason);
	bool TryTraceBarrier(const struct FDashBarrierCheckParam& CurrentParam, const struct FVector& TraceStart, const struct FHitResult& Hit);
	void UpdateTargetDir(const struct FVector& NewTargetDir);
	void UpdateTargetLocation(const struct FVector& NewTargetLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_Dash">();
	}
	static class UMarvelAbilityTask_Dash* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_Dash>();
	}
};

// Class Marvel.DashOnCharacterHitFilterInterface
// 0x0000 (0x0030 - 0x0030)
class IDashOnCharacterHitFilterInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DashOnCharacterHitFilterInterface">();
	}
	static class IDashOnCharacterHitFilterInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IDashOnCharacterHitFilterInterface>();
	}
};

// Class Marvel.MarvelWidgetComponent
// 0x00F0 (0x0B10 - 0x0A20)
#pragma pack(push, 0x1)
class alignas(0x10) UMarvelWidgetComponent : public UWidgetComponent
{
public:
	uint8                                         Pad_A20[0x8];                                      // 0x0A20(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              LevelVisibilityChangedDelegate;                    // 0x0A28(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_A38[0x18];                                     // 0x0A38(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              AttachmentChangedDelegate;                         // 0x0A50(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UUserWidget*                            WidgetTemplate;                                    // 0x0A60(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FWidgetStyle_3DWidget                  Widget3DStyle;                                     // 0x0A68(0x0078)(BlueprintVisible, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bAdditive;                                         // 0x0AE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AE1[0x7];                                      // 0x0AE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvel3DWidget*                        Cached3DWidget;                                    // 0x0AE8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_AF0[0x18];                                     // 0x0AF0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void MarvelOnWidgetVisibilityChanged(ESlateVisibility InVisibility);
	bool ShouldBeVisible();
	bool ShouldEnableTick();
	void UpdateMaterial();
	void UpdateTickEnable();
	void UpdateVisibility();

	bool UsingScreenSpace() const;
	bool UsingWorldSpace() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelWidgetComponent">();
	}
	static class UMarvelWidgetComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelWidgetComponent>();
	}
};
#pragma pack(pop)

// Class Marvel.WC_PreDesHP
// 0x0060 (0x0B70 - 0x0B10)
class UWC_PreDesHP final : public UMarvelWidgetComponent
{
public:
	float                                         DisplayDuration;                                   // 0x0B08(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceIntervalSeconds;                              // 0x0B0C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceDistance;                                     // 0x0B10(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B14[0x3C];                                     // 0x0B14(0x003C)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LastViewTarget;                                    // 0x0B50(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B58[0x18];                                     // 0x0B58(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnViewTargetApplyDamage(class AActor* InCauser, class AActor* InTarget, const struct FAttributeModifierHandle& InModifierParameterHandle);
	void OnViewTargetChanged(class AActor* ViewingTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WC_PreDesHP">();
	}
	static class UWC_PreDesHP* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWC_PreDesHP>();
	}
};

// Class Marvel.SystemSkillStatics
// 0x0000 (0x0030 - 0x0030)
class USystemSkillStatics final : public UBlueprintFunctionLibrary
{
public:
	static bool GetSprayPaintTableData(int32 SprayID, struct FUIHeroSprayTableRow* OutSprayData);
	static void TryActivateAnimEmote(class AActor* AbilityOwner, int64 EmoteID);
	static void TryActivateQuip(class AActor* AbilityOwner, int32 QuipID);
	static void TryActivateSprayPaint(class AActor* AbilityOwner, int32 SprayID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SystemSkillStatics">();
	}
	static class USystemSkillStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<USystemSkillStatics>();
	}
};

// Class Marvel.DashOnCharacterHitFilter_Test
// 0x0008 (0x0038 - 0x0030)
class UDashOnCharacterHitFilter_Test final : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DashOnCharacterHitFilter_Test">();
	}
	static class UDashOnCharacterHitFilter_Test* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDashOnCharacterHitFilter_Test>();
	}
};

// Class Marvel.MarvelReplicationGraphNode_UseOwnerRelevancy
// 0x0010 (0x0108 - 0x00F8)
class UMarvelReplicationGraphNode_UseOwnerRelevancy final : public UReplicationGraphNode_ActorList
{
public:
	uint8                                         Pad_F8[0x10];                                      // 0x00F8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelReplicationGraphNode_UseOwnerRelevancy">();
	}
	static class UMarvelReplicationGraphNode_UseOwnerRelevancy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelReplicationGraphNode_UseOwnerRelevancy>();
	}
};

// Class Marvel.DashOnCharacterHitFilter_StepUpHeight
// 0x0010 (0x0040 - 0x0030)
class UDashOnCharacterHitFilter_StepUpHeight : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinVelocityProjection;                             // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DashOnCharacterHitFilter_StepUpHeight">();
	}
	static class UDashOnCharacterHitFilter_StepUpHeight* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDashOnCharacterHitFilter_StepUpHeight>();
	}
};

// Class Marvel.MarvelAbilityTask_Destructible
// 0x0080 (0x0258 - 0x01D8)
class UMarvelAbilityTask_Destructible final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void()>              OnFracture;                                        // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    DestructibleComp;                                  // 0x01E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FVector                                Location;                                          // 0x01F0(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class UPrimitiveComponent*, struct FDestructiblePoints> DestructibleLocations;                             // 0x0208(0x0050)(ContainsInstancedReference, NativeAccessSpecifierPrivate)

public:
	static bool IsDestructibleComponent(class UPrimitiveComponent* Comp);
	static class UMarvelAbilityTask_Destructible* MarvelDestructibleTask(class UGameplayAbility* OwingAbility, class UPrimitiveComponent* DestructibleComp_0, const struct FVector& Location_0);
	static class UMarvelAbilityTask_Destructible* MarvelLocatedDestructiblesTask(class UGameplayAbility* OwningAbility, const TArray<struct FVector>& Locations, float TraceLength);
	static class UMarvelAbilityTask_Destructible* MarvelLocatedDestructibleTask(class UGameplayAbility* OwningAbility, const struct FVector& Location_0, float TraceLength);

	void OnChaosDesBroken(const struct FChaosBreakEvent& BreakEvent);
	void OnCompLocationFractured();
	void SetIsWithAbilityEnd(bool IsWithAbility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_Destructible">();
	}
	static class UMarvelAbilityTask_Destructible* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_Destructible>();
	}
};

// Class Marvel.MarvelAbilityTask_FindGround
// 0x0FD8 (0x11B0 - 0x01D8)
class UMarvelAbilityTask_FindGround final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(const struct FVector& OutLocation)> OnSuccess;                                         // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void(const struct FVector& OutLocation)> OnFail;                                            // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	class AMarvelBaseCharacter*                   InCharacter;                                       // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FFindGroundTaskParam                   TaskParam;                                         // 0x0200(0x0FB0)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UMarvelAbilityTask_FindGround* FindGroundTask(class UGameplayAbility* OwningAbility, class AMarvelBaseCharacter* InCharacter_0, const struct FFindGroundTaskParam& InParam);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_FindGround">();
	}
	static class UMarvelAbilityTask_FindGround* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_FindGround>();
	}
};

// Class Marvel.MarvelAbilityTask_LoopAdsorb
// 0x1268 (0x1440 - 0x01D8)
class alignas(0x10) UMarvelAbilityTask_LoopAdsorb final : public UAbilityTask
{
public:
	uint8                                         Pad_1D8[0x10B8];                                   // 0x01D8(0x10B8)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* InActor)> OnTraceSuccess;                                    // 0x1290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InActor)> OnAdsorbSuccess;                                   // 0x12A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(TSet<class APhysicsSummoner*>& InActors)> OnTraceSuccessAllActors;                           // 0x12B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TDelegate<void(class AActor* InActor)>        RelaLocationDelegate;                              // 0x12C0(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12D4[0x4];                                     // 0x12D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class APhysicsSummoner*>                 AdsorbedActors;                                    // 0x12D8(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<EPhysicsWeaponType, int32>               TypeCountMap;                                      // 0x1328(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TArray<struct FHitResult>                     TraceResults;                                      // 0x1378(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class AActor*                                 TargetActor;                                       // 0x1388(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 AttachActor;                                       // 0x1390(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoStartAdsorb;                                  // 0x1398(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAutoDestroyActor;                                 // 0x1399(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAdsorbing;                                        // 0x139A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bTraceFinished;                                    // 0x139B(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_139C[0x4];                                     // 0x139C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         MoveKey;                                           // 0x13A0(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UMarvelAbilityTask_LoopAdsorb* LoopAdsorb(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const struct FLoopAdsorbTaskParameters& InAdsorbParameters, bool bAutoStart, class AActor* NewTargetActor, class AActor* InAttachActor, bool bAutoDestroy);

	void OnInterpMoveStop(class AActor* InActor, bool bSucceed);
	void StartAdsorb();
	void StartAdsorbingTargetActor();
	void StopAdsorb();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_LoopAdsorb">();
	}
	static class UMarvelAbilityTask_LoopAdsorb* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_LoopAdsorb>();
	}
};

// Class Marvel.MarvelAbilityTask_ProjectileBase
// 0x0278 (0x0450 - 0x01D8)
class UMarvelAbilityTask_ProjectileBase : public UAbilityTask
{
public:
	struct FMarvelAbilitySourceLocationInfo       SourceLocationInfo;                                // 0x01D8(0x0140)(NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UMarvelAgentTraceComponent*             TraceComponent;                                    // 0x0318(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bProjectile;                                       // 0x0320(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_321[0xF];                                      // 0x0321(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bScope;                                            // 0x0330(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_331[0xF];                                      // 0x0331(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AGameplayAbilityTargetActor> TargetClass;                                       // 0x0340(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class APawn>                   SpawnInstigator;                                   // 0x0348(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AActor>                  SpawnOwner;                                        // 0x0350(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 QuoteSource;                                       // 0x0358(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelAbilityContextHandle            AbilityContextHandle;                              // 0x0360(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A0[0xB0];                                     // 0x03A0(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLocalProjectileInfoCallback(const struct FGameplayAbilityTargetDataHandle& LocalDataHandle);
	void OnMergeProjectileInfoCallback(const struct FGameplayAbilityTargetDataHandle& RemoteDataHandle, const struct FGameplayAbilityTargetDataHandle& LocalDataHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_ProjectileBase">();
	}
	static class UMarvelAbilityTask_ProjectileBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_ProjectileBase>();
	}
};

// Class Marvel.MarvelGameplayEffectAmmo2Cost
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectAmmo2Cost final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectAmmo2Cost">();
	}
	static class UMarvelGameplayEffectAmmo2Cost* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectAmmo2Cost>();
	}
};

// Class Marvel.MarvelAbilityTask_LoopProjectile
// 0x00E0 (0x0530 - 0x0450)
class UMarvelAbilityTask_LoopProjectile final : public UMarvelAbilityTask_ProjectileBase
{
public:
	TMulticastInlineDelegate<void(class AActor* SpawnActor, struct FGameplayAbilityTargetDataHandle& Data)> Success;                                           // 0x0450(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCannotSpawn;                                     // 0x0460(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TDelegate<void()>                             CanSpawnActor;                                     // 0x0470(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             GetSpawnSocketInfoDelegate;                        // 0x0484(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void()>                             GetSpawnSourceLocationInfoDelegate;                // 0x0498(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TargetId;                                          // 0x04AC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpawnRate;                                         // 0x04B0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B4[0x4];                                      // 0x04B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, TWeakObjectPtr<class AGameplayAbilityTargetActor>> TargetActors;                                      // 0x04B8(0x0050)(Transient, UObjectWrapper, NativeAccessSpecifierPublic)
	float                                         ActivateTime;                                      // 0x0508(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayTargetingConfirmation                ConfirmationType;                                  // 0x050C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_50D[0x3];                                      // 0x050D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAgentOriginInfo                 OriginInfo;                                        // 0x0510(0x0018)(NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          bShouldPredict;                                    // 0x0528(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_529[0x7];                                      // 0x0529(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_LoopProjectile* LoopSpawnProjectile(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, int32 ProjectileID, float SpawnRate_0, bool bShouldPredict_0, const struct FMarvelAgentOriginInfo& AgentOriginInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_LoopProjectile">();
	}
	static class UMarvelAbilityTask_LoopProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_LoopProjectile>();
	}
};

// Class Marvel.SystemFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class USystemFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool CanPlayMontage(class UObject* WCO);
	static bool CheckIsShipping();
	static bool ClientNeedPreviewEffect(class AActor* InActor);
	static bool EndSaveVideoLocal();
	static class FString GetBuildVersion();
	static float GetCPUTimePct();
	static bool GetCustomPackageConfig(class FString* Settings);
	static bool GetCustomPackageIsDisableCommand(bool* OutResult);
	static bool GetIntPackageConfig(const class FString& Key, int32* Value);
	static class FString GetServiceURL(class FName ServiceName);
	static bool GetStrPackageConfig(const class FString& Key, class FString* Value);
	static bool IsEnableCustomPackageConfig();
	static bool IsInitialRep(const class AActor* InActor);
	static bool IsInModeFree(class UObject* WCO);
	static bool IsInSpectation(class UObject* WCO);
	static bool IsInSpectationMode(class UObject* WCO, ESpectationMode InMode);
	static bool LoadModuleChecked(const class FName InModuleName);
	static bool LoadPackageConfig(class FString* Settings);
	static bool NeedRendering(class UObject* WCO);
	static void PerformGarbageCollection();
	static bool RebuildInitOnlineSubsystemMosModule();
	static void SetClientUseTcpBeforeBattle(bool bUse);
	static float SetTimeBetweenGC(float Secs);
	static bool ShouldDisableDebugCommand();
	static bool StartSaveVideoLocal();
	static bool UnloadModule(const class FName InModuleName, bool bIsShutdown);
	static uint8 WaitAndFork(const class FString& Bid, int64 MapID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SystemFunctionLibrary">();
	}
	static class USystemFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USystemFunctionLibrary>();
	}
};

// Class Marvel.MarvelAbilityTask_ModifyAmmo
// 0x00A0 (0x0278 - 0x01D8)
class UMarvelAbilityTask_ModifyAmmo final : public UAbilityTask
{
public:
	EAmmoClipType                                 AmmoType;                                          // 0x01D8(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9[0x3];                                      // 0x01D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ModifyValue;                                       // 0x01DC(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPredict;                                    // 0x01E0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoApply;                                        // 0x01E1(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAutoEndTask;                                      // 0x01E2(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E3[0x1];                                      // 0x01E3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RealModifyValue;                                   // 0x01E4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAttribute                     AmmoAttr;                                          // 0x01E8(0x0040)(Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAttribute                     MaxAmmoAttr;                                       // 0x0228(0x0040)(Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_268[0x10];                                     // 0x0268(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_ModifyAmmo* ApplyMakeUpToMaxAmmo(class UGameplayAbility* OwningAbility, class AMarvelBaseCharacter* InCharacter, EAmmoClipType AmmoType_0, bool bApplyPredict);
	static class UMarvelAbilityTask_ModifyAmmo* ApplyModifyAmmo(class UGameplayAbility* OwningAbility, class AMarvelBaseCharacter* InCharacter, EAmmoClipType AmmoType_0, float ModValue, bool bApplyPredict, bool bAutoApply_0, bool bAutoEndTask_0);

	void ApplyModify();
	void ApplyModifyAmmoEffectToSelf();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_ModifyAmmo">();
	}
	static class UMarvelAbilityTask_ModifyAmmo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_ModifyAmmo>();
	}
};

// Class Marvel.MarvelAbilityTask_NetworkSyncPoint
// 0x0000 (0x0220 - 0x0220)
class UMarvelAbilityTask_NetworkSyncPoint : public UAbilityTask_NetworkSyncPoint
{
public:
	static class UMarvelAbilityTask_NetworkSyncPoint* PredictionWaitNetSync(class UGameplayAbility* OwningAbility, EAbilityTaskNetSyncType InSyncType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_NetworkSyncPoint">();
	}
	static class UMarvelAbilityTask_NetworkSyncPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_NetworkSyncPoint>();
	}
};

// Class Marvel.MarvelLevelScriptActor
// 0x0058 (0x04F0 - 0x0498)
class AMarvelLevelScriptActor : public ALevelScriptActor
{
public:
	TMap<class FString, class AActor*>            ReferencedActors;                                  // 0x0498(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bBeginPlayed;                                      // 0x04E8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bReferencesInited;                                 // 0x04E9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsViewTarget;                                     // 0x04EA(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4EB[0x5];                                      // 0x04EB(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddToReferenceList(class AActor* Actor);
	void InitActorReferences();
	void NativeInitActorReferences();
	void OnActorReferencesInited();
	void SetIsViewTarget(bool bInIsViewTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelLevelScriptActor">();
	}
	static class AMarvelLevelScriptActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelLevelScriptActor>();
	}
};

// Class Marvel.MarvelAbilityTask_NetworkSyncPointWithData
// 0x0018 (0x0238 - 0x0220)
class UMarvelAbilityTask_NetworkSyncPointWithData final : public UAbilityTask_NetworkSyncPoint
{
public:
	TDelegate<void()>                             MakeDataDelegate;                                  // 0x0220(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_NetworkSyncPoint* WaitNetSyncWithData(class UGameplayAbility* OwningAbility, TDelegate<void()> InMakeSyncDataDelegate, EAbilityTaskNetSyncType InSyncType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_NetworkSyncPointWithData">();
	}
	static class UMarvelAbilityTask_NetworkSyncPointWithData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_NetworkSyncPointWithData>();
	}
};

// Class Marvel.MarvelAbilityTask_NetworkSyncPointWithPayload
// 0x0018 (0x0238 - 0x0220)
class UMarvelAbilityTask_NetworkSyncPointWithPayload final : public UAbilityTask_NetworkSyncPoint
{
public:
	struct FVector                                VectorPayload;                                     // 0x0220(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UMarvelAbilityTask_NetworkSyncPointWithPayload* WaitNetSyncWithFVector(class UGameplayAbility* OwningAbility, EAbilityTaskNetSyncType InSyncType, const struct FVector& InVectorPayload);

	void SetVectorPayload(const struct FVector& InVectorPayload);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_NetworkSyncPointWithPayload">();
	}
	static class UMarvelAbilityTask_NetworkSyncPointWithPayload* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_NetworkSyncPointWithPayload>();
	}
};

// Class Marvel.TeamFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UTeamFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool ClientIsAllyToViewerSide(class AActor* Actor);
	static bool ClientIsEnemyToViewerSide(class AActor* Actor);
	static class UTeamComponent* GetTeamComponent(const class AActor* InActor);
	static int32 GetTeamID(const class AActor* InActor);
	static ETeamRelation GetTeamRelation(const class AActor* ActorA, const class AActor* ActorB);
	static ETeamRelation GetTeamRelationEx(const class AActor* ActorA, const class AActor* ActorB, const struct FTeamCompareAdvanceParam& Param);
	static bool IsAlly(const class AActor* ActorA, const class AActor* ActorB, bool bCheckNeutral);
	static bool IsAllyToLocalPlayer(class AActor* Actor);
	static bool IsEnemy(const class AActor* ActorA, const class AActor* ActorB, bool bCheckNeutral);
	static bool IsEnemyToLocalPlayer(class AActor* Actor);
	static bool IsPureSpectator(const class AActor* InActor);
	static bool IsRegardAsAlly(const class AActor* Target);
	static bool IsRegardAsEnemy(const class AActor* Target);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TeamFunctionLibrary">();
	}
	static class UTeamFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTeamFunctionLibrary>();
	}
};

// Class Marvel.MarvelAbilityTask_NetworkSyncPointWithHitResult
// 0x0170 (0x0390 - 0x0220)
class UMarvelAbilityTask_NetworkSyncPointWithHitResult final : public UAbilityTask_NetworkSyncPoint
{
public:
	struct FHitResult                             HitResultPayload;                                  // 0x0220(0x0170)(Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UMarvelAbilityTask_NetworkSyncPointWithHitResult* WaitNetSyncWithHitResult(class UGameplayAbility* OwningAbility, EAbilityTaskNetSyncType InSyncType, const struct FHitResult& InHit);

	void SetHitResultPayload(const struct FHitResult& InHit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_NetworkSyncPointWithHitResult">();
	}
	static class UMarvelAbilityTask_NetworkSyncPointWithHitResult* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_NetworkSyncPointWithHitResult>();
	}
};

// Class Marvel.MarvelAbilityTask_PaybackCD
// 0x0020 (0x01F8 - 0x01D8)
class UMarvelAbilityTask_PaybackCD final : public UAbilityTask
{
public:
	TArray<int32>                                 TargetAbilities;                                   // 0x01D8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	float                                         PaybackDuration;                                   // 0x01E8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PaybackPercent;                                    // 0x01EC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bApplyForChargeAbility;                            // 0x01F0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_PaybackCD* ApplyPaybackCDPercentTask(class UGameplayAbility* OwningAbility, class AMarvelBaseCharacter* InCharacter, const TArray<int32>& AbilityIDs, float Percent, bool bApplyCharge);
	static class UMarvelAbilityTask_PaybackCD* ApplyPaybackCDSingleTask(class UGameplayAbility* OwningAbility, class AMarvelBaseCharacter* InCharacter, int32 AbilityID, float Duration);
	static class UMarvelAbilityTask_PaybackCD* ApplyPaybackCDTask(class UGameplayAbility* OwningAbility, class AMarvelBaseCharacter* InCharacter, const TArray<int32>& AbilityIDs, float Duration, bool bApplyCharge);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_PaybackCD">();
	}
	static class UMarvelAbilityTask_PaybackCD* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_PaybackCD>();
	}
};

// Class Marvel.MarvelAbilityTask_PlayMontageAndWaitForEvent
// 0x0318 (0x04F0 - 0x01D8)
class UMarvelAbilityTask_PlayMontageAndWaitForEvent final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(struct FGameplayTag& EventTag, struct FGameplayEventData& EventData)> OnCompleted;                                       // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FGameplayTag& EventTag, struct FGameplayEventData& EventData)> OnBlendOut;                                        // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FGameplayTag& EventTag, struct FGameplayEventData& EventData)> OnInterrupted;                                     // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FGameplayTag& EventTag, struct FGameplayEventData& EventData)> OnCancelled;                                       // 0x0208(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FGameplayTag& EventTag, struct FGameplayEventData& EventData)> EventReceived;                                     // 0x0218(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FGameplayTag& EventTag, struct FGameplayEventData& EventData)> OnSwitchSectioned;                                 // 0x0228(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FPredictionKey                         MissleKey;                                         // 0x0238(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         BreakKey;                                          // 0x02D8(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimTimelineComponent*                 Timeline;                                          // 0x0378(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimMontage*                           MontageToPlay;                                     // 0x0380(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAnimTimeline*                          TimelineToPlay;                                    // 0x0388(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  EventTags;                                         // 0x0390(0x0068)(NativeAccessSpecifierPrivate)
	float                                         Rate;                                              // 0x03F8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class FName                                   StartSection;                                      // 0x03FC(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         AnimRootMotionTranslationScale;                    // 0x0408(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bStopWhenAbilityEnds;                              // 0x040C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bRecordAbilityEnds;                                // 0x040D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bIgnoreBehitAnim;                                  // 0x040E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAlwaysBindMontageEvent;                           // 0x040F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPredictionKey                         JumpToSectionKey;                                  // 0x0410(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4B0[0x40];                                     // 0x04B0(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_PlayMontageAndWaitForEvent* PlayMontageAndWaitForEvent(class UGameplayAbility* OwningAbility, class UAnimMontage* MontageToPlay_0, class FName TaskInstanceName, float Rate_0, class FName StartSection_0, bool bStopWhenAbilityEnds_0, float AnimRootMotionTranslationScale_0, bool bIgnoreBehitAnim_0);
	static class UMarvelAbilityTask_PlayMontageAndWaitForEvent* PlayTimelineAndWaitForEvent(class UGameplayAbility* OwningAbility, int32 TimelineIndex, class FName TaskInstanceName, float Rate_0, class FName StartSection_0, bool bStopWhenAbilityEnds_0, float AnimRootMotionTranslationScale_0, bool bIgnoreBehitAnim_0);
	static class UMarvelAbilityTask_PlayMontageAndWaitForEvent* PlayTimelineWithObject(class UGameplayAbility* OwningAbility, class UAnimTimeline* InTimeline, int32 AnimIndex, class FName TaskInstanceName, float Rate_0, class FName StartSection_0, bool bStopWhenAbilityEnds_0, float AnimRootMotionTranslationScale_0, bool bIgnoreBehitAnim_0);

	void JumpToSection_ThreadSafe(class FName SectionName);

	class UAnimTimeline* GetTimeline() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_PlayMontageAndWaitForEvent">();
	}
	static class UMarvelAbilityTask_PlayMontageAndWaitForEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_PlayMontageAndWaitForEvent>();
	}
};

// Class Marvel.MarvelAbilityTask_Projectile
// 0x0250 (0x06A0 - 0x0450)
class UMarvelAbilityTask_Projectile final : public UMarvelAbilityTask_ProjectileBase
{
public:
	TMulticastInlineDelegate<void(class AActor* SpawnActor, struct FGameplayAbilityTargetDataHandle& Data)> Success;                                           // 0x0450(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* SpawnActor, struct FGameplayAbilityTargetDataHandle& Data)> ValidData;                                         // 0x0460(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* SpawnActor, struct FGameplayAbilityTargetDataHandle& Data)> Cancelled;                                         // 0x0470(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bTraceFinished;                                    // 0x0480(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceFinishTimer;                                 // 0x0481(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_482[0x6];                                      // 0x0482(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameplayAbilityTargetActor*            TargetActor;                                       // 0x0488(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAgentEffectiveComponent*         EffectiveComponent;                                // 0x0490(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UMarvelAgentTraceComponent* TraceComp, class UMarvelAgentEffectiveComponent* EffectComp)> OnNoActorScopeInitedDispatcher;                    // 0x0498(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         TargetId;                                          // 0x04A8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayTargetingConfirmation                ConfirmationType;                                  // 0x04AC(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4AD[0x3];                                      // 0x04AD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         DestroyNum;                                        // 0x04B0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActivateOnce;                                     // 0x04B4(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPredict;                                    // 0x04B5(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B6[0x1E2];                                    // 0x04B6(0x01E2)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MyWaitingDataCount;                                // 0x0698(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_69C[0x4];                                      // 0x069C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_Projectile* SpawnProjectile(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, int32 ProjectileID, const struct FMarvelAbilitySocketInfo& SocketInfo, bool bShouldPredict_0, const struct FMarvelAgentOriginInfo& AgentOriginInfo, class AActor* Quote);
	static class UMarvelAbilityTask_Projectile* SpawnProjectileEx(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, int32 ProjectileID, const struct FMarvelAbilitySourceLocationInfo& LocationInfo, bool bShouldPredict_0, class AActor* Quote);
	static class UMarvelAbilityTask_Projectile* SpawnScope(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, int32 ScopeId, const struct FMarvelAbilitySocketInfo& SocketInfo, bool bShouldPredict_0, const struct FMarvelAgentOriginInfo& AgentOriginInfo, class AActor* Quote, bool bServerWaitLocationInfo);
	static class UMarvelAbilityTask_Projectile* SpawnScopeEx(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, int32 ScopeId, const struct FMarvelAbilitySourceLocationInfo& LocationInfo, bool bShouldPredict_0, class AActor* Quote);
	static class UMarvelAbilityTask_Projectile* SpawnScopeWithQuote(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, int32 ScopeId, const struct FMarvelAbilitySocketInfo& SocketInfo, bool bShouldPredict_0, class AActor* Quote, const struct FMarvelAgentOriginInfo& AgentOriginInfo);
	static class UMarvelAbilityTask_Projectile* SpawnScopeWithQuoteEx(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, int32 ScopeId, const struct FMarvelAbilitySourceLocationInfo& LocationInfo, bool bShouldPredict_0, class AActor* Quote);
	static class UMarvelAbilityTask_Projectile* SpawnTargetActor(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, int32 TargetActorID, const struct FMarvelAbilitySourceLocationInfo& LocationInfo);

	bool BeginSpawningActor(class UGameplayAbility* OwningAbility, class AGameplayAbilityTargetActor** SpawnedActor);
	void FinishSpawningActor(class UGameplayAbility* OwningAbility, class AGameplayAbilityTargetActor* SpawnedActor);
	void OnLocalScopeResultCallback(const struct FGameplayAbilityTargetDataHandle& LocalDataHandle);
	void OnMergeScopeResultCallback(const struct FGameplayAbilityTargetDataHandle& RemoteDataHandle, const struct FGameplayAbilityTargetDataHandle& LocalDataHandle);
	void OnNoActorTraceFinished();
	void OnNoActorTraceResult(class UObject* TraceSource, const TArray<struct FHitResult>& InHitResults);
	void OnTargetActorHasEndPlay();
	void OnTargetDataCancelledCallback(const struct FGameplayAbilityTargetDataHandle& Data);
	void OnTargetDataReadyCallback(const struct FGameplayAbilityTargetDataHandle& Data);
	void OnTargetDataReplicatedCallback(const struct FGameplayAbilityTargetDataHandle& Data);
	void OnTargetDataReplicatedCancelledCallback();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_Projectile">();
	}
	static class UMarvelAbilityTask_Projectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_Projectile>();
	}
};

// Class Marvel.MarvelAbilityTask_SelectAndDash
// 0x2F38 (0x3110 - 0x01D8)
class UMarvelAbilityTask_SelectAndDash final : public UAbilityTask
{
public:
	uint8                                         Pad_1D8[0x18];                                     // 0x01D8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAutoListenCrossPortal;                            // 0x01F0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F1[0x9F];                                     // 0x01F1(0x009F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSelectAndDashInfo                     Info;                                              // 0x0290(0x2C40)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UMarvelAbilityTask_SelectTarget*        SelectTask;                                        // 0x2ED0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAbilityTask_Dash*                DashTask;                                          // 0x2ED8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAbilityTask_WaitAbilityTargetData* FindGroundTask;                                    // 0x2EE0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EDashStopReason Reason)> OnTaskFinish;                                      // 0x2EE8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FVector* OutTargetDirection, struct FVector* OutTargetLocation, class AActor** OutTargetActor)> OnCustomUpdateDashParams;                          // 0x2EF8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FHitResult                             FindGroundResult;                                  // 0x2F08(0x0170)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bHasCacheResult;                                   // 0x3078(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3079[0x7];                                     // 0x3079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDashTargetInfo                        TargetInfo;                                        // 0x3080(0x0088)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_3108[0x8];                                     // 0x3108(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_SelectAndDash* SelectAndDash(class UMarvelGameplayAbility* OwningAbility, const struct FSelectAndDashInfo& InInfo);

	void BeginListenCrossPortal(class AActor* Target);
	void ChangeDashInfo(const struct FDashAbilityInfo& DashInfo);
	void ChangeSelectInfo(const struct FSelectTaskParam& InParam);
	void EndListenCrossPortal();
	TArray<struct FHitResult> GetResultsAndCache();
	void OnAbilityActivate(class UGameplayAbility* ActivatedAbility);
	void OnDashFinish(EDashStopReason Reason);
	void OnFindGroundCancelled(const struct FGameplayAbilityTargetDataHandle& Data);
	void OnFindGroundValidData(const struct FGameplayAbilityTargetDataHandle& Data);
	void OnTargetTranslatedByPortal(class AMarvelBaseCharacter* Character, class APortalViewActor* Portal);
	void SetHitResult(const struct FHitResult& InHitResult);
	void StartDash();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_SelectAndDash">();
	}
	static class UMarvelAbilityTask_SelectAndDash* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_SelectAndDash>();
	}
};

// Class Marvel.EffectAbility_RemoveBuffWhenLanded
// 0x0000 (0x10F8 - 0x10F8)
class UEffectAbility_RemoveBuffWhenLanded final : public UMarvelEffectGameplayAbility
{
public:
	void OnMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"EffectAbility_RemoveBuffWhenLanded">();
	}
	static class UEffectAbility_RemoveBuffWhenLanded* GetDefaultObj()
	{
		return GetDefaultObjImpl<UEffectAbility_RemoveBuffWhenLanded>();
	}
};

// Class Marvel.MarvelAbilityTask_SelectTarget
// 0x1188 (0x1360 - 0x01D8)
class UMarvelAbilityTask_SelectTarget final : public UAbilityTask
{
public:
	uint8                                         Pad_1D8[0x10];                                     // 0x01D8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(TArray<class AActor*>& CurTargets, TArray<class AActor*>& NewTargets, TArray<class AActor*>& DelTargets)> OnTargetsChange;                                   // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnNoTarget;                                        // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnTaskEnd;                                         // 0x0208(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         Sensitivity;                                       // 0x0218(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelGameplayAbility*                 MarvelGA;                                          // 0x0220(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         LastHitRes;                                        // 0x0228(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         CurHitRes;                                         // 0x0238(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         NewHitRes;                                         // 0x0248(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         DelHitRes;                                         // 0x0258(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TArray<struct FSelectTaskResult>              LastTaskResultCache;                               // 0x0268(0x0010)(ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_278[0x8];                                      // 0x0278(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSelectTaskResCache                    TaskResultCache;                                   // 0x0280(0x0018)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSelectTaskParam                       TaskInfo;                                          // 0x02A0(0x10A0)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1340[0x20];                                    // 0x1340(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static struct FSelectTaskParam GetSelectTaskParamFromTable(int32 ScopeId);
	static class UMarvelAbilityTask_SelectTarget* SelectTargetsByParams(class UMarvelGameplayAbility* OwningAbility, class FName TaskInstanceName, const struct FSelectTaskParam& InParam);

	void BeginTask();
	bool CheckTargetCampCondition(class AActor* Source, class AActor* Target, bool bKeepInvalidActor);
	TArray<struct FHitResult> GetTargetResults();
	TArray<class AActor*> GetTargets(bool bBackTrace);
	struct FSelectTaskParam GetTaskInfo();
	TArray<struct FSelectTaskResult> GetTaskResults(bool bBackTrace);
	struct FVector GetTraceStart(class AActor* Source);
	void HandleTraceRes(const TArray<class AActor*>& HitTargets);
	void OnTraceFinish();
	void SetTaskInfo(const struct FSelectTaskParam& InParam);
	void UpdateSensitivity();
	void UpdateTargets();

	TArray<struct FSelectTaskResult> GetLastTaskResultsCache() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_SelectTarget">();
	}
	static class UMarvelAbilityTask_SelectTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_SelectTarget>();
	}
};

// Class Marvel.MarvelGameplay_ProjectileCheckTraceType
// 0x0000 (0x0030 - 0x0030)
class UMarvelGameplay_ProjectileCheckTraceType final : public UMarvelGameplay_ProjectileTraceType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplay_ProjectileCheckTraceType">();
	}
	static class UMarvelGameplay_ProjectileCheckTraceType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplay_ProjectileCheckTraceType>();
	}
};

// Class Marvel.MarvelAbilityTask_SpawnActors
// 0x0000 (0x0360 - 0x0360)
class UMarvelAbilityTask_SpawnActors final : public UAbilityTask_SpawnActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_SpawnActors">();
	}
	static class UMarvelAbilityTask_SpawnActors* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_SpawnActors>();
	}
};

// Class Marvel.MarvelAbilityTask_SpawnSummoner
// 0x01A0 (0x03C0 - 0x0220)
class UMarvelAbilityTask_SpawnSummoner final : public UMarvelAbilityTask_NetworkSyncPoint
{
public:
	uint8                                         Pad_220[0x18];                                     // 0x0220(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 TargetActor;                                       // 0x0238(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AActor>                     TargetClass;                                       // 0x0240(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 QuoteSource;                                       // 0x0248(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESummonedPredictMode                          SpawnMode;                                         // 0x0250(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldPredict;                                    // 0x0251(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_252[0x2];                                      // 0x0252(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SummonerId;                                        // 0x0254(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_258[0x8];                                      // 0x0258(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilitySourceLocationInfo       SourceLocationInfo;                                // 0x0260(0x0140)(NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* SpawnActor)> OnSuccess;                                         // 0x03A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* SpawnActor)> OnSummonedPost;                                    // 0x03B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UMarvelAbilityTask_SpawnSummoner* SpawnSummoner(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, int32 SummonerId_0, const struct FMarvelAbilitySocketInfo& SocketInfo, bool bShouldPredict_0, class AActor* InQuoteSource, const struct FMarvelAgentOriginInfo& AgentOriginInfo, ESummonedPredictMode InMode, EAbilityTaskNetSyncType InSyncType);
	static class UMarvelAbilityTask_SpawnSummoner* SpawnSummonerEx(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, int32 SummonerId_0, const struct FMarvelAbilitySourceLocationInfo& LocationInfo, bool bShouldPredict_0, class AActor* InQuoteSource, ESummonedPredictMode InMode, EAbilityTaskNetSyncType InSyncType);

	void UpdateActorAttach(class AActor* SpawnSummoner);
	void UpdateActorLocation(class AActor* SpawnSummoner, class AActor* InOwner, class APawn* InInstigator, class AActor* InQuoteSource);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_SpawnSummoner">();
	}
	static class UMarvelAbilityTask_SpawnSummoner* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_SpawnSummoner>();
	}
};

// Class Marvel.MarvelAbilityTask_TimerNextTick
// 0x0010 (0x01E8 - 0x01D8)
class UMarvelAbilityTask_TimerNextTick final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void()>              OnFinish;                                          // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UMarvelAbilityTask_TimerNextTick* WaitTimeNextTick(class UGameplayAbility* OwningAbility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_TimerNextTick">();
	}
	static class UMarvelAbilityTask_TimerNextTick* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_TimerNextTick>();
	}
};

// Class Marvel.AbilityTask_WaitAbilityBlocked
// 0x0038 (0x0210 - 0x01D8)
class UAbilityTask_WaitAbilityBlocked final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(class UMarvelGameplayAbility* BlockedAbility)> OnBlocked;                                         // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UMarvelGameplayAbility* BlockedAbility)> OnUnBlocked;                                       // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithTag;                                           // 0x01F8(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x0204(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_205[0xB];                                      // 0x0205(0x000B)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_WaitAbilityBlocked* MarvelWaitForAbilityBlocked(class UGameplayAbility* OwningAbility, const struct FGameplayTag& WithTag_0, bool TriggerOnce_0);

	void OnAbilityBlocked(const struct FGameplayTag& Tag, int32 Count);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitAbilityBlocked">();
	}
	static class UAbilityTask_WaitAbilityBlocked* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitAbilityBlocked>();
	}
};

// Class Marvel.AbilityTask_WaitAbilityBreak
// 0x0030 (0x0208 - 0x01D8)
class UAbilityTask_WaitAbilityBreak final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(class UGameplayAbility* BreakedAbility)> OnBreaked;                                         // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithTag;                                           // 0x01E8(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithoutTag;                                        // 0x01F4(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeTriggeredAbilities;                         // 0x0200(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x0201(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_202[0x6];                                      // 0x0202(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_WaitAbilityBreak* MarvelWaitForAbilityBreaked(class UGameplayAbility* OwningAbility, const struct FGameplayTag& WithTag_0, const struct FGameplayTag& WithoutTag_0, bool IncludeTriggeredAbilities_0, bool TriggerOnce_0);

	void OnAbilityBreaked(class UGameplayAbility* BreakedAbility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitAbilityBreak">();
	}
	static class UAbilityTask_WaitAbilityBreak* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitAbilityBreak>();
	}
};

// Class Marvel.Widget_AbilityStatus_Base
// 0x00B0 (0x0658 - 0x05A8)
class UWidget_AbilityStatus_Base : public UMarvelUserWidget
{
public:
	class UCommonKeyWidget*                       Key_Primary;                                       // 0x05A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Image_AbilityIcon;                                 // 0x05B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget_AbilityStatusPanel*             AbilityStatusPanel;                                // 0x05B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelGameplayAbility*                 Ability;                                           // 0x05C0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5C8[0x18];                                     // 0x05C8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUIActionData                          CachedActionData;                                  // 0x05E0(0x0058)(Protected, NativeAccessSpecifierProtected)
	bool                                          bActive;                                           // 0x0638(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBlocked;                                          // 0x0639(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCooling;                                          // 0x063A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bExhausted;                                        // 0x063B(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bReady;                                            // 0x063C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSettingProxy;                                     // 0x063D(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDelayUpdateStyle;                                 // 0x063E(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasRequestUpdate;                                 // 0x063F(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_640[0x18];                                     // 0x0640(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Activate();
	void Deactivate();
	void EndCooldown();
	void OnAbilityActivateFail(const struct FGameplayTagContainer& FailureReason);
	void OnAbilityCDReduce(float CD);
	void SetAbility(class UMarvelGameplayAbility* InAbility);
	void SetAbilityAction(const struct FUIActionData& AbilityAction);
	void SetAbilityIcon(class UTexture2D* InAbilityIcon);
	void SetAbilityIconFromSoftObject(const TSoftObjectPtr<class UTexture2D>& InAbilityIcon);
	void SetAbilityInputBind(EAbilityInputBinds InInputBind);
	void SetAbilityProxy(class UBindingProxy_Ability* InProxyAbility);
	void SetChargeCur(int32 InChargeCur);
	void SetChargeMax(int32 InChargeMax);
	void SetCooldownPassedPercent(float InPercent);
	void SetEnergyCur(float InEnergyCur);
	void SetEnergyMax(float InEnergyMax);
	void SetEnergyPercent(float InPercent);
	void SetReady(bool bInReady);
	void SetSharedAbility(class UMarvelGameplayAbility* InAbility);
	void StartCooldown(float Cooldown);
	void UpdateStyle();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_AbilityStatus_Base">();
	}
	static class UWidget_AbilityStatus_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_AbilityStatus_Base>();
	}
};

// Class Marvel.Widget_AbilityStatus_Ultimate
// 0x0010 (0x0668 - 0x0658)
class UWidget_AbilityStatus_Ultimate final : public UWidget_AbilityStatus_Base
{
public:
	class UTextBlock*                             Text_EnergyPercent;                                // 0x0658(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_660[0x8];                                      // 0x0660(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetPercent(float InPercent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_AbilityStatus_Ultimate">();
	}
	static class UWidget_AbilityStatus_Ultimate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_AbilityStatus_Ultimate>();
	}
};

// Class Marvel.MarvelAbilityTask_WaitAbilityDamage
// 0x01A0 (0x0378 - 0x01D8)
class UMarvelAbilityTask_WaitAbilityDamage final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(class UGameplayAbility* Ability, struct FAttributeModifierHandle& ModifierParameterHandle)> OnDamage;                                          // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8[0x8];                                      // 0x01E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           WithTag;                                           // 0x01F0(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithoutTag;                                        // 0x01FC(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x0208(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_209[0x7];                                      // 0x0209(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagRequirements               TagRequirements;                                   // 0x0210(0x0118)(Transient, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      Query;                                             // 0x0328(0x0048)(Transient, NativeAccessSpecifierPublic)
	bool                                          bUseRequireAnymentsMet;                            // 0x0370(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_371[0x7];                                      // 0x0371(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_WaitAbilityDamage* WaitForAbilityDamage(class UGameplayAbility* OwningAbility, const struct FGameplayTag& WithTag_0, const struct FGameplayTag& WithoutTag_0, bool TriggerOnce_0);
	static class UMarvelAbilityTask_WaitAbilityDamage* WaitForAbilityDamage_Query(class UGameplayAbility* OwningAbility, const struct FGameplayTagQuery& Query_0, bool TriggerOnce_0);
	static class UMarvelAbilityTask_WaitAbilityDamage* WaitForAbilityDamageWithTagRequirements(class UGameplayAbility* OwningAbility, const struct FGameplayTagRequirements& TagRequirements_0, bool InbUseRequireAnymentsMet, bool TriggerOnce_0);
	static class UMarvelAbilityTask_WaitAbilityDamage* WaitForAbilitysDamageById(class UGameplayAbility* OwningAbility, const TArray<int32>& AbilityIDs, bool TriggerOnce_0);

	void OnAbilityDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_WaitAbilityDamage">();
	}
	static class UMarvelAbilityTask_WaitAbilityDamage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_WaitAbilityDamage>();
	}
};

// Class Marvel.MarvelAbilityTask_WaitAbilityEnd
// 0x0038 (0x0210 - 0x01D8)
class UMarvelAbilityTask_WaitAbilityEnd final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(class UGameplayAbility* EndedAbility)> OnEnded;                                           // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithTag;                                           // 0x01E8(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithoutTag;                                        // 0x01F4(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeTriggeredAbilities;                         // 0x0200(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x0201(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_202[0xE];                                      // 0x0202(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_WaitAbilityEnd* MarvelWaitForAbilityEnded(class UGameplayAbility* OwningAbility, const struct FGameplayTag& WithTag_0, const struct FGameplayTag& WithoutTag_0, bool IncludeTriggeredAbilities_0, bool TriggerOnce_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_WaitAbilityEnd">();
	}
	static class UMarvelAbilityTask_WaitAbilityEnd* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_WaitAbilityEnd>();
	}
};

// Class Marvel.MarvelAbilityTask_WaitAbilityHit
// 0x0198 (0x0370 - 0x01D8)
class UMarvelAbilityTask_WaitAbilityHit final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(class UGameplayAbility* Ability, TArray<struct FHitResult>& HitResults)> OnHit;                                             // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithTag;                                           // 0x01E8(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithoutTag;                                        // 0x01F4(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x0200(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagRequirements               TagRequirements;                                   // 0x0208(0x0118)(Transient, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      Query;                                             // 0x0320(0x0048)(Transient, NativeAccessSpecifierPublic)
	bool                                          bUseRequireAnymentsMet;                            // 0x0368(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreScene;                                      // 0x0369(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_36A[0x6];                                      // 0x036A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_WaitAbilityHit* WaitForAbilityHit(class UGameplayAbility* OwningAbility, const struct FGameplayTag& WithTag_0, const struct FGameplayTag& WithoutTag_0, bool IgnoreScene, bool TriggerOnce_0);
	static class UMarvelAbilityTask_WaitAbilityHit* WaitForAbilityHit_Query(class UGameplayAbility* OwningAbility, const struct FGameplayTagQuery& Query_0, bool IgnoreScene, bool TriggerOnce_0);
	static class UMarvelAbilityTask_WaitAbilityHit* WaitForAbilityHitWithTagRequirements(class UGameplayAbility* OwningAbility, const struct FGameplayTagRequirements& TagRequirements_0, bool InbUseRequireAnymentsMet, bool IgnoreScene, bool TriggerOnce_0);
	static class UMarvelAbilityTask_WaitAbilityHit* WaitForAbilitysHitById(class UGameplayAbility* OwningAbility, const TArray<int32>& AbilityIDs, bool IgnoreScene, bool TriggerOnce_0);

	void OnAbilityHit(class UGameplayAbility* HitAbility, const struct FMarvelAbilityHitParams& HitParams, const TArray<struct FHitResult>& HitResults);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_WaitAbilityHit">();
	}
	static class UMarvelAbilityTask_WaitAbilityHit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_WaitAbilityHit>();
	}
};

// Class Marvel.TriggerHapticFeedbackEffect_Vibration
// 0x0120 (0x0200 - 0x00E0)
class UTriggerHapticFeedbackEffect_Vibration final : public UTriggerHapticFeedbackEffect_Base
{
public:
	uint8                                         VibrationPosition;                                 // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         VibrationFrequency;                                // 0x00E1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E2[0x6];                                       // 0x00E2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     FrequencyCurve;                                    // 0x00E8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         VibrationAmplitude;                                // 0x0170(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_171[0x7];                                      // 0x0171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     AmplitudeCurve;                                    // 0x0178(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TriggerHapticFeedbackEffect_Vibration">();
	}
	static class UTriggerHapticFeedbackEffect_Vibration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTriggerHapticFeedbackEffect_Vibration>();
	}
};

// Class Marvel.AbilityTask_WaitAbilityMissile
// 0x0030 (0x0208 - 0x01D8)
class UAbilityTask_WaitAbilityMissile final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(class UGameplayAbility* MissileAbility)> OnMissile;                                         // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithTag;                                           // 0x01E8(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithoutTag;                                        // 0x01F4(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeTriggeredAbilities;                         // 0x0200(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x0201(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_202[0x6];                                      // 0x0202(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_WaitAbilityMissile* MarvelWaitForAbilityMissile(class UGameplayAbility* OwningAbility, const struct FGameplayTag& WithTag_0, const struct FGameplayTag& WithoutTag_0, bool IncludeTriggeredAbilities_0, bool TriggerOnce_0);

	void OnAbilityMissile(class UGameplayAbility* MissileAbility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitAbilityMissile">();
	}
	static class UAbilityTask_WaitAbilityMissile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitAbilityMissile>();
	}
};

// Class Marvel.MarvelAbilityTask_WaitAbilityTargetData
// 0x0250 (0x0428 - 0x01D8)
class UMarvelAbilityTask_WaitAbilityTargetData final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(struct FGameplayAbilityTargetDataHandle& Data)> ValidData;                                         // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FGameplayAbilityTargetDataHandle& Data)> Cancelled;                                         // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F8[0x18];                                     // 0x01F8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TargetId;                                          // 0x0210(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameplayAbilityTargetActor*            TargetActor;                                       // 0x0218(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameplayAbility*                       OwingAbility;                                      // 0x0220(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCreateKeyIfNotValidForMorePredicting;             // 0x0228(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EGameplayTargetingConfirmation                ConfirmationType;                                  // 0x0229(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_22A[0x6];                                      // 0x022A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AGameplayAbilityTargetActor> TargetClass;                                       // 0x0230(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bActorCreatedByTask;                               // 0x0238(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_239[0x7];                                      // 0x0239(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilityTask_WaitConfirmCancel*         WaitInputTask;                                     // 0x0240(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPredictionKey                         TAProduceDataKey;                                  // 0x0248(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPredictionKey                         TargetDataKey;                                     // 0x02E8(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPredictionKey                         TargetCancelKey;                                   // 0x0388(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UMarvelAbilityTask_WaitAbilityTargetData* WaitAbilityTargetData(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, EGameplayTargetingConfirmation ConfirmationType_0, TSubclassOf<class AGameplayAbilityTargetActor> Class_0, int32 InTargetID);
	static class UMarvelAbilityTask_WaitAbilityTargetData* WaitAbilityTargetDataUsingActor(class UGameplayAbility* OwningAbility, class FName TaskInstaceName, EGameplayTargetingConfirmation ConfirmationType_0, class AGameplayAbilityTargetActor* InTargetActor, bool bCreateKeyIfNotValidForMorePredicting_0);

	void OnTargetDataCancelledCallback(const struct FGameplayAbilityTargetDataHandle& Data);
	void OnTargetDataReadyCallback(const struct FGameplayAbilityTargetDataHandle& Data);
	void OnTargetDataReplicateCallback(const struct FGameplayAbilityTargetDataHandle& Data);
	void OnTargetDataReplicateCancelledCallback();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_WaitAbilityTargetData">();
	}
	static class UMarvelAbilityTask_WaitAbilityTargetData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_WaitAbilityTargetData>();
	}
};

// Class Marvel.MarvelAbilityTask_WaitApplyCost
// 0x0040 (0x0218 - 0x01D8)
class UMarvelAbilityTask_WaitApplyCost final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(class UMarvelGameplayAbility* GameplayAbility, float CostValue, const struct FGameplayTag& CostType)> OnAbilityApplyCost;                                // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	TMulticastInlineDelegate<void()>              OnAbilityCostExhaustion;                           // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPrivate)
	int32                                         TargetAbilityID;                                   // 0x01F8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x0200(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelGameplayAbility*                 TargetAbility;                                     // 0x0208(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ApplyCostValue;                                    // 0x0210(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_WaitApplyCost* WaitAbilityApplyCost(class UGameplayAbility* OwningAbility, int32 AbilityID);

	void OnAbilityApplyCostCallBack(class UMarvelGameplayAbility* TargetAbility_0, float CostValue, const struct FGameplayTag& CostType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_WaitApplyCost">();
	}
	static class UMarvelAbilityTask_WaitApplyCost* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_WaitApplyCost>();
	}
};

// Class Marvel.MarvelAbilityTask_WaitBindInput
// 0x02D8 (0x04B0 - 0x01D8)
class UMarvelAbilityTask_WaitBindInput final : public UAbilityTask
{
public:
	TDelegate<void()>                             IsPressAllowed;                                    // 0x01D8(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(float TimeWaited)> OnPress;                                           // 0x01F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float TimeWaited)> OnRelease;                                         // 0x0200(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         ActivateFrames;                                    // 0x0210(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          RegisteredCallbacks;                               // 0x0214(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_215[0x3];                                      // 0x0215(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         BindInputID;                                       // 0x0218(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StartTime;                                         // 0x021C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   Method_Name;                                       // 0x0220(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsDelayInput;                                     // 0x022C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_22D[0x3];                                      // 0x022D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OldPressElapsedTime;                               // 0x0230(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OldReleaseElapsedTime;                             // 0x0234(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTriggerOnce;                                      // 0x0238(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCheckStatus;                                      // 0x0239(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_23A[0x2];                                      // 0x023A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PressTriggerCount;                                 // 0x023C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ReleaseTriggerCount;                               // 0x0240(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBlockAbilityInput;                                // 0x0244(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_245[0x3];                                      // 0x0245(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MarvelAbilityID;                                   // 0x0248(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BindInputIndex;                                    // 0x024C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseCustomActionParam;                             // 0x0250(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_251[0x7];                                      // 0x0251(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActionTipsParam                       ActionTipsParam;                                   // 0x0258(0x0068)(Transient, Protected, NativeAccessSpecifierProtected)
	EAbilityGenericReplicatedEvent                PressEventType;                                    // 0x02C0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EAbilityGenericReplicatedEvent                ReleaseEventType;                                  // 0x02C1(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C2[0x6];                                      // 0x02C2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAbilityBindInputConfig                AbilityBindInputConfig;                            // 0x02C8(0x0098)(Transient, Protected, NativeAccessSpecifierProtected)
	EAbilityInputBinds                            InputBind_GraphAbilityEditor;                      // 0x0360(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_361[0x7];                                      // 0x0361(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         PressKeySeed;                                      // 0x0368(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         ReleaseKeySeed;                                    // 0x0408(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A8[0x8];                                      // 0x04A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_WaitBindInput* WaitBindInput(class UGameplayAbility* OwningAbility, class FName MethodName, bool TriggerOnce, bool CheckStatus, bool bIsDelayInput_0);
	static class UMarvelAbilityTask_WaitBindInput* WaitBindInputByWaitInputParam(class UGameplayAbility* OwningAbility, const struct FWaitInputParam& InputParam);

	void LocalEmptyCallBackFuction();
	void OnLocalPressCallback(int32 InputID, int32 AbilityID);
	void OnLocalReleaseCallback(int32 InputID, int32 AbilityID);
	void OnPressCallback(float Duration);
	void OnReleaseCallback(float Duration);
	void OnRemotePressCallback(const struct FGameplayAbilityTargetDataHandle& Duration);
	void OnRemoteReleaseCallback(const struct FGameplayAbilityTargetDataHandle& Duration);
	void SimulatePressEvent();
	void SimulateReleaseEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_WaitBindInput">();
	}
	static class UMarvelAbilityTask_WaitBindInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_WaitBindInput>();
	}
};

// Class Marvel.MarvelAbilityTask_WaitDelay
// 0x0050 (0x0228 - 0x01D8)
class UMarvelAbilityTask_WaitDelay final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void()>              OnFinish;                                          // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x01E8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeStarted;                                       // 0x01EC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         AbilityID;                                         // 0x01F0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 TaskName;                                          // 0x01F8(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarvelGameplayAbility*                 SourceAbility;                                     // 0x0208(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_210[0x18];                                     // 0x0210(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_WaitDelay* WaitDelay(class UMarvelGameplayAbility* OwningAbility, const class FString& TaskName_0);

	void OnTimeFinish();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_WaitDelay">();
	}
	static class UMarvelAbilityTask_WaitDelay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_WaitDelay>();
	}
};

// Class Marvel.MarvelProjectileFloorDust
// 0x0040 (0x0130 - 0x00F0)
class UMarvelProjectileFloorDust final : public UActorComponent
{
public:
	class UFXSystemComponent*                     Dust;                                              // 0x00F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UFXSystemAsset*                         DustType;                                          // 0x00F8(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DustHeightThreshold;                               // 0x0100(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bNeedDestroyWhenLeaveGround;                       // 0x0104(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_105[0x3];                                      // 0x0105(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      ObjectTypes;                                       // 0x0108(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         bRenderCustomDepthPass : 1;                        // 0x0118(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	bool                                          bFxUpdateTransform;                                // 0x0119(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11A[0x2];                                      // 0x011A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GravelLoopAudioID;                                 // 0x011C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                AudioObj;                                          // 0x0120(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasStopAudio;                                     // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PlayGravelLoopAudio();
	void StopGravelLoopAudio();

	class UFXSystemComponent* GetFXComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelProjectileFloorDust">();
	}
	static class UMarvelProjectileFloorDust* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelProjectileFloorDust>();
	}
};

// Class Marvel.MarvelAbilityTask_WaitGameplayActor
// 0x0018 (0x01F0 - 0x01D8)
class UMarvelAbilityTask_WaitGameplayActor final : public UAbilityTask
{
public:
	ETargetActorType                              ListenActorType;                                   // 0x01D8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1D9[0x7];                                      // 0x01D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AActor* GameplayActor)> OnGameplayActorAdded;                              // 0x01E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UMarvelAbilityTask_WaitGameplayActor* WaitForGameplayActor(class UGameplayAbility* OwningAbility, ETargetActorType InActorType);

	void InternalGameplayActorAdded(class AActor* InGameplayActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_WaitGameplayActor">();
	}
	static class UMarvelAbilityTask_WaitGameplayActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_WaitGameplayActor>();
	}
};

// Class Marvel.MarvelAbilityTask_WaitGameplayEffectDurationChange
// 0x0038 (0x0210 - 0x01D8)
class UMarvelAbilityTask_WaitGameplayEffectDurationChange final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(const struct FActiveGameplayEffectHandle& Handle, float NewStartTime, float NewDuration)> OnChange;                                          // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FActiveGameplayEffectHandle& Handle, float NewStartTime, float NewDuration)> InvalidHandle;                                     // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F8[0x8];                                      // 0x01F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Registered;                                        // 0x0200(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_201[0xF];                                      // 0x0201(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_WaitGameplayEffectDurationChange* WaitForGameplayEffectDurationChange(class UGameplayAbility* OwningAbility, const struct FActiveGameplayEffectHandle& Handle);

	void OnGameplayEffectDurationChange(const struct FActiveGameplayEffectHandle& Handle, float NewStartTime, float NewDuration);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_WaitGameplayEffectDurationChange">();
	}
	static class UMarvelAbilityTask_WaitGameplayEffectDurationChange* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_WaitGameplayEffectDurationChange>();
	}
};

// Class Marvel.MarvelAbilityTask_WaitGameplayEffectPeriod
// 0x0038 (0x0210 - 0x01D8)
class UMarvelAbilityTask_WaitGameplayEffectPeriod final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(float TimeRemaining)> OnPeriodicExecuteCallbackDelegate;                 // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo)> OnRemoved;                                         // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F8[0x10];                                     // 0x01F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x0208(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         PeriodTime;                                        // 0x020C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UMarvelAbilityTask_WaitGameplayEffectPeriod* WaitForGameplayEffectPeriodicExec(class UGameplayAbility* OwningAbility, const struct FActiveGameplayEffectHandle& InHandle);

	void OnGameplayEffectRemoved(const struct FGameplayEffectRemovalInfo& InGameplayEffectRemovalInfo);
	void OnPeriodicGameplayEffectCallback(class UAbilitySystemComponent* Target, const struct FGameplayEffectSpecStackHandle& SpecHandleApplied, const struct FActiveGameplayEffectHandle& ActiveHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_WaitGameplayEffectPeriod">();
	}
	static class UMarvelAbilityTask_WaitGameplayEffectPeriod* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_WaitGameplayEffectPeriod>();
	}
};

// Class Marvel.TraceCacheStaticMeshComponent
// 0x0160 (0x0AA0 - 0x0940)
class UTraceCacheStaticMeshComponent final : public UAffectedStaticMeshBaseComponent
{
public:
	bool                                          bIsBindInTraceCache;                               // 0x0940(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_941[0x3F];                                     // 0x0941(0x003F)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FTraceCacheFadeMaterialInfo> FirstFadeMaterialParams;                           // 0x0980(0x0050)(Edit, NativeAccessSpecifierPublic)
	TMap<int32, struct FTraceCacheFadeMaterialInfo> SecondFadeMaterialParams;                          // 0x09D0(0x0050)(Edit, NativeAccessSpecifierPublic)
	float                                         FadeTickFrame;                                     // 0x0A20(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AStaticMeshActor>        LinkStaticMeshActor;                               // 0x0A24(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class AChaosDestructionActor>  GenChaosDesActor;                                  // 0x0A2C(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A34[0x4];                                      // 0x0A34(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class UMaterialInstance*>         OriginMaterialInstances;                           // 0x0A38(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_A88[0xC];                                      // 0x0A88(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsFracture;                                       // 0x0A94(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A95[0x3];                                      // 0x0A95(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AChaosDestructionActor>  DestructionActorCache;                             // 0x0A98(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ClientFadeTickFunc();
	void EndFromGCTraceTrigger();
	void FinishAffectState();
	void FinishAffectState_External();
	void FinishAffectState_NextFrame();
	void HideStaticMeshAndShowGC();
	void OnLikeMapLoaded();
	void OnRep_bIsFracture();
	void OnReplayFracture_External();
	void OnReplayFracture_NextFrame();
	void OnReplayUnFracture_External();
	void ResetDamageDataDelegate();
	void ServerDelayFunc();
	void TriggerHitIndicatorMulticast(class AMarvelBaseCharacter* Character, const struct FHitResult& HitInfo);

	void EnableLinkSM(bool bEnabled) const;
	void TriggerGCBreakAllParticles() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TraceCacheStaticMeshComponent">();
	}
	static class UTraceCacheStaticMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTraceCacheStaticMeshComponent>();
	}
};

// Class Marvel.MarvelAbilityTask_WaitGameplayEffectRemoved
// 0x0118 (0x02F0 - 0x01D8)
class UMarvelAbilityTask_WaitGameplayEffectRemoved final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo)> OnRemoved;                                         // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo)> InvalidHandle;                                     // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UAbilitySystemComponent*                EffectOwningAbilitySystemComponent;                // 0x01F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRegistered;                                       // 0x0200(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEffectCatchUp;                                    // 0x0201(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_202[0x2];                                      // 0x0202(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EffectInstanceId;                                  // 0x0204(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         PredictionKey;                                     // 0x0208(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayEffectRemovalInfo             GameplayEffectRemovalInfo;                         // 0x02A8(0x0028)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FActiveGameplayEffectHandle            OriginalEffectHandle;                              // 0x02D0(0x0008)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FActiveGameplayEffectHandle            ReceivedEffectHandle;                              // 0x02D8(0x0008)(Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2E0[0x10];                                     // 0x02E0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_WaitGameplayEffectRemoved* WaitForGameplayEffectRemoved(class UGameplayAbility* OwningAbility, const struct FActiveGameplayEffectHandle& InEffectHandle, bool bInEffectCatchUp);

	void OnOriginalEffectRemoved(const struct FGameplayEffectRemovalInfo& InGameplayEffectRemovalInfo);
	void OnReceivedEffectRemoved(const struct FGameplayEffectRemovalInfo& InGameplayEffectRemovalInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_WaitGameplayEffectRemoved">();
	}
	static class UMarvelAbilityTask_WaitGameplayEffectRemoved* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_WaitGameplayEffectRemoved>();
	}
};

// Class Marvel.MarvelAbilityTask_WaitInputAction
// 0x0298 (0x0470 - 0x01D8)
class UMarvelAbilityTask_WaitInputAction final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(float TimeWaited)> OnPressed;                                         // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float TimeWaited)> OnReleaseD;                                        // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FInputActionParam                      InputActionParam;                                  // 0x01F8(0x0080)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FAbilityBindInputConfig                InputConfig;                                       // 0x0278(0x0098)(Transient, Protected, NativeAccessSpecifierProtected)
	int32                                         MarvelAbilityID;                                   // 0x0310(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BindInputIndex;                                    // 0x0314(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         PressKeySeed;                                      // 0x0318(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         ReleaseKeySeed;                                    // 0x03B8(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StartTime;                                         // 0x0458(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TriggerIndex;                                      // 0x045C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ActivateFrames;                                    // 0x0460(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OldPressElapsedTime;                               // 0x0464(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OldReleaseElapsedTime;                             // 0x0468(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_46C[0x4];                                      // 0x046C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_WaitInputAction* WaitBindInputActionByAbilityBindInputConfig(class UGameplayAbility* OwningAbility, const struct FAbilityBindInputConfig& InputConfig_0);

	void OnLocalPressCallback(int32 AbilityID);
	void OnLocalReleaseCallback(int32 AbilityID);
	void OnPressCallback(float Duration);
	void OnReleaseCallback(float Duration);
	void OnRemotePressCallback(const struct FGameplayAbilityTargetDataHandle& Duration);
	void OnRemoteReleaseCallback(const struct FGameplayAbilityTargetDataHandle& Duration);
	void SimulatePressEvent();
	void SimulateReleaseEvent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_WaitInputAction">();
	}
	static class UMarvelAbilityTask_WaitInputAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_WaitInputAction>();
	}
};

// Class Marvel.MarvelAbilityTask_WaitInputPress
// 0x0018 (0x01F0 - 0x01D8)
class UMarvelAbilityTask_WaitInputPress final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(float TimeWaited)> OnPress;                                           // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x01E8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTestInitialState;                                 // 0x01EC(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_WaitInputPress* MarvelWaitInputPress(class UGameplayAbility* OwningAbility, bool bTestAlreadyPressed);

	void OnPressCallback();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_WaitInputPress">();
	}
	static class UMarvelAbilityTask_WaitInputPress* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_WaitInputPress>();
	}
};

// Class Marvel.MarvelAbilityTask_WaitLongPressRelease
// 0x01A0 (0x0378 - 0x01D8)
class UMarvelAbilityTask_WaitLongPressRelease final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(float TimeHeld)> OnRelease;                                         // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float TimeHeld)> OnTimeOverMaxHoldTime;                             // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x01F8(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LongPressMaxTime;                                  // 0x01FC(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriggerOnRelease;                                 // 0x0200(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         ReleaseKey;                                        // 0x0208(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         MaxReleaseKey;                                     // 0x02A8(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAbilityTargetData_Float       LongPressData;                                     // 0x0348(0x0010)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_358[0x20];                                     // 0x0358(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_WaitLongPressRelease* WaitLongPressRelease(class UGameplayAbility* OwningAbility);

	void OnLocalReleaseCallback();
	void OnLocalTimeOverMaxHoldTimeCallback();
	void OnReleaseCallback(float Duration);
	void OnReplicateReleaseCallback(const struct FGameplayAbilityTargetDataHandle& Duration);
	void OnTimeOverMaxHoldTimeCallback();

	float GetPressedTime() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_WaitLongPressRelease">();
	}
	static class UMarvelAbilityTask_WaitLongPressRelease* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_WaitLongPressRelease>();
	}
};

// Class Marvel.MarvelJarvisReplayControlSubsystem
// 0x0018 (0x0050 - 0x0038)
class UMarvelJarvisReplayControlSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AutoStartJarvisRecord();
	void OnMatchQuitting();
	void OnMatchStateChanged(EMatchState MatchState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelJarvisReplayControlSubsystem">();
	}
	static class UMarvelJarvisReplayControlSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelJarvisReplayControlSubsystem>();
	}
};

// Class Marvel.MarvelAbilityTask_WaitReachedJumpApex
// 0x0020 (0x01F8 - 0x01D8)
class UMarvelAbilityTask_WaitReachedJumpApex final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void()>              OnReachedJumpApex;                                 // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x01E8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelCharacterMovementComponent*      OwnerMovement;                                     // 0x01F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UMarvelAbilityTask_WaitReachedJumpApex* WaitReachedJumpApex(class UGameplayAbility* OwningAbility);

	void ReachedJumpApex();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_WaitReachedJumpApex">();
	}
	static class UMarvelAbilityTask_WaitReachedJumpApex* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_WaitReachedJumpApex>();
	}
};

// Class Marvel.MarvelPlayMontageCallbackProxy
// 0x0080 (0x00B0 - 0x0030)
class UMarvelPlayMontageCallbackProxy final : public UObject
{
public:
	TMulticastInlineDelegate<void(class FName NotifyName)> OnCompleted;                                       // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName NotifyName)> OnBlendOut;                                        // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName NotifyName)> OnInterrupted;                                     // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName NotifyName)> OnNotifyBegin;                                     // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName NotifyName)> OnNotifyEnd;                                       // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x30];                                      // 0x0080(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelPlayMontageCallbackProxy* CreateProxyObjectForPlayMontage(class USkeletalMeshComponent* InSkeletalMeshComponent, class UAnimMontage* MontageToPlay, float PlayRate, float StartingPosition, class FName StartingSection);

	void OnMontageBlendingOut(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void OnNotifyBeginReceived(class FName NotifyName, const struct FBranchingPointNotifyPayload& BranchingPointNotifyPayload);
	void OnNotifyEndReceived(class FName NotifyName, const struct FBranchingPointNotifyPayload& BranchingPointNotifyPayload);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPlayMontageCallbackProxy">();
	}
	static class UMarvelPlayMontageCallbackProxy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelPlayMontageCallbackProxy>();
	}
};

// Class Marvel.MarvelAbilityTask_WaitSceneBlocked
// 0x0050 (0x0228 - 0x01D8)
class UMarvelAbilityTask_WaitSceneBlocked final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void()>              OnLanded;                                          // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         CheckLength;                                       // 0x01E8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CheckRadius;                                       // 0x01EC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                CheckDir;                                          // 0x01F0(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         IgnoreActors;                                      // 0x0208(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bOnlyFalling;                                      // 0x0218(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         WalkingCheckFrame;                                 // 0x021C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         NowWalkingFrame;                                   // 0x0220(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_WaitSceneBlocked* WaitLanded(class UGameplayAbility* OwningAbility);
	static class UMarvelAbilityTask_WaitSceneBlocked* WaitNearLand(class UGameplayAbility* OwningAbility, float Height, float Radius, const TArray<class AActor*>& IgnoreList);
	static class UMarvelAbilityTask_WaitSceneBlocked* WaitNearScene(class UGameplayAbility* OwningAbility, float Length, float Radius, const struct FVector& Dir, const TArray<class AActor*>& IgnoreList);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_WaitSceneBlocked">();
	}
	static class UMarvelAbilityTask_WaitSceneBlocked* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_WaitSceneBlocked>();
	}
};

// Class Marvel.MarvelAbilityTask_WaitServerConfirm
// 0x0170 (0x0348 - 0x01D8)
class UMarvelAbilityTask_WaitServerConfirm final : public UAbilityTask
{
public:
	uint8                                         Pad_1D8[0x8];                                      // 0x01D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         ConfirmKey;                                        // 0x01E0(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FPredictionKey                         RejectKey;                                         // 0x0280(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bHasReplicatedDataToClient;                        // 0x0320(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_321[0x7];                                      // 0x0321(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnConfirm;                                         // 0x0328(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnReject;                                          // 0x0338(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UMarvelAbilityTask_WaitServerConfirm* WaitServerConfirm(class UGameplayAbility* OwningAbility);

	void OnConfirmCallback();
	void OnRejectCallback();
	void ReplicateToClient(bool bInConfirm);

	bool GetHasReplicateDataToServer() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_WaitServerConfirm">();
	}
	static class UMarvelAbilityTask_WaitServerConfirm* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_WaitServerConfirm>();
	}
};

// Class Marvel.MarvelImpulseLibrary
// 0x0000 (0x0030 - 0x0030)
class UMarvelImpulseLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float ApplyHitImpulseByLevel(const struct FHitResult& HitInfo, int32 ImpulseLevel, const struct FVector& CustomDir, int32 SplitNum, float FixHeightAngle);
	static int32 CalcImpulseLevelFromDamageAndImpulseInfo(float Damage, const struct FMarvelImpulseLevelInfo& LevelInfo);
	static int32 CalcImpulseLevelFromMoveSpeedAndImpulseInfo(float MoveSpeed, const struct FMarvelImpulseLevelInfo& LevelInfo);
	static float GetHitTargetMass(const struct FHitResult& HitInfo);
	static void GetImpulseInfoWithCharacter(class AMarvelBaseCharacter* Character, struct FMarvelImpulseLevelInfo* OutLevelInfo, struct FMarvelImpulseApplyFilter* OutApplyFilter);
	static void GetImpulseInfoWithInstanceAmmo(class AInstantAmmo* Ammo, struct FMarvelImpulseLevelInfo* OutLevelInfo, struct FMarvelImpulseApplyFilter* OutApplyFilter);
	static float GetImpulseValueFromDamage(float Damage, float TargetMass, EMarvelImpulseTargetType TargetType, int32 OffsetLevel);
	static float GetImpulseValueFromLevel(int32 Level, float TargetMass, EMarvelImpulseTargetType TargetType);
	static float GetImpulseValueFromMoveSpeed(float MoveSpeed, float TargetMass, EMarvelImpulseTargetType TargetType, int32 OffsetLevel);
	static float GetImpulseValueWithLevelInfoFromDamage(float Damage, float TargetMass, EMarvelImpulseTargetType TargetType, const struct FMarvelImpulseLevelInfo& LevelInfo);
	static float GetImpulseValueWithLevelInfoFromMoveSpeed(float MoveSpeed, float TargetMass, EMarvelImpulseTargetType TargetType, const struct FMarvelImpulseLevelInfo& LevelInfo);
	static bool TargetComponentIsRagdoll(const class UPrimitiveComponent* TargetComp);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelImpulseLibrary">();
	}
	static class UMarvelImpulseLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelImpulseLibrary>();
	}
};

// Class Marvel.MarvelAbilityTask_WaitInputStateChanged
// 0x0208 (0x03E0 - 0x01D8)
class UMarvelAbilityTask_WaitInputStateChanged final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(float StateIntervalTime)> OnStateBegin;                                      // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float StateIntervalTime)> OnStateEnd;                                        // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float StateIntervalTime)> OnStateIntervalTimeMax;                            // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float StateIntervalTime)> OnStateIntervalTimeMin;                            // 0x0208(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FPredictionKey                         MaxReleaseKey;                                     // 0x0218(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         MinPressedKey;                                     // 0x02B8(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_358[0x28];                                     // 0x0358(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bStateIsBegin;                                     // 0x0380(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bShouldBroadCastEndState;                          // 0x0381(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bPauseTaskBehaviour;                               // 0x0382(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_383[0x1];                                      // 0x0383(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StateChangedTime;                                  // 0x0384(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         LongIntervalMaxTime;                               // 0x0388(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_38C[0x4C];                                     // 0x038C(0x004C)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAbilityTask_WaitBindInput*       WaitInputTask;                                     // 0x03D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UMarvelAbilityTask_WaitInputStateChanged* WaitInputStateChanged(class UGameplayAbility* OwningAbility, const struct FStateChangedTaskParam& TaskParam);

	float GetStateIntervalTime();
	bool GetTaskState();
	bool IsHoldAbility();
	void OnInputPress(float Time);
	void OnInputRelease(float Time);
	void OnLocalTimeOverMaxIntervalTimeCallback();
	void OnLocalTimeOverMinIntervalTimeCallback();
	void OnTimeOverMaxIntervalTimeCallback();
	void OnTimeOverMinIntervalTimeCallback();
	void OnUserSettingValueChanged();
	void SetBeginState(bool NewState);
	void SetPauseTask(bool bPause);
	void SetTaskShouldBroadCastEndState(bool NewState);
	bool ShouldSwitchActionTips();
	void UpdateIsLoopAbility();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_WaitInputStateChanged">();
	}
	static class UMarvelAbilityTask_WaitInputStateChanged* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_WaitInputStateChanged>();
	}
};

// Class Marvel.MarvelOverlay
// 0x0088 (0x0288 - 0x0200)
class UMarvelOverlay : public UOverlay
{
public:
	struct FGameplayTagContainer                  TypeTags;                                          // 0x0200(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FMarvelWidgetTag                       WidgetTag;                                         // 0x0268(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_280[0x8];                                      // 0x0280(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelOverlay">();
	}
	static class UMarvelOverlay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelOverlay>();
	}
};

// Class Marvel.MarvelAbilityTask_WaitTargetData
// 0x00B8 (0x0290 - 0x01D8)
class UMarvelAbilityTask_WaitTargetData : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(struct FGameplayAbilityTargetDataHandle& Data)> ValidData;                                         // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         bOnceOnly : 1;                                     // 0x01E8(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bHasBeenReplicated;                                // 0x01E9(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1EA[0x6];                                      // 0x01EA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         RPCKey;                                            // 0x01F0(0x00A0)(Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UMarvelAbilityTask_WaitTargetData* WaitTargetData(class UGameplayAbility* OwningAbility, bool bOnceOnly_0);

	void OnTargetDataReplicatedCallback(const struct FGameplayAbilityTargetDataHandle& Data);
	void ReplicateTargetData(const struct FGameplayAbilityTargetDataHandle& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_WaitTargetData">();
	}
	static class UMarvelAbilityTask_WaitTargetData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_WaitTargetData>();
	}
};

// Class Marvel.MarvelAbilityTask_WaitTargetDataInDuration
// 0x0030 (0x02C0 - 0x0290)
class UMarvelAbilityTask_WaitTargetDataInDuration final : public UMarvelAbilityTask_WaitTargetData
{
public:
	TMulticastInlineDelegate<void()>              OnTimedOut;                                        // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         MaxWaitingTime;                                    // 0x02A0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A4[0x1C];                                     // 0x02A4(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_WaitTargetDataInDuration* WaitTargetDataInDuration(class UGameplayAbility* OwningAbility, float MaxWaitingTime_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_WaitTargetDataInDuration">();
	}
	static class UMarvelAbilityTask_WaitTargetDataInDuration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_WaitTargetDataInDuration>();
	}
};

// Class Marvel.MarvelAbilityTask_WaitTargetEnd
// 0x0018 (0x01F0 - 0x01D8)
class UMarvelAbilityTask_WaitTargetEnd final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(class AActor* Value)> OnTargetEnd;                                       // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8[0x8];                                      // 0x01E8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelAbilityTask_WaitTargetEnd* WaitTargetEnd(class UGameplayAbility* OwningAbility, class AActor* InTargetActor);

	void OnAgentEndTask(class AActor* InAgentActor);
	void OnCharacterDeath(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnCharacterEndPlay(class AMarvelBaseCharacter* InCharacter);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityTask_WaitTargetEnd">();
	}
	static class UMarvelAbilityTask_WaitTargetEnd* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityTask_WaitTargetEnd>();
	}
};

// Class Marvel.MarvelAbilityWorldReticle_CueVisualization
// 0x0090 (0x0550 - 0x04C0)
class AMarvelAbilityWorldReticle_CueVisualization final : public AGameplayAbilityWorldReticle
{
public:
	uint8                                         Pad_4C0[0x10];                                     // 0x04C0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAudioComponent*                  AudioComponent;                                    // 0x04D0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SkinID;                                            // 0x04D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           VisualizationCueTag;                               // 0x04DC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, Net, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetLocation;                                    // 0x04E8(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPortalSegments                        Segments;                                          // 0x0500(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityWorldReticle_CueVisualization">();
	}
	static class AMarvelAbilityWorldReticle_CueVisualization* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelAbilityWorldReticle_CueVisualization>();
	}
};

// Class Marvel.MarvelDebugProfileWidget
// 0x0028 (0x03E0 - 0x03B8)
class UMarvelDebugProfileWidget final : public UUserWidget
{
public:
	TSubclassOf<class UUserWidget>                TargetWidgetClass;                                 // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UVerticalBox*                           VerticalBox_Display;                               // 0x03C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             TextBlock_PackagePath;                             // 0x03C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             TextBlock_NodeCount;                               // 0x03D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D8[0x8];                                      // 0x03D8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelDebugProfileWidget">();
	}
	static class UMarvelDebugProfileWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelDebugProfileWidget>();
	}
};

// Class Marvel.AirdropAbilityConfig
// 0x2B18 (0x2BB0 - 0x0098)
class UAirdropAbilityConfig final : public UMarvelAbilityConfig
{
public:
	bool                                          bLandedGroundIsWalkable;                           // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinimalDistanceToGround;                           // 0x009C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaximumDegreesBetweenDown;                         // 0x00A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimalDistanceToTarget;                           // 0x00A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinimalDistanceToTargetPoint;                      // 0x00A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundCheckAngle;                                  // 0x00AC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSmashRadius;                                    // 0x00B0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifyCapsule;                                    // 0x00B4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B5[0x3];                                       // 0x00B5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ModifyCapsuleRadius;                               // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ModifyCapsuleHalfHeight;                           // 0x00BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelAbilityTraceContext             TraceAimContext;                                   // 0x00C0(0x0F90)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FGameplayTag                           IndicateCueTag;                                    // 0x1050(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckDown;                                        // 0x105C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckDownWhenTraceWall;                           // 0x105D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_105E[0x2];                                     // 0x105E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             TraceDownContext;                                  // 0x1060(0x0F90)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<int32>                                 BuffIds;                                           // 0x1FF0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDashAbilityInfo                       DashInfo;                                          // 0x2000(0x0BA8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BA8[0x8];                                     // 0x2BA8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AirdropAbilityConfig">();
	}
	static class UAirdropAbilityConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAirdropAbilityConfig>();
	}
};

// Class Marvel.MarvelAbility_Airdrop
// 0x01F0 (0x2770 - 0x2580)
class UMarvelAbility_Airdrop : public UMarvelGameplayAbility
{
public:
	TMulticastInlineDelegate<void(bool Value)>    CanActivateDelegate;                               // 0x2580(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          bIsDashing;                                        // 0x2590(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2591[0x7];                                     // 0x2591(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DashAimLocation;                                   // 0x2598(0x0018)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FRotator                               DashAimRotation;                                   // 0x25B0(0x0018)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool Value)>    OnDashStateChanged;                                // 0x25C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UAirdropAbilityConfig*                  Config;                                            // 0x25D8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   OwningCharacter;                                   // 0x25E0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAbilityTask_Dash*                DashTask;                                          // 0x25E8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAbilityTask_PlayMontageAndWaitForEvent* PlayMontageTask;                                   // 0x25F0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_25F8[0x178];                                   // 0x25F8(0x0178)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnDashFinish(EDashStopReason Reason);
	void PlayMontage(int32 MontageIndex, class FName StartSection);

	void OnRep_IsDashing() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbility_Airdrop">();
	}
	static class UMarvelAbility_Airdrop* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbility_Airdrop>();
	}
};

// Class Marvel.Cue_Ability_Loop_Airdrop
// 0x0038 (0x0E88 - 0x0E50)
class ACue_Ability_Loop_Airdrop final : public AMarvelCueNotify_Ability
{
public:
	class UNiagaraComponent*                      NS_Loop;                                           // 0x0E50(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDecalComponent*                        DecalComponent;                                    // 0x0E58(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x0E60(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysShow;                                       // 0x0E64(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E65[0x3];                                      // 0x0E65(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDeclarationHolder                     DeclarePlayerViewSideHolder;                       // 0x0E68(0x0010)(Transient, NativeAccessSpecifierPublic)
	class UMarvelAbility_Airdrop*                 Ability;                                           // 0x0E78(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E80[0x8];                                      // 0x0E80(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAbilityCanActivateChanged(bool bCanActivate);
	void OnDashStateChanged(bool bIsDashing);
	void OnPlayerViewSideChanged(EClientPlayerViewSide InViewSide);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Ability_Loop_Airdrop">();
	}
	static class ACue_Ability_Loop_Airdrop* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Ability_Loop_Airdrop>();
	}
};

// Class Marvel.MarvelGameplayEffectAmmo3Modify
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectAmmo3Modify final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectAmmo3Modify">();
	}
	static class UMarvelGameplayEffectAmmo3Modify* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectAmmo3Modify>();
	}
};

// Class Marvel.MarvelAbilityConfig_DoubleJump
// 0x0028 (0x00C0 - 0x0098)
class UMarvelAbilityConfig_DoubleJump : public UMarvelAbilityConfig
{
public:
	float                                         CurrentVelocityChange;                             // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HorizonVelocity;                                   // 0x009C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bXYOverride;                                       // 0x00A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         VerticalVelocity;                                  // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bZOverride;                                        // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x3];                                       // 0x00A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         GravityChangeBuffID;                               // 0x00AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityChangeDuration;                             // 0x00B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDefaultForwardJump;                               // 0x00B4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndAbilityWhenJump;                               // 0x00B5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlockAirControlInAir;                             // 0x00B6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B7[0x1];                                       // 0x00B7(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxJumpCount;                                      // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         JumpInterval;                                      // 0x00BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityConfig_DoubleJump">();
	}
	static class UMarvelAbilityConfig_DoubleJump* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityConfig_DoubleJump>();
	}
};

// Class Marvel.MarvelHitShape_Box
// 0x0000 (0x08A0 - 0x08A0)
class UMarvelHitShape_Box final : public UBoxComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelHitShape_Box">();
	}
	static class UMarvelHitShape_Box* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelHitShape_Box>();
	}
};

// Class Marvel.MarvelAbility_DoubleJump
// 0x00F8 (0x2678 - 0x2580)
class UMarvelAbility_DoubleJump : public UMarvelGameplayAbility
{
public:
	struct FVector                                PendingLaunchVel;                                  // 0x2580(0x0018)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FVector& Velocity)> PendingLaunchVelDelegate;                          // 0x2598(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_25A8[0x8];                                     // 0x25A8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   OwnerChar;                                         // 0x25B0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCharacterMovementComponent*            OwnerMovementCom;                                  // 0x25B8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAbilityConfig_DoubleJump*        Config;                                            // 0x25C0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAbilityTask_WaitBindInput*       InputTask;                                         // 0x25C8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_25D0[0xA8];                                    // 0x25D0(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyDoubleJump();
	struct FVector CalcLaunchVelocity(const struct FVector2D& InDirection);
	void DoubleJump_Internal();
	struct FVector2D GetJumpDirection();
	struct FVector GetPendingLaunchVelocity(const struct FVector& LaunchVelocity, bool bXYOverride, bool bZOverride);
	void K2_OnCharacterLand(const struct FHitResult& Hit);
	void K2_OnLaunchCharacter(const struct FVector2D& Direction);
	void LaunchCharacter(const struct FVector2D& Direction);
	void LaunchCharacterWithVelocity(const struct FVector2D& Direction, const struct FVector& CurrentVelocity, const struct FVector& LaunchVelocity);
	void OnCharacterLand(const struct FHitResult& Hit);
	void OnInputPressed(float TimeWaited);
	void OnMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void OnRep_PendingLaunchVel();
	void OnServerReceiveLaunchVelocity(const struct FVector2D& InDirection, const struct FVector& InVelocity, const struct FVector& InLaunchVelocity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbility_DoubleJump">();
	}
	static class UMarvelAbility_DoubleJump* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbility_DoubleJump>();
	}
};

// Class Marvel.MarvelChangeGravityAbility
// 0x00B8 (0x11B0 - 0x10F8)
class UMarvelChangeGravityAbility : public UMarvelEffectGameplayAbility
{
public:
	float                                         PendingGravityScale;                               // 0x10F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseSync;                                          // 0x10FC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10FD[0x3];                                     // 0x10FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CacheGravityScale;                                 // 0x1100(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1104[0x4];                                     // 0x1104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         Restorekey;                                        // 0x1108(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelCharacterMovementComponent*      OwnerMovementCom;                                  // 0x11A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelChangeGravityAbility">();
	}
	static class UMarvelChangeGravityAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelChangeGravityAbility>();
	}
};

// Class Marvel.TriggerHapticFeedbackEffect_SlopFeedBack
// 0x0008 (0x00E8 - 0x00E0)
class UTriggerHapticFeedbackEffect_SlopFeedBack final : public UTriggerHapticFeedbackEffect_Base
{
public:
	uint8                                         StartPosition;                                     // 0x00E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndPosition;                                       // 0x00E1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         StartStrength;                                     // 0x00E2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndStrength;                                       // 0x00E3(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E4[0x4];                                       // 0x00E4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TriggerHapticFeedbackEffect_SlopFeedBack">();
	}
	static class UTriggerHapticFeedbackEffect_SlopFeedBack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTriggerHapticFeedbackEffect_SlopFeedBack>();
	}
};

// Class Marvel.Cue_Ability_Loop_DoubleJump
// 0x0090 (0x0EE0 - 0x0E50)
class ACue_Ability_Loop_DoubleJump final : public AMarvelCueNotify_Ability
{
public:
	int32                                         AbilityID;                                         // 0x0E50(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E54[0x4];                                      // 0x0E54(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         FootFx;                                            // 0x0E58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   FootFxAttachSocket;                                // 0x0E60(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E6C[0x4];                                      // 0x0E6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FootFxLocOffset;                                   // 0x0E70(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               FootFxRotOffset;                                   // 0x0E88(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UNiagaraSystem*                         BehindFx;                                          // 0x0EA0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   BehindFxAttachSocket;                              // 0x0EA8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_EB4[0x4];                                      // 0x0EB4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               BehindFxRotOffset;                                 // 0x0EB8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class AMarvelBaseCharacter*                   OwningCharacter;                                   // 0x0ED0(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAbility_DoubleJump*              OwningAbility;                                     // 0x0ED8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ShowFX(const struct FVector& InVelocity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Ability_Loop_DoubleJump">();
	}
	static class ACue_Ability_Loop_DoubleJump* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Ability_Loop_DoubleJump>();
	}
};

// Class Marvel.MarvelAbilityConfig_LongPressTrigger
// 0x0038 (0x00D0 - 0x0098)
class UMarvelAbilityConfig_LongPressTrigger : public UMarvelAbilityConfig
{
public:
	bool                                          bIsWaitStateChanged;                               // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x3];                                       // 0x0099(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStateChangedTaskParam                 TaskParam;                                         // 0x009C(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         PressedSecondsMin;                                 // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriggerOnce;                                      // 0x00C8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C9[0x7];                                       // 0x00C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbilityConfig_LongPressTrigger">();
	}
	static class UMarvelAbilityConfig_LongPressTrigger* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbilityConfig_LongPressTrigger>();
	}
};

// Class Marvel.MarvelAbility_LongPressTrigger
// 0x0018 (0x2598 - 0x2580)
class UMarvelAbility_LongPressTrigger : public UMarvelGameplayAbility
{
public:
	class UMarvelAbilityTask_WaitLongPressRelease* LongPressTask;                                     // 0x2580(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAbilityTask_WaitInputStateChanged* WaitInputStateChangedTask;                         // 0x2588(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2590[0x8];                                     // 0x2590(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateGameplay();
	void EndLongPressTriggerAbility(float HoldTime);
	void K2_ActivateGameplay();
	void K2_MaxHoldTimeGameplay(float HoldTime);
	void K2_TriggerGameplay(float HoldTime);
	void MaxHoldTimeGameplay(float HoldTime);
	void NativeActivateGameplay();
	void NativeMaxHoldTimeGameplay(float HoldTime);
	void NativeTriggerGameplay(float HoldTime);
	void TriggerGameplay(float HoldTime);

	float GetAbilityPressedTime() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbility_LongPressTrigger">();
	}
	static class UMarvelAbility_LongPressTrigger* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbility_LongPressTrigger>();
	}
};

// Class Marvel.SelectAbilityConfigBase
// 0x10B8 (0x1150 - 0x0098)
class USelectAbilityConfigBase : public UMarvelAbilityConfig
{
public:
	bool                                          bBindTaskFilterDelegate;                           // 0x0098(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSelectTaskParam                       SelectParam;                                       // 0x00A0(0x10A0)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FAbilityActionItem>             AbilityActions;                                    // 0x1140(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SelectAbilityConfigBase">();
	}
	static class USelectAbilityConfigBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<USelectAbilityConfigBase>();
	}
};

// Class Marvel.MarvelAbility_SelectTarget
// 0x0070 (0x25F8 - 0x2588)
class UMarvelAbility_SelectTarget : public UAbility_108
{
public:
	TArray<class AActor*>                         CurrentTargets;                                    // 0x2588(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	TMap<TWeakObjectPtr<class UPrimitiveComponent>, struct FPortalSegments> TracePathPortalsPassed;                            // 0x2598(0x0050)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UMarvelAbilityTask_SelectTarget*        SelectTask;                                        // 0x25E8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USelectAbilityConfigBase*               AbilityConfig;                                     // 0x25F0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ApplyBuffsToCurrentTargets(const TArray<int32>& BuffIds);
	void ApplyBuffsToTarget(const class AActor* TargetActor, const TArray<int32>& BuffIds);
	bool CheckTarget(const class AActor* InTarget);
	void FilterTaskTraceResult(const struct FVector& InTraceStart, TArray<struct FHitResult>* InOutHitResults);
	TArray<class AActor*> GetCurrentTargets();
	class USelectAbilityConfigBase* GetSelectAbilityConfig();
	class AActor* GetSingleTarget();
	TArray<class AActor*> GetTargets();
	TArray<struct FSelectTaskResult> GetTaskResults();
	void HandleAbilityEventActions(const struct FGameplayTag& InTag);
	void HandleAbilityStageActions(const EMarvelAbilityStage InStage);
	void K2_TryMakeTriggerContext(struct FGameplayEventData* EventData);
	void PreTaskTrace();
	void PrintCurrentTargetsInfo(const class FString& Prefix);

	class UMarvelAbilityTask_SelectTarget* GetSelectTask() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbility_SelectTarget">();
	}
	static class UMarvelAbility_SelectTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbility_SelectTarget>();
	}
};

// Class Marvel.MarvelCueNotify_CustomEvent
// 0x0000 (0x0288 - 0x0288)
class UMarvelCueNotify_CustomEvent : public UMarvelCueNotify_Static
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_CustomEvent">();
	}
	static class UMarvelCueNotify_CustomEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCueNotify_CustomEvent>();
	}
};

// Class Marvel.SelectAbilityConfigBase_Bond
// 0x0060 (0x11B0 - 0x1150)
class USelectAbilityConfigBase_Bond : public USelectAbilityConfigBase
{
public:
	TMap<int32, struct FBondTargetData>           BondSelectTargetDatas;                             // 0x1150(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	EMarvelAbilityStage                           BuffApplyStage;                                    // 0x11A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A1[0xF];                                     // 0x11A1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SelectAbilityConfigBase_Bond">();
	}
	static class USelectAbilityConfigBase_Bond* GetDefaultObj()
	{
		return GetDefaultObjImpl<USelectAbilityConfigBase_Bond>();
	}
};

// Class Marvel.MarvelSALogWriter
// 0x0000 (0x0030 - 0x0030)
class UMarvelSALogWriter final : public UObject
{
public:
	static void AsyncWrite(const class FString& LogInfo, EMarvelAsyncWriteMode WriteMode);
	static void Flush();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSALogWriter">();
	}
	static class UMarvelSALogWriter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSALogWriter>();
	}
};

// Class Marvel.MarvelAbility_SelectTarget_Bond
// 0x0070 (0x2668 - 0x25F8)
class UMarvelAbility_SelectTarget_Bond : public UMarvelAbility_SelectTarget
{
public:
	class USelectAbilityConfigBase_Bond*          BondAbilityConfig;                                 // 0x25F8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  CurrentRequiredTags;                               // 0x2600(0x0068)(Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAbility_SelectTarget_Bond">();
	}
	static class UMarvelAbility_SelectTarget_Bond* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAbility_SelectTarget_Bond>();
	}
};

// Class Marvel.AchievementLimitCondition
// 0x0000 (0x0030 - 0x0030)
class UAchievementLimitCondition final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AchievementLimitCondition">();
	}
	static class UAchievementLimitCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAchievementLimitCondition>();
	}
};

// Class Marvel.MarvelRichTextBlockWidgetDecorator
// 0x0008 (0x0038 - 0x0030)
class UMarvelRichTextBlockWidgetDecorator : public URichTextBlockDecorator
{
public:
	class UDataTable*                             WidgetSet;                                         // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelRichTextBlockWidgetDecorator">();
	}
	static class UMarvelRichTextBlockWidgetDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelRichTextBlockWidgetDecorator>();
	}
};

// Class Marvel.MarvelAchievementActionsAsset
// 0x0050 (0x0088 - 0x0038)
class UMarvelAchievementActionsAsset final : public UPrimaryDataAsset
{
public:
	TMap<int32, struct FAchievementConfig>        AchievementConfigs;                                // 0x0038(0x0050)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	struct FAchievementConfig GenAchievementConfig(int32 ID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAchievementActionsAsset">();
	}
	static class UMarvelAchievementActionsAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAchievementActionsAsset>();
	}
};

// Class Marvel.MarvelActorComponentBase
// 0x0000 (0x00F0 - 0x00F0)
class UMarvelActorComponentBase : public UActorComponent
{
public:
	bool IsBegunPlayed() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelActorComponentBase">();
	}
	static class UMarvelActorComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelActorComponentBase>();
	}
};

// Class Marvel.MarvelActorPoolComponent
// 0x0008 (0x00F8 - 0x00F0)
class UMarvelActorPoolComponent final : public UActorComponent
{
public:
	int32                                         BeginPlayIdx;                                      // 0x00F0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_BeginPlayChanged();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelActorPoolComponent">();
	}
	static class UMarvelActorPoolComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelActorPoolComponent>();
	}
};

// Class Marvel.MarvelAeroConfig
// 0x0058 (0x00F0 - 0x0098)
class UMarvelAeroConfig final : public UMarvelAbilityConfig
{
public:
	int32                                         DefaultFlyModeID;                                  // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C[0x4];                                       // 0x009C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FAeroConfigCommonItem>     AeroConfigMap;                                     // 0x00A0(0x0050)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAeroConfig">();
	}
	static class UMarvelAeroConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAeroConfig>();
	}
};

// Class Marvel.UIController_CommonDescend
// 0x0018 (0x0C78 - 0x0C60)
class UUIController_CommonDescend final : public UUIC_Ability
{
public:
	struct FTimerHandle                           LoopTimeHandler;                                   // 0x0C60(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIController_CommonDescend">();
	}
	static class UUIController_CommonDescend* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIController_CommonDescend>();
	}
};

// Class Marvel.MarvelAgentAbilitySystemComponent
// 0x0000 (0x6500 - 0x6500)
class UMarvelAgentAbilitySystemComponent final : public UMarvelBaseAbilitySystemComponent
{
public:
	class UMarvelAgentAttributeSet* K2_GetAgentAttributeSet();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAgentAbilitySystemComponent">();
	}
	static class UMarvelAgentAbilitySystemComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAgentAbilitySystemComponent>();
	}
};

// Class Marvel.UIInputManager
// 0x0098 (0x00C8 - 0x0030)
class UUIInputManager final : public UObject
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TWeakObjectPtr<class UInputMappingContext>, int32> RegisterInputContext2Count;                        // 0x0048(0x0050)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_98[0x30];                                      // 0x0098(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UUIInputManager* Get(class UObject* WCO);

	bool ReceiveGloablInputKeyToNotify(const struct FKey& Key, const EInputEvent EventType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIInputManager">();
	}
	static class UUIInputManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIInputManager>();
	}
};

// Class Marvel.MarvelBaseAttributeSet
// 0x0040 (0x0078 - 0x0038)
class UMarvelBaseAttributeSet : public UAttributeSet
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAttributeData                 Health;                                            // 0x0040(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MaxHealth;                                         // 0x0050(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 InvalidData;                                       // 0x0060(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	uint8                                         Pad_70[0x8];                                       // 0x0070(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_Health(const struct FGameplayAttributeData& OldValue);
	void OnRep_InvalidData(const struct FGameplayAttributeData& OldValue);
	void OnRep_MaxHealth(const struct FGameplayAttributeData& OldValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelBaseAttributeSet">();
	}
	static class UMarvelBaseAttributeSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelBaseAttributeSet>();
	}
};

// Class Marvel.MarvelAgentAttributeSet
// 0x0000 (0x0078 - 0x0078)
class UMarvelAgentAttributeSet final : public UMarvelBaseAttributeSet
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAgentAttributeSet">();
	}
	static class UMarvelAgentAttributeSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAgentAttributeSet>();
	}
};

// Class Marvel.MarvelAgentEffectiveComponent
// 0x1790 (0x1C00 - 0x0470)
#pragma pack(push, 0x1)
class alignas(0x10) UMarvelAgentEffectiveComponent : public USceneComponent
{
public:
	uint8                                         Pad_470[0x10];                                     // 0x0470(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelGameplayEffectContainerSpec     ContainerSpec;                                     // 0x0480(0x0E90)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FMarvelAgentEffectiveData              EffectiveData;                                     // 0x1310(0x07A0)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bInstancingScope;                                  // 0x1AB0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AB1[0x7];                                     // 0x1AB1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayTag>                   CueTagList;                                        // 0x1AB8(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UMarvelAgentTraceComponent*             TraceComponent;                                    // 0x1AC8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AD0[0x10];                                    // 0x1AD0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              DynamicApplyDamageHandle;                          // 0x1AE0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AF0[0x10];                                    // 0x1AF0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              DynamicApplyBuffHandle;                            // 0x1B00(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              EffectiveFinished;                                 // 0x1B10(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	int32                                         MaxApplyTimes;                                     // 0x1B20(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurApplyTimes;                                     // 0x1B24(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndSourceActorWhenDeactivate;                     // 0x1B28(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B29[0x7];                                     // 0x1B29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SourceActorOfScopeNoActor;                         // 0x1B30(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImpulseLevel;                                      // 0x1B38(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelImpulseLevelInfo                ImpulseLevelInfo;                                  // 0x1B3C(0x0008)(NoDestructor, NativeAccessSpecifierPublic)
	struct FMarvelImpulseApplyFilter              ImpulseApplyFilter;                                // 0x1B44(0x0004)(NoDestructor, NativeAccessSpecifierPublic)
	int32                                         BeHitAnimConfigID;                                 // 0x1B48(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B4C[0x4];                                     // 0x1B4C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityContextHandle            AbilityContextHandle;                              // 0x1B50(0x0040)(Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_1B90[0x8];                                     // 0x1B90(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  Instigator;                                        // 0x1B98(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameplayAbility*                       OwnerAbility;                                      // 0x1BA0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1BA8[0x50];                                    // 0x1BA8(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyGameplayCue(const struct FGameplayTag& MatchesTag);
	class AActor* GetAttachmentActor();
	class UGameplayAbility* GetOwnerAbility();
	void K2_Initialize();
	void K2_OnInitialized();
	void K2_OnPostApplyContainer(const TArray<struct FHitResult>& HitResults);
	void MarkContainerSpecDirty(bool bDirty);
	void MarkEffectiveDataDirty(bool bDirty);
	void OnCauserEndTask(class AActor* Actor);
	void TraceFinished();
	void TraceResults_ThreadSafe(class UObject* TraceSource, const TArray<struct FHitResult>& InHitResults);

	class APawn* GetInstigator() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAgentEffectiveComponent">();
	}
	static class UMarvelAgentEffectiveComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAgentEffectiveComponent>();
	}
};
#pragma pack(pop)

// Class Marvel.MarvelAgentHandleCom
// 0x03A0 (0x0490 - 0x00F0)
class alignas(0x10) UMarvelAgentHandleCom final : public UActorComponent
{
public:
	uint8                                         Pad_F0[0x8];                                       // 0x00F0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x00F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelPlayerController*                OwnerController;                                   // 0x0100(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelAIControllerBase*                AIController;                                      // 0x0108(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_110[0x380];                                    // 0x0110(0x0380)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnClientPawnChanged(class APawn* InPawn);
	void OnPossessedAIPawnPreChanged(class APawn* OldPawn, class APawn* NewPawn);
	void OnServerControllerPostPawnSpawn(class APawn* InPawn, ESpawnMethod InMethod);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAgentHandleCom">();
	}
	static class UMarvelAgentHandleCom* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAgentHandleCom>();
	}
};

// Class Marvel.MarvelGameplayEffectAmmo2Modify
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectAmmo2Modify final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectAmmo2Modify">();
	}
	static class UMarvelGameplayEffectAmmo2Modify* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectAmmo2Modify>();
	}
};

// Class Marvel.MarvelAgentManager
// 0x00A8 (0x00E0 - 0x0038)
class UMarvelAgentManager final : public UWorldSubsystem
{
public:
	uint8                                         Pad_38[0xA8];                                      // 0x0038(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAgentEndTask(class AActor* Actor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAgentManager">();
	}
	static class UMarvelAgentManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAgentManager>();
	}
};

// Class Marvel.MarvelHiddenSubsystem
// 0x0058 (0x0090 - 0x0038)
class UMarvelHiddenSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_38[0x58];                                      // 0x0038(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelHiddenSubsystem* Get(const class UObject* WCO);
	static void StaticSetComponentHiddenInGame(const class UObject* InObject, class USceneComponent* InComponent, bool NewHidden, bool bForceUpdate);

	void SetComponentHiddenInGame(const class UObject* InObject, class USceneComponent* InComponent, bool NewHidden, bool bForceUpdate);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelHiddenSubsystem">();
	}
	static class UMarvelHiddenSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelHiddenSubsystem>();
	}
};

// Class Marvel.MarvelAgentTraceComponent
// 0x12A0 (0x1710 - 0x0470)
#pragma pack(push, 0x1)
class alignas(0x10) UMarvelAgentTraceComponent : public USceneComponent
{
public:
	struct FMarvelTargetActorGenerateInfo         GenerateInfo;                                      // 0x0470(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnTemplate, Transient, EditConst, NativeAccessSpecifierPublic)
	int32                                         ScopeId;                                           // 0x04B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OwnerAbilityID;                                    // 0x04BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TDelegate<void(struct FHitResult& Hit)>       CustomHitResultFilter;                             // 0x04C0(0x0014)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D4[0x4];                                      // 0x04D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UObject* TraceSource, TArray<struct FHitResult>& HitResults)> TraceHandle;                                       // 0x04D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              PreTraceHandle;                                    // 0x04E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              TraceFinishedHandle;                               // 0x04F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_508[0x8];                                      // 0x0508(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             TraceContext;                                      // 0x0510(0x0F90)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         TracePeriod;                                       // 0x14A0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTraceWithChar;                                    // 0x14A4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14A5[0x3];                                     // 0x14A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TraceDelay;                                        // 0x14A8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TraceDuration;                                     // 0x14AC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 TraceUniqueID;                                     // 0x14B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAgentLifeWith                         LifeWith;                                          // 0x14C0(0x0005)(NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_14C5[0x3];                                     // 0x14C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayAbility*                       LifeWithAbility;                                   // 0x14C8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayAbility*                       OwnerAbility;                                      // 0x14D0(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14D8[0x188];                                   // 0x14D8(0x0188)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  Instigator;                                        // 0x1660(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1668[0xA0];                                    // 0x1668(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CustomSetPreLocation(const struct FVector& NewLocation);
	void ExecuteOneShot();
	void FinalizeSafely();
	TArray<struct FHitResult> ForceTraceSpec();
	class UGameplayAbility* GetOwnerAbility();
	class AActor* GetQuoteSource();
	struct FVector GetTraceDir();
	struct FVector GetTraceEnd();
	struct FRotator GetTraceRotator();
	struct FVector GetTraceStart();
	void K2_Finalize();
	void K2_Initialize();
	void K2_OnActivate();
	void K2_OnDeactivate();
	struct FRotator K2_OnGetTraceRotator(struct FRotator& Rotator);
	struct FVector K2_OnGetTraceStart(struct FVector& Location);
	void OnActorForceChanged(const struct FVector& InOldLocation, const struct FVector& InNewLocation);
	void OnCauserEndTask(class AActor* Actor);
	void OnCharacterMovementUpdated(float DeltaTime, const struct FVector& OldLocation, const struct FVector& OldVelocity);
	void Pause();
	void Play(bool bForce);
	void SetAbilitySocketInfo(const struct FMarvelAbilitySourceLocationInfo& InLocationInfo);
	void SetTraceDuration(float Duration);

	class APawn* GetInstigator() const;
	float GetTraceForwardLength() const;
	bool IsLifeExpired() const;
	bool IsPause() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAgentTraceComponent">();
	}
	static class UMarvelAgentTraceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAgentTraceComponent>();
	}
};
#pragma pack(pop)

// Class Marvel.MarvelAIAgentInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelAIAgentInterface final : public IInterface
{
public:
	TArray<class AActor*> GetPhantomsForAI();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAIAgentInterface">();
	}
	static class IMarvelAIAgentInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelAIAgentInterface>();
	}
};

// Class Marvel.MarvelLevelSummonerConfig
// 0x0050 (0x0088 - 0x0038)
class UMarvelLevelSummonerConfig final : public UDataAsset
{
public:
	TMap<int32, struct FSummonerInfo>             SummonerInfos;                                     // 0x0038(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelLevelSummonerConfig">();
	}
	static class UMarvelLevelSummonerConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelLevelSummonerConfig>();
	}
};

// Class Marvel.MarvelAIControllerBase
// 0x00B8 (0x06A0 - 0x05E8)
class AMarvelAIControllerBase : public AAIController
{
public:
	uint8                                         Pad_5E8[0x4];                                      // 0x05E8(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AMarvelPlayerController> MarvelPlayerController;                            // 0x05EC(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F4[0x4];                                      // 0x05F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ValidDurationForDamageRecord;                      // 0x05F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5FC[0x54];                                     // 0x05FC(0x0054)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, int32>                            HeroSkinInfoMap;                                   // 0x0650(0x0050)(BlueprintVisible, BlueprintReadOnly, Transient, Protected, NativeAccessSpecifierProtected)

public:
	static void GlobalInitClientAIIfNeed(class UObject* WorldContextObject);

	void ClientAIPossess(class APawn* InPawn);
	void ClientAIUnPossess();
	void ClientAIUpdatePawn();
	int32 GetHeroSkinID(int32 HeroID);
	void OnClientAIPossess(class APawn* InPawn);
	void OnClientAIUnPossess();
	void RequestPathAsyncResult(const TArray<struct FVector>& Points);
	void SetExtraViewTarget(class AActor* NewViewTarget);
	void SetHeroSkin(int32 HeroID, int32 SkinID);
	void StartClientAI(class AMarvelPlayerController* InPlayerController);
	void StopClientAI();

	class UMarvelAIPerceptionComponentBase* GetMarvelAIPerceptionCompBase() const;
	class AMarvelBaseCharacter* GetMarvelCharacter() const;
	class UMarvelAbilitySystemCom* GetPawnAbilitySystemCom() const;
	struct FVector GetPawnLocation() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAIControllerBase">();
	}
	static class AMarvelAIControllerBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelAIControllerBase>();
	}
};

// Class Marvel.MarvelReplaySpectatorController
// 0x00B0 (0x1218 - 0x1168)
class AMarvelReplaySpectatorController final : public AMarvelPlayerController
{
public:
	float                                         LastKillcamSeekTime;                               // 0x1168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_116C[0x4];                                     // 0x116C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerState*                           QueuedPlayerStateToView;                           // 0x1170(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVideoSaving;                                      // 0x1178(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1179[0x3F];                                    // 0x1179(0x003F)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bWasSuccessful)> OnGoToTimeCompleteDelegate;                        // 0x11B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bWasSuccessful)> OnDemoScrubCompleteDelegate;                       // 0x11C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bOnPause)> OnReplayWorldPauseDelegate;                        // 0x11D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_11E8[0x18];                                    // 0x11E8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class AHUD>                       ReplayHUDClass;                                    // 0x1200(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class AHUD>                       KillcamHUDClass;                                   // 0x1208(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1210[0x8];                                     // 0x1210(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetLoadingRate();
	bool IsReplayLive();
	void OnCheckpointLoaded(class UWorld* World);
	void OnMatchQuiting();
	void OnReplayFinishPlayback(bool bResult);
	void OnReplayGoToTimeComplete(bool bWasSuccessful);
	bool SaveVideoLocal();
	bool SaveVideoLocalEnd();
	bool SetCurrentReplayPausedState(bool bDoPause);
	void SetCurrentReplayPlayRate(float PlayRate);
	void SetCurrentReplayTimeToSeconds(float Seconds);
	void SetFullLoading(bool bEnable);
	void SetObActualTimeMode(bool bEnable);
	void ViewPawn(class APawn* PawnToView);
	void ViewPlayerState(class APlayerState* PS);

	float GetCurrentReplayCurrentTimeInSeconds() const;
	float GetCurrentReplayTotalTimeInSeconds() const;
	bool IsReplayPaused() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelReplaySpectatorController">();
	}
	static class AMarvelReplaySpectatorController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelReplaySpectatorController>();
	}
};

// Class Marvel.MarvelAIPerceptionComponentBase
// 0x0000 (0x01E0 - 0x01E0)
class UMarvelAIPerceptionComponentBase : public UAIPerceptionComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAIPerceptionComponentBase">();
	}
	static class UMarvelAIPerceptionComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAIPerceptionComponentBase>();
	}
};

// Class Marvel.MarvelAIStimuliSourceComponentBase
// 0x0000 (0x0108 - 0x0108)
class UMarvelAIStimuliSourceComponentBase : public UAIPerceptionStimuliSourceComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAIStimuliSourceComponentBase">();
	}
	static class UMarvelAIStimuliSourceComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAIStimuliSourceComponentBase>();
	}
};

// Class Marvel.WallRunningPassiveAbilityConfig
// 0x0048 (0x00E0 - 0x0098)
class UWallRunningPassiveAbilityConfig : public UMarvelAbilityConfig
{
public:
	int32                                         WallRunAbilityID;                                  // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGetOnWallParam                        MyGetOnWallParam;                                  // 0x009C(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          NeedWallRunKeyPress;                               // 0x00CC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CD[0x3];                                       // 0x00CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   WallRunKeyName;                                    // 0x00D0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DC[0x4];                                       // 0x00DC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WallRunningPassiveAbilityConfig">();
	}
	static class UWallRunningPassiveAbilityConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWallRunningPassiveAbilityConfig>();
	}
};

// Class Marvel.MarvelAICoreLibrary
// 0x0000 (0x0030 - 0x0030)
class UMarvelAICoreLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool CalculateFakeCameraLocation(const class AMarvelBaseCharacter* InPawn, const struct FVector& FocusLoc, struct FVector* OutCameraLoc, struct FRotator* OutCameraRot);
	static bool CheckActorHasTag(const class AActor* TargetActor, const struct FGameplayTag& TagToCheck);
	static bool CheckIsInStealth(const class AActor* TargetActor);
	static bool GetLookAtLocationForAIPawn(class AMarvelBaseCharacter* InPawn, struct FVector* OutLocation, bool bDrawDebug, struct FHitResult* OutHitResult);
	static bool RotateVectorWithPitchYaw(const struct FVector& Dir, float Pitch, float Yaw, struct FVector* OutRotatedDir);
	static bool SolveYawPitchRotation(const struct FVector& TargetVecInWorld, const struct FVector& TargetVecInCamera, struct FRotator* OutCameraRot);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAICoreLibrary">();
	}
	static class UMarvelAICoreLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAICoreLibrary>();
	}
};

// Class Marvel.MarvelAICoreSettings
// 0x0028 (0x0070 - 0x0048)
class UMarvelAICoreSettings final : public UDeveloperSettings
{
public:
	struct FSoftClassPath                         StimuliSourceComponentClass;                       // 0x0048(0x0028)(Edit, ZeroConstructor, Config, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAICoreSettings">();
	}
	static class UMarvelAICoreSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAICoreSettings>();
	}
};

// Class Marvel.MarvelGameplayCueLibrary
// 0x0000 (0x0030 - 0x0030)
class UMarvelGameplayCueLibrary final : public UBlueprintFunctionLibrary
{
public:
	static int32 GetAbilityComboIndexFromCueParameters(const struct FGameplayCueParameters& CueParameters);
	static class UGameplayAbility* GetEffectCauserAbilityFromCueParameters(const struct FGameplayCueParameters& CueParameters);
	static bool GetExtendCueParamsFromCueParameters(const struct FGameplayCueParameters& CueParameters, struct FExtendCueParams* OutExtendCueParams, bool bIgnoreEmptyEffectContext);
	static class UGameplayAbility* GetInstigatorAbilityFromCueParameters(const struct FGameplayCueParameters& CueParameters);
	static void MakeCueParametersFromAbility(const class UMarvelGameplayAbility* Ability, struct FGameplayCueParameters* OutCueParameters);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayCueLibrary">();
	}
	static class UMarvelGameplayCueLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayCueLibrary>();
	}
};

// Class Marvel.MarvelActorTracingRollbackInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelActorTracingRollbackInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelActorTracingRollbackInterface">();
	}
	static class IMarvelActorTracingRollbackInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelActorTracingRollbackInterface>();
	}
};

// Class Marvel.MarvelAimAssistUtil
// 0x0000 (0x0030 - 0x0030)
class UMarvelAimAssistUtil final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAimAssistUtil">();
	}
	static class UMarvelAimAssistUtil* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAimAssistUtil>();
	}
};

// Class Marvel.MarvelAIRelevantInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelAIRelevantInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAIRelevantInterface">();
	}
	static class IMarvelAIRelevantInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelAIRelevantInterface>();
	}
};

// Class Marvel.Ability_AirGrab
// 0x0070 (0x1168 - 0x10F8)
class UAbility_AirGrab : public UMarvelEffectGameplayAbility
{
public:
	struct FVector                                RelativeLocation;                                  // 0x10F8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundTraceHeight;                                 // 0x1110(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GrabDamage;                                        // 0x1114(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KnockDownBuffID;                                   // 0x1118(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bApplyBuffIgnoreHeight;                            // 0x111C(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111D[0x3];                                     // 0x111D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AActor>>             TraceIgnoreObjectTypes;                            // 0x1120(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawTraceType;                                     // 0x1130(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOpenLog;                                          // 0x1131(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1132[0x2];                                     // 0x1132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LookAtTime;                                        // 0x1134(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistThreshold;                                     // 0x1138(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_113C[0x4];                                     // 0x113C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   Instigator;                                        // 0x1140(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ACharacter*                             OwnerChar;                                         // 0x1148(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           LookAtTimerHandle;                                 // 0x1150(0x0018)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	bool CheckHitActorIgnore(const class AActor* InActor);
	bool CheckTargetNearGround(class ACharacter* InCharacter, float TraceLen);
	bool K2_ShouldSkipInstigatorHit(class AActor* SelfActor, const struct FHitResult& Hit);
	void OnActiveAbility();
	void OnCharacterLand(const struct FHitResult& InHit);
	void OnEndAbility(bool bCanceled);
	void OnInstigatorHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnOwnerHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void SetOwnerLookAtInstigator(bool bEnable, bool bForceHandleOnce);
	void TryAdjustOwnerToTargetLoc(bool bCheckDist);
	void TryLaunchOwner(float DeltaTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Ability_AirGrab">();
	}
	static class UAbility_AirGrab* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbility_AirGrab>();
	}
};

// Class Marvel.MarvelGameplay_SwiftProjectileTraceType
// 0x0000 (0x0030 - 0x0030)
class UMarvelGameplay_SwiftProjectileTraceType final : public UMarvelGameplay_ProjectileTraceType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplay_SwiftProjectileTraceType">();
	}
	static class UMarvelGameplay_SwiftProjectileTraceType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplay_SwiftProjectileTraceType>();
	}
};

// Class Marvel.MarvelObstructionMgr
// 0x0060 (0x04F0 - 0x0490)
class AMarvelObstructionMgr final : public AActor
{
public:
	class USVONNavigationComponent*               NavComp;                                           // 0x0490(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_498[0x58];                                     // 0x0498(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelObstructionMgr">();
	}
	static class AMarvelObstructionMgr* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelObstructionMgr>();
	}
};

// Class Marvel.MarvelLetterBox
// 0x0020 (0x0248 - 0x0228)
class UMarvelLetterBox final : public USizeBox
{
public:
	uint8                                         Pad_228[0x10];                                     // 0x0228(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bLetterboxEnabled;                                 // 0x0238(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_239[0x3];                                      // 0x0239(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ActiveWidth;                                       // 0x023C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ActiveHeight;                                      // 0x0240(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_244[0x4];                                      // 0x0244(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelLetterBox">();
	}
	static class UMarvelLetterBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelLetterBox>();
	}
};

// Class Marvel.MarvelAkOccObsService
// 0x0110 (0x0140 - 0x0030)
class UMarvelAkOccObsService final : public UObject
{
public:
	uint8                                         Pad_30[0x110];                                     // 0x0030(0x0110)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAkOccObsService">();
	}
	static class UMarvelAkOccObsService* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAkOccObsService>();
	}
};

// Class Marvel.MarvelAkReflectService
// 0x00B8 (0x00E8 - 0x0030)
class UMarvelAkReflectService final : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UWorld>                  CurrentWorld;                                      // 0x0038(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 ViewTarget;                                        // 0x0040(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAudioWorldSubSystem*                   AudioWorldSystem;                                  // 0x0048(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FMarvelAkReflectData                   ReflectData;                                       // 0x0050(0x0040)(Transient, NoDestructor, NativeAccessSpecifierPrivate)
	TArray<struct FAkReflectImageParam>           CachedReflectPoints;                               // 0x0090(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	TArray<struct FAkReflectImageParam>           SortedReflectPoints;                               // 0x00A0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B0[0x38];                                      // 0x00B0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAkReflectService">();
	}
	static class UMarvelAkReflectService* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAkReflectService>();
	}
};

// Class Marvel.UIC_AbilityUnit
// 0x0010 (0x0040 - 0x0030)
class UUIC_AbilityUnit : public UObject
{
public:
	class UUIC_Ability*                           OwnerUIC;                                          // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelAbilityStage                           CurrentAbilityStage;                               // 0x0038(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bManagedWithAbilityStage;                          // 0x0039(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelAbilityStage                           UnitActivateStage;                                 // 0x003A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelAbilityStage                           UnitDeactivateStage;                               // 0x003B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Construct();
	void Destruct();
	void OnAbilityStageUpdate();
	void UnitActivate();
	void UnitDeactivate();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIC_AbilityUnit">();
	}
	static class UUIC_AbilityUnit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIC_AbilityUnit>();
	}
};

// Class Marvel.UIC_AbilityUnit_Charge
// 0x0168 (0x01A8 - 0x0040)
class UUIC_AbilityUnit_Charge final : public UUIC_AbilityUnit
{
public:
	bool                                          bIsDefaultShow;                                    // 0x0040(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget_AbilityEnergy_Charge*           Widget_Charge;                                     // 0x0048(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FWidgetStyle_AbilityCharge             ChargeStyle;                                       // 0x0050(0x0110)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bUseCustomChargeWidget;                            // 0x0160(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_161[0x7];                                      // 0x0161(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CustomChargeWidget;                                // 0x0168(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_198[0x10];                                     // 0x0198(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnOwnerLivingStateChanged(EPlayerLivingState LivingState);
	void SetWidgetExistence(bool bInExist);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIC_AbilityUnit_Charge">();
	}
	static class UUIC_AbilityUnit_Charge* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIC_AbilityUnit_Charge>();
	}
};

// Class Marvel.MarvelAmbientVoiceTrigger
// 0x0040 (0x04D0 - 0x0490)
class AMarvelAmbientVoiceTrigger final : public AActor
{
public:
	class FString                                 TriggerKey;                                        // 0x0490(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckInterval;                                     // 0x04A0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckRadius;                                       // 0x04A4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UncheckRadius;                                     // 0x04A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4AC[0x4];                                      // 0x04AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class AMarvelAmbientVoiceTrigger* Trigger, const TArray<class AActor*>& Actors)> OnInsideActorsDetected;                            // 0x04B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class USphereComponent*                       SphereComponent;                                   // 0x04C0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bVisibleSphere;                                    // 0x04C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetEnabled(bool bInEnabled);
	void SetEnabledWithDelay(bool bInEnabled, float Delay);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAmbientVoiceTrigger">();
	}
	static class AMarvelAmbientVoiceTrigger* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelAmbientVoiceTrigger>();
	}
};

// Class Marvel.MarvelAmmo1ReduceRegenAbility
// 0x0000 (0x0E60 - 0x0E60)
class UMarvelAmmo1ReduceRegenAbility final : public UMarvelAttrReduceRegenAbility
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAmmo1ReduceRegenAbility">();
	}
	static class UMarvelAmmo1ReduceRegenAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAmmo1ReduceRegenAbility>();
	}
};

// Class Marvel.MarvelAmmo2ReduceRegenAbility
// 0x0000 (0x0E60 - 0x0E60)
class UMarvelAmmo2ReduceRegenAbility final : public UMarvelAttrReduceRegenAbility
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAmmo2ReduceRegenAbility">();
	}
	static class UMarvelAmmo2ReduceRegenAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAmmo2ReduceRegenAbility>();
	}
};

// Class Marvel.MarvelAmmo3ReduceRegenAbility
// 0x0000 (0x0E60 - 0x0E60)
class UMarvelAmmo3ReduceRegenAbility final : public UMarvelAttrReduceRegenAbility
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAmmo3ReduceRegenAbility">();
	}
	static class UMarvelAmmo3ReduceRegenAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAmmo3ReduceRegenAbility>();
	}
};

// Class Marvel.MarvelDestructionSettingData
// 0x0190 (0x01C8 - 0x0038)
class UMarvelDestructionSettingData final : public UDataAsset
{
public:
	class UUserWidget*                            Default3DuiWidgetPath;                             // 0x0038(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BlastSizeSwitchName;                               // 0x0040(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BlastSizeSwitchLarge;                              // 0x0050(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BlastSizeSwitchSmall;                              // 0x0060(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BlastCollisionRTPCName;                            // 0x0070(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BlastChunksVolumeRTPCName;                         // 0x0080(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxChunkVolume;                                    // 0x0090(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_94[0x4];                                       // 0x0094(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 BlastDefaultMaterialSwitchName;                    // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 ImpacterMassRTPCName;                              // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpacterMaxMass;                                   // 0x00B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ImpacterVelocityRTPCName;                          // 0x00C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpacterMaxVelocity;                               // 0x00D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D4[0x4];                                       // 0x00D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AkAudioEventFracture;                              // 0x00D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AkAudioEventHit;                                   // 0x00E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDestructionCollisionDetectSetting     DestructionDetectSetting;                          // 0x00E8(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	TMap<EPhysicalSurface, struct FMarvelPredesEffData> PhysicalMaterialToFx;                              // 0x0100(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<EPhysicalSurface, struct FGameplayTag>   BlastPhysicalMaterialToTag;                        // 0x0150(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DefaultPhysicalMaterialTag;                        // 0x01A0(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1AC[0x4];                                      // 0x01AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     PostProcessMI;                                     // 0x01B0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         RecoveryOverlapBuffID;                             // 0x01B8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverlapDepthThreshold;                             // 0x01BC(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OverlapTimeThreshold;                              // 0x01C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StuckTimeThreshold;                                // 0x01C4(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelDestructionSettingData">();
	}
	static class UMarvelDestructionSettingData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelDestructionSettingData>();
	}
};

// Class Marvel.MarvelAnimationCacheSubsystem
// 0x0050 (0x0088 - 0x0038)
class UMarvelAnimationCacheSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_38[0x50];                                      // 0x0038(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAnimationCacheSubsystem">();
	}
	static class UMarvelAnimationCacheSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAnimationCacheSubsystem>();
	}
};

// Class Marvel.Widget_AbilityCharge
// 0x0018 (0x05C0 - 0x05A8)
class UWidget_AbilityCharge final : public UMarvelUserWidget
{
public:
	class UTextBlock*                             Text_CurrentCnt;                                   // 0x05A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBindingProxy_Ability*                  ProxyAbility;                                      // 0x05B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bBlocked;                                          // 0x05B8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bActive;                                           // 0x05B9(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFullyCharged;                                     // 0x05BA(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExhausted;                                        // 0x05BB(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ChargeInterval;                                    // 0x05BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetChargePercent(float InPercent);
	void StartCharge(float Percent);
	void UpdateStyle();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_AbilityCharge">();
	}
	static class UWidget_AbilityCharge* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_AbilityCharge>();
	}
};

// Class Marvel.SpiderWebPlaceTag
// 0x0008 (0x0038 - 0x0030)
class USpiderWebPlaceTag final : public UAssetUserData
{
public:
	bool                                          bAllowWebSpawn;                                    // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMoveWithBase;                                     // 0x0031(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_32[0x6];                                       // 0x0032(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiderWebPlaceTag">();
	}
	static class USpiderWebPlaceTag* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpiderWebPlaceTag>();
	}
};

// Class Marvel.SixDirGroundMotionAnimData
// 0x01A8 (0x01E8 - 0x0040)
class USixDirGroundMotionAnimData final : public UAnimationDataCollection
{
public:
	struct FSixDirGroundMotionAnimContainer       AnimContainer;                                     // 0x0040(0x01A8)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SixDirGroundMotionAnimData">();
	}
	static class USixDirGroundMotionAnimData* GetDefaultObj()
	{
		return GetDefaultObjImpl<USixDirGroundMotionAnimData>();
	}
};

// Class Marvel.MarvelActorSpawnPipeline
// 0x0000 (0x0030 - 0x0030)
class UMarvelActorSpawnPipeline : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelActorSpawnPipeline">();
	}
	static class UMarvelActorSpawnPipeline* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelActorSpawnPipeline>();
	}
};

// Class Marvel.AeroAnimData
// 0x0118 (0x0158 - 0x0040)
class UAeroAnimData final : public UAnimationDataCollection
{
public:
	struct FAeroAnimContainer                     AnimContainer;                                     // 0x0040(0x0118)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AeroAnimData">();
	}
	static class UAeroAnimData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAeroAnimData>();
	}
};

// Class Marvel.HitAnimData
// 0x00F0 (0x0130 - 0x0040)
class UHitAnimData final : public UAnimationDataCollection
{
public:
	struct FHitAnimContainer                      AnimContainer;                                     // 0x0040(0x00F0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HitAnimData">();
	}
	static class UHitAnimData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHitAnimData>();
	}
};

// Class Marvel.AimOffsetAnimData
// 0x0018 (0x0058 - 0x0040)
class UAimOffsetAnimData final : public UAnimationDataCollection
{
public:
	struct FAimOffsetAnimContainer                AnimContainer;                                     // 0x0040(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AimOffsetAnimData">();
	}
	static class UAimOffsetAnimData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAimOffsetAnimData>();
	}
};

// Class Marvel.HeroStateAnimData
// 0x00C0 (0x0100 - 0x0040)
class UHeroStateAnimData final : public UAnimationDataCollection
{
public:
	struct FHeroStateAnimContainer                AnimContainer;                                     // 0x0040(0x00C0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroStateAnimData">();
	}
	static class UHeroStateAnimData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeroStateAnimData>();
	}
};

// Class Marvel.HeroSoulAnimData
// 0x0028 (0x0060 - 0x0038)
class UHeroSoulAnimData final : public UDataAsset
{
public:
	class USkeletalMesh*                          SoulMesh;                                          // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           AgamottoSoulMontage;                               // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SoulOffset;                                        // 0x0048(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HeroSoulAnimData">();
	}
	static class UHeroSoulAnimData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHeroSoulAnimData>();
	}
};

// Class Marvel.MarvelAnimFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UMarvelAnimFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float CalcLandPrediction(class ACharacter* InCharacter, const class UCurveFloat* LandPredictionCurve, const class FName& MaskLandPredictionCurveName);
	static void DrawActorBones(const class AActor* InActor, const class FName& InBoneName);
	static void DrawActorHitShapes(const class AActor* InActor, float InDuration);
	static void DrawActorPhysicsAssetCollision(const class AActor* InActor, float InDuration);
	static class UAimOffsetSubAnimInstance* GetAimOffsetAnimInstance(class AMarvelBaseCharacter* Character);
	static TArray<class FName> GetAllChildBodyNames(const class USkeletalMesh* InSkeletalMesh, const class FName& InBoneName, bool bIncludeParent);
	static bool GetAnimationLengthFromPosition(class UAnimSequenceBase* AnimToPlay, float* OutLength, float InTime);
	static int32 GetBeHitAnimConfigIDWithAbilityID(int32 AbilityID);
	static int32 GetBeHitAnimConfigIDWithAmmo(class AInstantAmmo* Ammo, class UGameplayAbility* Ability);
	static class UAnimSequence* GetLinkedSequenceFromMontage(class UAnimMontage* InMontage, float MontageTime, float* RelativeTime);
	static class UAnimSequenceBase* GetNotifyTriggerTimeByTag(class UAnimSequenceBase* AnimSeq, const struct FGameplayTag& EventTag, float* OutTime);
	static class UAnimTimeline* GetNotifyTriggerTimeByTag_Timeline(class UAnimTimeline* Timeline, const struct FGameplayTag& EventTag, float* OutTime);
	static bool GetPositionForActiveAnimation(class USkeletalMeshComponent* MeshComp, const class UAnimSequenceBase* AnimSeq, float* OutPosition);
	static bool GetPositionForActiveAnimationByName(class USkeletalMeshComponent* MeshComp, class FName SequenceName, float* OutPosition);
	static bool GetPositionForStateMachine(class USkeletalMeshComponent* MeshComp, const class FName& MachineName, class FName* OutStateName, float* OutPosition);
	static bool GetSocketTransformFromAnimSeq(const class UAnimSequenceBase* AnimSeq, float DeltaTime, class FName SocketName, struct FTransform* OutTrans);
	static bool GetSocketTransformFromAnimSeqAndMeshComp(class USkeletalMeshComponent* MeshComp, const class UAnimSequenceBase* AnimSeq, float DeltaTime, class FName SocketName, struct FTransform* OutTrans);
	static bool GetSocketTransformOfCharacterFromMontage(class AMarvelBaseCharacter* MarvelBaseCharacter, class UAnimMontage* InMontage, float MontageTime, class FName SocketName, struct FTransform* OutTransform);
	static bool IsAnimationLoopingFromPosition(class UAnimSequenceBase* AnimToPlay, float InTime);
	static bool IsMontageLoopingFromSectionIndex(class UAnimMontage* MontageToPlay, int32 SectionIndex);
	static bool IsMontageLoopingFromSectionName(class UAnimMontage* MontageToPlay, class FName SectionName);
	static bool IsParentBody(const class USkeletalMesh* InSkeletalMesh, const class FName& InParentBoneName, const class FName& InChildBoneName);
	static int32 K2_GetCurrentState(class UAnimInstance* AnimInstance, class FName StateMachineName);
	static class FName K2_GetCurrentStateName(class UAnimInstance* AnimInstance, class FName StateMachineName);
	static float K2_GetSlotMontageGlobalWeight(class UAnimInstance* AnimInstance, class FName SlotName);
	static float K2_GetStateElapsedTime(class UAnimInstance* AnimInstance, class FName StateMachineName);
	static int32 K2_GetStateIndexFromName(class UAnimInstance* AnimInstance, class FName StateMachineName, class FName StateName);
	static int32 K2_GetStateMachineIndexFromName(class UAnimInstance* AnimInstance, class FName StateMachineName, class FName StateName);
	static float K2_GetStateWeight(class UAnimInstance* AnimInstance, class FName StateMachineName, class FName StateName);
	static bool K2_GetSyncGroupPosition(class UAnimInstance* AnimInstance, class FName SyncGroupName, class FName* PrevMarkerName, class FName* NextMarkerName, float* CurrentTime);
	static void UpdateAimOffset(class UMarvelAnimInstance* AnimInstance, float Pitch, float Yaw);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAnimFunctionLibrary">();
	}
	static class UMarvelAnimFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAnimFunctionLibrary>();
	}
};

// Class Marvel.MarvelAssetManager
// 0x00B8 (0x0590 - 0x04D8)
class UMarvelAssetManager final : public UAssetManager
{
public:
	uint8                                         Pad_4D8[0xB8];                                     // 0x04D8(0x00B8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void K2_ForcePoolRecycle();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAssetManager">();
	}
	static class UMarvelAssetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAssetManager>();
	}
};

// Class Marvel.Widget_AbilityActionTip
// 0x0010 (0x05B8 - 0x05A8)
class UWidget_AbilityActionTip : public UMarvelUserWidget
{
public:
	class UMarvelTextBlock*                       Text_Tip;                                          // 0x05A8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonKeyWidget*                       WBP_AbilityKey;                                    // 0x05B0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetStyle(const struct FWidget_ActionTip& Style);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_AbilityActionTip">();
	}
	static class UWidget_AbilityActionTip* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_AbilityActionTip>();
	}
};

// Class Marvel.MarvelSpatialVolumeManager
// 0x00A0 (0x00D0 - 0x0030)
class UMarvelSpatialVolumeManager final : public UObject
{
public:
	uint8                                         Pad_30[0xA0];                                      // 0x0030(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSpatialVolumeManager">();
	}
	static class UMarvelSpatialVolumeManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSpatialVolumeManager>();
	}
};

// Class Marvel.MarvelAttributeEffectExecution
// 0x0000 (0x0048 - 0x0048)
class UMarvelAttributeEffectExecution final : public UMarvelBaseEffectExecution
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAttributeEffectExecution">();
	}
	static class UMarvelAttributeEffectExecution* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAttributeEffectExecution>();
	}
};

// Class Marvel.MarvelAttributeSet
// 0x01D0 (0x0248 - 0x0078)
class UMarvelAttributeSet : public UMarvelBaseAttributeSet
{
public:
	struct FGameplayAttributeData                 Damage;                                            // 0x0078(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 Treat;                                             // 0x0088(0x0010)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 TargetTreatPercentage;                             // 0x0098(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 Shield;                                            // 0x00A8(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MaxShield;                                         // 0x00B8(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 NotTreatShield;                                    // 0x00C8(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MaxNotTreatShield;                                 // 0x00D8(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 Armor;                                             // 0x00E8(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MaxArmor;                                          // 0x00F8(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 NotTreatArmor;                                     // 0x0108(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MaxNotTreatArmor;                                  // 0x0118(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 NotTreatSpareHealth;                               // 0x0128(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MaxNotTreatSpareHealth;                            // 0x0138(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MoveSpeed;                                         // 0x0148(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 Energy;                                            // 0x0158(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MaxEnergy;                                         // 0x0168(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 SkillEnergy;                                       // 0x0178(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MaxSkillEnergy;                                    // 0x0188(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 SkillEnergy2;                                      // 0x0198(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MaxSkillEnergy2;                                   // 0x01A8(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 SkillEnergy3;                                      // 0x01B8(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MaxSkillEnergy3;                                   // 0x01C8(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 Ammo1;                                             // 0x01D8(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MaxAmmo1;                                          // 0x01E8(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 Ammo2;                                             // 0x01F8(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MaxAmmo2;                                          // 0x0208(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 Ammo3;                                             // 0x0218(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	struct FGameplayAttributeData                 MaxAmmo3;                                          // 0x0228(0x0010)(BlueprintVisible, BlueprintReadOnly, Net, RepNotify, NativeAccessSpecifierPublic)
	uint8                                         Pad_238[0x10];                                     // 0x0238(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_Ammo1(const struct FGameplayAttributeData& OldValue);
	void OnRep_Ammo2(const struct FGameplayAttributeData& OldValue);
	void OnRep_Ammo3(const struct FGameplayAttributeData& OldValue);
	void OnRep_Armor(const struct FGameplayAttributeData& OldValue);
	void OnRep_Energy(const struct FGameplayAttributeData& OldValue);
	void OnRep_MaxAmmo1(const struct FGameplayAttributeData& OldValue);
	void OnRep_MaxAmmo2(const struct FGameplayAttributeData& OldValue);
	void OnRep_MaxAmmo3(const struct FGameplayAttributeData& OldValue);
	void OnRep_MaxArmor(const struct FGameplayAttributeData& OldValue);
	void OnRep_MaxEnergy(const struct FGameplayAttributeData& OldValue);
	void OnRep_MaxNotTreatArmor(const struct FGameplayAttributeData& OldValue);
	void OnRep_MaxNotTreatShield(const struct FGameplayAttributeData& OldValue);
	void OnRep_MaxNotTreatSpareHealth(const struct FGameplayAttributeData& OldValue);
	void OnRep_MaxShield(const struct FGameplayAttributeData& OldValue);
	void OnRep_MaxSkillEnergy(const struct FGameplayAttributeData& OldValue);
	void OnRep_MaxSkillEnergy2(const struct FGameplayAttributeData& OldValue);
	void OnRep_MaxSkillEnergy3(const struct FGameplayAttributeData& OldValue);
	void OnRep_MoveSpeed(const struct FGameplayAttributeData& OldValue);
	void OnRep_NotTreatArmor(const struct FGameplayAttributeData& OldValue);
	void OnRep_NotTreatShield(const struct FGameplayAttributeData& OldValue);
	void OnRep_NotTreatSpareHealth(const struct FGameplayAttributeData& OldValue);
	void OnRep_Shield(const struct FGameplayAttributeData& OldValue);
	void OnRep_SkillEnergy(const struct FGameplayAttributeData& OldValue);
	void OnRep_SkillEnergy2(const struct FGameplayAttributeData& OldValue);
	void OnRep_SkillEnergy3(const struct FGameplayAttributeData& OldValue);
	void OnRep_TargetTreatPercentage(const struct FGameplayAttributeData& OldValue);
	void SetShouldTakeDamageButNoDeath(bool bInShould);

	bool ShouldTakeDamageButNoDeath() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAttributeSet">();
	}
	static class UMarvelAttributeSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAttributeSet>();
	}
};

// Class Marvel.MarvelPortalController
// 0x0000 (0x0A98 - 0x0A98)
class AMarvelPortalController final : public APlayerController
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPortalController">();
	}
	static class AMarvelPortalController* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelPortalController>();
	}
};

// Class Marvel.MarvelSoundBank
// 0x0030 (0x0068 - 0x0038)
class UMarvelSoundBank final : public UPrimaryDataAsset
{
public:
	TArray<class UAkAudioEvent*>                  Events;                                            // 0x0038(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMarvelAudioBusEffectSlots             BusEffects;                                        // 0x0048(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSoundBank">();
	}
	static class UMarvelSoundBank* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSoundBank>();
	}
};

// Class Marvel.MarvelAudioAdmin
// 0x0110 (0x0140 - 0x0030)
class UMarvelAudioAdmin : public UObject
{
public:
	TMulticastInlineDelegate<void(bool Value)>    OnEmitEventChanged;                                // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bShowAudioEmitter;                                 // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Value)>    OnShowAudioEmitterChanged;                         // 0x0048(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bShowEmitterName;                                  // 0x0058(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_59[0x7];                                       // 0x0059(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Value)>    OnShowEmitterNameChanged;                          // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bShowAudioSwitch;                                  // 0x0070(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Value)>    OnShowAudioSwitchChanged;                          // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bShowAudioRtpc;                                    // 0x0088(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_89[0x7];                                       // 0x0089(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Value)>    OnShowAudioRtpcChanged;                            // 0x0090(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bShowEventName;                                    // 0x00A0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Value)>    OnShowEventNameChanged;                            // 0x00A8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bShowThreatValue;                                  // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Value)>    OnShowThreatValueChanged;                          // 0x00C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bShowMontageName;                                  // 0x00D0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Value)>    OnShowMontageNameChanged;                          // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bDebugAudioPanel;                                  // 0x00E8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x7];                                       // 0x00E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Value)>    OnDebugAudioPanelChanged;                          // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bEnableOccObs;                                     // 0x0100(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDoppler;                                    // 0x0101(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_102[0x6];                                      // 0x0102(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelGameInstance*                    MarvelGameInstance;                                // 0x0108(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FString>                         AkEventsSoloed;                                    // 0x0110(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class FString>                         AkEventsDisabled;                                  // 0x0120(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	class UWorld*                                 LastDebugPanelShowWorld;                           // 0x0130(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UAudioGlobalSubSystem*                  GlobalSystem;                                      // 0x0138(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void AppendSoloAkEvents(const TArray<class UAkAudioEvent*>& AkAudioEvents);
	void DeInit();
	void DisableAkEventByRaw(const class FString& EventName);
	void EmptyDisabledAkEvents();
	void EmptySoloedAkEvents();
	class UActorComponent* FindOrAddAudioInfoWidgetCom(class AActor* Target, const struct FTransform& CustomRelativeTransform, bool bCustomTf);
	bool InCheckPointFrame(class UObject* WorldContextObject);
	void Init();
	bool IsNearCheckPointFrame(class UObject* WorldContextObject);
	bool IsWorldSpatialListenerEnable(class UObject* WorldContextObject);
	void K2_DeInit();
	void K2_Init();
	void MarvelOnMapDestroyed(class UWorld* InWorld);
	void OnAkComponentPostEventCallback(class UAkComponent* InAkComponent, class UAkAudioEvent* InAkEvent, const class FString& InEventName);
	void SoloAkEvent(class UAkAudioEvent* AkAudioEvent);
	void SoloAkEventByRaw(const class FString& EventName);
	void SoloAkEvents(const TArray<class UAkAudioEvent*>& AkAudioEvents);

	class FString GetCurrentMontageName(class UAkComponent* InAkComponent) const;
	TArray<class FString> GetSoloedAkEvents() const;
	bool IsEventDisabledMuted(class UAkAudioEvent* AkAudioEvent, const class FString& InEventName) const;
	bool IsEventSoloMuted(class UAkAudioEvent* AkAudioEvent, const class FString& InEventName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAudioAdmin">();
	}
	static class UMarvelAudioAdmin* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAudioAdmin>();
	}
};

// Class Marvel.AN_AkEvent
// 0x00B8 (0x00F8 - 0x0040)
class UAN_AkEvent : public UMarvelAnimNotify
{
public:
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   AttachName;                                        // 0x0050(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C[0x4];                                       // 0x005C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UAkAudioEvent>           Event;                                             // 0x0060(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bFollow;                                           // 0x0090(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReplay;                                           // 0x0091(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndWithAbility;                                   // 0x0092(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndWithMontage;                                   // 0x0093(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkFadeInterpolation                          FadeoutType;                                       // 0x0094(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_95[0x3];                                       // 0x0095(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         FadeoutTime;                                       // 0x0098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetSelf;                                       // 0x009C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetTeammate;                                   // 0x009D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTargetEnemy;                                      // 0x009E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetSwitch;                                        // 0x009F(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SwitchGroup;                                       // 0x00A0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SwitchState;                                       // 0x00AC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelAudioType                              AudioType;                                         // 0x00B8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomSocket;                                     // 0x00B9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BA[0x26];                                      // 0x00BA(0x0026)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AudioEvent;                                        // 0x00E0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class USkeletalMeshComponent>  CachedMeshComp;                                    // 0x00E8(0x0008)(ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TWeakObjectPtr<class UAnimSequenceBase>       CachedAnimation;                                   // 0x00F0(0x0008)(BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnEventAssetLoaded() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AN_AkEvent">();
	}
	static class UAN_AkEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAN_AkEvent>();
	}
};

// Class Marvel.MarvelParticleSystemComponent
// 0x0000 (0x0B50 - 0x0B50)
class UMarvelParticleSystemComponent final : public UParticleSystemComponent
{
public:
	void SetAllEmitterEnable(bool bNewEnableState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelParticleSystemComponent">();
	}
	static class UMarvelParticleSystemComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelParticleSystemComponent>();
	}
};

// Class Marvel.AN_AkEventFootstep
// 0x0008 (0x0100 - 0x00F8)
class UAN_AkEventFootstep : public UAN_AkEvent
{
public:
	bool                                          bNeedZSpeedLimit;                                  // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAxis                                         MeshUpAxis;                                        // 0x00F9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebug;                                            // 0x00FA(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedRestrictOnGround;                             // 0x00FB(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AN_AkEventFootstep">();
	}
	static class UAN_AkEventFootstep* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAN_AkEventFootstep>();
	}
};

// Class Marvel.TestConfigDataAsset
// 0x0020 (0x0058 - 0x0038)
class UTestConfigDataAsset final : public UPrimaryDataAsset
{
public:
	TArray<class UTestConfigItem*>                TestConfigItemList;                                // 0x0038(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UTestConfigDataAsset*>           SubTestAssetList;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TestConfigDataAsset">();
	}
	static class UTestConfigDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTestConfigDataAsset>();
	}
};

// Class Marvel.AN_AkEventFootstep_Turn
// 0x0068 (0x0168 - 0x0100)
class UAN_AkEventFootstep_Turn final : public UAN_AkEventFootstep
{
public:
	struct FGameplayTagContainer                  BlockTags;                                         // 0x0100(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AN_AkEventFootstep_Turn">();
	}
	static class UAN_AkEventFootstep_Turn* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAN_AkEventFootstep_Turn>();
	}
};

// Class Marvel.AN_AkEventBreath
// 0x0010 (0x0108 - 0x00F8)
class UAN_AkEventBreath final : public UAN_AkEvent
{
public:
	EHeroBreathType                               BreathType;                                        // 0x00F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EHeroBreathPriority                           Priority;                                          // 0x00F9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FA[0x2];                                       // 0x00FA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CD;                                                // 0x00FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalCD;                                          // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TriggerThreshold;                                  // 0x0104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AN_AkEventBreath">();
	}
	static class UAN_AkEventBreath* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAN_AkEventBreath>();
	}
};

// Class Marvel.MarvelAudioCacheInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelAudioCacheInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAudioCacheInterface">();
	}
	static class IMarvelAudioCacheInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelAudioCacheInterface>();
	}
};

// Class Marvel.MarvelSystemVoiceData
// 0x0180 (0x01B8 - 0x0038)
class UMarvelSystemVoiceData final : public UDataAsset
{
public:
	TMap<class FName, int32>                      EnterMapVoIds;                                     // 0x0038(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTagContainer>          PendingListPriority;                               // 0x0088(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  InterruptAllTags;                                  // 0x0098(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, struct FGameplayTagContainer> InterruptOrder;                                    // 0x0100(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DisabledTags;                                      // 0x0150(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSystemVoiceData">();
	}
	static class UMarvelSystemVoiceData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSystemVoiceData>();
	}
};

// Class Marvel.MarvelGameplayStatics
// 0x0000 (0x0030 - 0x0030)
class UMarvelGameplayStatics final : public UBlueprintFunctionLibrary
{
public:
	static void GetAllActorsInPersistentLevel(const class UObject* WorldContextObject, TArray<class AActor*>* OutActors);
	static bool IsObjectWasLoaded(const class UObject* Object);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayStatics">();
	}
	static class UMarvelGameplayStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayStatics>();
	}
};

// Class Marvel.MarvelAudioData
// 0x0B98 (0x0BD0 - 0x0038)
class UMarvelAudioData final : public UDataAsset
{
public:
	bool                                          bEnableProcedure;                                  // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UProcedureAudioManager>     ProcedureAudioManagerClass;                        // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UMarvelProcedureData>> ProcedureAudioData;                                // 0x0048(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMarvelHeroVoiceData>    HeroVoiceData;                                     // 0x0058(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelSystemVoiceData*                 SystemVoiceData;                                   // 0x0088(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UHeroBreathGlobalConfig*                HeroBreathGlobalConfig;                            // 0x0090(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAeroAudioMetaData*               AeroAudioMetaData;                                 // 0x0098(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDataTable*                             CommonBuffAudioTable;                              // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class UMarvelMusicData>        MarvelMusicData;                                   // 0x00A8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   MarvelAudioAdminClass;                             // 0x00D8(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableProbe;                                      // 0x0108(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class AActor>>             ClassesToCheckTeamRelation;                        // 0x0110(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class FString>                         LevelsToEnableAudioSubSystem;                      // 0x0120(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 CanPostWithTreatAndLowHpHeroIds;                   // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 CanPostWithTreatAndLowHpType;                      // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 UserDefinedAuxSendRtpcGroup;                       // 0x0150(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PerspectiveAudioTypeMask;                          // 0x0160(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AudioDeviceEffectSlotIndex;                        // 0x0164(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioDeviceShareSet*                 SystemDeviceShareSet;                              // 0x0168(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioDeviceShareSet*                 NoOutputDeviceShareSet;                            // 0x0170(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioDeviceShareSet*                 MotionDeviceShareSet;                              // 0x0178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EMarvelAudioDeviceType, class UAkEffectShareSet*> AudioDeviceModeEffects;                            // 0x0180(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<EAbilityInputBinds>                    InputsIgnoreCannotReleaseAbility;                  // 0x01D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AbilityCannotReleaseEventWithCost;                 // 0x01E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AbilityCannotReleaseEventWithBlock;                // 0x01E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AbilityShieldCrushingEvent;                        // 0x01F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          AbilityShieldCrushingThreeDEvent;                  // 0x01F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class FString>                    AbilityCrushingIDMap;                              // 0x0200(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ETraceTypeQuery                               FootstepTraceChannel;                              // 0x0250(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugFootstepTrace;                               // 0x0251(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_252[0x6];                                      // 0x0252(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRTPC_Config                           RTPC_Footstep_FallConfig;                          // 0x0258(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FName                                   MovementStateRTPC;                                 // 0x0278(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DistanceThresholdEnableFsMaterial;                 // 0x0284(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ThreatValueRTPC;                                   // 0x0288(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ViewThreatRTPC;                                    // 0x0294(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MaterialGroup;                                     // 0x02A0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2AC[0x4];                                      // 0x02AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 MaterialCharacter;                                 // 0x02B0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 MaterialSummoned;                                  // 0x02C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, class FString>      TagToMaterialMap;                                  // 0x02D0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EPhysicalSurface, class FString>         MaterialMap;                                       // 0x0320(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<int32, class FString>                    SummonedMaterialMap;                               // 0x0370(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<int32, class FString>                    HeroHitSwitchMap;                                  // 0x03C0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 DefaultMaterial;                                   // 0x0410(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   WeaponEnvironmentGroup;                            // 0x0420(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_42C[0x4];                                      // 0x042C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      WeaponBlockTypes;                                  // 0x0430(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EAmmoClipType, class FString>            AmmoRemainPercentRTPCMap;                          // 0x0440(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 RTPC_AmmoShoot;                                    // 0x0490(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RTPC_AmmoRemaining;                                // 0x04A0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableMidiEvent;                                  // 0x04B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUpdateFireThreat;                                 // 0x04B1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B2[0x2];                                      // 0x04B2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DistanceForTrajectoryEvent;                        // 0x04B4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusForTrajectoryEvent;                          // 0x04B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NotTriggerDistance;                                // 0x04BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusForInstantTrajectory;                        // 0x04C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopSoundWhenProjectileExitArea;                  // 0x04C4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopSoundWhenProjectileStop;                      // 0x04C5(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C6[0x2];                                      // 0x04C6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TrajectoryInterpSpeed;                             // 0x04C8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDoppler;                                    // 0x04CC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4CD[0x3];                                      // 0x04CD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DopplerRatioRTPC;                                  // 0x04D0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceForDopplerUpdate;                          // 0x04DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RadiusForDopplerUpdate;                            // 0x04E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4E4[0x4];                                      // 0x04E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          UIEventKillNormal;                                 // 0x04E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          UIEventKillHeadStrike;                             // 0x04F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          UIEventAbilityCharge;                              // 0x04F8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          UIEventAbilityChargeMax;                           // 0x0500(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  BlockHitAudioTags;                                 // 0x0508(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          ChaosFeedbackEvent;                                // 0x0570(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AbilityHitAudioDistance;                           // 0x0578(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CommonHitAudioDistance;                            // 0x057C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ECommonHitAudioType, class UAkAudioEvent*> CommonHitEvents;                                   // 0x0580(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 HitStrikePartSwitch;                               // 0x05D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         HighDamageBreathThreshold;                         // 0x05E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E4[0x4];                                      // 0x05E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RTPC_CommonBeHitDamage;                            // 0x05E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RTPC_CommonBeHitHpRemainNewPercent;                // 0x05F8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EBeHitImpactSwitchType, struct FBeHitAudioTypeConfig> HeroBeHitSwitchAbilities;                          // 0x0608(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EBeHitImpactSwitchType, class FString>   HeroBeHitSwitchMap;                                // 0x0658(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 DefaultHeroBeHitSwitch;                            // 0x06A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeroBeHitSwitchGroup;                              // 0x06B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DefaultHeroBeHitMaterialSwitch;                    // 0x06C8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 HeroBeHitMaterialSwitchGroup;                      // 0x06D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HeroBeHitFixedInterval;                            // 0x06E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6EC[0x4];                                      // 0x06EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          CharacterCommonBeHitEvent;                         // 0x06F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<struct FGameplayTag, class UAkAudioEvent*> CharacterBuffBeHitEvents;                          // 0x06F8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAkAudioEvent*                          InteratableHitAudioEvent;                          // 0x0748(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RTPC_Interatable_Mass;                             // 0x0750(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RTPC_Interatable_Velocity;                         // 0x0760(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteratableEventSkipDistance;                      // 0x0770(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteratableEventSkipVelocitySize;                  // 0x0774(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteratableHitAudioPlayInterval;                   // 0x0778(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InteratableHitAudioDisableTime;                    // 0x077C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 InteratableHitSwitchName;                          // 0x0780(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EInteratableWeaponAudioType, class FString> InteratableHitSwitchValueMap;                      // 0x0790(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class FString                                 InteratableDefaultHitSwitchValue;                  // 0x07E0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RTPC_CommonBuffHealHpPercent;                      // 0x07F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CommonBuffHealAudioTag;                            // 0x0800(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CommonBuffHealAudioTagA;                           // 0x080C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CommonBuffHealAudioTagB;                           // 0x0818(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CommonBuffHealAudioTagC;                           // 0x0824(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           CommonBuffHealAudioTagD;                           // 0x0830(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ShortBuffHealAudioThresholdWhenHit;                // 0x083C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RTPC_HFDamping;                                    // 0x0840(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RTPC_T60Decay;                                     // 0x0850(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 RTPC_PreDecay;                                     // 0x0860(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryIgnoreMask;                                   // 0x0870(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         QueryObjectTypes;                                  // 0x0874(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RoomRaycastRadius;                                 // 0x0878(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReverbDetectUpTheta;                               // 0x087C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bReverbSwitch;                                     // 0x0880(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugReverbRoomRays;                              // 0x0881(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOccObs;                                     // 0x0882(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_883[0x5];                                      // 0x0883(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelOccObsData                      OccObsData;                                        // 0x0888(0x0120)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         MaxOccDistanceOfAmbient;                           // 0x09A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableSpatialListener;                            // 0x09AC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableReflect;                                    // 0x09AD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9AE[0x2];                                      // 0x09AE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAkReflectData                   ReflectData;                                       // 0x09B0(0x0040)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 RtpcWeaponTail;                                    // 0x09F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RtpcWeaponTailDefaultValue;                        // 0x0A00(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A04[0x4];                                      // 0x0A04(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 RtpcSpatialNoiseCovered;                           // 0x0A08(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ESpatialVolumePrefabType, struct FSpatialVolumeConfigPrefab> SpatialVolumeConfigPrefabs;                        // 0x0A18(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, class FName>                DefaultStates;                                     // 0x0A68(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      DefaultRtpcs;                                      // 0x0AB8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         EnableSpotReflectors : 1;                          // 0x0B08(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         DrawFirstOrderReflections : 1;                     // 0x0B08(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         DrawSecondOrderReflections : 1;                    // 0x0B08(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         DrawHigherOrderReflections : 1;                    // 0x0B08(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         DrawDiffraction : 1;                               // 0x0B08(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_B09[0x3];                                      // 0x0B09(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bEnableMotionSwingingInReplay;                     // 0x0B0C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B0D[0x3];                                      // 0x0B0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   MotionSwingingStateGroup;                          // 0x0B10(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MotionSwingingState;                               // 0x0B1C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetCustomVideoSaveSetting;                        // 0x0B28(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B29[0x7];                                      // 0x0B29(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, float>                    SaveVideoVolumeRTPC;                               // 0x0B30(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FString, int32>                    SaveVideoVolumeState;                              // 0x0B80(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAudioData">();
	}
	static class UMarvelAudioData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAudioData>();
	}
};

// Class Marvel.AudioTestAIConfig
// 0x0050 (0x0088 - 0x0038)
class UAudioTestAIConfig final : public UDataAsset
{
public:
	TMap<class FName, class UBehaviorTree*>       BTs;                                               // 0x0038(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AudioTestAIConfig">();
	}
	static class UAudioTestAIConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAudioTestAIConfig>();
	}
};

// Class Marvel.MarvelAudioInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelAudioInterface final : public IInterface
{
public:
	class UMarvelAudioComponent* GetAudioComponent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAudioInterface">();
	}
	static class IMarvelAudioInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelAudioInterface>();
	}
};

// Class Marvel.MarvelHitShape_Capsule
// 0x0010 (0x08A0 - 0x0890)
class UMarvelHitShape_Capsule final : public UCapsuleComponent
{
public:
	bool                                          bUseAdjunctBounds;                                 // 0x0888(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_889[0x7];                                      // 0x0889(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterCollisionComponent*           OwnerCapsule;                                      // 0x0890(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_898[0x8];                                      // 0x0898(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelHitShape_Capsule">();
	}
	static class UMarvelHitShape_Capsule* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelHitShape_Capsule>();
	}
};

// Class Marvel.MarvelAudioLibrary
// 0x0000 (0x0030 - 0x0030)
class UMarvelAudioLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool BeyondAttenuationRadius(class UAkAudioEvent* AkEvent, class UAkComponent* Emitter, const struct FVector& CustomLocation, EMarvelAudioType AudioType);
	static void EditorUpdateCustomDefaultVolume();
	static void EnableLoadingPanelMusic(class UObject* WCO, class FName LevelName, bool InEnable);
	static class UActorComponent* FindOrAddWidgetCom(class AActor* Target, TSubclassOf<class UActorComponent> WCClass, const struct FTransform& RelativeTransform);
	static void GetAccumulatedWeightAudioArray(const TArray<struct FWeightedAudioEvent>& WeightedAudios, struct FWeightedAudioEventArray* WeightedAudioArray);
	static class UAkComponent* GetAkComponentByActor(class AActor* InActor);
	static class UObject* GetAssetDataByPath(const class FString& PathStr, bool bIncludeOnlyOnDiskAssets);
	static class AActor* GetAssociatedDestructionActorByVolume(class AMarvelSpatialAudioVolume* InVolume);
	static class AAudioActorPool* GetAudioActorPool(const class UObject* WCO);
	static class UMarvelAudioComponent* GetAudioComponentByObject(class UObject* InObj);
	static class UAudioGlobalSubSystem* GetAudioGlobalSystem(const class UObject* WCO);
	static class UAudioWorldSubSystem* GetAudioWorldSystem(const class UObject* WCO);
	static class UBreathAudioManager* GetBreathAudioManager(class UObject* WorldContextObject);
	static int32 GetChooseHeroVoiceID(int32 HeroID, int32 SkinID);
	static class AMarvelSpatialAudioVolume* GetCurrentlyInsideSpatialAudioVolume(class AActor* InActor);
	static class UMarvelAudioData* GetGlobalAudioData();
	static class UHeroAudioStateManager* GetHeroAudioStateManager(const class UObject* WCO);
	static void GetHeroVoiceItemAssetReferences(class UObject* WCO, int32 HeroID, TArray<class FString>* OutPaths);
	static class AHeroVoiceManager* GetHeroVoiceManager(const class UObject* WCO);
	static bool GetLastWwisePosition(class UAkComponent* AkComponent, struct FVector* Pos);
	static struct FMarvelAbilityAudioPack GetMarvelAbilityAudioData(int32 AudioID, class AActor* InActor, int32 SkinID);
	static class UMarvelAeroAudioData* GetMarvelAeroAudioData(int32 HeroID, int32 SkinID);
	static class UMarvelAudioAdmin* GetMarvelAudioAdmin(class UObject* WorldContextObject);
	static class UMarvelMusicData* GetMarvelMusicData();
	static class UMarvelMusicMgr* GetMarvelMusicMgr(class UObject* WorldContextObject);
	static struct FMarvelVoiceRow GetMarvelVoiceRow(const class UObject* WCO, int32 VoiceID);
	static class UAkAudioEvent* GetMiscAudioEvent(const class FString& AssetPath, const class FString& AudioEventName);
	static class AActor* GetNpcActorByTag(const class UObject* WorldContextObject, const class FString& Tag);
	static class UNPCAudioComponent* GetNpcAudioComponent(class AActor* InActor, bool bCreateWhenNotFound, bool bNeedVoComponent);
	static class FText GetNpcNameByActor(class AActor* InActor);
	static bool GetOccObsOriginInfo(class AActor* InActor, struct FVector* OutPathStart, struct FVector* OutPathEnd, float* OutPathLength, float* OutEmitterDist);
	static class AOneShotAudioActor* GetOneShotAudioActor(const class UObject* WCO, bool bPoolEnabled);
	static void GetSectionAreaOfStaticMesh(class UStaticMesh* InStaticMesh, TMap<int32, float>* OutSectionArea);
	static int32 GetSkinIDByActor(class AActor* InActor);
	static float GetSoundDopplerRatio(const struct FVector& EmitterLoc, const struct FVector& EmitterVelocity, const struct FVector& ListenerLoc, const struct FVector& ListenerVelocity);
	static class FString GetState(const class FString& StateGroup);
	static class AThreatValueAdmin* GetThreatValueAdmin(class UObject* WorldContext);
	static float GetThreatValueByObject(class UObject* WorldContext);
	static float GetViewThreatValueByObject(class UObject* WorldContext);
	static float GetVoiceDuration(class UObject* WorldContextObject, int32 VoiceID, class AActor* InActor);
	static class UAkComponent* GetWorldPlayerListener(class UObject* WorldContextObject, EAudioLevelView View);
	static bool HasBegunPlay(class UObject* WorldContextObject);
	static bool IsActorInsideRoom(class AActor* InActor, TArray<EObjectTypeQuery>* BlockType, float TraceDistance, int32 HorizontalIteration);
	static bool IsBreathPlaying(class AActor* InActor);
	static bool IsCharacterHasAnyTags(class AMarvelBaseCharacter* AbilityOwner, const struct FGameplayTagContainer& Tags);
	static bool IsEventDisableMuted(class UObject* WCO, class UAkAudioEvent* InEvent, const class FString& InName);
	static bool IsEventPlaying(class UAkAudioEvent* AkEvent, class UAkComponent* AkComponent);
	static bool IsEventSoloMuted(class UObject* WCO, class UAkAudioEvent* InEvent, const class FString& InName);
	static bool IsHitPointOverDistance(class AActor* InActor, class AActor* ViewActor, const struct FVector& HitPoint, float Distance);
	static bool IsPlaying(int32 PlayingID);
	static bool IsPlayingIDActive(class UAkAudioEvent* AkEvent, int32 PlayingID);
	static bool IsSatisfyWithWhiteBlackLists(const class AMarvelBaseCharacter* Char, const struct FGameplayTag& PostingAudioTag, const TArray<struct FAudioTagMapParams>& Whitelist, const TArray<struct FAudioTagMapParams>& BlackList);
	static bool IsVoicePlaying(class AMarvelBaseCharacter* Char);
	static bool IsWorldAudioDisabled(class UObject* WorldContextObject, EMarvelAudioType AudioType);
	static EMarvelBankLoadStatus LoadBankAsync(const class FString& BankToLoad, const TDelegate<void(EAkResult Result)>& BankLoadedCallback);
	static class UMarvelMiscAudioData* LoadMiscAudioEventData(const class FString& AssetPath);
	static int32 MarvelPostAkEvent(class UAkComponent* AkComponent, class UAkAudioEvent* AkEvent, int32 CallbackMask, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback, const class FString& in_EventName, EMarvelAudioType AudioType, int32 AudioTypeMask);
	static int32 MarvelPostEvent(class UAkAudioEvent* AkEvent, class UObject* WorldContext, int32 CallbackMask, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback, const class FString& EventName, const EMarvelAudioType AudioType, int32 AudioTypeMask);
	static int32 MarvelPostEventAtLocation(class UObject* WorldContextObject, class UAkAudioEvent* Event, const struct FVector& Location, const class FString& EventName, EMarvelAudioType AudioType);
	static int32 MarvelPostEventShieldBroken(class AActor* HitActor, class AActor* AttackActor);
	static int32 MarvelPostVoice(class UObject* WorldContextObject, EMarvelVoiceType VoiceType, int32 VoiceID, class AActor* Character, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback, int32 SkinID, class AActor* ToCharacter);
	static bool MarvelStopAllEvents(class UObject* WorldContextObject, const EMarvelAudioType AudioType);
	static void MarvelStopMidiEvent(class UAkComponent* InAkComponent);
	static void PauseAllAudio(class UObject* WCO);
	static void PauseAudioOnActor(class AActor* InActor);
	static int32 PostAbilityFailedEvent(class UMarvelBaseAbilitySystemComponent* ASC, class UMarvelGameplayAbility* FailedAbility, const struct FGameplayTagContainer& FailureReason);
	static bool PostAbilityHeroVoice(class AMarvelBaseCharacter* Character, int32 AbilityID, EAbilityVoiceStage VoiceStage);
	static int32 PostAudioAtLocation(class AMarvelBaseCharacter* MarvelChar, int32 AudioID, const struct FVector& InLocation);
	static int32 PostAudioAtLocationWithCache(class AMarvelBaseCharacter* MarvelChar, int32 AudioID, const struct FVector& InLocation, class AOneShotAudioActor*& CacheAudioActor);
	static void PostCustomVoice(class AMarvelBaseCharacter* Character, int32 AbilityID, const EAbilityVoiceStage& Stage);
	static int32 PostEnterMapSystemVo(class UObject* WCO, class FName MapName);
	static int32 PostEventGlobally(const class FString& EventName, int32 CallbackMask, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback);
	static int32 PostHitAudio(class UObject* WCO, int32 AudioID, const struct FHitResult& HitResult);
	static int32 PostHitAudioWithCache(class UObject* WCO, int32 AudioID, const struct FHitResult& HitResult, class AOneShotAudioActor*& CacheAudioActor);
	static void PostLoopStateBreath(class AActor* InActor, EHeroBreathType BreathType);
	static int32 PostUIAudio(class UObject* UIContext, int32 AudioID, class AMarvelBaseCharacter* MarvelChar, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback, int32 CallbackMask);
	static int32 PostUIChargeAudio(class UObject* UIContext, bool bNeedChargeNormal, bool bNeedChargeMax, const TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)>& PostEventCallback);
	static void ResetReverbParams();
	static void ResumeAllAudio(class UObject* WCO);
	static void ResumeAudioOnActor(class AActor* InActor);
	static bool SetAbilityStatesByActor(class AActor* Target, const TMap<class FString, class FString>& States, bool Reset);
	static bool SetAbilitySwitchesByActor(class AActor* Target, const TMap<class FString, class FString>& Switches, bool Reset);
	static void SetAkComponentAmmoRemainPercentRTPCByRaw(class UAkComponent* AkComponent, float Value, EAmmoClipType AmmoClipType);
	static void SetAkComponentAmmoShootRTPCByRaw(class UAkComponent* AkComponent, float Value);
	static void SetAkComponentBreathRTPC(class UAkComponent* AkComponent, const class FString& RtpcKey, float TimeNum);
	static void SetAkComponentDopplerRatioRTPC(class UAkComponent* AkComponent, float Value, int32 InterpMs);
	static bool SetAkComponentFallHeightRTPC(class UAkComponent* AkComponent, float LandHeight);
	static void SetAkComponentHitStrikeSwitch(class UAkComponent* AkComponent, const struct FHitResult& Hit);
	static void SetAkComponentHpPercentRTPC(class AActor* InActor);
	static void SetAkComponentHTLeftRTPC(class UAkComponent* AkComponent, int32 Value);
	static void SetAkComponentMaterialSwitch(class UAkComponent* AkComponent, const struct FHitResult& Hit);
	static void SetAkComponentMovementStateRTPC(class UAkComponent* AkComponent, class AMarvelBaseCharacter* Character);
	static void SetAkComponentSpatialNoiseCoveredRTPC(class UAkComponent* AkComponent, float InValue, bool bInReset);
	static void SetAkComponentT60RTPC(class UAkComponent* AkComponent);
	static void SetAkComponentThreatValueRTPC(class UAkComponent* AkComponent, float CustomThreat, float ViewThreatValue);
	static void SetAkComponentWeaponEnvironmentSwitch(class UAkComponent* AkComponent, class AMarvelBaseCharacter* TargetCharacter);
	static void SetAkComponentWeaponTailRTPC(class UAkComponent* AkComponent, float InValue, bool bReset);
	static void SetAudioDeviceMode(EMarvelAudioDeviceType DeviceType);
	static void SetBackgroundPlayEnabled(class UObject* WCO, bool bEnable);
	static void SetClientRtpc(class UObject* WorldContextObject, const class FString& RtpcKey, float RtpcValue, int32 InterpMs);
	static void SetCurrentAudioCulture(const class UObject* WCO, const class FString& AudioCulture);
	static void SetHeroVoiceEnabledOnFreeSpectate(class UObject* WorldContextObject, bool bEnableHeroVoice);
	static void SetPlayerAliveState(class UObject* WCO, bool bAlive);
	static void SetPlayerStateNearDeath(class UObject* WCO);
	static void SetState(class UObject* WCO, const class FName& StateGroup, const class FName& StateValue);
	static void SetSystemVoiceEnabledOnFreeSpectate(class UObject* WorldContextObject, bool bEnableSystemVoice);
	static bool SetWorldRtpc(class UObject* WorldContextObject, const class FString& RtpcKey, float RtpcValue, int32 InterpMs);
	static bool SetWorldSwitch(class UObject* WorldContextObject, const class FString& EventGroup, const class FString& EventState);
	static bool SimpleCheckIfVisibleFromCameraInClient(class AMarvelBaseCharacter* FromChar, class AActor* Other, float Distance);
	static int32 SimplePostBreath(class AActor* InActor, EHeroBreathType BreathType);
	static class UAkAudioEvent* SimpleWeightedRandomSelectAudio(const TArray<struct FWeightedAudioEvent>& WeightedAudios);
	static void StartAudioOutputCapture(const class FString& OutputFileName);
	static int32 StaticPostAbilityAudio(class UObject* WCO, int32 AudioID, class USceneComponent* AttachComponent, class AMarvelBaseCharacter* InstigatorCharacter, bool bCritical);
	static int32 StaticPostAbilityAudioAtLocation(class UObject* WCO, int32 AudioID, int32 SkinID, const struct FVector& InLocation, class AActor* Instigator, EMarvelAudioType AudioType);
	static int32 StaticPostBuffAudio(class UObject* WCO, int32 AudioID, class AMarvelBaseCharacter* InstigatorCharacter);
	static int32 StaticPostChaosFeedbackAudio(class UObject* WCO, const struct FHitResult& HitResult);
	static int32 StaticPostHitAudio(class UObject* WCO, int32 AudioID, const struct FHitResult& HitResult);
	static bool StaticStopAbilityAudio(class UObject* WCO, int32 AudioID);
	static void StopAllBreath(class AActor* InActor);
	static void StopAudioOutputCapture();
	static void StopBreath(class AActor* InActor, EHeroBreathType BreathType);
	static void StopLoopStateBreath(class AActor* InActor, EHeroBreathType BreathType);
	static void StopPlayingID(int32 PlayingID, int32 TransitionDurationMS, EAkFadeInterpolation FadeCurve);
	static bool UpdateAkComponentMaterialSwitchByTrace(class UAkComponent* AkComponent, class AMarvelBaseCharacter* TargetCharacter, const struct FVector& StartLoc, const struct FVector& EndLoc, const ECollisionChannel CollisionChannel, float TraceRadius);
	static bool UpdateCharacterVoEffects(class AMarvelBaseCharacter* InCharacter);
	static bool UpdateHeroVoEffects(class UObject* WorldContextObject, int32 VoiceID, int32 SkinID);
	static bool UpdateHeroVoiceEffects(class UObject* WorldContextObject, int32 HeroID, int32 SculptID, int32 SkinID);
	static void UpdatePlayerHpState(class UObject* WCO, bool bReset);
	static class UAkAudioEvent* WeightedRandomSelectAudio(struct FWeightedAudioEventArray& WeightedAudioArray);
	static void WeightedRandomSelectTest(const TArray<struct FWeightedTest>& WeightedTests);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAudioLibrary">();
	}
	static class UMarvelAudioLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAudioLibrary>();
	}
};

// Class Marvel.MarvelNavMeshBoundsVolume
// 0x0000 (0x04D0 - 0x04D0)
class AMarvelNavMeshBoundsVolume : public ANavMeshBoundsVolume
{
public:
	void RebuildAllData();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelNavMeshBoundsVolume">();
	}
	static class AMarvelNavMeshBoundsVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelNavMeshBoundsVolume>();
	}
};

// Class Marvel.MarvelAudioReverbComponent
// 0x0358 (0x0448 - 0x00F0)
class UMarvelAudioReverbComponent final : public UActorComponent
{
public:
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FReverbHitInfo                         ReverbHitInfo;                                     // 0x0100(0x0320)(ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_420[0x28];                                     // 0x0420(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelAudioReverbComponent">();
	}
	static class UMarvelAudioReverbComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelAudioReverbComponent>();
	}
};

// Class Marvel.Widget_AbilityStatus_Normal
// 0x0150 (0x07A8 - 0x0658)
class UWidget_AbilityStatus_Normal : public UWidget_AbilityStatus_Base
{
public:
	class UTextBlock*                             Text_RemainCD;                                     // 0x0658(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget_AbilityCharge*                  Widget_Charge;                                     // 0x0660(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget_AbilityStatus_Level*            Widget_Level;                                      // 0x0668(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_670[0x138];                                    // 0x0670(0x0138)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetAbilityIconSwitchConfig(const struct FUIAbilityIconSwitchStyle& InIconSwitchStyle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_AbilityStatus_Normal">();
	}
	static class UWidget_AbilityStatus_Normal* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_AbilityStatus_Normal>();
	}
};

// Class Marvel.MarvelBarrierBase
// 0x0080 (0x0910 - 0x0890)
class AMarvelBarrierBase : public AMarvelSummonerBase
{
public:
	uint8                                         Pad_890[0x8];                                      // 0x0890(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bBarrierIsActive;                                  // 0x0898(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_899[0x7];                                      // 0x0899(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool Value)>    OnBarrierActivationChangeDispatcher;               // 0x08A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBarrierDeathDispatcher;                          // 0x08B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         RegenBuffID;                                       // 0x08C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RegenDelay;                                        // 0x08C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoDeactivateOnDeath;                            // 0x08C8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8C9[0x7];                                      // 0x08C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   BarrierCollision;                                  // 0x08D0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8D8[0x8];                                      // 0x08D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           RegenTimerHandle;                                  // 0x08E0(0x0018)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8F8[0x18];                                     // 0x08F8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetShieldRadius();
	void K2_OnBarrierActivationChange_GraphAbility(bool bIsActive);
	void K2_OnBarrierDeathDispatcher_GraphAbility();
	void OnBarrierActivationChange();
	void OnRep_BarrierIsActive();
	void OnSummonedDeath(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void RestoreFullHealth();
	void SetBarrierActive(bool bNewActive);
	void SetRegenBuffEnabled(bool bNewEnabled);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelBarrierBase">();
	}
	static class AMarvelBarrierBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelBarrierBase>();
	}
};

// Class Marvel.MarvelBaseCapsuleComponent
// 0x0000 (0x0890 - 0x0890)
class UMarvelBaseCapsuleComponent : public UCapsuleComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelBaseCapsuleComponent">();
	}
	static class UMarvelBaseCapsuleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelBaseCapsuleComponent>();
	}
};

// Class Marvel.MarvelCueNotify_Weapon_Loop_DualMesh
// 0x0000 (0x10A8 - 0x10A8)
class AMarvelCueNotify_Weapon_Loop_DualMesh : public AMarvelCueNotify_Weapon_Loop
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_Weapon_Loop_DualMesh">();
	}
	static class AMarvelCueNotify_Weapon_Loop_DualMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_Weapon_Loop_DualMesh>();
	}
};

// Class Marvel.MarvelBaseResurrectionAbility
// 0x0098 (0x1190 - 0x10F8)
class UMarvelBaseResurrectionAbility : public UMarvelEffectGameplayAbility
{
public:
	float                                         PreResurrectionDuration;                           // 0x10F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ResurrectingDuration;                              // 0x10FC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopKillCam;                                      // 0x1100(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1101[0x8F];                                    // 0x1101(0x008F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void K2_DoResurrection();
	void K2_EnterResurrection();
	void K2_PreResurrection();
	void ResetDeathState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelBaseResurrectionAbility">();
	}
	static class UMarvelBaseResurrectionAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelBaseResurrectionAbility>();
	}
};

// Class Marvel.Cue_Buff_Resurrection
// 0x0018 (0x1050 - 0x1038)
class ACue_Buff_Resurrection : public AMarvelCueNotify_Buff
{
public:
	class ACharacter*                             BuffOwner;                                         // 0x1038(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelCharacterChildActor*             ChildActor;                                        // 0x1040(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelBaseAbilitySystemComponent*      OwningASC;                                         // 0x1048(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnDeathStateChange(bool State);
	void OnLivingStateChange(EPlayerLivingState InLivingState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Buff_Resurrection">();
	}
	static class ACue_Buff_Resurrection* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Buff_Resurrection>();
	}
};

// Class Marvel.MarvelBeaconClient
// 0x0018 (0x0550 - 0x0538)
class AMarvelBeaconClient final : public AOnlineBeaconClient
{
public:
	TMulticastInlineDelegate<void(int32 TimeMS)>  OnPingComplete;                                    // 0x0538(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_548[0x8];                                      // 0x0548(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClientPing();
	void Disconnect();
	void ServerPong();
	void StartPing();
	bool Startup(const class FString& address, int32 Port, const bool portOverride);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelBeaconClient">();
	}
	static class AMarvelBeaconClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelBeaconClient>();
	}
};

// Class Marvel.MarvelGameplayEffectAmmo1Modify
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectAmmo1Modify final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectAmmo1Modify">();
	}
	static class UMarvelGameplayEffectAmmo1Modify* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectAmmo1Modify>();
	}
};

// Class Marvel.MarvelBeaconHostObject
// 0x0000 (0x04B8 - 0x04B8)
class AMarvelBeaconHostObject final : public AOnlineBeaconHostObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelBeaconHostObject">();
	}
	static class AMarvelBeaconHostObject* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelBeaconHostObject>();
	}
};

// Class Marvel.MarvelVehicleAbilitySystemComponent
// 0x0000 (0x6500 - 0x6500)
class UMarvelVehicleAbilitySystemComponent final : public UMarvelBaseAbilitySystemComponent
{
public:
	void InitActorInfoAndAbilities(class AActor* InOwnerActor);

	class AActor* GetAbilitySystemOwner() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelVehicleAbilitySystemComponent">();
	}
	static class UMarvelVehicleAbilitySystemComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelVehicleAbilitySystemComponent>();
	}
};

// Class Marvel.MarvelBlindAbility
// 0x0088 (0x1180 - 0x10F8)
class UMarvelBlindAbility : public UMarvelEffectGameplayAbility
{
public:
	uint8                                         Pad_10F8[0x8];                                     // 0x10F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ViewAngle;                                         // 0x1100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ViewDistance;                                      // 0x1104(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  UseSpecialViewParamTags;                           // 0x1108(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	float                                         SpecialViewAngle;                                  // 0x1170(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SpecialViewDistance;                               // 0x1174(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentViewAngle;                                  // 0x1178(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentViewDistance;                               // 0x117C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void UpdateBlindViewAngle(float InViewAngle);
	void UpdateBlindViewDistance(float InViewDistance);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelBlindAbility">();
	}
	static class UMarvelBlindAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelBlindAbility>();
	}
};

// Class Marvel.MarvelTraceTypeFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UMarvelTraceTypeFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FMarvelAbilityTraceContext Conv_ScopeTableToTraceContext(const struct FMarvelScopeAgentTable& ScopeTable);
	static TArray<struct FHitResult> DoTrace(const struct FMarvelAbilityTraceContext& TraceContext, class AActor* Source, const struct FVector& Start);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTraceTypeFunctionLibrary">();
	}
	static class UMarvelTraceTypeFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTraceTypeFunctionLibrary>();
	}
};

// Class Marvel.MarvelBlueprintLibrary
// 0x0000 (0x0030 - 0x0030)
class UMarvelBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static TArray<struct FHitResult> AbilityTraceContext_DoTrace(const class UObject* InSelf, struct FMarvelAbilityTraceContext& TraceContext, class AActor* Source, const struct FVector& Start, const struct FVector& End);
	static bool AbilityTraceContext_DoTraceTest(const class UObject* InSelf, struct FMarvelAbilityTraceContext& TraceContext, class AActor* Source, const struct FVector& Start, const struct FVector& End);
	static TArray<struct FHitResult> ActorsToHitResults(const TArray<class AActor*>& InActors);
	static bool AddCacheActor(class AActor* Actor);
	static void AddComponentTag(class UActorComponent* ActorComponent, const class FName& Tag);
	static void AddDynamicFrameTask(const class UObject* WCO, const TDelegate<void(class UObject* TaskOwner, int64 Magnitude)>& Delegate, int32 DelayFrame, class UObject* TaskOwner, int64 Magnitude);
	static void AddInteractableActorsPendingDestroy();
	static void AddOwnedComponent(class AActor* OwnerActor, class UActorComponent* ActorComponent);
	static void AsyncLoadCharacterPrimaryAssets(int32 HeroID, int32 SkinID);
	static struct FStreamableHandleWrapper AsyncLoadSoftReferenceAsset(class UObject* WorldContextObject, const TArray<TSubclassOf<class UObject>>& InCLasses, TDelegate<void()> OnLoaded);
	static void BatchSetScalarParameterValueOnDecalMaterial(const TArray<class UDecalComponent*>& InDecalComponents, const class FName ParameterName, const float ParameterValue);
	static void BatchSetScalarParameterValueOnMaterialSlot(const TArray<class UMeshComponent*>& InMeshComponents, const class FName ParameterName, const float ParameterValue, const int32 SlotIndex, bool bOnlyWhenRendered);
	static void BatchSetVectorParameterValueOnDecalMaterial(const TArray<class UDecalComponent*>& InDecalComponents, const class FName ParameterName, const struct FLinearColor& ParameterValue);
	static void BatchSetVectorParameterValueOnMaterialSlot(const TArray<class UMeshComponent*>& InMeshComponents, const class FName ParameterName, const struct FVector& ParameterValue, const int32 SlotIndex, bool bOnlyWhenRendered);
	static void CachePoolLog(const class UObject* Object);
	static class AActor* CacheSpawnActorDeferred(int32 TargetId, class UClass* Class_0, const struct FTransform& Transform, class AActor* Owner, class APawn* Instigator, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class FName CustomReadableName);
	static void CancelAbilityWithinActivationRequiredTags(const struct FGameplayTagContainer& WithTags, class AMarvelBaseCharacter* InCharacter);
	static bool CanFindSocketByName(class USkinnedMeshComponent* Component, class FName SocketName);
	static class AMarvelLevelScriptActor* CastToMarvelLevelScriptActor(class ALevelScriptActor* ScriptActor);
	static void CharacterDisableInput(class AMarvelBaseCharacter* Character);
	static void CharacterEnableInput(class AMarvelBaseCharacter* Character);
	static bool CheckSceneBlockByLineTrace(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const TArray<class AActor*>& Ignores, struct FHitResult* OutHitResult);
	static bool CheckSceneBlockByLineTraceTest(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const TArray<class AActor*>& Ignores);
	static bool CheckSceneBlockBySphereTrace(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, const TArray<class AActor*>& Ignores, struct FHitResult* OutHitResult);
	static bool CheckSceneBlockBySphereTraceTest(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, const TArray<class AActor*>& Ignores);
	static void ClearAllFrameTasksOf(const class UObject* Object);
	static bool ClientIsActorVisibleFromCamera(class AActor* Other, bool bMatchAny);
	static class FName CollisionObjectTypeToDisplayName(int32 ContainerIndex);
	static class FString ConvertEnumValueToString(const class UEnum* EnumClass, int64 EnumValue);
	static TArray<class FString> ConvertStringToArray(const class FString& Orgin, const class FString& SplitName);
	static float DegreesBetweenTwoVector(const struct FVector& A, const struct FVector& B);
	static void DestroyInteractableActors();
	static void DrawArrowNoDebug(class UObject* WorldContextObject, const struct FVector& LineStart, const struct FVector& LineEnd, const struct FLinearColor& Color, uint8 DepthPriority, float ArrowSize, float Thickness, float LifeTime);
	static void DrawCircleNoDebug(class UObject* WorldContextObject, const struct FVector& Center, float Radius, const struct FLinearColor& LineColor, uint8 DepthPriority, int32 Segments, float Thickness, float LifeTime, const struct FVector& XAxis, const struct FVector& YAxis, bool bDrawAxis);
	static void DrawCylinderNoDebug(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FLinearColor& LineColor, uint8 DepthPriority, float Radius, int32 Segments, float Thickness, float LifeTime);
	static void DrawLineByLineBatComponent(class ULineBatchComponent* Comp, const struct FVector& Start, const struct FVector& End, const struct FLinearColor& Color, uint8 DepthPriority, float Thickness, float LifeTime);
	static void DrawLineNoDebug(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, const struct FLinearColor& Color, uint8 DepthPriority, float Thickness, float LifeTime);
	static void DrawStringNoDebug(class UObject* WorldContextObject, const struct FVector& Location, const class FString& Text, class AActor* TestBaseActor, const struct FLinearColor& TextColor, float Duration, bool bAttachToActor);
	static void EnableSimpleStats(int32 Lv, bool bInFight);
	static struct FVector FindSpawnLocationForCharacter(class UObject* WorldContextObject, TSubclassOf<class ACharacter> CharClass, const struct FVector& CurLocation, const TArray<class AActor*>& ActorsToIgnore, EDrawDebugTrace DebugDrawType, const struct FLinearColor& TraceColor, const struct FLinearColor& HitColor, float DrawTime);
	static void FlushSimpleStats(const class FString& strFilePath, const class FString& strHeader, bool bCompress, bool bRepeatFilter);
	static void ForceTickComponent(class UActorComponent* Component);
	static void ForceUpdateAnimation(class USkeletalMeshComponent* Component, bool bAllowInNextTick, bool bImmediately);
	static class UMarvelAbilityItem* GetAbilityAsset(int32 AbilityID);
	static EAbilityInputBinds GetAbilityInputBind(int32 AbilityID);
	static const struct FMarvelAbilityTable GetAbilityTable(int32 AbilityID);
	static const struct FAbilityUIAssetRow GetAbilityUIAssetByAbility(const class UMarvelGameplayAbility* Ability);
	static const struct FAbilityUIAssetRow GetAbilityUIAssetByID(int32 AbilityID, int32 SkinID);
	static struct FTransform GetAccumulationTransform(const struct FPortalSegments& InSegments, int32 InIndex, bool bInverseIndex);
	static class AActor* GetActorInLevelByName(const class ULevel* Level, const class FString& ActorName);
	static void GetActorsOfClassInLevelByPrefix(const class ULevel* Level, const class FString& Prefix, TArray<class AActor*>* OutActors);
	static TArray<class FString> GetAdditionalSoftReferenceAssetPathsForHeroSkin(int32 HeroID, int32 SkinID);
	static void GetAllActorsOfClassInLevel(const class ULevel* Level, TSubclassOf<class AActor> ActorClass, TArray<class AActor*>* OutActors);
	static void GetAllAssetsOfHero(TArray<class FString>& AssetList, int32 HeroID, int32 SkinID);
	static TArray<class AActor*> GetAllBirthDoors(class UObject* WorldContext, int32 TeamID);
	static void GetAllCharacterWithSide(class UObject* WCO, EBattleSide TargetSide, TArray<class AActor*>* OutCharacters);
	static TArray<class UMarvelSummonedComponent*> GetAllSummonedComp(const class UObject* WorldContextObject);
	static const struct FMarvelBattleCommunicationRow GetBattleCommunicationTable(int32 RowID);
	static const class FString GetBlameServiceURL();
	static class UClass* GetBlueprintClass(const class FString& Name_0);
	static struct FVector GetBoneLocation(class USkinnedMeshComponent* Component, class FName BoneName, EBoneSpaces Space);
	static struct FQuat GetBoneQuaternion(class USkinnedMeshComponent* Component, class FName BoneName, EBoneSpaces Space);
	static void GetCharacterWithSide(class UObject* WCO, class AMarvelPlayerState* TargetPlayerState, TArray<class AActor*>* OutCharacters);
	static float GetCharAoiDist(class UObject* WorldContextObject);
	static bool GetComponent2DSizeOnScreen(class UPrimitiveComponent* InComponent, struct FVector2D* OutMin, struct FVector2D* OutMax);
	static struct FVector GetComponentLocation_Lazy(class UPrimitiveComponent* Component);
	static class AMarvelBaseCharacter* GetComponentOwnerCharacter(class UActorComponent* Component);
	static float GetCurrentHealthFromASC(class UMarvelBaseAbilitySystemComponent* InASC, ETotalHealthType InType);
	static class FString GetCurrentLevelPartName(const class UObject* WCO);
	static const class UWorld* GetCurrentWorld();
	static const struct FGameplayTag GetCurSculptTag(const class AMarvelBaseCharacter* InCharacter);
	static void GetDeepestPortalSegments(const struct FMarvelAbilityTraceContext& InContext, struct FPortalSegments* OutPortalSegments);
	static const struct FMarvelAttributeSpec GetDefaultAttributesFromTable(class AMarvelBaseCharacter* InCharacter);
	static class AMarvelBaseCharacter* GetDefaultCharacter(int32 HeroID);
	static const float GetDefaultGravity();
	static const float GetDyingHpThreshold(float InMaxHealth);
	static class FString GetEditorPerProjectCacheByKey(const class FString& Key);
	static class FString GetEditorPerProjectCacheByTitleAndKey(const class FString& Title, const class FString& Key);
	static const struct FMarvelEffectTemplate GetEffectTemplateTable(int32 EffectID);
	static void GetEnumNameList(const class UEnum* EnumClass, TArray<class FString>* OutValues);
	static void GetEnumValueList(const class UEnum* EnumClass, TArray<int64>* OutValues);
	static int64 GetEnumValueMax(const class UEnum* EnumClass);
	static float GetExactPingTime(const class UObject* WorldContextObject);
	static class FString GetExternalIP(class UObject* WorldContextObject);
	static const float GetExtraThrowableGravity();
	static struct FVector GetFakeLocationBySegments(const struct FPortalSegments& InSegments, const struct FVector& InLocation, bool bInverse);
	static class AMarvelBaseCharacter* GetFinalInstigateCharacter(class AActor* InActor);
	static class UMarvelGameData* GetGameData(class UObject* WorldContextObject);
	static class FString GetGameURL(const class UObject* WorldContextObject);
	static class FString GetGameUserSettingConfigString(const class FString& Session, const class FString& Key);
	static const TArray<int32> GetHeroAllAbility(int32 HeroID);
	static const struct FGameplayTag GetHeroSculptTagWithID(const int32 InHeroID, const int32 InSculptID, const int32 InSkinID);
	static const struct FMarvelHeroSpecialBattleLogTable GetHeroSpecialBattleLogTable(int32 LogID);
	static const struct FMarvelHeroStatisticsTable GetHeroStatisticsTable(int32 HeroID);
	static const struct FMarvelHeroTable GetHeroTable(int32 HeroID);
	static class UMarvelHitShapeComponent* GetHitShapeComponent(class AActor* InTarget, EStrikePartType BodyPart);
	static ECollisionChannel GetHitTargetChannel(const struct FHitResult& HitInfo);
	static struct FVector GetInputDirection(class AMarvelBaseCharacter* InCharacter, float ExtraZValue);
	static struct FPortalSegments GetInversePortalSegments(const struct FPortalSegments& InSegments);
	static bool GetIsReplayAndCheckPointNotReady(class UObject* WorldContextObject);
	static class ULevel* GetLevelByName(const class UObject* WorldContextObject, const class FName Name_0);
	static class ALevelScriptActor* GetLevelScriptActorFromLevelStreaming(class ULevelStreaming* LevelStreaming);
	static void GetLineSegmentsByTraceContext(const struct FMarvelAbilityTraceContext& InContext, struct FLineSegments* OutLineSegments);
	static class FString GetLocalHostAddr();
	static class AMarvelPlayerController* GetLocalMarvelPlayerController(const class UObject* WorldContextObject);
	static struct FMarvelLogControl GetLogControl();
	static class FString GetMapPathByName(class FName LevelName);
	static class UMarvelAbilitySystemCom* GetMarvelAbilitySystemCom(class UObject* WorldContextObject);
	static float GetMarvelActorCurrentHealth(class AActor* InActor, ETotalHealthType InType);
	static float GetMarvelActorMaxHealth(class AActor* InActor);
	static class AMarvelBaseCharacter* GetMarvelBaseCharacter(class UObject* WorldContextObject, int32 PlayerIndex);
	static const struct FMarvelBuffSpec GetMarvelBuffSpecTable(int32 BuffID);
	static class UDataAsset* GetMarvelDataAsset(class FName AssetName);
	static class UDataTable* GetMarvelDataTable(class FName TableName, class FName HeroID);
	static class UMarvelGameInstance* GetMarvelGameInstance(class UObject* WorldContextObject);
	static bool GetMarvelHeroSkinData(int32 HeroID, struct FMarvelHeroSkinTable* OutSkinData);
	static const struct FMarvelHeroSkinSpec GetMarvelHeroSkinSpec(int32 HeroID, int32 SkinID);
	static class AMarvelPlayerController* GetMarvelPlayerController(class UObject* WorldContextObject, int32 PlayerIndex);
	static struct FMarvelScopeAgentTable GetMarvelScopeAgentTable(int32 ScopeId);
	static const TArray<struct FMarvelSquadBalanceTable> GetMarvelSquadTable();
	static struct FMarvelSummonerAgentTable GetMarvelSummonerAgentTable(int32 ID);
	static bool GetMatchState(const class UObject* WCO, EMatchState* OutMatchState);
	static const struct FMarvelModeConfigTable GetModeConfigTable(int32 ModeID);
	static bool GetModeConfigTableRef(const class UObject* WorldContextObject, struct FMarvelModeConfigTable* OutModeConfigTable);
	static bool GetNavigationDistance(class UObject* WorldContextObject, const class AActor* Char1, const class AActor* Char2, float* OutPathLength, bool bAllowPartialPath);
	static class UClass* GetOrAsyncLoadBlueprintClass(class UObject* WCO, const class FString& BPClassPath);
	static class FString GetOwnerGeneratedID(class AActor* Owner);
	static int32 GetPathIDByLevelTheme(const class FName& LevelTheme);
	static TArray<class FString> GetPathSoftReferenceAssetPaths(const TArray<struct FTopLevelAssetPath>& PathNames, int32 SkinID);
	static class ALevelScriptActor* GetPersistentLevelScriptActor(const class UObject* WCO);
	static TArray<class UMarvelSummonedComponent*> GetPhysicsSummoned(const class UObject* WorldContextObject);
	static class APlayerController* GetPlayerControllerGeneric(class UObject* WorldContextObject, int32 PlayerIndex);
	static class APlayerState* GetPlayerState(const class AActor* Obj);
	static void GetPortalSegmentsByHit(const struct FMarvelAbilityTraceContext& InContext, const struct FHitResult& InHit, struct FPortalSegments* OutPortalSegments, bool bNotGetDeepestIfNoHit);
	static void GetPortalSegmentsByHitActor(const struct FMarvelAbilityTraceContext& InContext, class AActor* InActor, struct FPortalSegments* OutPortalSegments);
	static void GetPortalSegmentsByHitComponent(const struct FMarvelAbilityTraceContext& InContext, class UPrimitiveComponent* InComponent, struct FPortalSegments* OutPortalSegments);
	static void GetPortalSegmentsByHits(const struct FMarvelAbilityTraceContext& InContext, const TArray<struct FHitResult>& InHits, struct FPortalSegments* OutPortalSegments, bool bNotGetDeepestIfNoHit);
	static struct FPortalSegments GetPortalSegmentsByHitWithWCO(const struct FHitResult& InHit, class UObject* WorldContextObject);
	static bool GetPortalSegmentsTransByHit(const struct FMarvelAbilityTraceContext& InContext, const struct FHitResult& InHit, struct FTransform* OutTransform);
	static int32 GetPrimaryHeroId(int32 HeroID);
	static const struct FMarvelProjectileAgentTable GetProjectileAgentTable(int32 ID);
	static void GetRayLocationLinePoints(const struct FPortalSegments& InSegments, const struct FVector& StartLocation, const struct FVector& EndLocation, TArray<struct FVector>* OutLocations);
	static class ULevel* GetSelfLevel(const class AActor* Actor);
	static float GetServerTime(const class UObject* WorldContextObject);
	static int32 GetSimpleStatsLevel();
	static TArray<class FString> GetSoftReferenceAssetPaths(const TArray<TSubclassOf<class UObject>>& InCLasses, int32 SkinID);
	static class ULevelStreaming* GetStreamingLevel(const class UObject* WorldContextObject, class FName PackageName);
	static class AMarvelSwiftProjectileManager* GetSwiftProjectileManager(class APawn* SpawnInstigator, bool bOpenSwiftProjectile);
	static bool GetTargetActorSlowStatus();
	static class FString GetTextSourceString(const class FText& Text);
	static struct FMarvelAbilityTraceContext GetTraceContextFromScopeTable(int32 ScopeId);
	static float GetUECmdValue(const class FString& CmdName);
	static int32 GetUID(const class AActor* InActor);
	static void GetUObjectNums(TArray<struct FMarvelObjectNumInfo>* NumInfoItems);
	static TArray<class FString> GetWithReferenceAssetPaths(const struct FSoftObjectPath& InClassPath);
	static class FString GetWorldLocalURL(class UObject* WorldContextObject);
	static class AWorldSettings* GetWorldSettings(class UObject* WorldContextObject);
	static void GMDeactivateInteractorObject();
	static void GMProcessClusters(const class FString& SName, const TArray<int32>& ClusterIdx, const TArray<int32>& IsInternals, const TArray<struct FVector>& Positions, const TArray<struct FQuat>& rots);
	static void HideAllActorInLevel(const class ULevel* Level);
	static void InitGenerateInfo(struct FMarvelTargetActorGenerateInfo* GenerateInfo, class AActor* QuoteSource, class UGameplayAbility* OwningAbility, int32 TableID);
	static bool IsActorCacheReusing(class AActor* Actor);
	static bool IsActorInCache(class AActor* Actor);
	static bool IsActorTickFunctionRegistered(const class AActor* Actor);
	static bool IsBirthDoorByClass(class AActor* Actor);
	static bool IsBlockedSceneHit(const struct FHitResult& HitInfo);
	static bool IsBlockingVolumeByClass(class AActor* Actor);
	static bool IsCharacterAbilityActivating(class UAbilitySystemComponent* ASC, TSubclassOf<class UGameplayAbility> AbilityClass, class UGameplayAbility*& OutAbility);
	static bool IsCharacterVisibleFromCamera(class AMarvelBaseCharacter* CurrentCharacter, class ACharacter* AnotherCharacter, const TArray<EObjectTypeQuery>& BlockTypes, const TArray<class FName>& Bones, bool bMatchAny);
	static bool IsCharacterVisibleFromHead(class ACharacter* CurrentCharacter, class ACharacter* AnotherCharacter, const TArray<EObjectTypeQuery>& BlockTypes, const TArray<class FName>& Bones, bool bMatchAny);
	static bool IsCharacterVisibleFromPoint(const struct FVector& CurrentPoint, class ACharacter* AnotherCharacter, const TArray<EObjectTypeQuery>& BlockTypes, const TArray<class FName>& Bones, bool bMatchAny);
	static bool IsCollisionRuleTracePawn(const struct FMarvelCollisionRule& TraceContext);
	static bool IsComponentInViewportByAreaOnScreen(class UPrimitiveComponent* InComponent, float MinAreaSize);
	static bool IsControlledByCurrentPlayer(const class APawn* Pawn);
	static bool IsDeathMatch(const class UObject* WCO);
	static bool IsEditor();
	static bool IsEnemy(class AMarvelBaseCharacter* Char1, class AMarvelBaseCharacter* Char2);
	static bool IsEnhancedInteractiveAbilityEnabled();
	static bool IsHitStandable(const struct FHitResult& InHit, class UMovementComponent* MovementComponent);
	static bool IsInAbilityPreviewWorld(const class UObject* WorldContextObject);
	static bool IsInBirthBase(class AActor* InActor);
	static bool IsInBirthBaseTransitionRoom(class AActor* InActor, int32 TeamID);
	static bool IsInEditor();
	static bool IsInEditorPreview(const class UObject* WorldContextObject);
	static bool IsInvisibleWall(class UPrimitiveComponent* InComponent);
	static bool IsLevelModeTypeMatch(const class UObject* WorldContextObject, const class FName ModeType);
	static bool IsLevelModeTypeMatchInArray(const class UObject* WorldContextObject, const TArray<class FName>& ModeTypes);
	static bool IsMovieSceneActor(const class AActor* Actor);
	static bool IsMovieSceneComponent(const class UActorComponent* Comp);
	static bool IsNeedRunReplicateFuncitonOnLocal(const class UObject* WorldContextObject);
	static bool IsNeedRunSameFunctionOnRemote(const class UObject* WorldContextObject);
	static bool IsNetRole(const class AActor* Actor, const ENetRole Role);
	static bool IsOnAutonomousClient(const class AActor* Actor);
	static bool IsOnAutonomousClientOrServer(const class AActor* Actor);
	static bool IsOnClient(const class UObject* WorldContextObject);
	static bool IsOnServer(const class UObject* WorldContextObject);
	static bool IsOnServerAndClient(const class UObject* WorldContextObject);
	static bool IsOnSimulatedClient(const class AActor* Actor);
	static bool IsPenetratedSceneHit(const struct FHitResult& HitInfo);
	static bool IsPlayingJarvisReplay(class UObject* WCO);
	static bool IsPointInBirthBase(const class UObject* WorldContextObject, const struct FVector& InLocation, int32 TeamID);
	static bool IsPointInBirthBaseTransitionRoom(const class UObject* WorldContextObject, const struct FVector& InLocation, int32 TeamID);
	static bool IsPortalSegmentsValid(const struct FPortalSegments& InSegments);
	static bool IsRecordingJarvisReplay(class UObject* WCO);
	static bool IsReplayChannelClose(class AActor* Actor);
	static bool IsReplayFastForwarding(class AActor* Actor);
	static bool IsRunningCookCommandlet();
	static bool IsSelf(const class AActor* A, const class AActor* B);
	static bool IsSingleDeathMatch(const class UObject* WCO);
	static bool IsTargetInViewport(class AMarvelBaseCharacter* CurrentCharacter, class AActor* Actor);
	static bool IsValidAndNotInCache(class AActor* Actor);
	static bool IsValidHeroID(int32 HeroID);
	static bool IsWorldTearingDown(class UObject* WCO);
	static void K2_GetActorSimpleCollisionCylinder(class AActor* InActor, float* OutRadius, float* OutHalfHeight);
	static class UObject* K2_GetClassDefaultObject(class UClass* InClass);
	static bool K2_SafeMoveUpdatedComponent(class UMovementComponent* InMovementComponent, const struct FVector& Delta, const struct FQuat& NewRotation, bool bSweep, struct FHitResult* OutHit, ETeleportType Teleport);
	static bool K2_TrySolveValidPositionOffset(const TArray<struct FHitResult>& HitResults, struct FVector* OutVector, int32 IterateCount, float SqrEpsilon);
	static void LoadSimpleStatsHistory(const class FString& strFilePath, const class FString& CurVersion);
	static struct FMarvelAbilityTraceContext MakeAbilityTraceContext(const struct FMarvelScopeAgentTable& Table);
	static void MarkCachedMaterialParameterNameIndicesDirty(class UMeshComponent* InMeshComponent);
	static void MarvelExitGame(class UObject* WCO);
	static void ModifyIgnoreCullDistance(class UObject* WorldContextObject, float UpdateFrequency);
	static class UObject* NewObjectFromBlueprint(class UObject* WorldContextObject, class UClass* UC, class FName CustomReadableName);
	static class UObject* NewObjectFromBlueprintWithoutDefault(class UObject* WorldContextObject, class UClass* UC, class FName CustomReadableName);
	static void PrepareCacheProjectileActors(int32 TargetId, int32 Num, TSubclassOf<class AMarvelAbilityTargetActor_Projectile> Class_0, const struct FTransform& Transform, class AActor* Owner, class APawn* Instigator, ESpawnActorCollisionHandlingMethod CollisionHandlingOverride, class FName CustomReadableName);
	static void PrintGCInfo(const class FString& SName);
	static float RadiansBetweenTwoVector(const struct FVector& A, const struct FVector& B);
	static void RegisterAllActorTickFunctions(class AActor* OwnerActor, bool bRegister, bool bDoComponents);
	static void RegisterHeroSkinCollectionOverrideForLevelSequence(class ALevelSequenceActor* SequenceActor, int32 HeroID, int32 SkinID);
	static void RegisterHeroSkinCollectionOverrideForMeshComponent(class USkeletalMeshComponent* MeshComp, int32 HeroID, int32 SkinID);
	static void ReleaseParticles(const class FString& SName, const TArray<int32>& ParticleIDs, uint8 uFlag);
	static void ReloadHeroGameData(class UObject* WorldContextObject);
	static void RemoveOwnedComponent(class AActor* OwnerActor, class UActorComponent* ActorComponent);
	static void ResetHeroSkinGlobalCollectionOverride(const class UObject* WorldContextObject);
	static void SaveAllSimpleStats(const class FString& strFilePath);
	static void SaveSimpleStatsFrame();
	static void SaveSimpleStatsHistory(const class FString& strFilePath, const class FString& CurVersion);
	static bool SegmentIntersection2D(const struct FVector& SegmentStartA, const struct FVector& SegmentEndA, const struct FVector& SegmentStartB, const struct FVector& SegmentEndB, struct FVector* out_IntersectionPoint);
	static void SetAllLevelSequenceActorIgnoreNonBoundObjects(const class UObject* WCO, bool bIgnore, bool IncludeNonActive);
	static void SetCharAoiDist(class UObject* WorldContextObject, float NewCharAoiDist);
	static bool SetCollisionResponseToChannel(class UPrimitiveComponent* CollisionComponent, class FName CollisionDisplayName, ECollisionResponse CollisionResponse);
	static void SetEditorPerProjectCacheByKey(const class FString& Key, const class FString& Value);
	static void SetEditorPerProjectCacheByTitleAndKey(const class FString& Title, const class FString& Key, const class FString& Value);
	static void SetForceDisableHandleLeftAnalogXYEvent(bool bState);
	static void SetForceDisableHandleRightAnalogXYEvent(bool bState);
	static void SetGameUserSettingConfigString(const class FString& Session, const class FString& Key, const class FString& Value);
	static void SetHeroSkinGlobalCollectionOverride(const class UObject* WorldContextObject, int32 HeroID, int32 SkinID);
	static void SetLevelClientOnlyByLevelStreaming(class ULevelStreaming* LevelStreaming);
	static void SetMarvelTargetActorInitInfo(struct FMarvelTargetActorInitInfo* OutInitInfo, class AActor* InInstigatorActor);
	static void SetVisLogRecording(class UObject* WCO, bool bNewEnabled, bool bShouldCleanUp);
	static void SetWorldRollbackState(const class UObject* WorldContextObject, int32 State);
	static void ShowAllActorInLevel(const class ULevel* Level);
	static void SlowTargetActorReplication(class UObject* WorldContextObject, bool IsOpen);
	static void StackWalkAndLog(class UWorld* World);
	static float TimeToStop(float Speed, float GroundFriction, float Deceleration);
	static TArray<struct FHitResult> TraceContext_DoTraceWithTarget(const class UObject* InSelf, struct FMarvelAbilityTraceContext& TraceContext, class AActor* Source, const struct FVector& Start, const struct FVector& End, const TArray<struct FHitResult>& InHits, bool IgnoreTrace);
	static struct FVector4 TransformVectorByRotationMatrix(const struct FRotator& A, const struct FVector& B);
	static void UnregisterHeroSkinCollectionOverrideForLevelSequence(class ALevelSequenceActor* SequenceActor);
	static void UnregisterHeroSkinCollectionOverrideForMeshComponent(class USkeletalMeshComponent* MeshComp);
	static void UpdateAimAssistStrengthBase(float Value);
	static void UpdateAimAssistStrengthLimit(float Value);
	static void UpdateAllMaterialsCacheForRendering();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelBlueprintLibrary">();
	}
	static class UMarvelBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelBlueprintLibrary>();
	}
};

// Class Marvel.TraceFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UTraceFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void EnableActorMultSightVisiblity(class AActor* InActor, bool bEnable);
	static void EnableComponentSightVisiblity(class USceneComponent* InSceneComp, bool bEnable);
	static bool FindGround(class UObject* WCO, const struct FVector& InStart, const struct FVector& InDirection, struct FFindGroundParam& InParam, struct FVector* OutLocation);
	static bool FindGround_ByCharacter(class AMarvelBaseCharacter* InCharacter, struct FFindGroundParam& InParam, struct FVector* OutLocation);
	static bool FindGround_ByCharacterTest(class APawn* InPawn, struct FFindGroundParam& InParam, struct FHitResult* OutHitResult);
	static bool FindGround_ByCharacterUpDown(class AMarvelBaseCharacter* InCharacter, struct FFindGroundParam& InParam, struct FVector* OutLocation);
	static bool FindGround_ValidTargetHit(class UObject* WCO, const struct FVector& InStart, const struct FHitResult& InHit, struct FFindGroundParam* InParam, struct FHitResult* CapsuleHitResult);
	static bool FindGroundNew(class UObject* WCO, const struct FVector& InStart, const struct FVector& InDirection, struct FFindGroundParam& InParam, struct FVector* OutLocation);
	static bool FindGroundTest(class UObject* WCO, const struct FVector& InStart, const struct FVector& InDirection, struct FFindGroundParam& InParam, struct FHitResult* OutHitResult);
	static bool FindProjectedLocationOnGround(class UObject* WCO, const struct FVector& Point, struct FVector* OutProjectedPoint, float UpHeight, const float DownHeight);
	static bool IsActorVisibleFromCamera(class AActor* InActor, const struct FActorVisibilityTraceParam& InParam);
	static bool IsComponentInFrustum(class AActor* Source, struct FFrustumTraceShape& FrustumShape, const struct FTransform& FrustumTrans, class UPrimitiveComponent* TargetComponent, struct FVector* Direction, float* Distance, struct FMarvelPhysicsTraceCache* TraceCache, EDrawDebugTrace DrawDebugType);
	static bool IsComponentInGeometry(class AActor* Source, const TArray<struct FVector>& GeometryVertices, const struct FTransform& GeometryTrans, class UPrimitiveComponent* TargetComponent, struct FVector* Direction, float* Distance, struct FMarvelPhysicsTraceCache* TraceCache, EDrawDebugTrace DrawDebugType);
	static bool IsLocationWithinTraceFrustum(const struct FVector& Location, const struct FFrustumTraceShape& InShape, struct FVector* ViewSpaceLocation);
	static void MultiTraceDownWithScene(class UObject* WCO, TArray<struct FHitResult>* OutHits, const TArray<struct FVector>& InStartPoints, const float InParam);
	static void MultiTraceDownWithSceneByCharacter(class ACharacter* Character, TArray<struct FHitResult>* OutHits, const struct FVector& InStartPoint, const float TraceDownDistance);
	static struct FVector MultiTraceDownWithSceneForNormal(class UObject* WCO, const TArray<struct FVector>& InStartPoints, const float InParam);
	static float MultiTraceDownWithSceneForSlope(class UObject* WCO, const TArray<struct FVector>& InStartPoints, const float InParam);
	static struct FVector ProjectionWorldToViewByTraceFrustum(const struct FVector& Location, const struct FFrustumTraceShape& InShape);
	static bool SimpleAdjustGroundForStationary(class UObject* WorldContextObject, float MaxGroundHeight, const struct FHitResult& InHit, struct FHitResult* OutHit, bool bTraceDestructible, bool bTraceSceneSummoned);
	static bool SimpleLineTraceForStationary(class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, struct FHitResult* OutHit, bool bTraceDestructible, bool bTraceSceneSummoned);
	static void TraceDownWithScene(class UObject* WCO, struct FHitResult* OutHit, const struct FVector& InStartPoint, const float TraceDownDistance);
	static bool TraceGroundHeight(class UObject* WorldContextObject, float* OutGroundHeight, const struct FVector& InStart, float InSphereRadius, float MaxSlope);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TraceFunctionLibrary">();
	}
	static class UTraceFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTraceFunctionLibrary>();
	}
};

// Class Marvel.MarvelBondFuncLibrary
// 0x0000 (0x0030 - 0x0030)
class UMarvelBondFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static TArray<struct FMarvelBondTable> GetAllValidBondDataForHeroID(int32 InHeroID);
	static TArray<struct FMarvelBondTable> GetAllValidBondDataForParam(const struct FBondQueryParam& InParam);
	static TArray<struct FMarvelBondGroupTable> GetAllValidBondGroupDataForHeroID(int32 InHeroID);
	static TArray<struct FMarvelBondGroupTable> GetAllValidBondGroupDataForHeroList(const TArray<int32>& InHeroIDs);
	static TArray<struct FMarvelBondGroupTable> GetAllValidBondGroupDataForParam(const struct FBondQueryParam& InParam);
	static struct FMarvelBondTable GetBondData(int32 InBondID);
	static const class UMarvelBondGameData* GetBondGameData();
	static struct FMarvelBondGroupTable GetBondGroupData(int32 InGroupID);
	static TArray<int32> GetBondGroupIDForAbility(int32 InAbilityId);
	static TArray<int32> GetBondGroupIDForHero(int32 InHeroID);
	static TArray<int32> GetBondIDForAbility(int32 InAbilityId);
	static TArray<int32> GetBondIDForHero(int32 InHeroID);
	static class UDataTable* GetMarvelBondGroupTable();
	static class AMarvelBondManager* GetMarvelBondManager(const class UObject* WOC);
	static class UDataTable* GetMarvelBondTable();
	static TArray<int32> GetValidBondGroupIDForBondID(int32 InBondID);
	static TArray<int32> GetValidBondIDForBondGroupID(int32 InBondGroupID);
	static bool IsBondAbility(int32 InAbilityId);
	static bool IsBondAbilityValid(int32 InAbilityId);
	static bool IsBondActive(class AActor* InSourceActor, int32 InBondID, bool bConsiderSculpt);
	static bool IsBondBuff(int32 InBuffID);
	static bool IsBondGroupOpen(int32 InBondGroupID, const struct FBondQueryFilter& QueryFilter);
	static bool IsBondOrUpgradedAbility(int32 InAbilityId);
	static bool IsEnableBond();
	static bool IsIgnoreOpenConfig();
	static bool IsUpgradedAbility(int32 InAbilityId);
	static bool IsValidBondTargetCharacter(const class AMarvelBaseCharacter* InCharacter);
	static TArray<struct FBondQueryResult> QueryBondForHeroList(const TArray<int32>& InHeroIDs);
	static void SetDevelopmentEnableBond(class UObject* WOC, bool InEnable);
	static void SetDevelopmentOpenAllBond(class UObject* WOC, bool bOpen);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelBondFuncLibrary">();
	}
	static class UMarvelBondFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelBondFuncLibrary>();
	}
};

// Class Marvel.MarvelBondGameData
// 0x00B8 (0x00F0 - 0x0038)
class UMarvelBondGameData final : public UDataAsset
{
public:
	bool                                          bGlobalEnableBond;                                 // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BondActiveDistance;                                // 0x003C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bGiveBuffWithoutBondActive;                        // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FBondFixBuffs>             GiveBuffsWithoutBondActive;                        // 0x0048(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bGiveSenderBuffOnlyBondActive;                     // 0x0098(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FBondFixBuffs>             GiveSenderBuffs;                                   // 0x00A0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelBondGameData">();
	}
	static class UMarvelBondGameData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelBondGameData>();
	}
};

// Class Marvel.CharacterStateInfo
// 0x0048 (0x0078 - 0x0030)
class UCharacterStateInfo final : public UObject
{
public:
	uint8                                         Pad_30[0x48];                                      // 0x0030(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCharacterEnd(class AActor* InActor, EEndPlayReason Reason);
	void OnPlayerStateChange(class AMarvelPlayerState* InPlayerState);
	void OnSpawnCharacter(class AMarvelBaseCharacter* InCharacter, ESpawnMethod SpawnMethod);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterStateInfo">();
	}
	static class UCharacterStateInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterStateInfo>();
	}
};

// Class Marvel.CharacterBondActivateCondition
// 0x0080 (0x00B0 - 0x0030)
class UCharacterBondActivateCondition final : public UObject
{
public:
	uint8                                         Pad_30[0x80];                                      // 0x0030(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAbilityInited(int32 InAbilityId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CharacterBondActivateCondition">();
	}
	static class UCharacterBondActivateCondition* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCharacterBondActivateCondition>();
	}
};

// Class Marvel.BondEnhanceSourceResolverBase
// 0x0000 (0x0030 - 0x0030)
class UBondEnhanceSourceResolverBase : public UObject
{
public:
	class AMarvelBaseCharacter* GetEnhanceSource(class AMarvelBaseCharacter* InOwnerCharacter, int32 InOwnerAbilityID, const struct FBondInstance& InBondInstance);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BondEnhanceSourceResolverBase">();
	}
	static class UBondEnhanceSourceResolverBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBondEnhanceSourceResolverBase>();
	}
};

// Class Marvel.Widget_HurtCenter
// 0x0050 (0x05F8 - 0x05A8)
class UWidget_HurtCenter final : public UMarvelUserWidget
{
public:
	class AActor*                                 SourceActor;                                       // 0x05A8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelCanvasPanel*                     CanvasPanel_Main;                                  // 0x05B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Img_Strike_ArrowCircle;                            // 0x05B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DurationTime;                                      // 0x05C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CircleNarrowDelay;                                 // 0x05C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxDegreeMatValue;                                 // 0x05C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ThresholdDegreeMatValue;                           // 0x05CC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ThresholdDegree;                                   // 0x05D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InterpSpeed;                                       // 0x05D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CurrentRenderTransformAngle;                       // 0x05D8(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DamageAccumulation;                                // 0x05DC(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector2D                              DamageRange;                                       // 0x05E0(0x0010)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsCircleNarrowing;                                // 0x05F0(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5F1[0x7];                                      // 0x05F1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float CalculateRenderTransformAngleAndUpdateMaterial();
	void SetDamageMaterialParam(float DamageRatio);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_HurtCenter">();
	}
	static class UWidget_HurtCenter* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_HurtCenter>();
	}
};

// Class Marvel.MarvelBounceFeedBackInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelBounceFeedBackInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelBounceFeedBackInterface">();
	}
	static class IMarvelBounceFeedBackInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelBounceFeedBackInterface>();
	}
};

// Class Marvel.MarvelBPRefContentAsset
// 0x0330 (0x0368 - 0x0038)
class UMarvelBPRefContentAsset final : public UDataAsset
{
public:
	struct FMarvelBPRefModule                     ModuleContent;                                     // 0x0038(0x0140)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarvelBPRefModuleHandle               ModuleHandle;                                      // 0x0178(0x01F0)(Transient, NativeAccessSpecifierPrivate)

public:
	void GetBPClassAsync(const class FString& ClassName, const TDelegate<void(class UClass* BPClass)>& GetBPClassCallback);
	TMap<class FString, class UClass*> GetBPClassesInModuleContent();
	void GetBPObjectAsync(const class FString& ObjectName, const TDelegate<void(class UObject* BPObject)>& GetBPObjectCallback);
	TMap<class FString, class UObject*> GetBPObjectsInModuleContent();
	void LoadModuleContent(const TArray<class FString>& ExcludedAssetNames);
	void LoadModuleContentAsync(const class FString& ModuleName, const TDelegate<void(const class FString& ModuleName)>& OnModuleLoaded, const TArray<class FString>& ExcludedAssetNames);
	bool TryUnloadModuleAsset(const class FString& AssetName);
	void UnloadModuleContent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelBPRefContentAsset">();
	}
	static class UMarvelBPRefContentAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelBPRefContentAsset>();
	}
};

// Class Marvel.MarvelBPRefAsset
// 0x00B0 (0x00E8 - 0x0038)
class UMarvelBPRefAsset final : public UDataAsset
{
public:
	TMap<class FString, struct FMarvelBPRefModule> BPRefModules_New;                                  // 0x0038(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<class FString, class UMarvelBPRefContentAsset*> BPRefModules;                                      // 0x0088(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_D8[0x10];                                      // 0x00D8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	TMap<class FString, class UClass*> GetBPClassesInModule(const class FString& ModuleName);
	TMap<class FString, class UObject*> GetBPObjectsInModule(const class FString& ModuleName);
	void LoadAllModule();
	void LoadAllModuleAsync(const TDelegate<void()>& OnAllModuleLoaded);
	void LoadModule(const class FString& ModuleName, const TArray<class FString>& ExcludedAssetNames);
	void LoadModuleAsync(const class FString& ModuleName, const TDelegate<void(const class FString& ModuleName)>& OnModuleLoaded, const TArray<class FString>& ExcludedAssetNames);
	void UnloadAllModule();
	void UnloadModule(const class FString& ModuleName);
	void UnloadModuleAsset(const class FString& ModuleName, const class FString& AssetName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelBPRefAsset">();
	}
	static class UMarvelBPRefAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelBPRefAsset>();
	}
};

// Class Marvel.MarvelButton
// 0x01C0 (0x0880 - 0x06C0)
class UMarvelButton : public UButton
{
public:
	bool                                          bControlChildTextBlock;                            // 0x06B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6B9[0x7];                                      // 0x06B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelTextStyle                       NormalTextStyle;                                   // 0x06C0(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMarvelTextStyle                       HoverTextStyle;                                    // 0x0740(0x0080)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FButtonSounds                          Sound;                                             // 0x07C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	class FString                                 DefaultClickSound;                                 // 0x07D8(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWidgetFocusType                              FocusType;                                         // 0x07E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7E9[0x7];                                      // 0x07E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  TypeTags;                                          // 0x07F0(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bUsePolygonHitTest;                                // 0x0858(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bPolygonHitTestDebugDraw;                          // 0x0859(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_85A[0x6];                                      // 0x085A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector2D>                      PolygonHitTestPoints;                              // 0x0860(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_870[0x10];                                     // 0x0870(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UButtonSlot* SlotAsButtonSlot(class UWidget* Widget);

	void HoverText();
	void MarvelOnClick();
	void MarvelOnHover();
	void MarvelOnRightClick();
	void SetChildTextBlockStyle(const struct FMarvelTextStyle& TextStyle);
	void SetHoverTextStyle(const struct FMarvelTextStyle& TextStyle);
	void SetNormalTextStyle(const struct FMarvelTextStyle& TextStyle);
	void SetUsePolygonHitTest(bool Value);
	void SimulateClick();
	void UnhoverText();
	void UpdateTextStyle();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelButton">();
	}
	static class UMarvelButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelButton>();
	}
};

// Class Marvel.MarvelHitEffectComponent
// 0x0160 (0x0250 - 0x00F0)
class UMarvelHitEffectComponent final : public UActorComponent
{
public:
	TDelegate<void(class FName TrackName, class FName PropertyName, float Output)> PlayMaterialTimelineHandle;                        // 0x00F0(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_104[0x14];                                     // 0x0104(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x0118(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UMaterialInstanceDynamic*> PostProecessMap;                                   // 0x0120(0x0050)(NativeAccessSpecifierPublic)
	TMap<class FName, class UParticleSystemComponent*> CameraParticleMap;                                 // 0x0170(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0[0x90];                                     // 0x01C0(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AnimationFrameFreeze(int32 InAbilityId, bool bIsEnemy);
	class AMarvelBaseCharacter* GetOwnerCharacter();
	class UParticleSystemComponent* HandleCameraParticleSystem(class FName ParticleKey, float Foward, const struct FVector& Scale, class UParticleSystem* ParticleResource);
	class UMaterialInstanceDynamic* HandlePostProcecssMaterial(class FName PostKey, float Weight, class UMaterialInterface* MaterialResouce);
	void OnOwnerAbilityEnd(int32 InAbilityId);
	void PlayMaterialTimelineCallBack(class FName TrackName, class FName PropertyName, float OutValue);
	bool RemovePostProcessMaterial(class FName PostKey);
	void SetGlobalAnimRateScale();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelHitEffectComponent">();
	}
	static class UMarvelHitEffectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelHitEffectComponent>();
	}
};

// Class Marvel.Widget_MarvelButton
// 0x0018 (0x03D0 - 0x03B8)
class UWidget_MarvelButton final : public UUserWidget
{
public:
	struct FButtonSounds                          Sounds;                                            // 0x03B8(0x0018)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_MarvelButton">();
	}
	static class UWidget_MarvelButton* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_MarvelButton>();
	}
};

// Class Marvel.MarvelMultiLineEditableText
// 0x0040 (0x05F0 - 0x05B0)
class UMarvelMultiLineEditableText final : public UMultiLineEditableText
{
public:
	bool                                          bIsNumber;                                         // 0x05A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A9[0x3];                                      // 0x05A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxTextLength;                                     // 0x05AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LimitLines;                                        // 0x05B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Precision;                                         // 0x05B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B8[0x38];                                     // 0x05B8(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CheckTextControl(const class FText& InText);
	void SetNumberPrecision(int32 Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelMultiLineEditableText">();
	}
	static class UMarvelMultiLineEditableText* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelMultiLineEditableText>();
	}
};

// Class Marvel.MarvelCableComponent
// 0x0120 (0x0BB0 - 0x0A90)
#pragma pack(push, 0x1)
class alignas(0x10) UMarvelCableComponent : public UCableComponent
{
public:
	TMulticastInlineDelegate<void(float Value)>   AfterCableUpdateDelegate;                          // 0x0A90(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float Value)>   BeforeCableUpdateDelegate;                         // 0x0AA0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class APortalViewActor>> ThroughLinkTargets;                                // 0x0AB0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC0[0x20];                                     // 0x0AC0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                VirtualStartExtendPoint;                           // 0x0AE0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                VirtualEndExtendPoint;                             // 0x0AF8(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableVirtualStartExtendPoint;                    // 0x0B10(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableVirtualEndExtendPoint;                      // 0x0B11(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCharacterLightingChannel;                      // 0x0B12(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFixedSegmentLength;                            // 0x0B13(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultSegmentLength;                              // 0x0B14(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CableMeshScale;                                    // 0x0B18(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SegmentLength;                                     // 0x0B1C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UStaticMesh*>                    StaticMeshArray;                                   // 0x0B20(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class USplineComponent*                       SplineComponent;                                   // 0x0B30(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class USplineMeshComponent*>           SplineMeshArray;                                   // 0x0B38(0x0010)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_B48[0x60];                                     // 0x0B48(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CableHeadComponentUpdateAttach(class AActor* PreAttachActor, class AActor* PostAttachActor);
	void ChangeCableLength(float NewCableLength);
	void ChangeCableLengthAndSegmentLength(float NewSegmentLength, float NewCableLength);
	bool CheckSplineMeshStateError();
	void ClearAttachMiddleInfo();
	void ClearCableInertia();
	void ClearInertiaFromLastFixedParticle();
	struct FVector GetParticleLocalLocation(int32 Index_0);
	struct FVector GetParticleTangent(int32 Index_0);
	bool IsParticleInMiddle(int32 ParticleIndex);
	bool IsUseFixedSegmentLength();
	void OnEndCharForceChangedByPortal(class APortalViewActor* InPortal);
	void OnOwnerCharForceChangedByPortal(class APortalViewActor* InPortal);
	void ResetSplineMesh();
	void SetAttachMiddleToComponent(int32 ParticleIndex, class USceneComponent* Component, class FName SocketName);
	void SetDisableConstraints(bool InDisable);
	void SetDisablePhysicsSimulation(bool InDisable);
	void SetIgnoreCharThroughPortal(bool bIgnore);
	void SetParticles(const TArray<struct FCableParticle>& InParticles);
	void SetProjectile(class AMarvelAbilityTargetActor_Projectile* InProj);
	void UpdateSplineLocation();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCableComponent">();
	}
	static class UMarvelCableComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCableComponent>();
	}
};
#pragma pack(pop)

// Class Marvel.TeamOutlineColorAsset
// 0x0090 (0x00C8 - 0x0038)
class UTeamOutlineColorAsset final : public UPrimaryDataAsset
{
public:
	struct FLinearColor                           TeamOutlineColor0;                                 // 0x0038(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TeamOutlineColor1;                                 // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TeamOutlineColor2;                                 // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TeamOutlineColor3;                                 // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TeamOutlineColor4;                                 // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TeamOutlineColor5;                                 // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TeamOutlineColor6;                                 // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TeamOutlineColor7;                                 // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           TeamOutlineColor8;                                 // 0x00B8(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TeamOutlineColorAsset">();
	}
	static class UTeamOutlineColorAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTeamOutlineColorAsset>();
	}
};

// Class Marvel.MarvelReplaySubsystem
// 0x00B0 (0x00E8 - 0x0038)
class UMarvelReplaySubsystem final : public UGameInstanceSubsystem
{
public:
	TSet<class FName>                             FastForwardingIgnoreFunctions;                     // 0x0038(0x0050)(Transient, NativeAccessSpecifierPublic)
	TSet<class FName>                             FastForwardingHandleUnmappedFunctions;             // 0x0088(0x0050)(Transient, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(EMarvelReplayState Value)> OnReplayStateChanged;                              // 0x00D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	static class UMarvelReplaySubsystem* Get(const class UObject* WCO);

	void CancelWorldTravel();
	void CheckPlayNextDemo(const class FString& NextSessionName, EDemoPlayType DemoPlayType, float DelayTime);
	bool PlayReplay(const class FString& Name_0, const TArray<class FString>& AdditionalOptions, const bool bTravelWorld);
	void RecordReplay();
	void StopPlayReplay();
	void StopRecordReplay();

	bool CanPlayReplay() const;
	bool CanRecordReplay() const;
	class ULocalPlayer* GetCurrentLocalPlayer() const;
	class APlayerController* GetCurrentPlayerController() const;
	bool IsEnabled(const class UWorld* InWorld) const;
	bool IsPlaying() const;
	bool IsRecording() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelReplaySubsystem">();
	}
	static class UMarvelReplaySubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelReplaySubsystem>();
	}
};

// Class Marvel.MarvelCameraComponent
// 0x0010 (0x0EA0 - 0x0E90)
class UMarvelCameraComponent : public UCameraComponent
{
public:
	class UTeamOutlineColorAsset*                 OverrideTeamOutlineColor;                          // 0x0E90(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E98[0x8];                                      // 0x0E98(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UCameraComponent* CreateCameraSubobject(class AActor* Owner, class FName Name_0);
	static ECameraMode StaticGetCameraMode(class UCameraComponent* CameraComponent);
	static void StaticSetCameraMode(class UCameraComponent* CameraComponent, ECameraMode NewCameraMode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCameraComponent">();
	}
	static class UMarvelCameraComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCameraComponent>();
	}
};

// Class Marvel.MarvelCanvasPanel
// 0x0030 (0x0230 - 0x0200)
class UMarvelCanvasPanel final : public UCanvasPanel
{
public:
	struct FMarvelWidgetTag                       WidgetTag;                                         // 0x0200(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_218[0x4];                                      // 0x0218(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FGeometry& MyGeometry, EUINavigation Direction)> OnNavigationDelegate;                              // 0x021C(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCanvasPanel">();
	}
	static class UMarvelCanvasPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCanvasPanel>();
	}
};

// Class Marvel.MarvelCDReductionEffectAbility
// 0x00E8 (0x11E0 - 0x10F8)
class UMarvelCDReductionEffectAbility final : public UMarvelEffectGameplayAbility
{
public:
	float                                         CooldownToReduceForEachStack;                      // 0x10F8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10FC[0x4];                                     // 0x10FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelGameplayTagRequirements         AbilityTagFilter;                                  // 0x1100(0x00D0)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TArray<struct FGameplayAbilitySpecHandle>     CachedAffectedAbilities;                           // 0x11D0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void OnEffectStackChange(const struct FActiveGameplayEffectHandle& Handle, int32 NewCount, int32 OldCount);
	void OnOwnerAbilityInitialize(int32 AbilityID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCDReductionEffectAbility">();
	}
	static class UMarvelCDReductionEffectAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCDReductionEffectAbility>();
	}
};

// Class Marvel.GarbageCollectionSubsystem
// 0x0028 (0x0060 - 0x0038)
class UGarbageCollectionSubsystem final : public UEngineSubsystem
{
public:
	uint8                                         Pad_38[0x28];                                      // 0x0038(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisableIncrementalPurgeGarbage();
	void EnableIncrementalPurgeGarbage(float InTimeLimit);
	void OnPostPurgeGarbage();
	void RegisterIncrementalDestroyLevel(class ULevel* InLevel);
	void SetPurgeTimeLimit(float InTimeLimit);
	void SetTimeBudgetForDestroy(float InTimeBudget);
	void UnRegisterIncrementalDestroyLevel(class ULevel* InLevel);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GarbageCollectionSubsystem">();
	}
	static class UGarbageCollectionSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGarbageCollectionSubsystem>();
	}
};

// Class Marvel.MarvelChaosAbilitySystemComponent
// 0x0000 (0x6500 - 0x6500)
class UMarvelChaosAbilitySystemComponent final : public UMarvelBaseAbilitySystemComponent
{
public:
	class AActor* GetAbilitySystemOwner() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelChaosAbilitySystemComponent">();
	}
	static class UMarvelChaosAbilitySystemComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelChaosAbilitySystemComponent>();
	}
};

// Class Marvel.MarvelChaosAttributeSet
// 0x0000 (0x0078 - 0x0078)
class UMarvelChaosAttributeSet final : public UMarvelBaseAttributeSet
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelChaosAttributeSet">();
	}
	static class UMarvelChaosAttributeSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelChaosAttributeSet>();
	}
};

// Class Marvel.MarvelGrabbedAbility
// 0x0038 (0x1130 - 0x10F8)
class UMarvelGrabbedAbility : public UMarvelEffectGameplayAbility
{
public:
	float                                         GrabLieDownTriggerHeight;                          // 0x10F8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10FC[0x4];                                     // 0x10FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<EObjectTypeQuery>                      TraceBlockTypes;                                   // 0x1100(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               DrawTraceType;                                     // 0x1110(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1111[0x3];                                     // 0x1111(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GrabDamage;                                        // 0x1114(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         KnockDownBuffID;                                   // 0x1118(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopTargetMoveWhenGrab;                           // 0x111C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_111D[0x3];                                     // 0x111D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   Instigator;                                        // 0x1120(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsEnded;                                          // 0x1128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1129[0x7];                                     // 0x1129(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGrabbedAbility">();
	}
	static class UMarvelGrabbedAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGrabbedAbility>();
	}
};

// Class Marvel.MarvelChaosDestructionGenerator
// 0x00F0 (0x0580 - 0x0490)
class alignas(0x10) AMarvelChaosDestructionGenerator final : public AActor
{
public:
	TArray<class UPlayerPenetrationCheckComponent*> PenetrationCheckComps;                             // 0x0490(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4A0[0x60];                                     // 0x04A0(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           DelayFinishCueTimerHandle;                         // 0x0500(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_518[0x10];                                     // 0x0518(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	EMarvelChaosActorType                         CurrentState;                                      // 0x0528(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_529[0x7];                                      // 0x0529(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   MeshComponent;                                     // 0x0530(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_538[0x20];                                     // 0x0538(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class AChaosDestructionActor*                 ChaosDestructionActor;                             // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 TraceSplineActor;                                  // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USplineComponent*                       TraceSpline;                                       // 0x0568(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimTotalTime;                                     // 0x0570(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimBeginTime;                                     // 0x0574(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalStartTime;                                   // 0x0578(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsReinitializeMeshAfterAnimEnd;                   // 0x057C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57D[0x3];                                      // 0x057D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AnimEndDelayCue();
	void ClientDelegatePostReset(class AActor* DesActor);
	void DealWithControlOwnerChanged(EBattleSide BattleSide);
	void FinishAnimCue();
	void InternalPlayingMoveAnim();
	void MoveAnimTick();
	void OnPreResetChaosDestruction();
	void OnRep_AnimBeginTime();
	void OnRep_GlobalStartTime();
	void ResetAllStateDelegate();
	void ServerDelegateAfterReset(class AActor* DesActor);

	void ShowChaosDestruction(bool bEnable) const;
	void ShowStaticMesh(bool bEnable) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelChaosDestructionGenerator">();
	}
	static class AMarvelChaosDestructionGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelChaosDestructionGenerator>();
	}
};

// Class Marvel.MarvelCharacterChildActor
// 0x05C8 (0x0A60 - 0x0498)
class AMarvelCharacterChildActor : public ACharacterChildActorBase
{
public:
	uint8                                         Pad_498[0x20];                                     // 0x0498(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelDeathAnimationComponent*         DeathAnimationComponent;                           // 0x04B8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPhysicSimulationToggleDispatcher;                // 0x04C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool Value)>    OnDeathStateChangeDispatcher;                      // 0x04D0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnChildActorResetMaterials;                        // 0x04E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bUseNewDeath;                                      // 0x04F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseEnhancedHeadStrikeDeath;                       // 0x04F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4F2[0x2];                                      // 0x04F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DeathRootBoneName;                                 // 0x04F4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UPhysicsAsset*                          PhysicsAssetOnDeath;                               // 0x0500(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           DeathSimulatePhysicsBoneNames;                     // 0x0508(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	struct FPhysicalAnimationData                 DeathPhysicalAnimationData;                        // 0x0518(0x0030)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DeathHitImpulse;                                   // 0x0548(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeathHitImpulseValueThresholdLight;                // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeathHitImpulseValueThresholdHeavy;                // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeathWeaponImpulseFactor;                          // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          DeathAnimLight1D;                                  // 0x0558(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          DeathAnimMedium1D;                                 // 0x0560(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          DeathAnimHeavy1D;                                  // 0x0568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          DeathInPlace;                                      // 0x0570(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeathAnimSampleTime;                               // 0x0578(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_57C[0x4];                                      // 0x057C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                DeathDir;                                          // 0x0580(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                DeathMoveVelocity;                                 // 0x0598(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDieInPlace;                                       // 0x05B0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5B1[0x3];                                      // 0x05B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           CurDeathCueTag;                                    // 0x05B4(0x000C)(BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedOpenPhysicSimulation;                         // 0x05C0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedOpenClothSimulaion;                           // 0x05C1(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRagdollActive;                                    // 0x05C2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C3[0x1];                                      // 0x05C3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DelayPauseAnimsExt;                                // 0x05C4(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class UPrimitiveComponent*, struct FComponentAttachInfo> ComponentAttachInfoOnDeath;                        // 0x05C8(0x0050)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_618[0x20];                                     // 0x0618(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  RegisterTagsUpdate;                                // 0x0638(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bMeshChildrenLazyUpdate;                           // 0x06A0(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_6A1[0x7];                                      // 0x06A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                LazyUpdatedComponents;                             // 0x06A8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6B8[0x70];                                     // 0x06B8(0x0070)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UMeshComponent*>                   PhantomMeshes;                                     // 0x0728(0x0050)(ExportObject, Transient, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnMeshMaterialChanged;                             // 0x0778(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AActor*                                 OuterOwner;                                        // 0x0788(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_790[0x8];                                      // 0x0790(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMarvelHitShapeComponent*>       CachedHitShapes;                                   // 0x0798(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UMarvelHitShapeComponent*               CachedHeadHitShape;                                // 0x07A8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  BlockPhysicsTagsContainer;                         // 0x07B0(0x0068)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  BlockWeaponPhysicsTagsContainer;                   // 0x0818(0x0068)(Edit, Protected, NativeAccessSpecifierProtected)
	TArray<class FName>                           PhysicsRootNames;                                  // 0x0880(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	int32                                         PhysicsBlockedMeshLODLevelMin;                     // 0x0890(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MorphTargetBlockedMeshLODLevelMin;                 // 0x0894(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MorphingLODLevel;                                  // 0x0898(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasMorphTag;                                      // 0x089C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_89D[0x14B];                                    // 0x089D(0x014B)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bHitShapesDisabled;                                // 0x09E8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHitShapesNoUpdate;                                // 0x09E9(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHitShapesForceUpdate;                             // 0x09EA(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHitShapesStateNeedsRefresh;                       // 0x09EB(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsDeathState;                                     // 0x09EC(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9ED[0xB];                                      // 0x09ED(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USkeletalMeshComponent*>         AnimPausingMeshes;                                 // 0x09F8(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_A08[0x14];                                     // 0x0A08(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HeadWidgetDefaultScaler;                           // 0x0A1C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A20[0x40];                                     // 0x0A20(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void UpdateParallelHitShapeUpdateState(bool bEnable);

	void AttachSubComOnReborn();
	void CheckIfRagdollStopMovement();
	void DetachSubComsOnDeath();
	class UMarvelHitShapeComponent* GetHitShape(EStrikePartType PartType);
	TArray<class UMarvelHitShapeComponent*> GetHitShapes();
	TArray<class FName> GetPhysicsRootNames();
	void K2_RebornResetAnimation();
	void K2_SetPhysicalAnimEnable(bool InEnable, const struct FAttributeModifierParameter& ModifierParameter);
	bool LoadSubMeshAttachInfo(class UPrimitiveComponent* InPrimitiveCom, struct FComponentAttachInfo* OutComponentAttachInfo);
	bool MeshHasPhysics();
	void OnGenericGameplayTagUpdate(const struct FGameplayTag& InTag, int32 Count);
	void OnLazyChildComponentAttached(class USceneComponent* InComponent, class USceneComponent* InChildComponent);
	void OnLazyChildComponentDetached(class USceneComponent* InComponent, class USceneComponent* InChildComponent);
	void OnViewTargetChange(class AActor* ViewingTarget);
	void ReceivePoolBeginPlay();
	void ReceivePoolEndPlay();
	void RegisterGameplayTagEvent(const struct FGameplayTagContainer& TagEvents, bool Always);
	void SaveSubMeshAttachInfo(class UPrimitiveComponent* InPrimitiveCom);
	void SetRagdollActive(bool bInActive);
	void SimulateSocketInMeshOnDeath();
	void TogglePhysicSimulation();
	void TriggerMaterialChangedDelegate();
	void UnregisterGameplayTagEvent(const struct FGameplayTagContainer& TagEvents);
	void UpdatePauseAnimState(bool bPauseAnim);
	void UpdatePhysicsStateWithRootNames(bool bNewSimulate);

	bool MeshNeedPhysics() const;
	void UpdatePhysicsAndClothSimulationState(bool bForceDisable) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCharacterChildActor">();
	}
	static class AMarvelCharacterChildActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCharacterChildActor>();
	}
};

// Class Marvel.MarvelChildActorComponent
// 0x0000 (0x04B0 - 0x04B0)
class UMarvelChildActorComponent final : public UChildActorComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelChildActorComponent">();
	}
	static class UMarvelChildActorComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelChildActorComponent>();
	}
};

// Class Marvel.MarvelCharacterMaterialAnimComponent
// 0x00C0 (0x01B0 - 0x00F0)
class UMarvelCharacterMaterialAnimComponent final : public UActorComponent
{
public:
	TArray<struct FMaterialAnimConfig>            MaterialAnimConfig;                                // 0x00F0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x0100(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_108[0xA8];                                     // 0x0108(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitializeData();
	void OnAbilityActive(int32 AbilityID);
	void OnAbilityBreak(class UGameplayAbility* Ability);
	void OnAbilityEnd(int32 AbilityID);
	void OnAbilityEndEx(class UGameplayAbility* Ability);
	void OnAbilityMissile(class UGameplayAbility* Ability);
	void PlayAnimCurve(int32 Index_0);
	int32 PlayAnimCurveWithConfig(const struct FMaterialAnimState& MaterialConfig);
	void PlayCustomAnimCurve(int32 AbilityID);
	void StopAnimCurve(int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCharacterMaterialAnimComponent">();
	}
	static class UMarvelCharacterMaterialAnimComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCharacterMaterialAnimComponent>();
	}
};

// Class Marvel.MarvelPresetDestructionManager
// 0x0128 (0x0160 - 0x0038)
class alignas(0x10) UMarvelPresetDestructionManager final : public UWorldSubsystem
{
public:
	TMap<struct FGameplayTag, class UMarvelCueNotify_DestructionHitImpact*> CueTag2BPMap;                                      // 0x0038(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_88[0x18];                                      // 0x0088(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FPhysSummonerCache> PreLoadPhysicsSummonersPool;                       // 0x00A0(0x0050)(NativeAccessSpecifierPrivate)
	TSet<TWeakObjectPtr<class AMarvelPresetDestructionActor>> LevelPredDesActors;                                // 0x00F0(0x0050)(UObjectWrapper, NativeAccessSpecifierPrivate)
	bool                                          bIsOpenPreLoad;                                    // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_141[0x1F];                                     // 0x0141(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelPresetDestructionManager* GetPresetDestructionManager(const class UObject* WorldContextObject);

	TSet<TWeakObjectPtr<class AMarvelPresetDestructionActor>> GetAllPreDesActors();
	void PreLoadTick();
	bool RegisterActor(class AMarvelPresetDestructionActor* AddActor);
	void ResetAllPreDes();
	bool UnregisterActor(class AMarvelPresetDestructionActor* RemoveActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPresetDestructionManager">();
	}
	static class UMarvelPresetDestructionManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelPresetDestructionManager>();
	}
};

// Class Marvel.MarvelCheatAnalyzer
// 0x0010 (0x0100 - 0x00F0)
class UMarvelCheatAnalyzer final : public UActorComponent
{
public:
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCheatAnalyzer">();
	}
	static class UMarvelCheatAnalyzer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCheatAnalyzer>();
	}
};

// Class Marvel.MarvelClientActorSequenceComponent
// 0x0008 (0x0128 - 0x0120)
class UMarvelClientActorSequenceComponent final : public UActorSequenceComponent
{
public:
	uint8                                         Pad_120[0x8];                                      // 0x0120(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DestroyOwner();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelClientActorSequenceComponent">();
	}
	static class UMarvelClientActorSequenceComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelClientActorSequenceComponent>();
	}
};

// Class Marvel.ReticleManager
// 0x0188 (0x01B8 - 0x0030)
class UReticleManager : public UObject
{
public:
	class UWidget_CommonReticle*                  Reticle;                                           // 0x0030(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUserWidget*                            SpecialReticle;                                    // 0x0038(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   ViewCharacter;                                     // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelCrosshairComponent*              CrosshairComp;                                     // 0x0048(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCommon;                                         // 0x0050(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCustomType;                                     // 0x0051(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsCustomColor;                                    // 0x0052(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_53[0x1];                                       // 0x0053(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FReticleStyle                          BaseStyle;                                         // 0x0054(0x00E4)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	struct FHeroReticle                           CurHeroReticle;                                    // 0x0138(0x0048)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnSpecialReticleChanged;                           // 0x0180(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_190[0x28];                                     // 0x0190(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UReticleManager* Get(class UObject* WCO);

	void OnEquipStateChanged(class AShootingWeapon* Weapon, const struct FMarvelEquipmentTable& WeaponInfo, bool bState);
	void OnShapeChanged(int32 ShapeID);
	void OnViewCharacterChanged(class AMarvelBaseCharacter* InChar);
	struct FReticleStyle OverwriteReticleStyleByUserSetting(const struct FReticleStyle& InReticleStyle);
	void SetCrosshairComponent(class UMarvelCrosshairComponent* InComponent);
	void SetDefaultStyle();
	void SetHeroReticleStyle(const struct FHeroReticle& HeroReticle);
	void Update();
	void UpdateNextFrame();
	void UpdateReloadStyle();
	void UpdateUserSetting();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReticleManager">();
	}
	static class UReticleManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReticleManager>();
	}
};

// Class Marvel.MarvelClientOnlyCharacter
// 0x0000 (0x0A10 - 0x0A10)
class AMarvelClientOnlyCharacter final : public ACharacter
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelClientOnlyCharacter">();
	}
	static class AMarvelClientOnlyCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelClientOnlyCharacter>();
	}
};

// Class Marvel.MarvelCombatInfoManager
// 0x00B0 (0x00E0 - 0x0030)
class UMarvelCombatInfoManager final : public UObject
{
public:
	class FString                                 CacheMapName;                                      // 0x0030(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bCacheAutoShowInfo;                                // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_41[0xF];                                       // 0x0041(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FStatProjFrameInfo> ProjFrameMap;                                      // 0x0050(0x0050)(NativeAccessSpecifierPrivate)
	struct FStatProjFrameInfo                     CacheInfoRef;                                      // 0x00A0(0x0040)(Transient, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCombatInfoManager">();
	}
	static class UMarvelCombatInfoManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCombatInfoManager>();
	}
};

// Class Marvel.MarvelFileUtil
// 0x0000 (0x0030 - 0x0030)
class UMarvelFileUtil final : public UBlueprintFunctionLibrary
{
public:
	static bool CanCheckoutFile(const class FString& InFile, bool bAddIfUntracked);
	static bool CanCheckoutPackage(class UObject* ObjToCheck);
	static bool CheckAssetCanCheckout(const TArray<class UObject*>& ObjsToSave, bool bShowFailedMessageDialog);
	static bool CheckFileExist(const class FString& Filename);
	static bool CheckPackageNameIsValid(const class FString& PackageName);
	static bool DeleteFile(const class FString& Filename);
	static class FString GetSavedDir();
	static bool IsSourceControlEnabled();
	static class FString LoadFromFile(const class FString& Filename);
	static class FString LoadFromFileBase64Encoding(const class FString& Filename);
	static class FString LoadFromFileWithFullFilePath(const class FString& FullFilePath);
	static bool SaveToFile(const class FString& Filename, const class FString& Text, bool Overwrite);
	static bool SaveToFileWithFullFilePath(const class FString& FullFilePath, const class FString& Text);
	static bool SubmmitFiles(const TArray<class FString>& Files, const class FString& InDescription);
	static bool SystemOpenFile(const class FString& FilePath);
	static bool SystemOpenLogFile();
	static void TraceMapLog(const class FString& Content);
	static bool TryToCheckoutFile(const class FString& InFile, bool bAddIfUntracked, bool bSyncBeforeCheckout);
	static bool TryToCheckoutPackage(class UPackage* PackageToSave, bool bSyncBeforeCheckout, bool bAddIfUntracked);
	static bool TryToCheckoutPackageWithDesc(const TArray<class UObject*>& ObjsToSave, const class FText& Desc, bool bSyncBeforeCheckout);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelFileUtil">();
	}
	static class UMarvelFileUtil* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelFileUtil>();
	}
};

// Class Marvel.MarvelCombineEffectSubsystem
// 0x0050 (0x0088 - 0x0038)
class UMarvelCombineEffectSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_38[0x50];                                      // 0x0038(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCombineEffectSubsystem">();
	}
	static class UMarvelCombineEffectSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCombineEffectSubsystem>();
	}
};

// Class Marvel.MarvelComponentFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UMarvelComponentFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelComponentFunctionLibrary">();
	}
	static class UMarvelComponentFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelComponentFunctionLibrary>();
	}
};

// Class Marvel.MarvelPhantomActor
// 0x0010 (0x04A0 - 0x0490)
class AMarvelPhantomActor final : public AActor
{
public:
	uint8                                         Pad_490[0x10];                                     // 0x0490(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPhantomActor">();
	}
	static class AMarvelPhantomActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelPhantomActor>();
	}
};

// Class Marvel.MarvelGameplay_SphereTraceType
// 0x0000 (0x0030 - 0x0030)
class UMarvelGameplay_SphereTraceType : public UMarvelGameplay_LineTraceType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplay_SphereTraceType">();
	}
	static class UMarvelGameplay_SphereTraceType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplay_SphereTraceType>();
	}
};

// Class Marvel.MarvelCreatePhantomObjectInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelCreatePhantomObjectInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCreatePhantomObjectInterface">();
	}
	static class IMarvelCreatePhantomObjectInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelCreatePhantomObjectInterface>();
	}
};

// Class Marvel.MultiWorldManager
// 0x00C8 (0x00F8 - 0x0030)
class UMultiWorldManager : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class FName Value)> OnWorldLoaded;                                     // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMap<class FName, class FName>                WorldContextHandleMap;                             // 0x0048(0x0050)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_98[0x50];                                      // 0x0098(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelGameViewportClient*              MarvelViewportClient;                              // 0x00E8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameInstance*                          GameInstance;                                      // 0x00F0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UMultiWorldManager* Get(class UObject* WCO);

	void DeleteWorld(class FName WorldName);
	class UWorld* GetTargetWorld(class FName WorldName);
	bool HasWorld(class FName WorldName);
	bool HasWorldWithSameAsset(class FName MapAssetName);
	void Init();
	void NewWorld(class FName WorldName, class FName MapAssetName);
	void OnPostLoadMap(class UWorld* InWorld);
	void OnViewingWorldChanged(class FName WorldName);
	void ReceiveOnWorldLoaded(class FName WorldName);
	void SetViewingWorld(class FName WorldName);
	void SetWorldAudioEnable(class FName WorldName, bool bEnable);
	void SetWorldPawnInputEnable(class FName WorldName, bool bEnable);
	void SetWorldShouldTick(class FName WorldName, bool bInShouldTick);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MultiWorldManager">();
	}
	static class UMultiWorldManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMultiWorldManager>();
	}
};

// Class Marvel.MarvelLinkTargetInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelLinkTargetInterface : public IInterface
{
public:
	struct FTransform GetThroughTransform() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelLinkTargetInterface">();
	}
	static class IMarvelLinkTargetInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelLinkTargetInterface>();
	}
};

// Class Marvel.MoveMaskControllerComponent
// 0x0028 (0x0118 - 0x00F0)
class UMoveMaskControllerComponent final : public UActorComponent
{
public:
	bool                                          bIgnoreAlly;                                       // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreEnemy;                                      // 0x00F1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoredByPawn;                                    // 0x00F2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoredByAgent;                                   // 0x00F3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            UpdatedComponents;                                 // 0x00F8(0x0010)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x10];                                     // 0x0108(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForceUpdateMask();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoveMaskControllerComponent">();
	}
	static class UMoveMaskControllerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoveMaskControllerComponent>();
	}
};

// Class Marvel.MarvelPhantomCopyMeshComponentInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelPhantomCopyMeshComponentInterface final : public IMarvelLinkTargetInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPhantomCopyMeshComponentInterface">();
	}
	static class IMarvelPhantomCopyMeshComponentInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelPhantomCopyMeshComponentInterface>();
	}
};

// Class Marvel.UIManager
// 0x00B0 (0x00E0 - 0x0030)
class UUIManager : public UObject
{
public:
	class UUIC_Loading*                           UIC_Loading;                                       // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EAbilityInputBinds, int32>               ActionPriority;                                    // 0x0038(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UObject*                                FocusManager;                                      // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                KeyWidgetManager;                                  // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                UIStackManager;                                    // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                UIInputManager;                                    // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                UIWidgetTagManager;                                // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bIsFocused)> OnAppFocusStateChanged;                            // 0x00B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_C0[0x18];                                      // 0x00C0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UUIAutoConsoleCommandDelegateHub*       AutoConsoleCommandDelegateHub;                     // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UUIManager* Get(class UObject* WCO);

	void AddFrameLimitTask(const TDelegate<void()>& Task, EFrameLimitTaskPriority Priority);
	void BindAppFocusStateChange(class UObject* WCO, bool bBind);
	void Destruct();
	class UUIAutoConsoleCommandDelegateHub* GetAutoConsoleCommandDelegateHub();
	void Init();
	void OnListHoverChanged(bool IsHovering, bool IsVertical);
	void OnPreLoadMap(const class FString& LevelName);
	void OnWidgetWithTagsCreate(class UWidget* Widget, const struct FGameplayTagContainer& Tags);
	void OnWidgetWithTagsDestroy(class UWidget* Widget, const struct FGameplayTagContainer& Tags);

	void OnAppActivationStateChanged(bool bFocused) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIManager">();
	}
	static class UUIManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIManager>();
	}
};

// Class Marvel.MarvelCriticalStrikeCalculation
// 0x0000 (0x0048 - 0x0048)
class UMarvelCriticalStrikeCalculation final : public UGameplayModMagnitudeCalculation
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCriticalStrikeCalculation">();
	}
	static class UMarvelCriticalStrikeCalculation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCriticalStrikeCalculation>();
	}
};

// Class Marvel.MarvelCrosshairComponent
// 0x0040 (0x0130 - 0x00F0)
class UMarvelCrosshairComponent final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(float CrossHairDistance, float CrosshairSpread, float CrosshairRadius)> OnCrosshairChanged;                                // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	float                                         RemoteComponentTickInterval;                       // 0x0100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_104[0x4];                                      // 0x0104(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APawn*                                  Instigator;                                        // 0x0108(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FDeclarationHolder                     DeclareViewSideHolder;                             // 0x0110(0x0010)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_120[0x10];                                     // 0x0120(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void GenerateFireDirection(float InSpread, struct FVector& InOutDirection, struct FMtRandomStream& InRandomStream);
	static void GenerateFireDirections(int32 InNumFire, float InSpread, const struct FVector& InDirection, const class UWeaponCrosshairSpec* InCrosshairSpec, TArray<struct FVector>* OutDirections, struct FMtRandomStream& InRandomStream);
	static void GenerateFireDirectionsWithDistance(int32 InNumFire, float InSpread, float CrossHairDistance, const struct FVector& InDirection, TArray<struct FVector>* OutDirections, struct FMtRandomStream& InRandomStream);
	static void GenerateFixedFireDirections(int32 InNumFire, float InSpread, const struct FRotator& InRotation, const TArray<struct FAmmoFixedSpread>& InFixedSpreads, TArray<struct FVector>* OutDirections);
	static struct FMtRandomStream MakeRandomStream(int32 InRandomSeed, float* OutRandomValue0);

	bool GetFireDirectionsWithSpread(TArray<struct FVector>* OutDirections, int32 InCrosshairIndex, int32 InNumFire, const struct FVector& InFireDirection, const class UWeaponCrosshairSpec* InCrosshairSpec, bool bConsumeSeed);
	bool GetFireDirectionWithSpread(struct FVector& InOutFireDirection, int32 InCrosshairIndex, bool bConsumeSeed);
	bool GetRandomSeed(int32 InCrosshairIndex, int32* OutRandomSeed, float* OutRandomValue0);
	void NotifyFire(int32 InCrosshairIndex, float InFireTime, float InNextFireTime);
	void OnCharacterFOVChanged(float CurrentFOV);
	void OnControllerInput(float InputYaw, float InputPitch);
	void OnPlayerViewSideChanged(EClientPlayerViewSide InViewSide);
	bool PopCrosshairParams(int32& InOutCrosshairIndex);
	int32 PushCrosshairParams(const class UWeaponCrosshairSpec* InCrosshairSpec);
	void ResetCrosshairShake(int32 InCrosshairIndex);
	void ResetCrosshairSpread(int32 InCrosshairIndex);
	bool SetRandomSeed(int32 InCrosshairIndex, int32 InRandomSeed, float* OutRandomValue0);

	float GetCrosshairRadius(int32 InCrosshairIndex) const;
	bool GetCrosshairSpread(int32 InCrosshairIndex, float* OutCrosshairSpread) const;
	float GetCurrentCrosshairRadius() const;
	float GetCurrentCrosshairSpread() const;
	bool IsCurrentCrosshair(int32 InCrosshairIndex) const;
	bool IsValidCrosshair(int32 InCrosshairIndex) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCrosshairComponent">();
	}
	static class UMarvelCrosshairComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCrosshairComponent>();
	}
};

// Class Marvel.MarvelCueNotifyOverrideInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelCueNotifyOverrideInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotifyOverrideInterface">();
	}
	static class IMarvelCueNotifyOverrideInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelCueNotifyOverrideInterface>();
	}
};

// Class Marvel.MarvelCueNotify_CableBase
// 0x0298 (0x1160 - 0x0EC8)
class AMarvelCueNotify_CableBase : public AMarvelCueNotify_Loop
{
public:
	class UStaticMeshComponent*                   CableHeadCompnentStatic;                           // 0x0EC8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 CableHeadCompnentSkeleton;                         // 0x0ED0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelCableComponent*                  CableCompnent;                                     // 0x0ED8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseNativeCode;                                    // 0x0EE0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EE1[0x3];                                      // 0x0EE1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CableMinLength;                                    // 0x0EE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   CableHeadSocketName;                               // 0x0EE8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HideCableHeadAllTheTime;                           // 0x0EF4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShowCableHeadDuringShooting;                       // 0x0EF5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_EF6[0x2];                                      // 0x0EF6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UCurveVector*>                   InitControlPointCurveArray;                        // 0x0EF8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         CableHeadAttachLocationOffset;                     // 0x0F08(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AutoScaleCableHeadComponent;                       // 0x0F0C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0D[0x3];                                      // 0x0F0D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CableHitFxLocationOffset;                          // 0x0F10(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultGravityScale;                               // 0x0F14(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GravityScaleWhenNoHit;                             // 0x0F18(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CableFadeOutDuration;                              // 0x0F1C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, class UCurveFloat*>         CableFadeOutMaterialDict;                          // 0x0F20(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<class FName, class UCurveFloat*>         CableFadeOutMaterialDict_WhenNoHit;                // 0x0F70(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         MaxAngleForHorizontalHit;                          // 0x0FC0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HitOffsetZ;                                        // 0x0FC4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ProjectileRadius;                                  // 0x0FC8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomInertiaScaleFactorXY_NoHit;                  // 0x0FCC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RandomInertiaScaleFactorZ_NoHit;                   // 0x0FD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FD4[0x4];                                      // 0x0FD4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           RandomInertiaScaleFactorCurve_NoHit;               // 0x0FD8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayToReleaseHandWhenNoHit;                       // 0x0FE0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DelayToFadeOutWhenNoHit;                           // 0x0FE4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshComponent*                         CableHeadComponent;                                // 0x0FE8(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsCableHeadGrabbing;                              // 0x0FF0(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FF1[0x7];                                      // 0x0FF1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OwnerCharacter;                                    // 0x0FF8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 TargetActor;                                       // 0x1000(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPortalSegments                        TargetActorPortalSegments;                         // 0x1008(0x0050)(BlueprintVisible, Transient, Protected, NativeAccessSpecifierProtected)
	int32                                         PortalSegmentIndex;                                // 0x1058(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_105C[0x4];                                     // 0x105C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TargetLocation;                                    // 0x1060(0x0018)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 AttachProjectile;                                  // 0x1078(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1080[0x8];                                     // 0x1080(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinCableLength;                                    // 0x1088(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ECableAbilityStage                            AbilityStage;                                      // 0x108C(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_108D[0x3];                                     // 0x108D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentGrapPointIndex;                             // 0x1090(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          HasExecuteShoot;                                   // 0x1094(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          HasExecuteHit;                                     // 0x1095(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsFlyOverMaxDistance;                              // 0x1096(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1097[0x3];                                     // 0x1097(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsHandRelease;                                     // 0x109A(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_109B[0x55];                                    // 0x109B(0x0055)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        InitControlPointList;                              // 0x10F0(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1100[0x31];                                    // 0x1100(0x0031)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          AutoReleaseHandWhenDraging;                        // 0x1131(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1132[0x2];                                     // 0x1132(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         OtherHandGrappedParticleIndex;                     // 0x1134(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   OtherHandGrappedSocketName;                        // 0x1138(0x000C)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         FreezeShootFrameCount;                             // 0x1144(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1148[0x8];                                     // 0x1148(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 LogPrefix;                                         // 0x1150(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void AddRandomInertia(float HorizontalThreshold, float VerticalThreshold, class UCurveVector* Curve);
	void AfterCableUpdate(float DeltaTime);
	void BeforeCableUpdate(float DeltaTime);
	void EnsureCableStraight(const struct FVector& Start, const struct FVector& End);
	bool GetTargetActorFixedHitLocation(struct FVector* OutImpactPoint, struct FVector* OutImpactLocation, bool InBeforeHit);
	void K2_ListenProjectileSpawnAndHit();
	void K2_OnCableHit(const struct FVector& HitLocation);
	void K2_OnStartDragCable();
	void K2_UnlistenProjectileSpawnAndHit();
	void OnCableFlyOverMaxDistance();
	void OnCableHeadBreak(bool StartFadeOut, float DelayTime, bool NeedDetach, float GravityScale);
	void OnCableHit(const struct FVector& HitLocation);
	void OnDragingUpdate(float DeltaTime);
	void OnHandRelease(bool StartFadeOut, float DelayTime, float GravityScale);
	void OnRemoveInternal();
	void OnTimeToReleaseHandWhenNoHit();
	void ResetDefault();
	void SetTargetActor(class AActor* InTargetActor);
	void SetTargetActorWithSegments(class AActor* InTargetActor, const struct FPortalSegments& InPortalSegments);
	void ShootCable(float InFlySpeed, class AActor* InAttachProjectile);
	void StraightCable(bool AutoAddParticle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_CableBase">();
	}
	static class AMarvelCueNotify_CableBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_CableBase>();
	}
};

// Class Marvel.MarvelCueNotify_CableSwinging
// 0x0078 (0x11D8 - 0x1160)
class AMarvelCueNotify_CableSwinging final : public AMarvelCueNotify_CableBase
{
public:
	TArray<class UCurveVector*>                   DashTopCurveArray;                                 // 0x1160(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UCurveVector*>                   ExceedHandCurveArray;                              // 0x1170(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          IsStartHighSwinging;                               // 0x1180(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1181[0x7];                                     // 0x1181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        InitDashTopControlPointList;                       // 0x1188(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<float>                                 InitDashTopControlPercentList;                     // 0x1198(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FVector>                        CurrentDashTopControlPointList;                    // 0x11A8(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int32                                         DashTopControlPointNum;                            // 0x11B8(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HasInitDashTopControlPoints;                       // 0x11BC(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          CanUpdateDashTop;                                  // 0x11BD(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11BE[0x2];                                     // 0x11BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        ExceedHandPointList;                               // 0x11C0(0x0010)(BlueprintVisible, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	bool                                          HasInitExceedHandPortion;                          // 0x11D0(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11D1[0x7];                                     // 0x11D1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCueNotify_CableSwinging">();
	}
	static class AMarvelCueNotify_CableSwinging* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelCueNotify_CableSwinging>();
	}
};

// Class Marvel.WeaponMaterialsFadeManagerComponent
// 0x0000 (0x0118 - 0x0118)
class UWeaponMaterialsFadeManagerComponent final : public UMarvelMeshMaterialsFadeManagerComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WeaponMaterialsFadeManagerComponent">();
	}
	static class UWeaponMaterialsFadeManagerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponMaterialsFadeManagerComponent>();
	}
};

// Class Marvel.MarvelDamageToTreatAbility
// 0x0018 (0x1110 - 0x10F8)
class UMarvelDamageToTreatAbility final : public UMarvelEffectGameplayAbility
{
public:
	EDamageToTreatMode                            Mode;                                              // 0x10F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10F9[0x3];                                     // 0x10F9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ModValue;                                          // 0x10FC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FDamageSourceInfo>              DamageSourceInfos;                                 // 0x1100(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Protected, NativeAccessSpecifierProtected)

public:
	void OnApplyDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelDamageToTreatAbility">();
	}
	static class UMarvelDamageToTreatAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelDamageToTreatAbility>();
	}
};

// Class Marvel.MarvelDecalSubsystem
// 0x00B0 (0x00E8 - 0x0038)
class UMarvelDecalSubsystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_38[0xB0];                                      // 0x0038(0x00B0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelDecalSubsystem">();
	}
	static class UMarvelDecalSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelDecalSubsystem>();
	}
};

// Class Marvel.MarvelEffectCustomAppRequirement
// 0x0028 (0x0058 - 0x0030)
class UMarvelEffectCustomAppRequirement final : public UGameplayEffectCustomApplicationRequirement
{
public:
	uint8                                         Pad_30[0x28];                                      // 0x0030(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelEffectCustomAppRequirement">();
	}
	static class UMarvelEffectCustomAppRequirement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelEffectCustomAppRequirement>();
	}
};

// Class Marvel.MarvelEquipmentSystemInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelEquipmentSystemInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelEquipmentSystemInterface">();
	}
	static class IMarvelEquipmentSystemInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelEquipmentSystemInterface>();
	}
};

// Class Marvel.MarvelGameData
// 0x1010 (0x1048 - 0x0038)
class UMarvelGameData final : public UDataAsset
{
public:
	bool                                          bUseChildTable;                                    // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           ChildDataTableNames;                               // 0x0040(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                DataTableAssetRef;                                 // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FSoftObjectPath>                DataTableAssetRef_SkipDS;                          // 0x0060(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FString>                         HeroRelatedTables;                                 // 0x0070(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FString>                         AbilityRelatedTables;                              // 0x0080(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FString>                         SkinRelatedTables;                                 // 0x0090(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FString>                         UIRelatedTables;                                   // 0x00A0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FString>                         AIRelatedTables;                                   // 0x00B0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FString>                         LevelMapRelatedTables;                             // 0x00C0(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            TCControlTables;                                   // 0x00D0(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FTableSnapFingersDependency>    CustomTableDependencies;                           // 0x0120(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FString, struct FTablePathList>    StringTableToDataTables;                           // 0x0130(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         ExtraThrowableGravity;                             // 0x0180(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CacheSkillDuration;                                // 0x0184(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GlobalEffectPeriod;                                // 0x0188(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CacheTerrainKillSourceDuration;                    // 0x018C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicShieldCapsuleOffset;                         // 0x0190(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   LeftHandSocketName;                                // 0x0194(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RightHandSocketName;                               // 0x01A0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HeadSocketName;                                    // 0x01AC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         DefaultCollisionRequirements;                      // 0x01B8(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         DefaultTraceRequirements;                          // 0x0288(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         DefaultHitedRequirements;                          // 0x0358(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMarvelGameplayTagRequirements         DefaultTracedRequirements;                         // 0x0428(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  NihilityTags;                                      // 0x04F8(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         ContinueAbilityCheckRate;                          // 0x0560(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FNearRangeAimingParams                 DefaultNearRangeAimingParams;                      // 0x0564(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         ChangeHeroKeepUltimateEnergyRatio;                 // 0x056C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SwitchRoundKeepUltimateEnergyRatio;                // 0x0570(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CanceledUltimateEnergyRatio;                       // 0x0574(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, float>                    SpecialDamageRegenMap;                             // 0x0578(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  CancelPinnedTaskTagContainer;                      // 0x05C8(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         DamageRpcPeriod;                                   // 0x0630(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DamageRpcMaxNum;                                   // 0x0634(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OnceMaxDamageLimit;                                // 0x0638(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_63C[0x4];                                      // 0x063C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           OcclusionBones;                                    // 0x0640(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	ESolveTriggerType                             CharacterPenetrationSolveTriggerType;              // 0x0650(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_651[0x7];                                      // 0x0651(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECollisionChannel>                     CharacterPenetrationCheckChannels;                 // 0x0658(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<ECollisionChannel>                     ChannelsNotPassWhenResolvePenetration;             // 0x0668(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	int32                                         DisengSpeedThreshold;                              // 0x0678(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_67C[0x4];                                      // 0x067C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UGameplayEffect>            PreDestructionKillEffect;                          // 0x0680(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESolveTriggerType                             SummonerPenetrationSolveTriggerType;               // 0x0688(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_689[0x7];                                      // 0x0689(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<ECollisionChannel>                     SummonerPenetrationCheckChannels;                  // 0x0690(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RecoveringDesCancelAbilityTags;                    // 0x06A0(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, float>                      DisplayDeformThresholdMap;                         // 0x0708(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bApplyHitShapeDamage;                              // 0x0758(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_759[0x7];                                      // 0x0759(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarvelHitShapeDamageMap>       HitShapeType;                                      // 0x0760(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FName, int32>                      GameBehaviorSettings;                              // 0x0770(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<ECollisionChannel, ECollisionResponse>   SceneCollisionResponse;                            // 0x07C0(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<ESelfCollisionType, struct FTeamMember>  SelfCollisionPreset;                               // 0x0810(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<ETeammateCollisionType, struct FTeamMember> TeammateCollisionPreset;                           // 0x0860(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EEnemyCollisionType, struct FTeamMember> EnemyCollisionPreset;                              // 0x08B0(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<ESceneCollisionType, struct FSceneMember> SceneCollisionPreset;                              // 0x0900(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<ESelfTraceType, struct FTeamMember>      SelfTracePreset;                                   // 0x0950(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<ETeammateTraceType, struct FTeamMember>  TeammateTracePreset;                               // 0x09A0(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<EEnemyTraceType, struct FTeamMember>     EnemyTracePreset;                                  // 0x09F0(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<ESceneTraceType, struct FSceneMember>    SceneTracePreset;                                  // 0x0A40(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         ImpulseDirFixDistance;                             // 0x0A90(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseDirLimitAngle;                              // 0x0A94(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ImpulseLimitSpeedLevel;                            // 0x0A98(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ImpulseLimitSpeed;                                 // 0x0A9C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     InteractorCameraMaterial;                          // 0x0AA0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        OutlineStencilValue;                               // 0x0AA8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        SelectOutlineStencilValue;                         // 0x0AAC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            SelectOutlineWidthCurve;                           // 0x0AB0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            InteractorEmissiveCurve;                           // 0x0AB8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Opacity;                                           // 0x0AC0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TimeCrystalAbilityDefaultAdsorbNum;                // 0x0AC4(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialParameterCollection*           LevelAvgLumenParameterCollection;                  // 0x0AC8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SelectTaskTraceBackTime;                           // 0x0AD0(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AD4[0x4];                                      // 0x0AD4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelUserSettingConfig               GameUserSettingConfig;                             // 0x0AD8(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        CommonAudioConfig;                                 // 0x0B40(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        CommonTextConfig;                                  // 0x0B68(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        CommonDestructionConfig;                           // 0x0B90(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        CommonPredesData;                                  // 0x0BB8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        SettlementConfig;                                  // 0x0BE0(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputMappingContext*                   MarvelCharacterDefaultInputContext;                // 0x0C08(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UInputAction*                           OneSubmitInputAction;                              // 0x0C10(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        SignalData;                                        // 0x0C18(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        NoviceTutorialData;                                // 0x0C40(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMarvelLogControl                      LogControl;                                        // 0x0C68(0x0138)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<class FString, class UDataTable*>        DataTableMap;                                      // 0x0DA0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	TMap<class FString, struct FSoftObjectPath>   SoftPathMapping;                                   // 0x0DF0(0x0050)(Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E40[0x10];                                     // 0x0E40(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, struct FBPCLoadInfo>      BPCLoadHandle;                                     // 0x0E50(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class FName, struct FMarvelMaterialAsset> MaterialAssets;                                    // 0x0EA0(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FString, struct FSoftClassPath>    BlueprintClasses;                                  // 0x0EF0(0x0050)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UClass*>                         CachedBlueprintClasses;                            // 0x0F40(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F50[0x10];                                     // 0x0F50(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSoftObjectPath>                DataAssets_Ref;                                    // 0x0F60(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UDataAsset*>                     DataAssets_HardRef;                                // 0x0F70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TMap<class FName, class UDataAsset*>          DataAssets;                                        // 0x0F80(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	class UCurveFloat*                            DyingHpThresholdCurve;                             // 0x0FD0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FD8[0x60];                                     // 0x0FD8(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UMarvelCueNotify_Static>> PreloadStaticCueList;                              // 0x1038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	void OnAssetsLoaded(const TArray<class UObject*>& Assets, const TArray<struct FSoftObjectPath>& RequestedAssets);

	class UMarvelAudioData* GetCommonAudioConfig() const;
	class UMarvelDestructionSettingData* GetCommonDestructionConfig() const;
	class UMarvelTextData* GetCommonTextConfig() const;
	int32 GetGameBehaviorSetting(const class FName& Key) const;
	class UInputMappingContext* GetMarvelCharacterDefaultInputContext() const;
	class UInputAction* GetOneSubmitInputAction() const;
	class UBattleSettlementConfig* GetSettlementConfig() const;
	class USignalDataAsset* GetSignalData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameData">();
	}
	static class UMarvelGameData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameData>();
	}
};

// Class Marvel.MarvelGameMode
// 0x0140 (0x0670 - 0x0530)
class AMarvelGameMode : public AGameModeBase
{
public:
	TMulticastInlineDelegate<void(class AMarvelPlayerState* PlayerState)> PlayerKickOutDispatcher;                           // 0x0530(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          bHandlePlayInEditorReplays;                        // 0x0540(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHandleDedicatedServerReplays;                     // 0x0541(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableDefaultPawn;                                // 0x0542(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsInnerTest;                                       // 0x0543(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TestPlayerNumInEachSide;                           // 0x0544(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHasTeamLimit;                                     // 0x0548(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_549[0x3];                                      // 0x0549(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxPlayerNumInSide1;                               // 0x054C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayerNumInSide2;                               // 0x0550(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxOnlySpectatorNum;                               // 0x0554(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 LevelModes;                                        // 0x0558(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    AIControllerClass;                                 // 0x0568(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    ServerActorClass;                                  // 0x0570(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UObject>                    LevelCtrlPawnClass;                                // 0x0578(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UAchievementComponent>      AchievementComponentClass;                         // 0x0580(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AMarvelPlayerController* MarvelPlayerController, int32 UID)> ReconnectControllerPreSpawnEvent;                  // 0x0588(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FMarvelActorSpawnContext& MSC)> SpawnMarvelCharacterEvent;                         // 0x0598(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A8[0x18];                                     // 0x05A8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MapID;                                             // 0x05C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GamePlayModeID;                                    // 0x05C4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GameModeId;                                        // 0x05C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5CC[0x4];                                      // 0x05CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FPlayerInfo>               PlayersInfo;                                       // 0x05D0(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<int32, class AController*>               ControllersInfo;                                   // 0x0620(0x0050)(Protected, NativeAccessSpecifierProtected)

public:
	static void DestroyMarvelAbilityAgent(class AController* Controller);
	static void DestroyMarvelCharacter(class AController* Controller);
	static class APawn* PossessMarvelCharacter(class AController* PC, class AMarvelBaseCharacter* Char, ESpawnMethod Method);
	static class AMarvelBaseCharacter* SpawnMarvelCharacter(class AController* Controller, const struct FTransform& Transform, int32 HeroID, const struct FAttributeModifierParameter& ModiferParam, ESpawnMethod Method, bool bAdjustIfPossible);
	static class AMarvelBaseCharacter* SpawnMarvelCharacterLimitAbility(class AController* Controller, const struct FTransform& Transform, int32 HeroID, const struct FAttributeModifierParameter& ModiferParam, ESpawnMethod Method, bool bAdjustIfPossible, const TSet<int32>& LimitAbilitySet);

	bool AddPlayerController(class AController* PlayerController);
	void AddPlayerInfo(const struct FPlayerInfo& Info);
	void BroadcastChatMessage(const class FString& msg, int32 BattleSide);
	void BroadcastChatMessageWithParameter(const class FString& msg, int32 BattleSide, int32 SpecialType, const TArray<int32>& ExcludePlayers);
	void ClearPlayerInfo();
	int32 GenerateUID();
	int32 GetBattleSideCount(EBattleSide BattleSide);
	class AController* GetPlayerControllerByUid(int32 UID);
	TMap<int32, struct FPlayerInfo> GetPlayersInfo();
	EBattleSide GetValidTeamID(EBattleSide InBattleSide);
	bool KickPlayer(int32 UID, const class FText& KickReason);
	void OnChangeMatchState(EMatchState InMatchState);
	class FString PreLoginCheck(const class FString& OPTIONS, const class FString& address, const class FString& UniqueIdStr, const class FString& ErrorMessage);
	void PyAddPlayerInfo(int32 InUID, int32 InHeroID, EBattleSide InBattleSide, const class FString& InPlayerNickName, bool IsAI, bool IsSpectator, const class FString& ExtraInfo);
	bool RemovePlayerController(class AController* PlayerController);
	void RestartLevel();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameMode">();
	}
	static class AMarvelGameMode* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelGameMode>();
	}
};

// Class Marvel.MarvelGameModeComponent
// 0x0000 (0x00F0 - 0x00F0)
class UMarvelGameModeComponent : public UMarvelActorComponentBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameModeComponent">();
	}
	static class UMarvelGameModeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameModeComponent>();
	}
};

// Class Marvel.MarvelGameplayCueManager
// 0x01B0 (0x0478 - 0x02C8)
class UMarvelGameplayCueManager final : public UGameplayCueManager
{
public:
	uint8                                         Pad_2C8[0x110];                                    // 0x02C8(0x0110)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayCueEventTask>          CueEventTasks;                                     // 0x03D8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FGameplayCueEventTask>          SecondaryCueEventTasks;                            // 0x03E8(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3F8[0x2C];                                     // 0x03F8(0x002C)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class UWorld>                  LastActiveWorld;                                   // 0x0424(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_42C[0x4C];                                     // 0x042C(0x004C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool PreLoadGameplayCue(const struct FGameplayTag& GameplayCueTag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayCueManager">();
	}
	static class UMarvelGameplayCueManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayCueManager>();
	}
};

// Class Marvel.MarvelGameplayCueSet
// 0x0050 (0x00E8 - 0x0098)
class UMarvelGameplayCueSet final : public UGameplayCueSet
{
public:
	uint8                                         Pad_98[0x50];                                      // 0x0098(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayCueSet">();
	}
	static class UMarvelGameplayCueSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayCueSet>();
	}
};

// Class Marvel.MarvelGameplayEffectAmmo2Regen
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectAmmo2Regen final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectAmmo2Regen">();
	}
	static class UMarvelGameplayEffectAmmo2Regen* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectAmmo2Regen>();
	}
};

// Class Marvel.MarvelGameplayEffectAttribute
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectAttribute final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectAttribute">();
	}
	static class UMarvelGameplayEffectAttribute* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectAttribute>();
	}
};

// Class Marvel.MarvelGameplayEffectSkill2Cost
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectSkill2Cost final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectSkill2Cost">();
	}
	static class UMarvelGameplayEffectSkill2Cost* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectSkill2Cost>();
	}
};

// Class Marvel.MarvelGameplayEffectSkillEnergy3Reduce
// 0x0000 (0x1380 - 0x1380)
class UMarvelGameplayEffectSkillEnergy3Reduce final : public UGameplayEffect
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayEffectSkillEnergy3Reduce">();
	}
	static class UMarvelGameplayEffectSkillEnergy3Reduce* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayEffectSkillEnergy3Reduce>();
	}
};

// Class Marvel.MarvelGameplayTagRequirementsHelper
// 0x0000 (0x0030 - 0x0030)
class UMarvelGameplayTagRequirementsHelper final : public UObject
{
public:
	static bool AnyRequirementsMet(const class AActor* Actor, const struct FMarvelGameplayTagRequirements& Requirements);
	static bool IsEmpty(const struct FMarvelGameplayTagRequirements& Requirements);
	static bool RequirementsMet(const class AActor* Actor, const struct FMarvelGameplayTagRequirements& Requirements);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayTagRequirementsHelper">();
	}
	static class UMarvelGameplayTagRequirementsHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayTagRequirementsHelper>();
	}
};

// Class Marvel.MarvelGameplay_SectorTraceType
// 0x0000 (0x0030 - 0x0030)
class UMarvelGameplay_SectorTraceType final : public UMarvelGameplay_LineTraceType
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplay_SectorTraceType">();
	}
	static class UMarvelGameplay_SectorTraceType* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplay_SectorTraceType>();
	}
};

// Class Marvel.MarvelGameplayTraceManager
// 0x0000 (0x0030 - 0x0030)
class UMarvelGameplayTraceManager final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameplayTraceManager">();
	}
	static class UMarvelGameplayTraceManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameplayTraceManager>();
	}
};

// Class Marvel.MarvelGameStateComponent
// 0x0000 (0x00F0 - 0x00F0)
class UMarvelGameStateComponent final : public UMarvelActorComponentBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGameStateComponent">();
	}
	static class UMarvelGameStateComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGameStateComponent>();
	}
};

// Class Marvel.MarvelGenMeshActor
// 0x01D0 (0x0660 - 0x0490)
class alignas(0x10) AMarvelGenMeshActor final : public AActor
{
public:
	uint8                                         Pad_490[0x50];                                     // 0x0490(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGeometryCollectionComponent*>   ListeningChaosDes;                                 // 0x04E0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class AChaosDestructionActor*>         ListeningChaosDesActors;                           // 0x04F0(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class AMarvelPresetDestructionActor*>  ListeningPresetDestructions;                       // 0x0500(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>            ListeningPrimitiveComponents;                      // 0x0510(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UPrimitiveComponent*                    BaseComponent;                                     // 0x0520(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_528[0x20];                                     // 0x0528(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelGenMeshComponent*                GenMesh;                                           // 0x0548(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_550[0x100];                                    // 0x0550(0x0100)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     MaterialToUse;                                     // 0x0650(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_658[0x8];                                      // 0x0658(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsBeingUsed();
	void OnClientOnlyDestructionActorBreak();
	void OnLevelMoveFinish(const class FString& InTag);
	void OnPrimitiveComponentCollisionChange(class UPrimitiveComponent* InPrimitiveComponent);
	void OnRespawnByChaosDes(const struct FChaosBreakEvent& BreakEvent);
	void OnRespawnByPresetDestruction(class FName NewLevel);
	bool OwnerHasAuthority();
	void Reset();
	void TryRepawnGenMesh();
	void TryRespawnMoveGenMesh(bool bForceRespawn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGenMeshActor">();
	}
	static class AMarvelGenMeshActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelGenMeshActor>();
	}
};

// Class Marvel.MarvelGenMeshSpawnComponent
// 0x0050 (0x0140 - 0x00F0)
class UMarvelGenMeshSpawnComponent final : public UActorComponent
{
public:
	TSet<class AMarvelGenMeshActor*>              MeshActors;                                        // 0x00F0(0x0050)(NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGenMeshSpawnComponent">();
	}
	static class UMarvelGenMeshSpawnComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGenMeshSpawnComponent>();
	}
};

// Class Marvel.MarvelLinkDamageEffect
// 0x00A8 (0x1428 - 0x1380)
class UMarvelLinkDamageEffect final : public UGameplayEffect
{
public:
	uint8                                         Pad_1380[0xA8];                                    // 0x1380(0x00A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelLinkDamageEffect">();
	}
	static class UMarvelLinkDamageEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelLinkDamageEffect>();
	}
};

// Class Marvel.MarvelModeRuleHeroItem
// 0x0058 (0x0090 - 0x0038)
class UMarvelModeRuleHeroItem final : public UDataAsset
{
public:
	int32                                         ActivityId;                                        // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, struct FMarvelModeRuleHeroAsset>  HeroAssets;                                        // 0x0040(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelModeRuleHeroItem">();
	}
	static class UMarvelModeRuleHeroItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelModeRuleHeroItem>();
	}
};

// Class Marvel.MarvelHitShapeDamageCalculation
// 0x0000 (0x0048 - 0x0048)
class UMarvelHitShapeDamageCalculation final : public UGameplayModMagnitudeCalculation
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelHitShapeDamageCalculation">();
	}
	static class UMarvelHitShapeDamageCalculation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelHitShapeDamageCalculation>();
	}
};

// Class Marvel.MarvelHitShapeInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelHitShapeInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelHitShapeInterface">();
	}
	static class IMarvelHitShapeInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelHitShapeInterface>();
	}
};

// Class Marvel.MarvelHomeEntranceLibrary
// 0x0000 (0x0030 - 0x0030)
class UMarvelHomeEntranceLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelHomeEntranceLibrary">();
	}
	static class UMarvelHomeEntranceLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelHomeEntranceLibrary>();
	}
};

// Class Marvel.MarvelInputUtility
// 0x0000 (0x0030 - 0x0030)
class UMarvelInputUtility final : public UBlueprintFunctionLibrary
{
public:
	static bool IsActionKeyDown(class UObject* WorldContextObject, class FName ActionName);
	static bool IsAxisKeyDown(class UObject* WorldContextObject, class FName AxisName, float* Scale);
	static bool IsInputBindPressed(class UObject* WorldContextObject, EAbilityInputBinds InputBind);
	static void SetTriggerEffect(class UObject* WorldContextObject, const class UMarvelTriggerEffect_Base* TriggerEffect);
	static void SetTriggerEffectByParam(class UObject* WorldContextObject, const struct FTriggerEffectParam& EffectParam);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelInputUtility">();
	}
	static class UMarvelInputUtility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelInputUtility>();
	}
};

// Class Marvel.MarvelInstantReplayHelper
// 0x0000 (0x0030 - 0x0030)
class UMarvelInstantReplayHelper final : public UBlueprintFunctionLibrary
{
public:
	static void BindReplayDownloadTime(class UObject* WorldContextObject, const TDelegate<void(double Time)>& TimeDelegate);
	static EMarvelReplayEndReason GetInstantReplayEndReason(class UObject* WorldContextObject);
	static class FString GetInstantReplayEndReasonStr(class UObject* WorldContextObject);
	static class FString GetPreRequestInfo(class UObject* WorldContextObject);
	static void RequestReplayData(class UObject* WorldContextObject, const TArray<struct FEpicMomentActionInfo>& EpicMomentInfos);
	static int32 StartEpicReplay(class UObject* WorldContextObject, const int32 UID, const TDelegate<void(EMarvelReplayState Value)>& OnChange);
	static int32 StartEpicReplay2(class UObject* WorldContextObject, const struct FEpicMomentActionInfo& EpicMomentInfo, const TDelegate<void(EMarvelReplayState Value)>& OnChange, const bool bTravelWorld);
	static bool StartKillReplay(class AActor* Victim, const struct FMarvelSpectatorInfo& SpectatorInfo);
	static void StopEpicReplay(class UObject* WorldContextObject, const EMarvelReplayEndReason EndReason, bool bImmediately);
	static void StopKillReplay(class AActor* Victim, class APlayerController* PC);
	static void StopRequestReplayData(class UObject* WorldContextObject);
	static void UnbindEpicReplay(class UObject* WorldContextObject, const int32 EventHandler);
	static bool WasCanceledByOtherWorld(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelInstantReplayHelper">();
	}
	static class UMarvelInstantReplayHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelInstantReplayHelper>();
	}
};

// Class Marvel.MarvelInteractableActorManager
// 0x01A8 (0x01E0 - 0x0038)
class UMarvelInteractableActorManager final : public UWorldSubsystem
{
public:
	uint8                                         Pad_38[0x1A8];                                     // 0x0038(0x01A8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelInteractableActorManager* GetMarvelInteractableActorManager(class UObject* WorldContextObject);
	static class APhysicsSummoner* SpawnPhysicsSummoner(class UObject* WorldContextObject, TSubclassOf<class APhysicsSummoner> InClass, const struct FTransform& Transform, EPhysicsSummonerSourceType SourceType);

	void ResetActors(bool bForceReset);
	void ResetActorsFromLevelStreaming();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelInteractableActorManager">();
	}
	static class UMarvelInteractableActorManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelInteractableActorManager>();
	}
};

// Class Marvel.MarvelKnockBackAbility
// 0x0BE8 (0x1CE0 - 0x10F8)
class UMarvelKnockBackAbility final : public UMarvelEffectGameplayAbility
{
public:
	bool                                          IsPulling;                                         // 0x10F8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F9[0x7];                                     // 0x10F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FEffectLogicKnockBack                  KnockBackLogic;                                    // 0x1100(0x0028)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	struct FDashAbilityInfo                       DashInfo;                                          // 0x1128(0x0BA8)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class UPrimitiveComponent>> BehitComponents;                                   // 0x1CD0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	void OnCharacterHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnDashFinish(EDashStopReason Reason);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelKnockBackAbility">();
	}
	static class UMarvelKnockBackAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelKnockBackAbility>();
	}
};

// Class Marvel.MarvelKnockUpAbility
// 0x0CA0 (0x1D98 - 0x10F8)
class UMarvelKnockUpAbility : public UMarvelEffectGameplayAbility
{
public:
	EEffectForceMoveType                          MoveType;                                          // 0x10F8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10F9[0x7];                                     // 0x10F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPhysicForceMove                       PhysicKnockUp;                                     // 0x1100(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FDashForceMove                         DashForceMove;                                     // 0x1150(0x0BD0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bEnableVisualLoggerDebug;                          // 0x1D20(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseServerKnockDir;                                // 0x1D21(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D22[0x6];                                     // 0x1D22(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RepKnockDir;                                       // 0x1D28(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAbilityTask_Dash*                DashTask;                                          // 0x1D40(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelBaseCharacter*                   OwnerChar;                                         // 0x1D48(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ASummonedCharacterBase*                 OwnerSummoned;                                     // 0x1D50(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LaunchVelocityInUse;                               // 0x1D58(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CacheGravityRate;                                  // 0x1D70(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CacheAirControl;                                   // 0x1D74(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bInPhysicKnockUp;                                  // 0x1D78(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bAlreadyEnd;                                       // 0x1D79(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D7A[0x1E];                                    // 0x1D7A(0x001E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	struct FVector CalcKnockUpDir();
	void CharacterLanded(const struct FHitResult& HitResult);
	struct FForceMoveBaseConfig GetForceMoveBaseConfig();
	class AMarvelBaseCharacter* GetOwnerChar();
	class ASummonedCharacterBase* GetOwnerSummoned();
	bool IsCharacterBlocked(const struct FHitResult& Hit);
	void OnActorHit(class AActor* SelfActor, class AActor* OtherActor, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnDashFinish(EDashStopReason Reason);
	void OnKnockUped(class AMarvelBaseCharacter* Owner, class AActor* Causer);
	void OnKnockUpEnded(class AMarvelBaseCharacter* Owner, class AActor* Causer);
	void OnMovementModeChanged(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);
	void OnTimeToListenMovementModeChanged();
	struct FVector PreCalcKnockUpDir();

	bool IsDashMove() const;
	bool IsOnceLaunch() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelKnockUpAbility">();
	}
	static class UMarvelKnockUpAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelKnockUpAbility>();
	}
};

// Class Marvel.MarvelLevelOptimizationManager
// 0x0048 (0x0080 - 0x0038)
class UMarvelLevelOptimizationManager final : public UWorldSubsystem
{
public:
	uint8                                         Pad_38[0x48];                                      // 0x0038(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelLevelOptimizationManager* GetLevelOptimizationManager(const class UObject* WorldContextObject);

	void RegisterTickFunction();
	bool RegisterToTick(TScriptInterface<class ILevelComponentOptimizationInterface> TickInterface);
	void UnRegisterToTick(TScriptInterface<class ILevelComponentOptimizationInterface> TickInterface);

	bool ContainsTick(TScriptInterface<class ILevelComponentOptimizationInterface> TickInterface) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelLevelOptimizationManager">();
	}
	static class UMarvelLevelOptimizationManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelLevelOptimizationManager>();
	}
};

// Class Marvel.GamepadSenExponentialCurveEquation
// 0x0010 (0x0080 - 0x0070)
class UGamepadSenExponentialCurveEquation final : public UMarvelCurveEquations
{
public:
	float                                         Exponent;                                          // 0x0070(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ExponentialCoefficients;                           // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinDeadZone;                                       // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxDeadZone;                                       // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	float GetCoefficientValue() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GamepadSenExponentialCurveEquation">();
	}
	static class UGamepadSenExponentialCurveEquation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGamepadSenExponentialCurveEquation>();
	}
};

// Class Marvel.MarvelBaseCharacterAnimMetaData
// 0x0080 (0x0150 - 0x00D0)
class UMarvelBaseCharacterAnimMetaData final : public UCharacterAnimMetaData
{
public:
	TSoftClassPtr<class UClass>                   CharacterClass;                                    // 0x00D0(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   ChildActorClass;                                   // 0x0100(0x0030)(Edit, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMarvelBaseCharacter>       CharacterLoadedClass;                              // 0x0130(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMarvelCharacterChildActor> ChildActorLoadedClass;                             // 0x0138(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMarvelBaseCharacter>       CachedCharacterClass;                              // 0x0140(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TSubclassOf<class AMarvelCharacterChildActor> CachedChildActorClass;                             // 0x0148(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelBaseCharacterAnimMetaData">();
	}
	static class UMarvelBaseCharacterAnimMetaData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelBaseCharacterAnimMetaData>();
	}
};

// Class Marvel.MarvelMoveToAbility
// 0x1B88 (0x2C80 - 0x10F8)
class UMarvelMoveToAbility : public UMarvelEffectGameplayAbility
{
public:
	EMoveToAbilityTargetType                      TargetType;                                        // 0x10F8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10F9[0x7];                                     // 0x10F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LocationOffset;                                    // 0x1100(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MoveDuration;                                      // 0x1118(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bStopIfIsolated;                                   // 0x111C(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bStopIfBlocked;                                    // 0x111D(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_111E[0x2];                                     // 0x111E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             TraceContext;                                      // 0x1120(0x0F90)(Edit, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FDashAbilityInfo                       DashInfo;                                          // 0x20B0(0x0BA8)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FVector                                TargetLocation;                                    // 0x2C58(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAbilityTask_Dash*                DashTask;                                          // 0x2C70(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C78[0x8];                                     // 0x2C78(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void K2_OnMoveCanceled();
	void K2_OnMoveFinished();
	void OnDashFinish(EDashStopReason Reason);
	void OnMoveCanceled();
	void OnMoveFinished();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelMoveToAbility">();
	}
	static class UMarvelMoveToAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelMoveToAbility>();
	}
};

// Class Marvel.MarvelMultiCapsuleComponent
// 0x0000 (0x0890 - 0x0890)
class UMarvelMultiCapsuleComponent final : public UMarvelBaseCapsuleComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelMultiCapsuleComponent">();
	}
	static class UMarvelMultiCapsuleComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelMultiCapsuleComponent>();
	}
};

// Class Marvel.MarvelMusicItem
// 0x0050 (0x0088 - 0x0038)
class UMarvelMusicItem final : public UDataAsset
{
public:
	class UAkAudioEvent*                          Event;                                             // 0x0038(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UAkStateValue*>                  StateValues;                                       // 0x0040(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         CommonStates;                                      // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UAkSwitchValue*>                 Switches;                                          // 0x0058(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UAkTrigger*>                     Triggers;                                          // 0x0068(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bUseSilenceItem;                                   // 0x0078(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Priority;                                          // 0x007C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMusicGroupType                               MusicGroup;                                        // 0x0080(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0x7];                                       // 0x0081(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelMusicItem">();
	}
	static class UMarvelMusicItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelMusicItem>();
	}
};

// Class Marvel.MarvelNetReplayStreamingSubsystem
// 0x0080 (0x00B8 - 0x0038)
class UMarvelNetReplayStreamingSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_38[0x30];                                      // 0x0038(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UNetConnection*, struct FMarvelReplayStreamingInfo> ReplayConnections;                                 // 0x0068(0x0050)(NativeAccessSpecifierPublic)

public:
	static class UMarvelNetReplayStreamingSubsystem* Get(const class UObject* WCO);

	class ULocalPlayer* GetCurrentLocalPlayer() const;
	class APlayerController* GetCurrentPlayerController() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelNetReplayStreamingSubsystem">();
	}
	static class UMarvelNetReplayStreamingSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelNetReplayStreamingSubsystem>();
	}
};

// Class Marvel.MarvelNeutralActor
// 0x0FF0 (0x14A0 - 0x04B0)
class AMarvelNeutralActor : public AMarvelActorBase
{
public:
	uint8                                         Pad_4B0[0x30];                                     // 0x04B0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UTeamComponent*                         TeamComponent;                                     // 0x04E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x04E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x04F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4F8[0x8];                                      // 0x04F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             TraceContext;                                      // 0x0500(0x0F90)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UReactivePropertyComponent*             ReactivePropertyComp;                              // 0x1490(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1498[0x8];                                     // 0x1498(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelNeutralActor">();
	}
	static class AMarvelNeutralActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelNeutralActor>();
	}
};

// Class Marvel.MarvelOnlineSession
// 0x0038 (0x0068 - 0x0030)
class UMarvelOnlineSession final : public UOnlineSession
{
public:
	TMulticastInlineDelegate<void(class UWorld* World, class UNetDriver* NetDriver)> NetworkDisconnectDispatcher;                       // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x28];                                      // 0x0040(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetHandleDisconnectDelayInterval(float Interval);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelOnlineSession">();
	}
	static class UMarvelOnlineSession* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelOnlineSession>();
	}
};

// Class Marvel.MarvelPlayerViewManager
// 0x0180 (0x01F0 - 0x0070)
class UMarvelPlayerViewManager final : public UWorldSingleton
{
public:
	TMulticastInlineDelegate<void()>              OnActiveViewTargetInputTypeChanged;                // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x160];                                     // 0x0080(0x0160)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelPlayerView*                      MainPlayerView;                                    // 0x01E0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelPlayerView*                      KillcamPlayerView;                                 // 0x01E8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UMarvelPlayerViewManager* Get(const class UObject* WCO);

	void BroadcastViewTargetInputTypeWhenChanged();
	Marvel::EInputType GetActiveViewTargetInputType();
	class UMarvelPlayerView* GetPlayerView(const class UObject* WCO, EGetPlayerView InGetPlayerView);
	void ReplayStateChanged(EMarvelReplayState NewState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPlayerViewManager">();
	}
	static class UMarvelPlayerViewManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelPlayerViewManager>();
	}
};

// Class Marvel.MarvelPlayerViewFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UMarvelPlayerViewFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void BindActiveViewTargetInputType(TDelegate<void()> InputTypeChagnedCallback);
	static void ClientBindPlayerViewSide(struct FDeclarationHolder& Holder, class AActor* InActor, TDelegate<void(EClientPlayerViewSide InViewSide)> InDelegate);
	static void ClientBindViewingCharacter(struct FDeclarationHolder& Holder, class UObject* WCO, TDelegate<void(class AActor* InActor)> InDelegate, EGetPlayerView GetPlayerView);
	static void ClientBindViewTarget(struct FDeclarationHolder& Holder, class UObject* WCO, TDelegate<void(class AActor* InActor)> InDelegate, EGetPlayerView GetPlayerView);
	static EClientPlayerViewSide ClientGetPlayerViewSide(class AActor* InActor);
	static EClientPlayerViewSide ClientGetSideToLocal(class AActor* InActor);
	static class AActor* ClientGetViewTarget(class UObject* WCO, EGetPlayerView GetPlayerView);
	static bool ClientIsPlayerViewAlly(class AActor* InActor);
	static bool ClientIsPlayerViewEnemy(class AActor* InActor);
	static bool ClientIsPlayerViewSelf(class AActor* InActor);
	static void ClientSetComponentOnlyVisibleInViewerSide(struct FDeclarationHolder& Holder, class USceneComponent* InSceneComponent, const TArray<EClientPlayerViewSide>& InVisibleSides, class AActor* CheckActor);
	static void ClientSetViewTarget(class AController* Controller, class AActor* InViewTarget, float BlendTime, EViewTargetBlendFunction BlendFunc, float BlendExp, bool bLockOutgoing);
	static void ClientSetViewTargetWithParams(class AController* Controller, class AActor* InViewTarget, const struct FViewTargetTransitionParams& Params_0);
	static Marvel::EInputType GetActiveViewTargetInputType(class UObject* WCO);
	static EPlayerViewMode GetViewMode(const class UObject* WCO, EGetPlayerView GetPlayerView);
	static bool IsInstigatorOfViewTarget(class AActor* InActor);
	static void UnbindActiveViewTargetInputType(TDelegate<void()> InputTypeChagnedCallback);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPlayerViewFunctionLibrary">();
	}
	static class UMarvelPlayerViewFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelPlayerViewFunctionLibrary>();
	}
};

// Class Marvel.MarvelPresetDestructionActor
// 0x1960 (0x1E10 - 0x04B0)
class AMarvelPresetDestructionActor final : public AMarvelActorBase
{
public:
	uint8                                         Pad_4B0[0x38];                                     // 0x04B0(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(uint8 TipID)>   OnMarvelPresetDestructionTipDispatcher;            // 0x04E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float CurrentHp, float MaxHp)> OnMarvelPresetDestructionDamageDelegate;           // 0x04F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 VolumeID, float Damage, float CurrentHp, float MaxHp)> OnCmdPredesDamageDetails;                          // 0x0508(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	bool                                          bIsReconSetLevel;                                  // 0x0518(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_519[0x3];                                      // 0x0519(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AnimationWorldTime;                                // 0x051C(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AnimationLevel;                                    // 0x0520(0x000C)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageMultiplier;                                  // 0x052C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_530[0x18];                                     // 0x0530(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class AVirtualActorManager*                   VirtualActorManager;                               // 0x0548(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TestLevelToShow;                                   // 0x0550(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoRecoverDelay;                                  // 0x055C(0x0004)(Edit, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ResetNotify;                                       // 0x0560(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugDraw;                                        // 0x0561(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_562[0x6];                                      // 0x0562(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarvelPresetDesRelationItem>   CurrentRelationActors;                             // 0x0568(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<class FName, struct FMarvelPresetDestructionParam> DestructionParams;                                 // 0x0578(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C8[0x8];                                      // 0x05C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTraceContext             TraceContext;                                      // 0x05D0(0x0F90)(BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bOverride_ControlPointAudio;                       // 0x1560(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1561[0x7];                                     // 0x1561(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AkHitControlPointAudioEvent;                       // 0x1568(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAnimationCollision;                            // 0x1570(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseFramingCreateBodies;                           // 0x1571(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1572[0x2];                                     // 0x1572(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PredesDeepSquezzThreshold;                         // 0x1574(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 DestructionID;                                     // 0x1578(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USkeletalMeshComponent*                 MeshComponent;                                     // 0x1588(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, class UDestructionVolumeComponent*> VolumeMap;                                         // 0x1590(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMap<int32, class UDestructionVolumeMesh*>    VolumeMeshMap;                                     // 0x15E0(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         InnerSize;                                         // 0x1630(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OuterSize;                                         // 0x1634(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayerAttackInterval;                              // 0x1638(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_163C[0x54];                                    // 0x163C(0x0054)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class FName NewLevel)> OnLevelAnimEnded;                                  // 0x1690(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName NewLevel)> OnLevelAnimBegin;                                  // 0x16A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class FName NewLevel)> OnLevelChange;                                     // 0x16B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_16C0[0x18];                                    // 0x16C0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UGameplayAbility>>   OwningAbilities;                                   // 0x16D8(0x0010)(BlueprintVisible, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	class USceneComponent*                        PreviewMeshComponent;                              // 0x16E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16F0[0x20];                                    // 0x16F0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelPresetDestructionParam          CurrentParam;                                      // 0x1710(0x00D8)(NativeAccessSpecifierPublic)
	uint8                                         Pad_17E8[0x168];                                   // 0x17E8(0x0168)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AActor*>                         RelationActorWhiteList;                            // 0x1950(0x0010)(Net, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          RelationVisWhiteListTrigger;                       // 0x1960(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1961[0xA7];                                    // 0x1961(0x00A7)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 AliveStage;                                        // 0x1A08(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A18[0x98];                                    // 0x1A18(0x0098)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, class UStaticMeshComponent*> StaticMeshMap;                                     // 0x1AB0(0x0050)(ExportObject, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B00[0x8];                                     // 0x1B00(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AController*                            LastEventInstigator;                               // 0x1B08(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarvelWidgetComponent*                 WidgetComponent;                                   // 0x1B10(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMarvelWidgetComponent*                 WidgetComponent_HP;                                // 0x1B18(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B20[0x18];                                    // 0x1B20(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class APhysicsSummoner*>               EdgeSummoners;                                     // 0x1B38(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class APhysicsSummoner*>               AnimSummonerActors;                                // 0x1B48(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class APhysicsSummoner*>               NotifySummonerActors;                              // 0x1B58(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class APhysicsSummoner*>               AttackSummonerActors;                              // 0x1B68(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B78[0x50];                                    // 0x1B78(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class FName>                             BoxBlackList;                                      // 0x1BC8(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TSet<class FName>                             MeshBlackList;                                     // 0x1C18(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	float                                         EffectPerDamage;                                   // 0x1C68(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C6C[0x4];                                     // 0x1C6C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinEffectInterval;                                 // 0x1C70(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C74[0x4];                                     // 0x1C74(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PointSelectionNum;                                 // 0x1C78(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C7C[0x4];                                     // 0x1C7C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UNiagaraSystem*>                 CollapseEffect;                                    // 0x1C80(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C90[0x18];                                    // 0x1C90(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelSampleBoxComponent*              SampleBoxComponent;                                // 0x1CA8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CB0[0x10];                                    // 0x1CB0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 LastAttacker;                                      // 0x1CC0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class APhysicsSummoner*>  AutoTransformSummoners;                            // 0x1CC8(0x0050)(NativeAccessSpecifierPublic)
	TArray<class APhysicsSummoner*>               AutoTransformArray;                                // 0x1D18(0x0010)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	float                                         RecordPhysicsGap;                                  // 0x1D28(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RecordPlayedTime;                                  // 0x1D2C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, bool>                       AlwaysUseMeshs;                                    // 0x1D30(0x0050)(NativeAccessSpecifierPublic)
	class FString                                 AlwaysUseSubstring;                                // 0x1D80(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAliveInPreparing;                                 // 0x1D90(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D91[0x3];                                     // 0x1D91(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MontageSummonerSpawnMinGap;                        // 0x1D94(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MontageSummonerSpawnMaxGap;                        // 0x1D98(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D9C[0x1C];                                    // 0x1D9C(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FMarvelControlPointEffects> ControlPointFXInfo;                                // 0x1DB8(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EPhysSummonerRunType                          PhysSummonerType;                                  // 0x1E08(0x0001)(Edit, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsLevelEventAdd;                                  // 0x1E09(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E0A[0x6];                                     // 0x1E0A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ActivateAbilityWithId(int32 InAbilityId);
	void ApplyDestructibleDamage(class FName SocketName, float DestructibleDamage, float DestructibleRadius, float DestructibleImpluse, TSubclassOf<class UDamageType> DamageType);
	void ApplyGameplayBuffSpec(int32 BuffSpecId, class FName SocketName, float Damage);
	void ClientPlaySummonerSpawnFX(const TArray<struct FVector>& InLocationList, class UFXSystemAsset* InFXAsset);
	void ExecuteHitImpactCue(class AController* InSource, class AActor* InSourceAvatar, const struct FHitResult& HitResult);
	void ForRelationDamageRep();
	class FName GetCurLevel();
	class FName GetNextLevel();
	void InitState();
	void JumpToLevel(class FName Level);
	void NotifyDelaySpawnFunc();
	void OnAnimationEnded();
	void OnDelayFinished();
	void OnMatchStateChanged(EMatchState MatchState);
	void OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void OnReconnectChanged(class AMarvelPlayerController* Param, int32 UID);
	void OnRep_AutoRecoverDelay();
	void OnRep_AutoTransformArray();
	void OnRep_RelationVisWhiteListTrigger();
	void OnRep_ResetNotify();
	void OnSkeletalMeshHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnSkeletalMeshOverlapBegin(class UPrimitiveComponent* OverlappedComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, int32 OtherBodyIndex, bool bFromSweep, const struct FHitResult& SweepResult);
	void OnVolumeTakeDamage(class UDestructionVolumeComponent* Volume, class AActor* InSourceAvatar, const float Damage);
	void ReadyToLevelAnimation();
	void ReplaceMesh(class FName InLevel, bool bIsVisible, bool bIsCollideable);
	void Reset();
	void SetCurrentStage(const class FString& StageName);
	void ShowAllLevel();
	void ShowDefaultLevel();
	void ShowLevel();
	void SimulateApplyDamageOnVolumes(float InDamage, float Radius);
	void SpawnScope(int32 ScopeId, const struct FMarvelAbilitySocketInfo& SocketInfo);
	void StartCurrentLevelAnimation();
	void StopJudgeActorDamage();
	void TryCoverTransformArray();

	struct FGameplayTag GetHitImpactCueTag(const struct FHitResult& HitResult) const;
	struct FGameplayTag GetPhysicalMaterialImpactCueTag() const;
	bool IsDestructing() const;
	bool IsFinal() const;
	bool IsReady() const;
	bool IsReset() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPresetDestructionActor">();
	}
	static class AMarvelPresetDestructionActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelPresetDestructionActor>();
	}
};

// Class Marvel.MarvelProfilerFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UMarvelProfilerFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	bool StartResampleStats(class UWorld* World, const TArray<class FName>& EnabledNames, float ResampleRate, bool bWriteFrameMS);
	void StopResampleStats();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelProfilerFunctionLibrary">();
	}
	static class UMarvelProfilerFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelProfilerFunctionLibrary>();
	}
};

// Class Marvel.MarvelReflexReceiverComponent
// 0x02F0 (0x03E0 - 0x00F0)
class UMarvelReflexReceiverComponent : public UActorComponent
{
public:
	bool                                          bOccupySource;                                     // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EReflexDirType                                ReflexDirType;                                     // 0x00F1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F2[0x2];                                       // 0x00F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MinSpread;                                         // 0x00F4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpread;                                         // 0x00F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  BeHitDisplayCues;                                  // 0x0100(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ReflectDisplayCues;                                // 0x0168(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	int32                                         ReferenceAbilityID;                                // 0x01D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageLossPercentage;                              // 0x01D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FMarvelReflexRecvInfo& RecvInfo)> OnBeforeReflectDelegate;                           // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void(struct FMarvelReflexRecvInfo& RecvInfo, struct FVector& ReflectLocation, struct FVector& ReflectDir)> OnAfterReflectedDelegate;                          // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FMarvelReflexRecvInfo                  AmmoReflexRecvInfo;                                // 0x01F8(0x01A0)(Net, Transient, RepNotify, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_398[0x48];                                     // 0x0398(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeHitByProjectile(class AMarvelAbilityTargetActor_Projectile* Projectile, const struct FHitResult& HitResult, bool* bShouldStopProjectile, bool bFilterResult);
	bool BeHitByTrace(const struct FMarvelReflexRecvInfo& RecvInfo);
	struct FVector CalculateReflectDir(const struct FMarvelReflexRecvInfo& RecvInfo);
	struct FVector CalculateReflectStartPoint(const struct FMarvelReflexRecvInfo& RecvInfo);
	bool CanBeHitByTrace(const struct FMarvelReflexRecvInfo& RecvInfo);
	bool CanReflect(const struct FMarvelReflexRecvInfo& RecvInfo);
	void OnRep_AmmoReflexRecvInfo();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelReflexReceiverComponent">();
	}
	static class UMarvelReflexReceiverComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelReflexReceiverComponent>();
	}
};

// Class Marvel.MarvelResurrectionAbility
// 0x00C8 (0x11C0 - 0x10F8)
class UMarvelResurrectionAbility final : public UMarvelEffectGameplayAbility
{
public:
	int32                                         SourceAbilityID;                                   // 0x10F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDelayResurrect;                                   // 0x10FC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10FD[0x3];                                     // 0x10FD(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ResurrectionTime;                                  // 0x1100(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EResurrectionTransformType                    TransformType;                                     // 0x1104(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1105[0xB];                                     // 0x1105(0x000B)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             RelativeTransform;                                 // 0x1110(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCameraInterp;                                     // 0x1170(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1171[0x7];                                     // 0x1171(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraInterp*                          CameraInterpAsset;                                 // 0x1178(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bResurrectInChaosAndReduceHealth;                  // 0x1180(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bExitReplayWhenActive;                             // 0x1181(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1182[0x6];                                     // 0x1182(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           ResurrectionTimerHandle;                           // 0x1188(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11A0[0x20];                                    // 0x11A0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void K2_EndResurrection();
	void K2_StartResurrection();
	void SetCustomCharacterTransform(struct FTransform* OutTransform);
	void StopKillCam();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelResurrectionAbility">();
	}
	static class UMarvelResurrectionAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelResurrectionAbility>();
	}
};

// Class Marvel.MarvelRichTextBlock
// 0x0210 (0x0B20 - 0x0910)
class UMarvelRichTextBlock final : public URichTextBlock
{
public:
	ETextCaseRule                                 TextCaseRule;                                      // 0x0908(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Indentation;                                       // 0x0909(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IndentationForeign;                                // 0x090A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ParagraphAutomaticBlankLines;                      // 0x090B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_90C[0x4];                                      // 0x090C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CacheOriginText;                                   // 0x0910(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FText                                   SourceText;                                        // 0x0928(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FKeyWidgetStyle                        KeyWidgetStyle;                                    // 0x0940(0x00D4)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_A14[0x4];                                      // 0x0A14(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class FString>            TextArgs;                                          // 0x0A18(0x0050)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TMap<class FString, class FString>            TextArgs_InGamePad;                                // 0x0A68(0x0050)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class UInputAction*                           InputAction;                                       // 0x0AB8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AC0[0x60];                                     // 0x0AC0(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddTextArgs(const class FString& keyStr, const class FString& valueStr);
	bool GetIsEllipsised();
	void NativeInputTypeUpdate(Marvel::EInputType OldInputType, Marvel::EInputType CurrentInputType);
	void SetLocalizationText(const class FString& Namespace, const class FString& Key, const TMap<class FString, class FText>& Args);
	void SetRawText(const class FString& InText);
	void SetSourceText(const class FText& InText);
	void SetTextCaseRule(ETextCaseRule InCaseRule);

	class FText GetSourceText() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelRichTextBlock">();
	}
	static class UMarvelRichTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelRichTextBlock>();
	}
};

// Class Marvel.MarvelRollbackActorInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelRollbackActorInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelRollbackActorInterface">();
	}
	static class IMarvelRollbackActorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelRollbackActorInterface>();
	}
};

// Class Marvel.MarvelRopeComponent
// 0x0020 (0x0AB0 - 0x0A90)
class UMarvelRopeComponent final : public UCableComponent
{
public:
	bool                                          bUseHitNotify;                                     // 0x0A90(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A91[0x3];                                      // 0x0A91(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelRopePhysicsParams               PhysParam;                                         // 0x0A94(0x0014)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA8[0x8];                                      // 0x0AA8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelRopeComponent">();
	}
	static class UMarvelRopeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelRopeComponent>();
	}
};

// Class Marvel.MarvelScalabilitySettings
// 0x0000 (0x0030 - 0x0030)
class UMarvelScalabilitySettings final : public UBlueprintFunctionLibrary
{
public:
	static bool ChangeWindowMode(class FString* ResolutionStr, const EWindowMode WindowMode);
	static bool IsCurrentResolution(const class FString& InResolution);
	static void OnGraphicsQualityLevelChanged(const EMarvelGraphicsQualityType InQualityType, const int32 InQualityLevelIndex);
	static void OnGraphicsResolutionChanged(const class FString& InResolution);
	static void OnGraphicsWindowModeChanged(const int32 InWindowModeIndex);
	static bool ParseResolution(const class FString& InResolution, struct FIntPoint* OutDimentions);
	static int32 QueryGraphicsQualityByType(const EMarvelGraphicsQualityType InQualityType);
	static class FString WindowModeToStr(const EWindowMode WindowMode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelScalabilitySettings">();
	}
	static class UMarvelScalabilitySettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelScalabilitySettings>();
	}
};

// Class Marvel.MarvelSceneBrokenLibrary
// 0x0000 (0x0030 - 0x0030)
class UMarvelSceneBrokenLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSceneBrokenLibrary">();
	}
	static class UMarvelSceneBrokenLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSceneBrokenLibrary>();
	}
};

// Class Marvel.MarvelSceneHittableActorInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelSceneHittableActorInterface final : public IInterface
{
public:
	void HitByAbility(class AActor* AbilityOwner, float InDamage, const struct FHitResult& HitInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSceneHittableActorInterface">();
	}
	static class IMarvelSceneHittableActorInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelSceneHittableActorInterface>();
	}
};

// Class Marvel.MarvelSelectTargetConfig
// 0x1198 (0x1230 - 0x0098)
#pragma pack(push, 0x1)
class alignas(0x10) UMarvelSelectTargetConfig : public UMarvelAbilityConfig
{
public:
	uint8                                         Pad_98[0x8];                                       // 0x0098(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSelectTaskParam                       SelectTaskParam;                                   // 0x00A0(0x10A0)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)
	float                                         TraceRate;                                         // 0x1140(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDiableTickDuringCooldown;                         // 0x1144(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1145[0x3];                                     // 0x1145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           AbilityCoolDownTag;                                // 0x1148(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1154[0x4];                                     // 0x1154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelGameplayTagRequirements         TargetTagRequirement;                              // 0x1158(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSelectTargetConfig">();
	}
	static class UMarvelSelectTargetConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSelectTargetConfig>();
	}
};
#pragma pack(pop)

// Class Marvel.MarvelSelectTargetAbility
// 0x01C8 (0x2750 - 0x2588)
class UMarvelSelectTargetAbility : public UAbility_108
{
public:
	class UMarvelSelectTargetConfig*              SelectTargetConfig;                                // 0x2588(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelBaseCharacter*                   MyCharacter;                                       // 0x2590(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDisableTickDuringCoolDown;                        // 0x2598(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2599[0x3];                                     // 0x2599(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SelectTargetScopeID;                               // 0x259C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TraceRate;                                         // 0x25A0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TraceRateCounter;                                  // 0x25A4(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                  ViewportTarget;                                    // 0x25A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FHitResult                             ViewportHitResult;                                 // 0x25B0(0x0170)(BlueprintVisible, BlueprintReadOnly, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UMarvelAbilityTask_SelectTarget*        SelectTask;                                        // 0x2720(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbilityTask_WaitGameplayTagRemoved*    WaitCoolDownEndTask;                               // 0x2728(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           ReEnableTickHandle;                                // 0x2730(0x0018)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bStopTrace;                                        // 0x2748(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2749[0x7];                                     // 0x2749(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool CheckViewportTarget(const class AActor* InTarget);
	void DisableAbilityTick();
	class AActor* DoOneTrace();
	void EnableAutonomousProxyAbilityTick();
	class AActor* GetProperTargetActor(TArray<class AActor*>* TargetActors);
	void OnCoolDownEnd();
	void OnTraceViewportTarget();
	void ResetViewportTarget();
	bool ShouldStopTrace();
	void TraceViewportTarget();

	struct FPortalSegments GetTargetPortalSegments() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSelectTargetAbility">();
	}
	static class UMarvelSelectTargetAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSelectTargetAbility>();
	}
};

// Class Marvel.UISettingEntryOptionsGenerator
// 0x0000 (0x0030 - 0x0030)
class UUISettingEntryOptionsGenerator : public UObject
{
public:
	TMap<int32, class FText> BP_Gen(class UObject* Object, const class FString& SettingKey, const TMap<int32, class FText>& OPTIONS);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UISettingEntryOptionsGenerator">();
	}
	static class UUISettingEntryOptionsGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUISettingEntryOptionsGenerator>();
	}
};

// Class Marvel.UISettingDefaultValueGenerator
// 0x0000 (0x0030 - 0x0030)
class UUISettingDefaultValueGenerator : public UObject
{
public:
	float BP_Gen(class UObject* Object, const class FString& SettingKey, const struct FUISettingEntryValueRange& ValueRange, const class FText& PlatformName, int32 Level);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UISettingDefaultValueGenerator">();
	}
	static class UUISettingDefaultValueGenerator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUISettingDefaultValueGenerator>();
	}
};

// Class Marvel.AnimNotifyState_TimedChaosBatchParticleEffect
// 0x0080 (0x00B8 - 0x0038)
class UAnimNotifyState_TimedChaosBatchParticleEffect final : public UAnimNotifyState
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftObjectPtr<class UNiagaraSystem>          Template;                                          // 0x0040(0x0030)(Edit, BlueprintVisible, BlueprintReadOnly, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PreviewSocketName;                                 // 0x0070(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           TargetSocketNames;                                 // 0x0080(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<struct FChaosDesEffectParam>           CombineEffectParams;                               // 0x0090(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A0[0x10];                                      // 0x00A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	EChaosParticleAnimNotifyType                  ChaosParticleAnimNotifyType;                       // 0x00B0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotifyState_TimedChaosBatchParticleEffect">();
	}
	static class UAnimNotifyState_TimedChaosBatchParticleEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotifyState_TimedChaosBatchParticleEffect>();
	}
};

// Class Marvel.UISettingEntrySettingHandler
// 0x0000 (0x0030 - 0x0030)
class UUISettingEntrySettingHandler : public UObject
{
public:
	class FString BP_GetCurrentStrValue(class UObject* Object, const class FString& SettingKey, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& OPTIONS);
	float BP_GetCurrentValue(class UObject* Object, const class FString& SettingKey, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& OPTIONS);
	float BP_GetDefaultValue(class UObject* Object, const class FString& SettingKey, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& OPTIONS);
	float BP_GetRevertValue(class UObject* Object, const class FString& SettingKey, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& OPTIONS);
	bool BP_IsShowStar(class UObject* Object, const class FString& SettingKey, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& OPTIONS);
	void BP_OnApply(class UObject* Object, const class FString& SettingKey, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& OPTIONS, float Value);
	TMap<class FString, int32> BP_OnBtnClicked(class UObject* Object, const class FString& SettingKey, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& OPTIONS, float Value, const TMap<class FString, int32>& CurrentTags);
	TMap<class FString, int32> BP_OnChanged(class UObject* Object, const class FString& SettingKey, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& OPTIONS, float Value, const TMap<class FString, int32>& CurrentTags);
	TMap<class FString, int32> BP_OnStrValueChanged(class UObject* Object, const class FString& SettingKey, const TMap<class FString, class FString>& Params_0, const TMap<int32, class FText>& OPTIONS, const class FString& Value, const TMap<class FString, int32>& CurrentTags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UISettingEntrySettingHandler">();
	}
	static class UUISettingEntrySettingHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUISettingEntrySettingHandler>();
	}
};

// Class Marvel.MarvelShellMeshComponent
// 0x0110 (0x0200 - 0x00F0)
class UMarvelShellMeshComponent final : public UActorComponent
{
public:
	struct FMarvelShellParameters                 ShellParameters;                                   // 0x00F0(0x00E0)(Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FMarvelShellMeshPart>           ShellMeshParts;                                    // 0x01D0(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class USceneComponent>> AutoShellMeshSources;                              // 0x01E0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<class UNiagaraComponent*>              HiddenNiagaraComponents;                           // 0x01F0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static void MarkSkipShellMesh(class USceneComponent* InComponent, bool bSkip);
	static bool ShouldSkipShellMesh(class USceneComponent* InComponent);
	static bool ShouldSkipShellMeshPart(class USkinnedMeshComponent* InMeshComponent);

	bool CreateShellMeshPart(class USkinnedMeshComponent* InSourceComponent);
	TArray<struct FMarvelShellMeshPart> GetShellMeshParts();
	void OnSourceComponentChildAttached(class USceneComponent* InSourceComponent, class USceneComponent* InChildComponent);
	void OnSourceComponentChildDetached(class USceneComponent* InSourceComponent, class USceneComponent* InChildComponent);
	bool RemoveShellMeshPart(class USkinnedMeshComponent* InSourceComponent);
	void SetAttachedNiagaraHidden(class USceneComponent* InSourceComponent, bool bNewHidden);
	void SetEnableStencilTeamOutline(bool bNewEnable);
	void SetScalarParameterValueOnMaterials(const class FName ParameterName, const float ParameterValue);
	void SetShellAutoPropagate(class USceneComponent* InSourceComponent, bool bAutoPropagate);
	void SetShellParameters(class UMaterialInterface* InMaterial, class UMaterialInterface* InClothMaterial, const TArray<class FName>& TextureParamNames, int32 Visibility);
	void SetShellSectionMaterialsParameter(const TArray<struct FMarvelShellSectionMaterialParam>& InSectionMaterials);
	void SetShellSyncSourceHidden(bool bShouldSyncHidden);
	void SetSyncSourceComponentHidden(class USkinnedMeshComponent* InSourceComponent, bool bShouldSyncHidden);
	void SetVectorParameterValueOnMaterials(const class FName ParameterName, const struct FVector& ParameterValue);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelShellMeshComponent">();
	}
	static class UMarvelShellMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelShellMeshComponent>();
	}
};

// Class Marvel.MarvelShellMeshInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelShellMeshInterface final : public IInterface
{
public:
	class UMarvelShellMeshComponent* CreateSectionSpecificShellMesh(int32 SourceFilter, const TMap<int32, class UMaterialInterface*>& InSectionMaterials, class UMaterialInterface* InDefaultMaterial, class UMaterialInterface* InClothMaterial);
	void MarkSkipMaterialOnShellMesh(class USkinnedMeshComponent* InSourceComponent, int32 MaterialID, int32 LODIndex, bool bSkip);
	void RemoveShellMeshComponent(class UMarvelShellMeshComponent* InTargetComponent);
	bool ShouldSkipMaterialOnShellMesh(class USkinnedMeshComponent* InSourceComponent, int32 MaterialID, int32 LODIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelShellMeshInterface">();
	}
	static class IMarvelShellMeshInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelShellMeshInterface>();
	}
};

// Class Marvel.MarvelShieldReducedAbility
// 0x0000 (0x0E60 - 0x0E60)
class UMarvelShieldReducedAbility final : public UMarvelAttrReduceRegenAbility
{
public:
	void OnDamageTaken(class AActor* SourceAvatar, class AActor* TargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelShieldReducedAbility">();
	}
	static class UMarvelShieldReducedAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelShieldReducedAbility>();
	}
};

// Class Marvel.MarvelShieldRegenEffect
// 0x0090 (0x1410 - 0x1380)
class UMarvelShieldRegenEffect final : public UGameplayEffect
{
public:
	uint8                                         Pad_1380[0x90];                                    // 0x1380(0x0090)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelShieldRegenEffect">();
	}
	static class UMarvelShieldRegenEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelShieldRegenEffect>();
	}
};

// Class Marvel.MarvelShowAnimInstance
// 0x0000 (0x0430 - 0x0430)
class UMarvelShowAnimInstance final : public UAnimInstance
{
public:
	void BlueprintPreUpdateAnimation(float DeltaSeconds);
	void BlueprintUnintializeAnimation();
	bool GetLSHoverStandIsPlaying();
	bool IsLSHoverStandPlaying();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelShowAnimInstance">();
	}
	static class UMarvelShowAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelShowAnimInstance>();
	}
};

// Class Marvel.MarvelSimpleCurveViewWidget
// 0x0070 (0x0618 - 0x05A8)
class UMarvelSimpleCurveViewWidget final : public UMarvelUserWidget
{
public:
	struct FCurveBackGroundData                   BackGroundData;                                    // 0x05A8(0x0030)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bShowGrid;                                         // 0x05D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D9[0x3];                                      // 0x05D9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         GridIntervalX;                                     // 0x05DC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridIntervalY;                                     // 0x05E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           GridDrawColor;                                     // 0x05E4(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GridThickness;                                     // 0x05F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelCurveEquations*                  CurveEquations;                                    // 0x05F8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, PersistentInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAntiAliasCurves;                                  // 0x0600(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_601[0x7];                                      // 0x0601(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FCurveViewSublevelData>         CurveSublevelData;                                 // 0x0608(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	struct FVector2D ConvertWidgetSpacePointByVector2D(const struct FVector2D& CurvePoint) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSimpleCurveViewWidget">();
	}
	static class UMarvelSimpleCurveViewWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSimpleCurveViewWidget>();
	}
};

// Class Marvel.MarvelSkillEnergyReduceRegenAbility
// 0x0000 (0x0E60 - 0x0E60)
class UMarvelSkillEnergyReduceRegenAbility final : public UMarvelAttrReduceRegenAbility
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSkillEnergyReduceRegenAbility">();
	}
	static class UMarvelSkillEnergyReduceRegenAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSkillEnergyReduceRegenAbility>();
	}
};

// Class Marvel.MarvelSkillEnergy2ReduceRegenAbility
// 0x0000 (0x0E60 - 0x0E60)
class UMarvelSkillEnergy2ReduceRegenAbility final : public UMarvelAttrReduceRegenAbility
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSkillEnergy2ReduceRegenAbility">();
	}
	static class UMarvelSkillEnergy2ReduceRegenAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSkillEnergy2ReduceRegenAbility>();
	}
};

// Class Marvel.MarvelSkillEnergy3ReduceRegenAbility
// 0x0000 (0x0E60 - 0x0E60)
class UMarvelSkillEnergy3ReduceRegenAbility final : public UMarvelAttrReduceRegenAbility
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSkillEnergy3ReduceRegenAbility">();
	}
	static class UMarvelSkillEnergy3ReduceRegenAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSkillEnergy3ReduceRegenAbility>();
	}
};

// Class Marvel.MarvelSkinComponent
// 0x02A0 (0x0390 - 0x00F0)
class UMarvelSkinComponent final : public UActorComponent
{
public:
	bool                                          bInitialized;                                      // 0x00F0(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F1[0xBF];                                      // 0x00F1(0x00BF)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SculptID;                                          // 0x01B0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B4[0x4];                                      // 0x01B4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<struct FGameplayTag, struct FGameplayTagContainer> SculptSpecialTags;                                 // 0x01B8(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FPredictionSculptData                  AckGoodSculptData;                                 // 0x0208(0x00B0)(Net, Transient, RepNotify, Protected, NativeAccessSpecifierProtected)
	TArray<struct FPredictionSculptData>          PredictionSculptDatas;                             // 0x02B8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           SculptTag;                                         // 0x02C8(0x000C)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D4[0x4];                                      // 0x02D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  SpecialTags;                                       // 0x02D8(0x0068)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_340[0x10];                                     // 0x0340(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 SculptID)> OnMarvelSculptChangedDispatcher;                   // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 SculptID)> OnMarvelSkinInitializedDispatcher;                 // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Owner)> OnMarvelCharSculptChangedDispatcher;               // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 SculptID)> OnMarvelSculptStartChangeDispatcher;               // 0x0380(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	void ForceUseAckGoodSculpt();
	bool GetDefaultSpringArmTransform(struct FTransform* OutTransform);
	void InitSkin();
	void K2_ChangeSculpt(const struct FGameplayTag& InSculptTag, const bool bReInitAttributes);
	void OnRep_SculptData(const struct FPredictionSculptData& OldSculptData);
	void ResetToDefaultSculpt(const bool bReInitAttributes);

	int32 FindSculptIndex(const struct FGameplayTag& InSculptTag) const;
	bool GetAllSculptConfigComponents(TArray<class UMarveSculptConfigComponent*>* SculptConfigs) const;
	class UMarveSculptConfigComponent* GetCurrentSculptConfigComponent() const;
	int32 GetSculptID() const;
	const struct FGameplayTag GetSculptTag() const;
	bool HasPendingSculpt() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSkinComponent">();
	}
	static class UMarvelSkinComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSkinComponent>();
	}
};

// Class Marvel.MarveSculptConfigComponent
// 0x0150 (0x0240 - 0x00F0)
class UMarveSculptConfigComponent final : public UActorComponent
{
public:
	struct FGameplayTag                           TypeTag;                                           // 0x00F0(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  SpecialTags;                                       // 0x0100(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bChangeCapsule;                                    // 0x0168(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_169[0x3];                                      // 0x0169(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CapsuleRadius;                                     // 0x016C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CapsuleHalfHeight;                                 // 0x0170(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangeCameraParam;                                // 0x0174(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_175[0x3];                                      // 0x0175(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TargetArmLength;                                   // 0x0178(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookupArmLength;                                   // 0x017C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LookdownArmLength;                                 // 0x0180(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_184[0x4];                                      // 0x0184(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                LookupCameraOffset;                                // 0x0188(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                LookdownCameraOffset;                              // 0x01A0(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                CollisionCameraOffset;                             // 0x01B8(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                SocketOffset;                                      // 0x01D0(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                TargetOffset;                                      // 0x01E8(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                RelativeLocation;                                  // 0x0200(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangeExtraCameraParam;                           // 0x0218(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_219[0x3];                                      // 0x0219(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CameraLagSpeed;                                    // 0x021C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CameraLagMaxDistance;                              // 0x0220(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FromOriginLagSpeed;                                // 0x0224(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bChangeMovement;                                   // 0x0228(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BrakingFrictionFactor;                             // 0x022C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BrakingDecelerationWalking;                        // 0x0230(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FortStyleTurninPlaceLimitMinOffset_N;              // 0x0234(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FortStyleTurninPlaceLimitMinOffset_C;              // 0x0238(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PerchRadiusThreshold;                              // 0x023C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarveSculptConfigComponent">();
	}
	static class UMarveSculptConfigComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarveSculptConfigComponent>();
	}
};

// Class Marvel.MarvelSkinInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelSkinInterface final : public IInterface
{
public:
	void ChangeMeshRelativeLocation_ThreadSafe(const struct FVector& NewLocation);
	void ChangeMeshRelativeLocationAndRotation(const struct FVector& NewLocation, const struct FRotator& NewRotation);
	void ChangeMeshWorldTransform(const struct FTransform& NewTransform);
	void ClearAnimInstances();
	class UAnimInstance* GetAnimInstance(EMontageCategory MontageCategory);
	struct FTransform GetMeshDefaultRelativeTransform();
	class UMarvelMoveLogicBaseComponent* GetMoveLogicComponent();
	bool HasAnimInstance(EMontageCategory MontageCategory);
	void RestoreMeshDefaultRelativeTransform();
	void SetMoveLogicComponent(class UMarvelMoveLogicBaseComponent* InMoveLogicComponent);
	void UpdateChildActor(TSubclassOf<class AMarvelCharacterChildActor> ChildActorClass, bool bResetCamera);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSkinInterface">();
	}
	static class IMarvelSkinInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelSkinInterface>();
	}
};

// Class Marvel.MarvelSpatialVolumePriorityMgr
// 0x0060 (0x0090 - 0x0030)
class UMarvelSpatialVolumePriorityMgr final : public UObject
{
public:
	TMap<uint64, struct FAudioComInfoForSpatialVolume> AudioComInfoMap;                                   // 0x0030(0x0050)(Transient, NativeAccessSpecifierPublic)
	TArray<TWeakObjectPtr<class AMarvelSpatialAudioVolume>> PlayingVolumes;                                    // 0x0080(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSpatialVolumePriorityMgr">();
	}
	static class UMarvelSpatialVolumePriorityMgr* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSpatialVolumePriorityMgr>();
	}
};

// Class Marvel.MarvelCharacterSpawnPipeline
// 0x0000 (0x0030 - 0x0030)
class UMarvelCharacterSpawnPipeline : public UMarvelActorSpawnPipeline
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCharacterSpawnPipeline">();
	}
	static class UMarvelCharacterSpawnPipeline* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCharacterSpawnPipeline>();
	}
};

// Class Marvel.MarvelCharacterLimitAbilitySpawnPipeline
// 0x0000 (0x0030 - 0x0030)
class UMarvelCharacterLimitAbilitySpawnPipeline final : public UMarvelCharacterSpawnPipeline
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelCharacterLimitAbilitySpawnPipeline">();
	}
	static class UMarvelCharacterLimitAbilitySpawnPipeline* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelCharacterLimitAbilitySpawnPipeline>();
	}
};

// Class Marvel.AbilityCommonExtraWidgets
// 0x00D0 (0x0100 - 0x0030)
class UAbilityCommonExtraWidgets final : public UObject
{
public:
	bool                                          bIsV5;                                             // 0x0030(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWidgetStyle_AbilityCommon             CommonWidgetStyle;                                 // 0x0038(0x0030)(BlueprintVisible, NativeAccessSpecifierPublic)
	struct FWidgetStyle_AbilityCommon_V5          CommonWidgetStyle_V5;                              // 0x0068(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)
	class UWidget_AbilityActionTips*              Widget_ActionTips;                                 // 0x00A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget_AbilityDuration*                Widget_Duration;                                   // 0x00B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget_AbilityEnergy*                  Widget_Energy;                                     // 0x00B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget_AbilityEnergy_Charge*           Widget_Charge;                                     // 0x00C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                Ability;                                           // 0x00C8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         AbilityID;                                         // 0x00D0(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoManage;                                       // 0x00D4(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsActivating;                                      // 0x00D5(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D6[0x2];                                       // 0x00D6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x00D8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelAbilityStage                           ShowStage;                                         // 0x00DC(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelAbilityStage                           HideStage;                                         // 0x00DD(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMarvelAbilityStage                           CurStage;                                          // 0x00DE(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DF[0x1];                                       // 0x00DF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(float RemainTime)> OnTimerChanged;                                    // 0x00E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0[0x10];                                      // 0x00F0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CheckBindDurationUpdate();
	void CustomActivate();
	void CustomDeactivate();
	void EndCountDown();
	void OnAbilityStageChange(EMarvelAbilityStage InCurStage);
	void OnAbilityStatusUpdate();
	void SetAbilitySoftIcon(const TSoftObjectPtr<class UTexture2D>& SoftIcon);
	void SetChargePercent(float InCurrentValue, float InMaxValue);
	void SetChargeSpeed(float InChargeMax, float InChargeSpeed);
	void SetDuration(const float InTime);
	void SetEnergyColor(const struct FLinearColor& InColor);
	void SetEnergyPercent(float InEnergyPercent);
	void SetStyle(const struct FWidgetStyle_AbilityCommon& InCommonWidgetStyle);
	void SetStyle_V5(const struct FWidgetStyle_AbilityCommon_V5& InCommonWidgetStyle);
	void SetVisible(const bool bInVisible);
	void StartCountDown();
	void Update();
	void UpdateStyle();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityCommonExtraWidgets">();
	}
	static class UAbilityCommonExtraWidgets* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityCommonExtraWidgets>();
	}
};

// Class Marvel.MarvelSpawnActorManager
// 0x0000 (0x0030 - 0x0030)
class UMarvelSpawnActorManager final : public UObject
{
public:
	static class AActor* Spawn(TSubclassOf<class UMarvelActorSpawnPipeline> InSpawnPipeClass, const struct FMarvelActorSpawnContext& InSpawnContext);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSpawnActorManager">();
	}
	static class UMarvelSpawnActorManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSpawnActorManager>();
	}
};

// Class Marvel.MarvelSpectatorPawn
// 0x0288 (0x07E0 - 0x0558)
class AMarvelSpectatorPawn final : public ASpectatorPawn
{
public:
	bool                                          bInputInited;                                      // 0x0558(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_559[0x7];                                      // 0x0559(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UInputMappingContext*                   IMC_Common;                                        // 0x0560(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_SwitchMode;                                     // 0x0568(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_SwitchFollowPlayer;                             // 0x0570(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_SwitchPresetPoint;                              // 0x0578(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_SetPayloadFollowMode;                           // 0x0580(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_SetAutoMoveForwardFreeMode;                     // 0x0588(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_SetAutoOrbitingFreeMode;                        // 0x0590(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_SwitchModeOther;                                // 0x0598(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_SwitchMatchSpectatingState;                     // 0x05A0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_NextPlayer;                                     // 0x05A8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_LastPlayer;                                     // 0x05B0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_MoveUp;                                         // 0x05B8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_MoveForward;                                    // 0x05C0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_MoveRight;                                      // 0x05C8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_LookUp;                                         // 0x05D0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_Turn;                                           // 0x05D8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_TopDownMoveForward;                             // 0x05E0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_SpectateArmChanged;                             // 0x05E8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_EnhanceDamping;                                 // 0x05F0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_ReduceDamping;                                  // 0x05F8(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_IncreaseMaxSpeed;                               // 0x0600(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_DecreaseMaxSpeed;                               // 0x0608(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_TempAcceleration;                               // 0x0610(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UInputAction*                           IA_TempDeceleration;                               // 0x0618(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<ESpectationMode, class UInputMappingContext*> AllModeIMC;                                        // 0x0620(0x0050)(Edit, NativeAccessSpecifierPublic)
	bool                                          bIsPressedChangedOtherMode;                        // 0x0670(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_671[0x7];                                      // 0x0671(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpectatorPawnMovementConfig>   SpectatorPawnMovementConfigs;                      // 0x0678(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         DefaultSpeedConfigIndex;                           // 0x0688(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentMatchModeDampingConfigIndex;                // 0x068C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentMatchModeSpeedConfigIndex;                  // 0x0690(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmLengthMax;                                // 0x0694(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpringArmLengthMin;                                // 0x0698(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitSpringArmLength;                               // 0x069C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelObjSpringArmLengthMax;                        // 0x06A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelObjSpringArmLengthMin;                        // 0x06A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         InitLevelObjSpringArmLength;                       // 0x06A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewPitchMin;                                      // 0x06AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewPitchMax;                                      // 0x06B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PayloadRelativeHeight;                             // 0x06B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxHeightDiffFromPreset;                           // 0x06B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoMoveSpeed;                                     // 0x06BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      TraceObjectsType;                                  // 0x06C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         TraceLength;                                       // 0x06D0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AutoOrbitingSpeed;                                 // 0x06D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebugMode;                                        // 0x06D8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6D9[0x7];                                      // 0x06D9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class APlayerState* Value)> OnSpectatingPlayerStateChanged;                    // 0x06E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ESpectationMode Value)> OnSpectationModeChanged;                           // 0x06F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bIsMatchSpectating)> OnSpectatingMatchStateChanged;                     // 0x0700(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Index)>   OnSpectatingSpeedChanged;                          // 0x0710(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 Index)>   OnSpectatingDampingChanged;                        // 0x0720(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FSpectationState                       SpectationState;                                   // 0x0730(0x0020)(BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bDisableSpectationSwitch;                          // 0x0750(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_751[0x7];                                      // 0x0751(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCameraComponent*                       CameraComponent;                                   // 0x0758(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USpringArmComponent*                    SpringArmComponent;                                // 0x0760(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayerState*                           CachedValidSpectatePlayerState;                    // 0x0768(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         EnableModes;                                       // 0x0770(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         VideoEnableModes;                                  // 0x0774(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ModeCount;                                         // 0x0778(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCanSpectateAI;                                    // 0x077C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_77D[0x3B];                                     // 0x077D(0x003B)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsMatchSpectating;                                // 0x07B8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7B9[0x3];                                      // 0x07B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentPresetIndex;                                // 0x07BC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_7C0[0x20];                                     // 0x07C0(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AdjustSpringArmLength(float Val);
	void AlignToCurrentView();
	void BindTargetActorEvent(class AActor* InActor);
	void BindTargetEndEvent(class AActor* InActor);
	void BindTargetStateEvent(class APlayerState* InPlayerState);
	void DecreaseSpectatorSpeed();
	void DirectSetTargetRotation(const struct FRotator& NewRotator);
	void EnhanceDamping();
	TArray<class APlayerState*> FilterTargetPlayer(class APlayerState* MyPlayerState, const TArray<class APlayerState*>& Targets);
	class APlayerState* GetNextPlayerState(class APlayerState* CurrentPlayerState);
	ESpectationMode GetNextSpectateMode(ESpectationMode NowMode);
	ESpectationMode GetNextSpectateModeInVideoReplay(ESpectationMode NowMode);
	class APlayerState* GetPreviousPlayerState(class APlayerState* CurrentPlayerState);
	ESpectationMode GetSpectationMode();
	void IncreaseSpectatorSpeed();
	bool IsLocationWithinBounds(const struct FVector& InLocation);
	void OnKillCamTargetEnd(class AActor* Actor);
	void OnKillcamTargetViewChanged(class APlayerState* InPlayerState);
	void OnKillcamTargetViewEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
	void OnLookUp(const struct FInputActionValue& OutValue);
	void OnMoveForward_Completed(const struct FInputActionValue& OutValue);
	void OnMoveForward_Triggered(const struct FInputActionValue& OutValue);
	void OnMoveRight(const struct FInputActionValue& OutValue);
	void OnMoveUp(const struct FInputActionValue& OutValue);
	void OnResetMovementSpeed(const struct FInputActionValue& OutValue);
	void OnSpectateArmChanged_Completed(const struct FInputActionValue& OutValue);
	void OnSpectateArmChanged_Triggered(const struct FInputActionValue& OutValue);
	void OnSpringArmLengthChanged(float Val);
	void OnSwitchPresetPointTrigger(const struct FInputActionValue& OutValue);
	void OnTargetChangePawn(class AMarvelPlayerState* InPlayerState, class AMarvelBaseCharacter* Character);
	void OnTargetDeath(class AActor* InSourceActor, class AActor* InTargetActor, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnTargetViewTargetChanged(class APlayerState* InPlayerState);
	void OnTempAcceleration(const struct FInputActionValue& OutValue);
	void OnTempDecceleration(const struct FInputActionValue& OutValue);
	void OnTopDownMoveForward(const struct FInputActionValue& OutValue);
	void OnTurn(const struct FInputActionValue& OutValue);
	void OnUserSettingChanged();
	void ReduceDamping();
	void ResetSpectatingKillcamActor();
	void SetAutoMoveForwardFreeMode();
	void SetAutoOrbitingFreeMode();
	void SetEnableModes(int32 Modes);
	void SetPayLoadFollowMode();
	void SetSpectatingActor(class AActor* InActor);
	void SetSpectatingKillcamActor(class AActor* InActor);
	void SetSpectatingPlayerStateByIndex(int32 InPlayerIndex);
	void SetSpectatingPlayerStateByIndex_EnhancedInput(const struct FInputActionValue& OutValue);
	void SetSpectationMode(ESpectationMode InMode);
	void SetSpectationMode_EnhancedInput(const struct FInputActionValue& OutValue);
	void SetSpectationModeAndPlayerState(ESpectationMode InMode, class APlayerState* InPlayerState);
	void SetSpectationModeOtherPressed(const struct FInputActionValue& OutValue);
	void SetSpectationModeOtherRelease(const struct FInputActionValue& OutValue);
	void SetSpectationState(const struct FSpectationState& NewState);
	void SetSpectatorDampingIndex(int32 Index_0);
	void SetSpectatorSpeedIndex(int32 Index_0);
	void SetTopDownTransform();
	void SpectateNextPlayer();
	void SpectatePreviousPlayer();
	void SwitchMatchSpectatingState(const struct FInputActionValue& OutValue);
	void SwitchPresetPoint(int32 Index_0);
	void SwitchSpectateMode();
	void UnBindTargetActorEvent(class AActor* InActor);
	void UnBindTargetEndEvent(class AActor* InActor);
	void UnBindTargetStateEvent(class APlayerState* InPlayerState);
	void UpdateSpectationState();
	void UpdateSpringArmCollisionIgnoreActors();

	bool GetIsMatchSpectating() const;
	bool RegisterInputMappingContext(const class UInputMappingContext* IMC, int32 Priority) const;
	void RemoveInputMappingContext(const class UInputMappingContext* IMC) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSpectatorPawn">();
	}
	static class AMarvelSpectatorPawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelSpectatorPawn>();
	}
};

// Class Marvel.MarvelSpiderNetSpawner
// 0x0000 (0x0030 - 0x0030)
class UMarvelSpiderNetSpawner final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSpiderNetSpawner">();
	}
	static class UMarvelSpiderNetSpawner* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSpiderNetSpawner>();
	}
};

// Class Marvel.MarvelGenMeshSpawnManager
// 0x0150 (0x0180 - 0x0030)
class alignas(0x10) UMarvelGenMeshSpawnManager final : public UObject
{
public:
	uint8                                         Pad_30[0x128];                                     // 0x0030(0x0128)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarvelGenMeshSpawnContext>     QueuedSpawnContexts;                               // 0x0158(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<struct FMarvelGenMeshSpawnContext>     PendingAddSpawnContexts;                           // 0x0168(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_178[0x8];                                      // 0x0178(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGenMeshSpawnManager">();
	}
	static class UMarvelGenMeshSpawnManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGenMeshSpawnManager>();
	}
};

// Class Marvel.MarvelSplineComponent
// 0x0040 (0x0980 - 0x0940)
class UMarvelSplineComponent final : public USplineComponent
{
public:
	TArray<class USplineMeshComponent*>           SplineMeshComponents;                              // 0x0938(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class FString                                 SplineLength;                                      // 0x0948(0x0010)(Edit, BlueprintVisible, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TargetLength;                                      // 0x0958(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LengthPercent;                                     // 0x095C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Height;                                            // 0x0960(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TileLength;                                        // 0x0964(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMesh*                            BorderMesh;                                        // 0x0968(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CornerCutRadius;                                   // 0x0970(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_974[0xC];                                      // 0x0974(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearDebugLine();
	void ClientDrawSplineMesh(class UStaticMesh* Mesh, bool SplineIsLoop);
	void ClientDrawSplineMeshTiled(class UStaticMesh* Mesh, float TileLength_0);
	void SetSplineColor(const struct FVector& Color);
	void SetViewportLocation(const struct FVector& Location);
	void SetVisible(bool Invisible);
	void ShowPercentPosition();
	void ShowSplineLength();
	void ShowTargetPosition();
	void SurroundBox(class ULevelScopeCheckComponent* ScopeCheckComponent, float InHeight);
	void SurroundMesh(class ULevelScopeCheckComponent* RangeCheckComponent, float InHeight);
	void SurroundRangeCheckMesh();

	void GetLocalLocationAndTangentAtSplineInputKey(float InKey, struct FVector* Location, struct FVector* Tangent) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSplineComponent">();
	}
	static class UMarvelSplineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSplineComponent>();
	}
};

// Class Marvel.MarvelStatsBlueprintLibrary
// 0x0000 (0x0030 - 0x0030)
class UMarvelStatsBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool RetrieveStatData(TArray<struct FMarvelStatsInfoItem>* StatInfoItems);
	static bool StartOnlineProfiling(bool bStart, const class UObject* WCO, const class FString& BattleID, const class FString& MapName, const int64& UID, const class FString& InfoStr);
	static void StatsCommand(const class FString& StatGroupName, bool bNoDisplay);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelStatsBlueprintLibrary">();
	}
	static class UMarvelStatsBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelStatsBlueprintLibrary>();
	}
};

// Class Marvel.Widget_WeaponStatus
// 0x0AA8 (0x1050 - 0x05A8)
class UWidget_WeaponStatus final : public UMarvelUserWidget
{
public:
	class UTextBlock*                             Text_AmmoCur;                                      // 0x05A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextBlock*                             Text_AmmoMax;                                      // 0x05B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCommonKeyWidget*                       Key_Equip;                                         // 0x05B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UProgressBar*                           Prog_SecondBullet;                                 // 0x05C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MagazineIndex;                                     // 0x05C8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5CC[0x4];                                      // 0x05CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UBindingProxy_Weapon*                   ProxyWeapon;                                       // 0x05D0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBindingProxy_Ability*                  ProxyAbility;                                      // 0x05D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FAbilityUIAssetRow                     UIAssetRow;                                        // 0x05E0(0x0A60)(Protected, NativeAccessSpecifierProtected)
	class UMarvelGameplayAbility*                 Ability;                                           // 0x1040(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 AbilityOwner;                                      // 0x1048(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void EquippingTagChanged(const struct FGameplayTag& ChangedTag, bool bExists);
	void Reset();
	void SetAbility(class UMarvelGameplayAbility* InAbility);
	void SetAbilityProxy(class UBindingProxy_Ability* InProxyAbility);
	void SetAmmoCur(int32 InAmmoCur);
	void SetAmmoMax(int32 InAmmoMax);
	void SetEquipAction(const class FName InEquipAction);
	void SetEquiping(bool bInEquiping);
	void SetInfinite(bool bInInfinite);
	void SetIsPrimary(bool bInPrimary);
	void SetProg(float InProg);
	void SetSharedAbility(class UMarvelGameplayAbility* InAbility);
	void SetUsable(bool bInUsable);
	void SetWeaponAction(const struct FUIActionData& InWeaponAction);
	void SetWeaponIcon(class UTexture2D* WeaponIcon);
	void SetWeaponIconFromSoftObject(const TSoftObjectPtr<class UTexture2D>& WeaponIcon);
	void VisibleTagChanged(const struct FGameplayTag& ChangedTag, bool bExists);

	int32 GetWeaponID() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_WeaponStatus">();
	}
	static class UWidget_WeaponStatus* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_WeaponStatus>();
	}
};

// Class Marvel.MarvelStealthAbility
// 0x0220 (0x1318 - 0x10F8)
class UMarvelStealthAbility : public UMarvelEffectGameplayAbility
{
public:
	struct FGameplayTagContainer                  TruncateExitStealth;                               // 0x10F8(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AbilityExitStealth;                                // 0x1160(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AbilityStayStealth;                                // 0x11C8(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bBindInputExitStealth;                             // 0x1230(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1231[0x3];                                     // 0x1231(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BindInputDelay;                                    // 0x1234(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDamageExitStealth;                                // 0x1238(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDebuffExitStealth;                                // 0x1239(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_123A[0x6];                                     // 0x123A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  StatusExitStealth;                                 // 0x1240(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bCollideExitStealth;                               // 0x12A8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_12A9[0x3];                                     // 0x12A9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         EndAbilityDelay;                                   // 0x12AC(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnExitStealth;                                     // 0x12B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_12C0[0x18];                                    // 0x12C0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bStealthing;                                       // 0x12D8(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsStealthed;                                      // 0x12D9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_12DA[0x3E];                                    // 0x12DA(0x003E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnAbilityActivate(int32 AbilityID);
	void OnAbilityTruncated(const struct FGameplayTagContainer& Tags);
	void OnBindExitInput();
	void OnBuffExecuted(class UAbilitySystemComponent* AbilitySystemComponent, const struct FGameplayEffectSpecStackHandle& EffectSpecHandle, const struct FActiveGameplayEffectHandle& EffectHandle);
	void OnCharacterEnterStealth();
	void OnCharacterExitStealth();
	void OnDelayEndAbility();
	void OnExitStealthPressed(float TimeWaited);
	void OnOwnerCollide(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void OnOwnerTakeDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnRep_bStealthing();
	void OnTagUpdate(const struct FGameplayTag& Tag, bool bExist);
	void ServerExitStealth();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelStealthAbility">();
	}
	static class UMarvelStealthAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelStealthAbility>();
	}
};

// Class Marvel.HiddenRuleBase
// 0x0008 (0x0038 - 0x0030)
class UHiddenRuleBase : public UObject
{
public:
	bool                                          bNeedTick;                                         // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HiddenRuleBase">();
	}
	static class UHiddenRuleBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UHiddenRuleBase>();
	}
};

// Class Marvel.DefaultHiddenRule
// 0x0000 (0x0038 - 0x0038)
class UDefaultHiddenRule final : public UHiddenRuleBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DefaultHiddenRule">();
	}
	static class UDefaultHiddenRule* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDefaultHiddenRule>();
	}
};

// Class Marvel.MarvelSummonedHiddenComponent
// 0x0040 (0x0130 - 0x00F0)
class UMarvelSummonedHiddenComponent final : public UActorComponent
{
public:
	uint8                                         Pad_F0[0x18];                                      // 0x00F0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bHidden)>  OnSummonedHiddenRuleRefreshedDynamic;              // 0x0108(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_118[0x8];                                      // 0x0118(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UHiddenRuleBase*>                HiddenRules;                                       // 0x0120(0x0010)(Net, ZeroConstructor, RepNotify, Protected, NativeAccessSpecifierProtected)

public:
	void AddDefaultHiddenRule();
	void OnActorRootComponentAttached(class USceneComponent* SourceComponent, class USceneComponent* ChildComponent);
	void OnRep_HiddenRules();
	void OnSummonedBeginAgentTask(class AActor* Value);
	void OnSummonedRecycled(class AActor* Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSummonedHiddenComponent">();
	}
	static class UMarvelSummonedHiddenComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSummonedHiddenComponent>();
	}
};

// Class Marvel.MarvelSummonedInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelSummonedInterface final : public IInterface
{
public:
	void K2_OnBeginAgentTask_GraphAbility();
	void K2_OnEndAgentTask_GraphAbility(ETargetActorDestroyReason SummonedDestroyReason);
	void K2_OnSummonedBeginAgentTask();
	void K2_OnSummonedBeHit(const class AActor* InActor, const struct FHitResult& InHitResult);
	void K2_OnSummonedDeath_GraphAbility(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void K2_OnSummonedEndAgentTask();
	void K2_OnSummonedRecycleAgentTask();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSummonedInterface">();
	}
	static class IMarvelSummonedInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelSummonedInterface>();
	}
};

// Class Marvel.MarvelSwiftProjectileManager
// 0x0148 (0x05D8 - 0x0490)
class AMarvelSwiftProjectileManager final : public AActor
{
public:
	struct FMarvelSwiftProjectileArray            SwiftProjectileArray;                              // 0x0490(0x0128)(Net, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FMarvelSwiftProjectileNetPredictedInfo> NetPredictedProjectiles;                           // 0x05B8(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<struct FMarvelSwiftProjectileSpec>     RefectedProjectileSpecs;                           // 0x05C8(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void OnOwnerDeath(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnOwnerEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
	void PrintAll();
	void Server_OnDestroyProjectile(class UAbilitySystemComponent* ASC, const struct FPredictionKey& InSpawnPredictionKey);
	void Server_OnRefectedProjectile(const struct FPredictionKey& InSpawnPredictionKey, const struct FPredictionKey& InReflectedPredictionKey, const struct FHitResult& ImpactResult, const struct FProjectileForceChangedInfo& InProjectileForceChangedInfo, float FlyDuration, float FlyDistanceBeforeLastSegment);
	void Server_OnStopProjectile(class UAbilitySystemComponent* ASC, const struct FPredictionKey& InSpawnPredictionKey, const struct FPredictionKey& InStopProjectileKey, const struct FHitResult& ImpactResult, float SegmentFlyDuration, int32 ForceChangeIndex, bool bProjectileForceEnd);
	void ServerExecuteDestroyProjectile(const struct FGameplayAbilityTargetDataHandle& ClientData);
	void ServerExecuteRefectedProjectile(const struct FPredictionKey& InSpawnPredictionKey, const struct FHitResult& ImpactResult, const struct FProjectileForceChangedInfo& InProjectileForceChangedInfo, float FlyDuration, float FlyDistanceBeforeLastSegment);
	void ServerExecuteStopProjectile(const struct FGameplayAbilityTargetDataHandle& ClientData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSwiftProjectileManager">();
	}
	static class AMarvelSwiftProjectileManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelSwiftProjectileManager>();
	}
};

// Class Marvel.MarvelSystemSwitchDataAsset
// 0x0140 (0x0178 - 0x0038)
class UMarvelSystemSwitchDataAsset final : public UPrimaryDataAsset
{
public:
	bool                                          bEnableWhiteList;                                  // 0x0038(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  Whitelist;                                         // 0x0040(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	bool                                          bEnableBlackList;                                  // 0x00A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A9[0x7];                                       // 0x00A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  BlackList;                                         // 0x00B0(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   DefaultOffHint;                                    // 0x0118(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   NonStopMaintainPopupTitle;                         // 0x0130(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   NonStopMaintainPopupContent;                       // 0x0148(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class FText                                   NonStopMaintainTips;                               // 0x0160(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelSystemSwitchDataAsset">();
	}
	static class UMarvelSystemSwitchDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelSystemSwitchDataAsset>();
	}
};

// Class Marvel.MarvelTabDataComponent
// 0x00E8 (0x01D8 - 0x00F0)
class UMarvelTabDataComponent final : public UActorComponent
{
public:
	TMap<int32, struct FHeroSpecialData>          AllHeroSpecialDatas;                               // 0x00F0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<float>                                 CurrentSpecialData;                                // 0x0140(0x0010)(BlueprintVisible, Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	class AMarvelPlayerState*                     PlayerState;                                       // 0x0150(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_158[0x60];                                     // 0x0158(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	class UHeroTabDataBase*                       HeroTabDataObject;                                 // 0x01B8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0[0x8];                                      // 0x01C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              SpecialDataChangedDispatcher;                      // 0x01C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)

public:
	float CalcSpecialData(const struct FMarvelTabSpecialConfig& Config, const class FString& KeyName, int32 HeroID);
	void OnAddSpecialData(int32 HeroID, const class FString& KeyName, float DeltaValue);
	void OnCharacterAbilityStateChanged(class AMarvelPlayerState* InPlayerState, class AMarvelBaseCharacter* InCharacter, bool bFinished);
	void OnCharacterSelectIDChanged(class AMarvelPlayerState* InPlayerState, int32 HeroID);
	void OnMatchStateChange(EMatchState MatchState);
	void OnOverrideSpecialData(int32 HeroID, const class FString& KeyName, float DeltaValue);
	void OnRep_CurrentSpecialData();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTabDataComponent">();
	}
	static class UMarvelTabDataComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTabDataComponent>();
	}
};

// Class Marvel.MarvelTaskActionBase
// 0x0008 (0x0038 - 0x0030)
class UMarvelTaskActionBase : public UObject
{
public:
	int32                                         RequireVal;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class FString GetTaskInstanceKey();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTaskActionBase">();
	}
	static class UMarvelTaskActionBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTaskActionBase>();
	}
};

// Class Marvel.TaskCustomOptionsHandler
// 0x0000 (0x0030 - 0x0030)
class UTaskCustomOptionsHandler final : public UObject
{
public:
	static const TArray<class FString> GetAwardOptions();
	static const TArray<class FString> GetCategoryRowKeys();
	static const TArray<class FString> GetItemIds();
	static const TArray<class FString> GetModeIds();
	static const TArray<class FString> GetPlayModeIds();
	static const TArray<class FString> GetPoolIDS();
	static const TArray<class FString> GetSeasons();
	static const TArray<class FString> GetTaskInstanceKeys();
	static const TArray<class FString> GetTaskTypeRowKeys();
	static const TArray<class FName> GetTemplateOptions();
	static const TArray<class FString> GetTimeLimitAwardOptions();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TaskCustomOptionsHandler">();
	}
	static class UTaskCustomOptionsHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTaskCustomOptionsHandler>();
	}
};

// Class Marvel.MarvelTask_WaitInputAction
// 0x0040 (0x00B8 - 0x0078)
class UMarvelTask_WaitInputAction final : public UGameplayTask
{
public:
	TMulticastInlineDelegate<void()>              OnPress;                                           // 0x0078(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnRelease;                                         // 0x0088(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UInputComponent*                        InputComponent;                                    // 0x0098(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, DuplicateTransient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class APlayerController*                      MyController;                                      // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A8[0x10];                                      // 0x00A8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelTask_WaitInputAction* TaskWaitInputAction(class APlayerController* Controller, const class FName ActionName);

	void OnPressCallback(class FName InActionName, const EInputEvent EventType);
	void OnReleaseCallback(class FName InActionName, const EInputEvent EventType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTask_WaitInputAction">();
	}
	static class UMarvelTask_WaitInputAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTask_WaitInputAction>();
	}
};

// Class Marvel.MarvelTeamInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelTeamInterface final : public IGenericTeamAgentInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTeamInterface">();
	}
	static class IMarvelTeamInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelTeamInterface>();
	}
};

// Class Marvel.MarvelTeamState
// 0x0008 (0x0498 - 0x0490)
class AMarvelTeamState : public AInfo
{
public:
	int32                                         TeamID;                                            // 0x0490(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_494[0x4];                                      // 0x0494(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTeamState">();
	}
	static class AMarvelTeamState* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelTeamState>();
	}
};

// Class Marvel.MarvelTextBlock
// 0x0080 (0x0460 - 0x03E0)
class UMarvelTextBlock final : public UTextBlock
{
public:
	float                                         PSFontSize;                                        // 0x03E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETextCaseRule                                 TextCaseRule;                                      // 0x03E4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Indentation;                                       // 0x03E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IndentationForeign;                                // 0x03E6(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ParagraphAutomaticBlankLines;                      // 0x03E7(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CacheOriginText;                                   // 0x03E8(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_400[0x60];                                     // 0x0400(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool GetIsEllipsised();
	void SetAdaptive(bool Adaptive);
	void SetAdaptiveLimit(float HeightLimit, int32 InputFontSizeLimit);
	void SetLocalizationText(const class FString& Namespace, const class FString& Key, const TMap<class FString, class FText>& Args);
	void SetRawText(const class FString& InText);
	void SetTextCaseRule(ETextCaseRule InCaseRule);
	void UpdateFontSize();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTextBlock">();
	}
	static class UMarvelTextBlock* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTextBlock>();
	}
};

// Class Marvel.MarvelTextData
// 0x0050 (0x0088 - 0x0038)
class UMarvelTextData final : public UDataAsset
{
public:
	TMap<class FName, class FText>                GameSpecialTexts;                                  // 0x0038(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	class FText GetGameSpecialText(const class FName& Key) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTextData">();
	}
	static class UMarvelTextData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTextData>();
	}
};

// Class Marvel.MarvelTickFunctionSubSystem
// 0x02D8 (0x0310 - 0x0038)
class UMarvelTickFunctionSubSystem final : public UWorldSubsystem
{
public:
	uint8                                         Pad_38[0x2D8];                                     // 0x0038(0x02D8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTickFunctionSubSystem">();
	}
	static class UMarvelTickFunctionSubSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTickFunctionSubSystem>();
	}
};

// Class Marvel.MarvelTimelineComponent
// 0x0090 (0x0230 - 0x01A0)
class UMarvelTimelineComponent final : public UTimelineComponent
{
public:
	uint8                                         Pad_1A0[0x10];                                     // 0x01A0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, struct FTimeline>           TimelineMap;                                       // 0x01B0(0x0050)(Transient, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_200[0x30];                                     // 0x0200(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddTimelineFloat(class UCurveFloat* FloatCurve, TDelegate<void(class FName TrackName, class FName PropertyName, float Output)> Handle, class FName PropertyName, class FName TrackName);
	void AddTimelineVector(class UCurveVector* VectorCurve, TDelegate<void(const struct FVector& Output)> Handle, class FName PropertyName, class FName TrackName);
	void MarvelPlay(class FName TrackName);
	void MarvelPlayFromEnd(class FName TrackName);
	void MarvelPlayFromStart(class FName TrackName);
	void MarvelReverse(class FName TrackName);
	void MarvelStop(class FName TrackName);
	void RemoveTimelineFloat(class FName PropertyName, class FName TrackName);
	void RemoveTimelineVector(class FName PropertyName, class FName TrackName);
	void SetAllTimelinePlaybackPosition(float NewPosition, bool bFireEvents, bool bFireUpdate);
	void SetPlaybackPositionByTrackName(class FName TrackName, float NewPosition, bool bFireEvents, bool bFireUpdate);
	void SetTimelineFinishFunc(TDelegate<void()> NewTimelineFinishedFunc, class FName TrackName);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTimelineComponent">();
	}
	static class UMarvelTimelineComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTimelineComponent>();
	}
};

// Class Marvel.MarvelTraceFilterInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelTraceFilterInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTraceFilterInterface">();
	}
	static class IMarvelTraceFilterInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelTraceFilterInterface>();
	}
};

// Class Marvel.MarvelTraceObjectInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelTraceObjectInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTraceObjectInterface">();
	}
	static class IMarvelTraceObjectInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelTraceObjectInterface>();
	}
};

// Class Marvel.MarvelTreatEffectExecution
// 0x0028 (0x0070 - 0x0048)
class UMarvelTreatEffectExecution final : public UMarvelBaseEffectExecution
{
public:
	struct FGameplayTag                           EffectTreatSource;                                 // 0x0048(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EffectTreatTarget;                                 // 0x0054(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           EffectTreat;                                       // 0x0060(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTreatEffectExecution">();
	}
	static class UMarvelTreatEffectExecution* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTreatEffectExecution>();
	}
};

// Class Marvel.MarvelTreatOverflowConvAbility
// 0x0018 (0x11F0 - 0x11D8)
class UMarvelTreatOverflowConvAbility : public UMarvelAttributeFallBaseAbility
{
public:
	TArray<int32>                                 TreatBuffIDs;                                      // 0x11D8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         OverflowConvRate;                                  // 0x11E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11EC[0x4];                                     // 0x11EC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTakeTreat(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTreatOverflowConvAbility">();
	}
	static class UMarvelTreatOverflowConvAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTreatOverflowConvAbility>();
	}
};

// Class Marvel.MarvelTreatRecoverAbility
// 0x0000 (0x10F8 - 0x10F8)
class UMarvelTreatRecoverAbility final : public UMarvelEffectGameplayAbility
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelTreatRecoverAbility">();
	}
	static class UMarvelTreatRecoverAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelTreatRecoverAbility>();
	}
};

// Class Marvel.MarvelUserWidgetPool
// 0x00A0 (0x00D0 - 0x0030)
class UMarvelUserWidgetPool final : public UObject
{
public:
	struct FUserWidgetPool                        Pool;                                              // 0x0030(0x0088)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_B8[0x18];                                      // 0x00B8(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UUserWidget* CreateWidgetFromPool(class UObject* WCO, TSubclassOf<class UUserWidget> WidgetClass);
	static class UMarvelUserWidgetPool* Get(class UObject* WCO);
	static void PrintPoolInfo(class UObject* WCO);
	static void ReleaseWidgetToPool(class UUserWidget* InWidget);
	static void ReleaseWidgetToPoolCompeletely(class UUserWidget* InWidget);
	static void RemoveWidgetByClass(class UObject* WCO, TSubclassOf<class UUserWidget> WidgetClass);

	void Construct();
	void Destruct();
	class UUserWidget* GetOrCreateInstance(TSubclassOf<class UUserWidget> WidgetClass);
	void Release(class UUserWidget* Widget);
	void ReleaseCompeletely(class UUserWidget* Widget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelUserWidgetPool">();
	}
	static class UMarvelUserWidgetPool* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelUserWidgetPool>();
	}
};

// Class Marvel.MarvelVehicleAnimData
// 0x0110 (0x0150 - 0x0040)
class UMarvelVehicleAnimData final : public UAnimationDataCollection
{
public:
	class UAnimSequence*                          IdleAnim;                                          // 0x0040(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          MoveForwardAnim;                                   // 0x0048(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          MoveBackwardAnim;                                  // 0x0050(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandardFwdSpeed;                                  // 0x0058(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandardBwdSpeed;                                  // 0x005C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnDetectStartDistance;                           // 0x0060(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnDetectDistance;                                // 0x0064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          TurnBSFwd;                                         // 0x0068(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          TurnBSBwd;                                         // 0x0070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EStrikePartType, struct FVehicleHitInfo> HitAnimConfig;                                     // 0x0078(0x0050)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         HitInterval;                                       // 0x00C8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordAnimSync;                                   // 0x00CC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableIK;                                         // 0x00CD(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CE[0x2];                                       // 0x00CE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IKTraceLength;                                     // 0x00D0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IKMeshHeightOffset;                                // 0x00D4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVehicleIKTraceInfo> IKBoneTraceInfoMap;                                // 0x00D8(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EBoneControlSpace                             EffectorLocationSpace;                             // 0x0128(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BonesHavePhysicsOffset;                            // 0x0130(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<class FName>                           BonesHavePhysicsRotation;                          // 0x0140(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelVehicleAnimData">();
	}
	static class UMarvelVehicleAnimData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelVehicleAnimData>();
	}
};

// Class Marvel.MarvelVehicleDynamicAnimData
// 0x0170 (0x01A0 - 0x0030)
class UMarvelVehicleDynamicAnimData final : public UObject
{
public:
	class UAnimSequence*                          IdleAnim;                                          // 0x0030(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          MoveForwardAnim;                                   // 0x0038(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          MoveBackwardAnim;                                  // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandardFwdSpeed;                                  // 0x0048(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StandardBwdSpeed;                                  // 0x004C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnDetectStartDistance;                           // 0x0050(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnDetectDistance;                                // 0x0054(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          TurnBSFwd;                                         // 0x0058(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBlendSpace1D*                          TurnBSBwd;                                         // 0x0060(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EStrikePartType, struct FVehicleHitInfo> HitAnimConfig;                                     // 0x0068(0x0050)(BlueprintVisible, Transient, NativeAccessSpecifierPublic)
	float                                         HitInterval;                                       // 0x00B8(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRecordAnimSync;                                   // 0x00BC(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableIK;                                         // 0x00BD(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BE[0x2];                                       // 0x00BE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IKTraceLength;                                     // 0x00C0(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IKMeshHeightOffset;                                // 0x00C4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FName, struct FVehicleIKTraceInfo> IKBoneTraceInfoMap;                                // 0x00C8(0x0050)(BlueprintVisible, BlueprintReadOnly, Transient, NativeAccessSpecifierPublic)
	EBoneControlSpace                             EffectorLocationSpace;                             // 0x0118(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           BonesHavePhysicsOffset;                            // 0x0120(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class FName>                           BonesHavePhysicsRotation;                          // 0x0130(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	float                                         TurnAngle;                                         // 0x0140(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseAnimSync;                                      // 0x0144(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         IdleAnimSyncTime;                                  // 0x0148(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForwardAnimSyncTime;                               // 0x014C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BackwardAnimSyncTime;                              // 0x0150(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnFwdBSAnimSyncTime;                             // 0x0154(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TurnBwdBSAnimSyncTime;                             // 0x0158(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AnimPlayRate;                                      // 0x015C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_160[0x10];                                     // 0x0160(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FVector>                        PhysicsBoneOffset;                                 // 0x0170(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<struct FRotator>                       PhysicsBoneRotation;                               // 0x0180(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_190[0x8];                                      // 0x0190(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelVehicleAnimData*                 ConfigData;                                        // 0x0198(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelVehicleDynamicAnimData">();
	}
	static class UMarvelVehicleDynamicAnimData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelVehicleDynamicAnimData>();
	}
};

// Class Marvel.MarvelVehicleSubAnimInstance
// 0x0080 (0x04B0 - 0x0430)
class UMarvelVehicleSubAnimInstance final : public UAnimInstance
{
public:
	class UMarvelVehicleDynamicAnimData*          VehicleAnimData;                                   // 0x0428(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTemplateIK;                                    // 0x0430(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseTemplateHitAnim;                               // 0x0431(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_432[0x2];                                      // 0x0432(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   IKRootBoneName;                                    // 0x0434(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EVehicleMoveState                             MoveState;                                         // 0x0440(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_441[0x3];                                      // 0x0441(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurnAngle;                                         // 0x0444(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVehicleHitInfo                        HitAnimInfo;                                       // 0x0448(0x0020)(BlueprintVisible, Transient, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class ULevelActorMoveComponent*               LevelActorMove;                                    // 0x0468(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 SkeletalMeshComp;                                  // 0x0470(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FAnimGraphPBIKEffector>         IKSetupArrayDynamic;                               // 0x0478(0x0010)(BlueprintVisible, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_488[0x1C];                                     // 0x0488(0x001C)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AControlPointBase>       PayloadOwner;                                      // 0x04A4(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4AC[0x4];                                      // 0x04AC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelVehicleSubAnimInstance">();
	}
	static class UMarvelVehicleSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelVehicleSubAnimInstance>();
	}
};

// Class Marvel.MarvelVerticalBox
// 0x0040 (0x0240 - 0x0200)
class UMarvelVerticalBox final : public UVerticalBox
{
public:
	bool                                          bKeepPriority;                                     // 0x0200(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bToSamePriorityFront;                              // 0x0201(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_202[0x2];                                      // 0x0202(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FGeometry& MyGeometry, EUINavigation Direction)> OnNavigationDelegate;                              // 0x0204(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_218[0x28];                                     // 0x0218(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UVerticalBoxSlot* AddChildWithIndex(class UWidget* Content, int32 InIndex);
	class UVerticalBoxSlot* AddChildWithPriority(class UWidget* Content, int32 InPriority);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelVerticalBox">();
	}
	static class UMarvelVerticalBox* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelVerticalBox>();
	}
};

// Class Marvel.MarvelVideoCaptureMgr
// 0x0020 (0x0058 - 0x0038)
class UMarvelVideoCaptureMgr final : public UGameInstanceSubsystem
{
public:
	TMulticastInlineDelegate<void(bool bSaved, EVideoCaptureErrType ErrorCode, const class FString& ErrorTypeStr, const class FString& Path)> OnVideoCaptureMgrFinalize;                         // 0x0038(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bVSyncModified;                                    // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_49[0xF];                                       // 0x0049(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelVideoCaptureMgr* Get(const class UObject* InWCO);

	bool StartVideoCapture(const struct FMarvelVideoCaptureSettings& InSettings);
	bool StopVideoCapture(const bool bSaveRecording);
	void UpdateVSyncState(bool bRestore);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelVideoCaptureMgr">();
	}
	static class UMarvelVideoCaptureMgr* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelVideoCaptureMgr>();
	}
};

// Class Marvel.MarvelViewPlaceholder
// 0x0000 (0x0490 - 0x0490)
class AMarvelViewPlaceholder final : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelViewPlaceholder">();
	}
	static class AMarvelViewPlaceholder* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelViewPlaceholder>();
	}
};

// Class Marvel.MarvelVirtualCarActor
// 0x0000 (0x14A0 - 0x14A0)
class AMarvelVirtualCarActor : public AMarvelNeutralActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelVirtualCarActor">();
	}
	static class AMarvelVirtualCarActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelVirtualCarActor>();
	}
};

// Class Marvel.MarvelVirtualSceneActor
// 0x0000 (0x14A0 - 0x14A0)
class AMarvelVirtualSceneActor : public AMarvelNeutralActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelVirtualSceneActor">();
	}
	static class AMarvelVirtualSceneActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelVirtualSceneActor>();
	}
};

// Class Marvel.MarvelVisualLogSubsystem
// 0x00D0 (0x0118 - 0x0048)
class UMarvelVisualLogSubsystem final : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_48[0xC8];                                      // 0x0048(0x00C8)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                ClientWCO;                                         // 0x0110(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void OnMatchStateChange(EMatchState MatchState);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelVisualLogSubsystem">();
	}
	static class UMarvelVisualLogSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelVisualLogSubsystem>();
	}
};

// Class Marvel.MarvelWallPushingAbility
// 0x0000 (0x10F8 - 0x10F8)
class UMarvelWallPushingAbility final : public UMarvelEffectGameplayAbility
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelWallPushingAbility">();
	}
	static class UMarvelWallPushingAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelWallPushingAbility>();
	}
};

// Class Marvel.UIController_BattleHUD_BuffDuration
// 0x0070 (0x0240 - 0x01D0)
class UUIController_BattleHUD_BuffDuration final : public UUIController_BattleHUD_Duration
{
public:
	class AMarvelCueNotify_Buff*                  OwnerCue;                                          // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelBaseCharacter*                   BuffTarget;                                        // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAbilitySystemComponent*                BuffTargetASC;                                     // 0x01E0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         BuffID;                                            // 0x01E8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDeclarationHolder                     ViewingCharacterBinding;                           // 0x01F0(0x0010)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FBuffDurationSubscribeHandle           BuffDurationSubscribeHandle;                       // 0x0200(0x0040)(NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void OnCueActiveChanged();
	void OnViewingCharacterChanged(class AActor* ViewingTarget);
	void UpdateWidgetDuration();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIController_BattleHUD_BuffDuration">();
	}
	static class UUIController_BattleHUD_BuffDuration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIController_BattleHUD_BuffDuration>();
	}
};

// Class Marvel.MarvelWeaponTask_Firing
// 0x04A8 (0x0680 - 0x01D8)
class UMarvelWeaponTask_Firing final : public UAbilityTask
{
public:
	float                                         DelayEndTaskOnRelease;                             // 0x01D8(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1DC[0x4];                                      // 0x01DC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FWeaponFireContext                     CustomFireContext;                                 // 0x01E0(0x0180)(BlueprintVisible, BlueprintReadOnly, Transient, NoDestructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float TimeWaited)> OnPress;                                           // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(float TimeHeld)> OnRelease;                                         // 0x0370(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool AbilityEnded)> OnTaskEnd;                                         // 0x0380(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnAbilityFire;                                     // 0x0390(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         bTestInitialState : 1;                             // 0x03A0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bIsInputPressed : 1;                               // 0x03A0(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bHandlingOnPress : 1;                              // 0x03A0(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bHandlingOnRelease : 1;                            // 0x03A0(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bIsReadyToFire : 1;                                // 0x03A0(0x0001)(BitIndex: 0x04, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bWantsToReload : 1;                                // 0x03A0(0x0001)(BitIndex: 0x05, PropSize: 0x0001 (Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_3A1[0x3];                                      // 0x03A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TaskStartTime;                                     // 0x03A4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InputPressTime;                                    // 0x03A8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         InputReleaseTime;                                  // 0x03AC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ReadyToFireTime;                                   // 0x03B0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B4[0x2C];                                     // 0x03B4(0x002C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         PressKeySeed;                                      // 0x03E0(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         ReleaseKeySeed;                                    // 0x0480(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         EndTaskKeySeed;                                    // 0x0520(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         HandleFireKey;                                     // 0x05C0(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         FireAbilityID;                                     // 0x0660(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_664[0x4];                                      // 0x0664(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FWeaponFireGroup>               FireGroups;                                        // 0x0668(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_678[0x8];                                      // 0x0678(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UMarvelWeaponTask_Firing* HandleFiring(class UMarvelGameplayAbility* OwningAbility, class AShootingWeapon* InWeapon, int32 InModeIndex, int32 InFireAbilityID);
	static class UMarvelWeaponTask_Firing* HandleFiringRaw(class UMarvelGameplayAbility* OwningAbility, int32 InFireAbilityID);

	void AddWeaponFireGroup(class AShootingWeapon* InWeapon, const TArray<int32>& InModeIndexes, bool bRoundRobin);
	void HandleStartFiring(float StartTime, bool bAddTransitionTime);
	void HandleStopFiring(float StopTime);
	void OnDelayEndTask();
	void OnPressCallback();
	void OnReleaseCallback();
	void ReadyForFiring();
	void ResetShouldFireState(float StartTime, bool bAddTransitionTime);
	void TriggerWeaponReload();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelWeaponTask_Firing">();
	}
	static class UMarvelWeaponTask_Firing* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelWeaponTask_Firing>();
	}
};

// Class Marvel.MarvelWorldSettings
// 0x0010 (0x06D0 - 0x06C0)
class AMarvelWorldSettings final : public AWorldSettings
{
public:
	uint8                                         Pad_6C0[0x8];                                      // 0x06C0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorldSingletons*                       WorldSingletons;                                   // 0x06C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool GetReplayPauseState();
	void SetReplayPauseState(bool Flag);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelWorldSettings">();
	}
	static class AMarvelWorldSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<AMarvelWorldSettings>();
	}
};

// Class Marvel.MarvelWorldSubsystem
// 0x0000 (0x0038 - 0x0038)
class UMarvelWorldSubsystem final : public UWorldSubsystem
{
public:
	void OnDeinitialized();
	void OnInitialized();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelWorldSubsystem">();
	}
	static class UMarvelWorldSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelWorldSubsystem>();
	}
};

// Class Marvel.UIC_AbilityUnit_Energy
// 0x0028 (0x0068 - 0x0040)
class UUIC_AbilityUnit_Energy final : public UUIC_AbilityUnit
{
public:
	TSubclassOf<class UUserWidget>                WidgetClass_Energy;                                // 0x0040(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHideWhenFullEnergy;                               // 0x0048(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCustomSetPercent;                                 // 0x0049(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget_AbilityEnergy*                  Widget_Energy;                                     // 0x0050(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_58[0x10];                                      // 0x0058(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetWidgetExistence(bool bInExist);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIC_AbilityUnit_Energy">();
	}
	static class UUIC_AbilityUnit_Energy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIC_AbilityUnit_Energy>();
	}
};

// Class Marvel.MathFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UMathFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FVector AverageNormalOfPolygon(const TArray<struct FVector>& Points);
	static bool BetweenRange(const float Value, const struct FVector2D& Range);
	static bool BoxBoxIntersectionTest(const struct FBox& Box1, const struct FTransform& Trans1, const struct FBox& Box2, const struct FTransform& Trans2);
	static bool BoxCapsuleIntersectionTest(const struct FBox& Box, const struct FTransform& Trans1, const float Radius, const float HalfHeight, const struct FTransform& Trans2);
	static bool BoxSegmentIntersectionTest(const struct FBox& Box, const struct FTransform& Trans, const struct FVector& Origin, const struct FVector& End);
	static bool CapsuleCapsuleIntersectionTest(const struct FTransform& Trans1, const float Radius1, const float HalfHeight1, const struct FTransform& Trans2, const float Radius2, const float HalfHeight2);
	static bool CheckConvergence(TArray<struct FHitResult>* HitResults);
	static void ClosestPointBetweenPointAndLine(const struct FVector& Start, const struct FVector& End, const struct FVector& Point, struct FVector* Result, float* T);
	static void ClosestPointBetweenPointAndSegment(const struct FVector& Start, const struct FVector& End, const struct FVector& Point, struct FVector* Result, float* T);
	static float ClosestPointBetweenSegmentAndSegment(const struct FVector& Start1, const struct FVector& End1, const struct FVector& Start2, const struct FVector& End2, struct FVector* Point1, struct FVector* Point2, float* T1, float* T2);
	static float DegreesBetweenVectors(const struct FVector& A, const struct FVector& B);
	static float DegreesBetweenVectors2D(const struct FVector& A, const struct FVector& B);
	static struct FVector ForwardVectorToDirection(const struct FVector& Normal, const struct FVector& Direction);
	static bool FrustumCapsuleIntersectionTest(const struct FTransform& Trans1, const struct FVector& Frustum, const struct FTransform& Trans2, const float Radius, const float HalfHeight);
	static struct FFloatRange GetPointsAxisRange(const TArray<struct FVector>& Points, const struct FVector& Axis);
	static float GetSphereDirectPenetrationWithCapsule(class USphereComponent* Sphere, class UCapsuleComponent* Capsule, const struct FVector& Direction);
	static bool IsLineIntersect(const struct FVector2D& LineAStart, const struct FVector2D& LineAEnd, const struct FVector2D& LineBStart, const struct FVector2D& LineBEnd);
	static bool IsPointInPolygon(const struct FVector2D& Point, const TArray<struct FVector2D>& Polygon);
	static bool IsPointOnLine(const struct FVector2D& Point, const struct FVector2D& LineStart, const struct FVector2D& LineEnd);
	static float IsSqueezed(TArray<struct FHitResult>* HitResults, int32 IterateCount, float SqrEpsilon);
	static float NormalToSlope(const struct FVector& InNormal);
	static float PointDistToCapsule(const struct FVector& Point, const struct FVector& CapsuleCenter, const float CapsuleHalfHeight, const float CapsuleRadius, const struct FVector& CapsuleUpVector);
	static float PointDistToCapsuleComponent(const struct FVector& Point, const class UCapsuleComponent* CapsuleComponent);
	static bool PointInCylinder(const struct FVector& Point, const struct FVector& CylinderStart, const struct FVector& CylinderEnd, const float CylinderRadius);
	static bool PointInSphere(const struct FVector& Point, const struct FVector& Start, const struct FVector& End, const float Radius);
	static struct FVector ProjectDir(const struct FQuat& Rotation, const struct FVector& Direction);
	static float RadiansBetweenVectors(const struct FVector& A, const struct FVector& B);
	static float ShortestDistBetweenPointAndSegment(const struct FVector& Start, const struct FVector& End, const struct FVector& Point);
	static float SqrDistBetweenSegmentAndSegment(const struct FVector& Start1, const struct FVector& End1, const struct FVector& Start2, const struct FVector& End2);
	static bool TrySolveValidPositionOffset(TArray<struct FHitResult>* HitResults, struct FVector* OutVector, int32 IterateCount, float SqrEpsilon);
	static struct FVector WeightedTriangleNormal(const struct FVector& A, const struct FVector& B, const struct FVector& C);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MathFunctionLibrary">();
	}
	static class UMathFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMathFunctionLibrary>();
	}
};

// Class Marvel.MeshAssetUserData
// 0x0008 (0x0038 - 0x0030)
class UMeshAssetUserData final : public UAssetUserData
{
public:
	EMeshCheckType                                MeshCheckType;                                     // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeshAssetUserData">();
	}
	static class UMeshAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshAssetUserData>();
	}
};

// Class Marvel.MeshHiddenComponent
// 0x01B8 (0x02A8 - 0x00F0)
class UMeshHiddenComponent final : public UActorComponent
{
public:
	struct FGameplayTag                           FullyHiddenTag;                                    // 0x00F0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HiddenOnEnemyTag;                                  // 0x00FC(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HiddenOnAllyTag;                                   // 0x0108(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HiddenOnSelfTag;                                   // 0x0114(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HiddenByStealthTag;                                // 0x0120(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HiddenByInvisibleGirlTag;                          // 0x012C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HiddenByFogTag;                                    // 0x0138(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ExposedOnStealthTag;                               // 0x0144(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ExposedOnFogTag;                                   // 0x0150(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           PunisherPerspectiveTag;                            // 0x015C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           HelaPerspectiveTag;                                // 0x0168(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_174[0x3C];                                     // 0x0174(0x003C)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bHidden)>  MeshVisibilityChangeDispatcher;                    // 0x01B0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C0[0xE8];                                     // 0x01C0(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCharacterSculptChanged(int32 SculptID);
	void OnChildComponentAttached(class USceneComponent* CurrentComponent, class USceneComponent* ChildComponent);
	void OnChildComponentDetached(class USceneComponent* CurrentComponent, class USceneComponent* ChildComponent);
	void OnGameplayActorAdded(class AActor* GameplayActor);
	void OnGameplayActorRemoved(class AActor* GameplayActor);
	void OnHiddenTagsUpdate(const struct FGameplayTag& Tag, bool TagExists);
	void OnViewSideChanged(EClientPlayerViewSide InViewSide);
	void OnViewTargetChanged(class AActor* ViewingTarget);
	void SetComponentsHiddenConditional(class UObject* InObject, const TSet<TSubclassOf<class USceneComponent>>& RequireClasses, const class FName& IgnoreTag, const class FName& RequireTag, bool bInHidden);
	void SetGameplayActorsHidden(bool bInHidden);
	void SetHiddenInGame(bool bInHidden);
	bool ShouldHidden();
	void UpdateByHiddenTags();

	bool IsHiddenInGame() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeshHiddenComponent">();
	}
	static class UMeshHiddenComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshHiddenComponent>();
	}
};

// Class Marvel.MeshHitComponent
// 0x0090 (0x0180 - 0x00F0)
class UMeshHitComponent final : public UActorComponent
{
public:
	class FName                                   AttachSocketName;                                  // 0x00F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_FC[0x4];                                       // 0x00FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RelativeLocation;                                  // 0x0100(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               RelativeRotation;                                  // 0x0118(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	class UCapsuleComponent*                      CapsuleComponent;                                  // 0x0130(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x0138(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FMeshHitInfo                           CurrentMeshHitInfo;                                // 0x0140(0x0002)(Net, Transient, RepNotify, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_142[0x3E];                                     // 0x0142(0x003E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DisableMeshHit();
	bool EnableMeshHit(bool ForbidMeshPenetrate);
	bool IsEnable();
	void OnCharacterCapsuleSizeChanged();
	void OnRep_CurrentMeshHitInfo();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeshHitComponent">();
	}
	static class UMeshHitComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshHitComponent>();
	}
};

// Class Marvel.WidgetTagFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UWidgetTagFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AttachWidgetToPanelWithTag(class UWidget* Widget, const struct FGameplayTag& ParentPanelTag);
	static void AutoRegisterWidgetTag(class UWidget* Widget, const struct FMarvelWidgetTag& WidgetTag);
	static void AutoUnregisterWidgetTag(class UWidget* Widget, const struct FMarvelWidgetTag& WidgetTag);
	static void ClearupTypeTagsItem(class UObject* WCO, const struct FGameplayTagContainer& TypeTags);
	static struct FGameplayTagContainer GetWidgetTypeTags(class UWidget* Widget);
	static struct FGameplayTagContainer GetWidgetTypeTagsRecursive(class UWidget* Widget);
	static void RegisterWidgetPanelTag(class UWidget* Widget, const struct FGameplayTag& PanelTag);
	static void RegisterWidgetTypeTags(class UWidget* Widget, const struct FGameplayTagContainer& TypeTags, bool bClearExisting, bool bUniqueAdd);
	static void UnregisterWidgetPanelTag(class UWidget* Widget, const struct FGameplayTag& PanelTag);
	static void UnregisterWidgetTypeTags(class UWidget* Widget, const struct FGameplayTagContainer& TypeTags);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetTagFunctionLibrary">();
	}
	static class UWidgetTagFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetTagFunctionLibrary>();
	}
};

// Class Marvel.MeshOverlayMaterialComponent
// 0x0250 (0x0400 - 0x01B0)
class UMeshOverlayMaterialComponent final : public UAttachmentHelper
{
public:
	struct FStencilModifier_EnableCustomDepth     StencilModifier_EnableCustomDepth;                 // 0x01B0(0x0008)(NoDestructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1B8[0x80];                                     // 0x01B8(0x0080)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FName, float>                      ModifiedScalarParams;                              // 0x0238(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<class FName, struct FVector>             ModifiedVectorParams;                              // 0x0288(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<class FName, int32>                      SwitchParamCounter;                                // 0x02D8(0x0050)(Protected, NativeAccessSpecifierProtected)
	class UMaterialInterface*                     CommonEffectMaterial;                              // 0x0328(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TMap<class UMeshComponent*, class UMaterialInstanceDynamic*> MeshOverlayMIDCache;                               // 0x0330(0x0050)(ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_380[0x80];                                     // 0x0380(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void AddMaterialEffect(struct FMeshOverlayMaterialHandle& InOutHandle, const class UObject* InSourceObject, const class AActor* InTargetActor, const class FName SwitchParamName);
	static void RemoveMaterialEffect(struct FMeshOverlayMaterialHandle& InOutHandle);
	static void SetScalarParameterValue(const struct FMeshOverlayMaterialHandle& InHandle, const class FName ParameterName, const float ParameterValue);
	static void SetVectorParameterValue(const struct FMeshOverlayMaterialHandle& InHandle, const class FName ParameterName, const struct FVector& ParameterValue);

	void BindSkinInitializationWithCheck(bool bBind);
	void OnPredictedLODLevelChanged(class USkeletalMeshComponent* InComponent);
	void OnSkinInitialized(int32 SkinID);
	void OnTagUpdated(const struct FGameplayTag& TagUpdated, bool bTagExists);
	void SetOwnerScalarParameterValue(const class FName ParameterName, const float ParameterValue);
	void SetOwnerVectorParameterValue(const class FName ParameterName, const struct FVector& ParameterValue);
	void UnwatchComponentAttachment();
	void UpdateAllMeshesWorkSectionIdArray();
	void UpdateMeshOverlayMaterialSectionArray(class USkeletalMeshComponent* InComponent);
	void UpdateOverlayMaterial();
	void WatchComponentsAttachment();

	bool HasCommonEffectMaterial() const;
	bool IsOwnerTransparent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeshOverlayMaterialComponent">();
	}
	static class UMeshOverlayMaterialComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshOverlayMaterialComponent>();
	}
};

// Class Marvel.MeshSlotGroupAssetUserData
// 0x0028 (0x0058 - 0x0030)
class UMeshSlotGroupAssetUserData final : public UAssetUserData
{
public:
	TArray<struct FMeshSlotGroupSpec>             SlotGroups;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UAbilitySystemComponent> OwningAbilitySystemComponent;                      // 0x0040(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool SetGroupScalarParameter(const struct FGameplayTag& GroupTag, class FName ParameterName, float InValue) const;
	bool SetGroupScalarParameters(const struct FGameplayTag& GroupTag, const TArray<struct FMaterialParameterFloatValue>& InParameters) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeshSlotGroupAssetUserData">();
	}
	static class UMeshSlotGroupAssetUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshSlotGroupAssetUserData>();
	}
};

// Class Marvel.MeshSlotGroupStatics
// 0x0000 (0x0030 - 0x0030)
class UMeshSlotGroupStatics final : public UBlueprintFunctionLibrary
{
public:
	static class UMeshSlotGroupAssetUserData* GetMeshSlotGroup(class USkinnedMeshComponent* MeshComp);
	static bool SetGroupScalarParameter(class USkinnedMeshComponent* MeshComp, const struct FGameplayTag& GroupTag, class FName ParameterName, float InValue);
	static bool SetGroupScalarParameters(class USkinnedMeshComponent* MeshComp, const struct FGameplayTag& GroupTag, const TArray<struct FMaterialParameterFloatValue>& InParameters);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MeshSlotGroupStatics">();
	}
	static class UMeshSlotGroupStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMeshSlotGroupStatics>();
	}
};

// Class Marvel.ModifierSelector
// 0x00A0 (0x00D0 - 0x0030)
class UModifierSelector final : public UObject
{
public:
	uint8                                         Pad_30[0xA0];                                      // 0x0030(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Clear();
	void Initialize();
	void PushBattleInfoContext(const struct FBattleInfoContext& BattleInfoContext);
	void PyInitialize();
	float SelectByModifierId(const class FString& ModifierID);
	void SelectByTraceId(int32 TraceID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModifierSelector">();
	}
	static class UModifierSelector* GetDefaultObj()
	{
		return GetDefaultObjImpl<UModifierSelector>();
	}
};

// Class Marvel.ModuleControlBase
// 0x0018 (0x04A8 - 0x0490)
class AModuleControlBase : public AActor
{
public:
	class AActor*                                 FollowedPlayer;                                    // 0x0490(0x0008)(BlueprintVisible, Net, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ContinueTime;                                      // 0x0498(0x0004)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         UpdateFrequency;                                   // 0x049C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4A0[0x8];                                      // 0x04A0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetUpdateDeltaSeconds() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ModuleControlBase">();
	}
	static class AModuleControlBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AModuleControlBase>();
	}
};

// Class Marvel.MoveIgnoreActorControllerComponent
// 0x0038 (0x0128 - 0x00F0)
class UMoveIgnoreActorControllerComponent final : public UActorComponent
{
public:
	bool                                          bIgnoreAlly;                                       // 0x00F0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x7];                                       // 0x00F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UPrimitiveComponent*>            UpdatedComponents;                                 // 0x00F8(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_108[0x20];                                     // 0x0108(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddCustomIgnoreActor(class AActor* InActor);
	void AddIgnoreActor(class AActor* InActor);
	void RemoveIgnoreActor(class AActor* InActor);
	void UpdateIgnoreActor();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoveIgnoreActorControllerComponent">();
	}
	static class UMoveIgnoreActorControllerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoveIgnoreActorControllerComponent>();
	}
};

// Class Marvel.MoveMaskFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UMoveMaskFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MoveMaskFunctionLibrary">();
	}
	static class UMoveMaskFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMoveMaskFunctionLibrary>();
	}
};

// Class Marvel.MovementFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UMovementFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool CanSweepCapsuleToLocation(class UCapsuleComponent* InCapsule, const struct FVector& TargetLocation);
	static bool CanSweepCapsuleToLocationEx(class UCapsuleComponent* InCapsule, const struct FVector& Start, const struct FVector& End, float HalfHeightOffset, float RadiusOffset, struct FHitResult* OutHit);
	static bool CapsuleHasRoomCheck(class UCapsuleComponent* Capsule, const struct FVector& TargetLocation, float HeightOffset, float RadiusOffset);
	static struct FVector GetCapsuleBaseLocation(class UCapsuleComponent* Capsule, float ZOffset);
	static struct FVector GetCapsuleLocationFromBase(class UCapsuleComponent* Capsule, const struct FVector& BaseLocation, float ZOffset);
	static struct FVector GetPredictionStopPosition(class ACharacter* Character);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovementFunctionLibrary">();
	}
	static class UMovementFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovementFunctionLibrary>();
	}
};

// Class Marvel.MultiPositionComponent
// 0x0050 (0x04C0 - 0x0470)
class UMultiPositionComponent final : public USceneComponent
{
public:
	uint8                                         Pad_470[0x18];                                     // 0x0470(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0488(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EAkMultiPositionType                          MultiPositionType;                                 // 0x0490(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableByOwner;                                    // 0x0491(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_492[0x6];                                      // 0x0492(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           CachedAkComp;                                      // 0x0498(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<struct FTransform>                     SoundTransforms;                                   // 0x04A0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4B0[0x10];                                     // 0x04B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void PostMultiPositionSound();
	void StopMultiPositionSound();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MultiPositionComponent">();
	}
	static class UMultiPositionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMultiPositionComponent>();
	}
};

// Class Marvel.MultiWorldFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UMultiWorldFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UObject* GetMainWorld(class UObject* WCO);
	static bool InExtraWorld(class UObject* WCO);
	static bool InMainWorld(class UObject* WCO);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MultiWorldFunctionLibrary">();
	}
	static class UMultiWorldFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMultiWorldFunctionLibrary>();
	}
};

// Class Marvel.TargetValidatorStatics
// 0x0000 (0x0030 - 0x0030)
class UTargetValidatorStatics final : public UBlueprintFunctionLibrary
{
public:
	static bool FilterTargetingHitResult(const struct FHitResult& InHitResult, class UMarvelGameplayAbility* InAbility, class AActor* InCauserActor, float MaxRadius, float MaxHalfHeight);
	static bool FilterTargetingLocations(const TArray<struct FVector>& InLocations, class UMarvelGameplayAbility* InAbility, class AActor* InCauserActor, float MaxRadius, float MaxHalfHeight);
	static bool FilterTargetingPlacements(const TArray<struct FVector>& InLocations, const struct FHitResult& InHitResult, class UMarvelGameplayAbility* InAbility, class AActor* InCauserActor, float MaxRadius, float MaxHalfHeight);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TargetValidatorStatics">();
	}
	static class UTargetValidatorStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTargetValidatorStatics>();
	}
};

// Class Marvel.NavMeshBoundsVolume_LevelTool
// 0x0000 (0x04D0 - 0x04D0)
class ANavMeshBoundsVolume_LevelTool final : public AMarvelNavMeshBoundsVolume
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NavMeshBoundsVolume_LevelTool">();
	}
	static class ANavMeshBoundsVolume_LevelTool* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANavMeshBoundsVolume_LevelTool>();
	}
};

// Class Marvel.NetworkFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UNetworkFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float GetElapsedTimeSinceLastNetReceive(class APlayerController* PC);
	static float GetInPacketsLostPercent(class APlayerController* PC);
	static float GetOutPacketsLostPercent(class APlayerController* PC);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NetworkFunctionLibrary">();
	}
	static class UNetworkFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNetworkFunctionLibrary>();
	}
};

// Class Marvel.NiagaraDataInterfaceWwisePlayer
// 0x0010 (0x0050 - 0x0040)
class UNiagaraDataInterfaceWwisePlayer final : public UNiagaraDataInterface
{
public:
	class UAkAudioEvent*                          SoundToPlay;                                       // 0x0040(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxTriggerDistance;                                // 0x0048(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlaysPerTick;                                   // 0x004C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NiagaraDataInterfaceWwisePlayer">();
	}
	static class UNiagaraDataInterfaceWwisePlayer* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNiagaraDataInterfaceWwisePlayer>();
	}
};

// Class Marvel.NiagaraFluidsSimActor
// 0x0110 (0x05A0 - 0x0490)
class ANiagaraFluidsSimActor final : public AActor
{
public:
	struct FVector2D                              PointSize;                                         // 0x0490(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OpenSideDown;                                      // 0x04A0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OpenSideUp;                                        // 0x04A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OpenSideRight;                                     // 0x04A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OpenSideLeft;                                      // 0x04A3(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BorderWidth;                                       // 0x04A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dissipation;                                       // 0x04A8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimVelocity;                                       // 0x04AC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DiffuseSpeed;                                      // 0x04B0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseIntensity;                                    // 0x04B4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalHeight;                                      // 0x04B8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Depth;                                             // 0x04BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetailWarpIntensity;                               // 0x04C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHeight;                                         // 0x04C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     VelocityMat;                                       // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RTFluidSim;                                        // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RTVelocityPainter;                                 // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UNiagaraComponent*                      FluidSimEffect;                                    // 0x04E0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   GroundMesh;                                        // 0x04E8(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     InteractMat;                                       // 0x04F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              GroundCenter;                                      // 0x04F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              GroundScale;                                       // 0x0508(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundMeshSize;                                    // 0x0518(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableLODFilter;                                  // 0x051C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51D[0x3];                                      // 0x051D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LODMaxDistance;                                    // 0x0520(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LODMinDistance;                                    // 0x0524(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LODMaxLevel;                                       // 0x0528(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LODMinLevel;                                       // 0x052C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RT_FluidDebug;                                     // 0x0530(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               VelocityMatInstance;                               // 0x0538(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               InteractMatInstance;                               // 0x0540(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_548[0x58];                                     // 0x0548(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NiagaraFluidsSimActor">();
	}
	static class ANiagaraFluidsSimActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ANiagaraFluidsSimActor>();
	}
};

// Class Marvel.NiagaraFluidsSimComponent
// 0x0080 (0x04F0 - 0x0470)
class UNiagaraFluidsSimComponent final : public USceneComponent
{
public:
	struct FVector2D                              PointSize;                                         // 0x0470(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OpenSideDown;                                      // 0x0480(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OpenSideUp;                                        // 0x0481(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OpenSideRight;                                     // 0x0482(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OpenSideLeft;                                      // 0x0483(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BorderWidth;                                       // 0x0484(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Dissipation;                                       // 0x0488(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SimVelocity;                                       // 0x048C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DiffuseSpeed;                                      // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoiseIntensity;                                    // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NormalHeight;                                      // 0x0498(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Depth;                                             // 0x049C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetailWarpIntensity;                               // 0x04A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A4[0x4];                                      // 0x04A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     VelocityMat;                                       // 0x04A8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              GroundCenter;                                      // 0x04B0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              GroundScale;                                       // 0x04C0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         GroundMeshSize;                                    // 0x04D0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D4[0x4];                                      // 0x04D4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTextureRenderTarget2D*                 RTFluidSim;                                        // 0x04D8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 RTVelocityPainter;                                 // 0x04E0(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               VelocityMatInstance;                               // 0x04E8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NiagaraFluidsSimComponent">();
	}
	static class UNiagaraFluidsSimComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNiagaraFluidsSimComponent>();
	}
};

// Class Marvel.NiagaraParameterLibrary
// 0x0000 (0x0030 - 0x0030)
class UNiagaraParameterLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NiagaraParameterLibrary">();
	}
	static class UNiagaraParameterLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNiagaraParameterLibrary>();
	}
};

// Class Marvel.NPCAudioComponent
// 0x0058 (0x0148 - 0x00F0)
class UNPCAudioComponent final : public UActorComponent
{
public:
	class FText                                   NpcName;                                           // 0x00F0(0x0018)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<int32>                                 VoiceIDRandom;                                     // 0x0108(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	float                                         Cooldown;                                          // 0x0118(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           NpcTag;                                            // 0x011C(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_128[0x20];                                     // 0x0128(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 MarvelPostNpcVoice(int32 VoiceID, class AActor* ToCharacter);
	void OnFightEnd();
	bool StopNpcVoice(int32 FadeoutMS);
	bool TryPostNpcVoice(int32 VoiceID, class AActor* ToCharacter);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"NPCAudioComponent">();
	}
	static class UNPCAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UNPCAudioComponent>();
	}
};

// Class Marvel.OneShotAudioActor
// 0x0068 (0x04F8 - 0x0490)
class AOneShotAudioActor final : public AActor
{
public:
	uint8                                         Pad_490[0x18];                                     // 0x0490(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           AkCom;                                             // 0x04A8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4B0[0x48];                                     // 0x04B0(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnPostEventCallback(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo);
	int32 PostAkEventAtLocation(class UAkAudioEvent* AkEvent, const struct FVector& Location, EMarvelAudioType AudioType, class UObject* WCO, int32 CallbackMask, const class FString& InEventName, bool bStopLastPostEvent, const struct FRotator& Rotation);
	int32 PostAkEventBetweenLocation(class UObject* WCO, class UAkAudioEvent* AkEvent, const struct FVector& FromLoc, const struct FVector& ToLoc, float InterpSpeed, EMarvelAudioType AudioType);
	int32 PostAudioBetweenLocation(class UObject* WCO, int32 AudioID, int32 SkinID, const struct FVector& FromLoc, const struct FVector& ToLoc, float InterpSpeed, EMarvelAudioType AudioType);
	void SetDopplerEnabled(bool bEnabled, float OriginSpeed);
	void StopOnReachTarget(float FadeoutTime);
	void StopSounds();
	void UpdateDopplerRatio(const struct FVector& OldLoc, const struct FVector& NewLoc);
	void UpdateLocation(const struct FVector& Location, const struct FRotator& Rotation);

	class UAkComponent* GetAkComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OneShotAudioActor">();
	}
	static class AOneShotAudioActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AOneShotAudioActor>();
	}
};

// Class Marvel.OverlapHandlerComponent
// 0x0B40 (0x0C30 - 0x00F0)
class UOverlapHandlerComponent : public UActorComponent
{
public:
	struct FMarvelAbilityTargetFilter             FilterParams;                                      // 0x00F0(0x0500)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FOcclusionParameter                    OcclusionParam;                                    // 0x05F0(0x00B0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTag                           OcclusionTag;                                      // 0x06A0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6AC[0x4];                                      // 0x06AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMarvelAbilityTargetFilter             LoopCheckParams;                                   // 0x06B0(0x0500)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)
	struct FOverlapHandlerEffect                  EffectToAlly;                                      // 0x0BB0(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FOverlapHandlerEffect                  EffectToEnemy;                                     // 0x0BC8(0x0018)(Edit, BlueprintVisible, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bForceSkipOverlaps;                                // 0x0BE0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BE1[0x7];                                      // 0x0BE1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   InstigatorCharacter;                               // 0x0BE8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class AActor*>                         InsideActors;                                      // 0x0BF0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class UMarvelSummonedComponent*               OwnerSummonedComp;                                 // 0x0C00(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UPrimitiveComponent*>            AllCollisionComponents;                            // 0x0C08(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_C18[0x18];                                     // 0x0C18(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyEffectOnActorOverlap(class AActor* InActor);
	void ApplyEffectOnAllyOverlap(class AActor* InActor);
	void ApplyEffectOnEnemyOverlap(class AActor* InActor);
	class AActor* FindClosestPlayer(const TArray<class AActor*>& InPlayers);
	TArray<class AActor*> GetValidPlayersByLoopCheckParams();
	void InitComponentLogic();
	bool IsValidPlayer(class AActor* InActor);
	void LoopCheckValidPlayer();
	void OnActorBeginOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnActorExistOverlap(class AActor* OverlappedActor, class AActor* OtherActor);
	void OnOtherActorEnd(class AActor* InActor, EEndPlayReason EndPlayReason);
	void OnSummonedBegin(class AActor* InSummoned);
	void OnSummonedEnd(class AActor* InSummoned);
	void OnSummonedRecycle(class AActor* InSummoned);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"OverlapHandlerComponent">();
	}
	static class UOverlapHandlerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UOverlapHandlerComponent>();
	}
};

// Class Marvel.PersonalitySubAnimInstance
// 0x0040 (0x0470 - 0x0430)
class UPersonalitySubAnimInstance final : public UAnimInstance
{
public:
	float                                         BlendOutTime;                                      // 0x0428(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePersonalityABP;                             // 0x042C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LastCanPlayPersonality;                            // 0x042D(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_42E[0x2];                                      // 0x042E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CurrentIndex;                                      // 0x0430(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Timer;                                             // 0x0434(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsPlaying;                                        // 0x0438(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_439[0x3];                                      // 0x0439(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentMontageTime;                                // 0x043C(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TargetDelayTime;                                   // 0x0440(0x0004)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_444[0x4];                                      // 0x0444(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPersonalityStruct>             PersonalityStructs;                                // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, Protected, NativeAccessSpecifierProtected)
	class FName                                   SlotName;                                          // 0x0458(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_464[0xC];                                      // 0x0464(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	int32 GetRandomIndex();
	void InitNextAnimInfo();
	void K2_OnCannotPlay(class AMarvelBaseCharacter* Owner);
	void K2_OnCanPlay();
	void K2_WhileCannotPlay(class AMarvelBaseCharacter* Owner);
	void K2_WhileCanPlay(class AMarvelBaseCharacter* Owner, float DeltaTimeX);
	void OnCannotPlay(class AMarvelBaseCharacter* Owner);
	void OnCanPlay();
	void PlayPersonalityMontage(int32 Index_0);
	void StopPlayPersonalityMontage();
	void WhileCannotPlay(class AMarvelBaseCharacter* Owner);
	void WhileCanPlay(class AMarvelBaseCharacter* Owner, float DeltaTimeX);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PersonalitySubAnimInstance">();
	}
	static class UPersonalitySubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPersonalitySubAnimInstance>();
	}
};

// Class Marvel.PersonalizedSettingTableFuncLibrary
// 0x0000 (0x0030 - 0x0030)
class UPersonalizedSettingTableFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool GetPersonalizedSettingForAbility(int32 AbilityID, TArray<struct FAbilityPersonalizedSetting>* OutSettings);
	static bool GetPersonalizedSettingForHero(int32 HeroID, TArray<struct FAbilityPersonalizedSetting>* OutSettings);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PersonalizedSettingTableFuncLibrary">();
	}
	static class UPersonalizedSettingTableFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPersonalizedSettingTableFuncLibrary>();
	}
};

// Class Marvel.PhantomSourceInterface
// 0x0000 (0x0030 - 0x0030)
class IPhantomSourceInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhantomSourceInterface">();
	}
	static class IPhantomSourceInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IPhantomSourceInterface>();
	}
};

// Class Marvel.PhysicalInteractionComponent
// 0x10D0 (0x11C0 - 0x00F0)
class UPhysicalInteractionComponent : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(class APhysicsSummoner* NewWeaponSummoner)> OnWeaponSummonerChanged;                           // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FMarvelAbilityTraceContext             DetectTraceContext;                                // 0x0100(0x0F90)(ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         DetectWeaponType;                                  // 0x1090(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1091[0x3];                                     // 0x1091(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DetectRadius;                                      // 0x1094(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DetectIntervalTime;                                // 0x1098(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_109C[0x4];                                     // 0x109C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  ActivateTags;                                      // 0x10A0(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<int32>                                 AbilityIDs;                                        // 0x1108(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      TargetObjectTypes;                                 // 0x1118(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	class UMaterialInstanceDynamic*               CameraMaterialInstance;                            // 0x1128(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TMap<class APhysicsSummoner*, float>          SelectedInteractorInfos;                           // 0x1130(0x0050)(NativeAccessSpecifierPrivate)
	class APhysicsSummoner*                       WeaponSummoner;                                    // 0x1180(0x0008)(Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class APhysicsSummoner*                       CacheWeaponSummoner;                               // 0x1188(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class APhysicsSummoner*>               OtherWeaponSummoners;                              // 0x1190(0x0010)(Net, ZeroConstructor, NativeAccessSpecifierPrivate)
	struct FDeclarationHolder                     DeclarePlayerViewSideHolder;                       // 0x11A0(0x0010)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_11B0[0x10];                                    // 0x11B0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static bool CustomThrowWeapon(class APhysicsSummoner* Weapon, class UMarvelBaseGameplayAbility* OwningAbility, const struct FVector& StartLocation, const struct FPhysicsWeaponCustomThrowParameters& CustomThrowInfo);
	static uint8 GetWeaponTypeMask(const TArray<EPhysicsWeaponType>& WeaponTypeList);
	static TArray<class APhysicsSummoner*> StaticDetectPhysicsWeapon(struct FMarvelAbilityTraceContext& TraceContext, class AActor* InActor, const struct FVector& StartLocation, const struct FVector& EndLocation, const TMap<EPhysicsWeaponType, int32>& MaxTraceMap, int32 InMaxTraceNum);
	static TArray<class APhysicsSummoner*> StaticDetectTimeCrystal(struct FLoopAdsorbTaskParameters& LoopAdsorbParam, class AActor* InActor, const struct FVector& StartLocation, const struct FVector& EndLocation);
	static void StaticGetDetectablePhysicsSummoners(TArray<class APhysicsSummoner*>* OutSummoners, class AActor* DetectActor, float InDetectRadius, uint8 DetectTypeMask, struct FMarvelAbilityTraceContext* TraceContext);
	static bool ThrowWeapon(class APhysicsSummoner* Weapon, class UMarvelBaseGameplayAbility* OwnerAbility, int32 ProjectileID, const struct FVector& InRelativeLocation, int32 DurabilityReduction, bool bIsAimingTransform);

	bool CheckPossessWeapon(class APhysicsSummoner* Weapon, const struct FPhysicsWeaponPossessInfos& PossessInfos);
	void DetectInteractor();
	TArray<class APhysicsSummoner*> DetectPhysicsWeapon(struct FMarvelAbilityTraceContext& TraceContext, const TMap<EPhysicsWeaponType, int32>& MaxTraceMap, int32 InMaxTraceNum);
	void GetDetectablePhysicsSummoners(TArray<class APhysicsSummoner*>* OutSummoners, uint8 OverrideDetectType);
	EPhysicsWeaponType GetHoldingWeaponType();
	const TArray<class APhysicsSummoner*> GetOtherWeaponSummoners();
	void HoldShield(class APhysicsSummoner* Weapon, bool bHold);
	bool IsHoldingWeapon();
	void MulticastHoldShield(class APhysicsSummoner* Weapon, bool bHold);
	void MulticastPossessWeapon(class APhysicsSummoner* Weapon, const struct FPhysicsWeaponPossessInfo& PossessInfo);
	void MulticastUnPossessWeapon(const TArray<class APhysicsSummoner*>& InWeaponList);
	void MulticastUnPossessWeaponWithParam(const TArray<class APhysicsSummoner*>& InWeaponList, const struct FPhysicsWeaponUnPossessInfo& UnPossessInfo);
	void OnPlayerViewSideChanged(EClientPlayerViewSide InViewSide);
	void OnRep_WeaponSummoner();
	void PossessWeapon(class APhysicsSummoner* Weapon, const struct FPhysicsWeaponPossessInfo& PossessInfo);
	void PutDownWeapon(class APhysicsSummoner* Weapon);
	void SetHighLightOutline(class APhysicsSummoner* Weapon);
	void SetIgnoreCollision(class AActor* Target, bool bIgnore);
	void SetOutlineCameraMaterial(const bool bOutline);
	void SetWeaponSummoner(class APhysicsSummoner* NewWeapon);
	bool TryPossessWeapon(class APhysicsSummoner* Weapon, const struct FPhysicsWeaponPossessInfos& PossessInfos);
	void UnPossessWeapon();
	void UnPossessWeaponWithParam(const struct FPhysicsWeaponUnPossessInfo& UnPossessInfo);
	void UpdateCameraMaterial();
	void UpdateComponentTick();

	class APhysicsSummoner* GetWeaponSummoner() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicalInteractionComponent">();
	}
	static class UPhysicalInteractionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicalInteractionComponent>();
	}
};

// Class Marvel.InteractOverviewActor
// 0x0008 (0x0498 - 0x0490)
class AInteractOverviewActor final : public AActor
{
public:
	EPhysicsWeaponType                            WeaponType;                                        // 0x0490(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_491[0x3];                                      // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AnimIndex;                                         // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ResetAnim();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"InteractOverviewActor">();
	}
	static class AInteractOverviewActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AInteractOverviewActor>();
	}
};

// Class Marvel.PhysicsAssetShowActorUserData
// 0x0088 (0x00B8 - 0x0030)
class UPhysicsAssetShowActorUserData final : public UAssetUserData
{
public:
	bool                                          bDefaultPhysicsBlendConfigEnabled;                 // 0x0030(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultPhysicsBlendWeightMin;                      // 0x0034(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultPhysicsBlendWeightMax;                      // 0x0038(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultPhysicsBlendWeightTime;                     // 0x003C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DefaultPhysicsBlendStage;                          // 0x0040(0x0068)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FShowActorCustomPhysicsBlendConfig> CustomPhysicsBlendConfigs;                         // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UPhysicsAssetShowActorUserData* GetFromPhysicsAsset(class UPhysicsAsset* InPhysicsAsset);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsAssetShowActorUserData">();
	}
	static class UPhysicsAssetShowActorUserData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsAssetShowActorUserData>();
	}
};

// Class Marvel.PhysicsMeshComponent
// 0x0080 (0x09B0 - 0x0930)
class UPhysicsMeshComponent final : public UStaticMeshComponent
{
public:
	class UAkComponent*                           AkComponent;                                       // 0x0930(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAcceptImpulse;                                    // 0x0938(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_939[0x3];                                      // 0x0939(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ConstImpulse;                                      // 0x093C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         ImpulseInterval;                                   // 0x0940(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bClientSimulation;                                 // 0x0944(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_945[0x3];                                      // 0x0945(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ExplosionImpulse;                                  // 0x0948(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_94C[0x4];                                      // 0x094C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                ForceDirection;                                    // 0x0950(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OffsetX;                                           // 0x0968(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OffsetY;                                           // 0x096C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         OffsetZ;                                           // 0x0970(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_974[0x4];                                      // 0x0974(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkAudioEvent*                          SeparateEvent;                                     // 0x0978(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAkAudioEvent*                          AudioEvent;                                        // 0x0980(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CollisionInterval;                                 // 0x0988(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_98C[0x4];                                      // 0x098C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(bool bAcceptImpulse, const struct FVector& Impluse, const struct FVector& Location)> OnTakeImpluseDispatcher;                           // 0x0990(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_9A0[0x10];                                     // 0x09A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddImpulseAtBarycentre(const struct FVector& Impulse, const struct FVector& Location);
	bool GetAcceptImpulse();
	class FString GetMeshCompName();
	struct FVector K2_GetRelativeLocation();
	void OnCollisionHappened(class AActor* OtherActor, class UPrimitiveComponent* OtherComp, class UAkComponent* AK);
	void OnHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComponent, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void SetAcceptImpulse(bool InAcceptImpulse);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsMeshComponent">();
	}
	static class UPhysicsMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsMeshComponent>();
	}
};

// Class Marvel.PhysicsSummoner
// 0x00C0 (0x0950 - 0x0890)
class APhysicsSummoner : public AMarvelSummonerBase
{
public:
	class UInteractableMeshComponent*             MeshComponent;                                     // 0x0890(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USummonerWeaponComponent*               WeaponComponent;                                   // 0x0898(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelProjectileComponent*             MovementComponent;                                 // 0x08A0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelSummonedComponent*               SummonedComponent;                                 // 0x08A8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ApplyImpulseTimes;                                 // 0x08B0(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8B4[0xC];                                      // 0x08B4(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInteractableActorOriginInfo           OriginInfo;                                        // 0x08C0(0x0070)(Net, NoDestructor, NativeAccessSpecifierPublic)
	EPhysicsSummonerSourceType                    SourceType;                                        // 0x0930(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDeactivated;                                      // 0x0931(0x0001)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_932[0x2];                                      // 0x0932(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CollisionEnableTime;                               // 0x0934(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_938[0x18];                                     // 0x0938(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	EPhysicsWeaponType GetPhysicsWeaponType();
	void K2_EndAgentTask();
	void OnRep_Deactivated();
	void SetOriginInfo(const struct FInteractableActorOriginInfo& InOriginInfo);
	void SetSourceType(EPhysicsSummonerSourceType InSourceType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsSummoner">();
	}
	static class APhysicsSummoner* GetDefaultObj()
	{
		return GetDefaultObjImpl<APhysicsSummoner>();
	}
};

// Class Marvel.ShieldPhysicsSummoned
// 0x0000 (0x0950 - 0x0950)
class AShieldPhysicsSummoned final : public APhysicsSummoner
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShieldPhysicsSummoned">();
	}
	static class AShieldPhysicsSummoned* GetDefaultObj()
	{
		return GetDefaultObjImpl<AShieldPhysicsSummoned>();
	}
};

// Class Marvel.PhysicsWeaponData
// 0x0098 (0x00D0 - 0x0038)
class UPhysicsWeaponData final : public UDataAsset
{
public:
	struct FPhysicsWeaponAnimConfig               DefaultWeaponAnimConfig;                           // 0x0038(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	TMap<EPhysicsWeaponType, struct FPhysicsWeaponAnimConfig> WeaponAnimConfigMap;                               // 0x0050(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Idle_Medium;                                       // 0x00A0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Idle_Large;                                        // 0x00A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimSequence*                          Idle_Shield;                                       // 0x00B0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   AimOffset_Medium;                                  // 0x00B8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   AimOffset_Large;                                   // 0x00C0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAimOffsetBlendSpace*                   AimOffset_Shield;                                  // 0x00C8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	class UAimOffsetBlendSpace* GetAimOffset(EPhysicsWeaponType WeaponType);
	class UAnimSequence* GetIdleAnim(EPhysicsWeaponType WeaponType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsWeaponData">();
	}
	static class UPhysicsWeaponData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsWeaponData>();
	}
};

// Class Marvel.TraceComponentUtilityLibrary
// 0x0000 (0x0030 - 0x0030)
class UTraceComponentUtilityLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool BoxOverlapComponent(class UPrimitiveComponent* InComponent, const struct FVector& Pos, const struct FQuat& rot, const struct FVector& HalfSize, int32 ItemIndex, bool bTraceComplex);
	static bool BoxTraceComponent(class UPrimitiveComponent* InComponent, struct FHitResult* OutHit, const struct FVector& Start, const struct FVector& End, const struct FQuat& rot, const struct FVector& HalfSize, int32 ItemIndex, bool bTraceComplex);
	static bool CapsuleOverlapComponent(class UPrimitiveComponent* InComponent, const struct FVector& Pos, const struct FQuat& rot, float Radius, float HalfHeight, int32 ItemIndex, bool bTraceComplex);
	static bool CapsuleTraceComponent(class UPrimitiveComponent* InComponent, struct FHitResult* OutHit, const struct FVector& Start, const struct FVector& End, const struct FQuat& rot, float Radius, float HalfHeight, int32 ItemIndex, bool bTraceComplex);
	static bool LineTraceComponent(class UPrimitiveComponent* InComponent, struct FHitResult* OutHit, const struct FVector& Start, const struct FVector& End, int32 ItemIndex, bool bTraceComplex);
	static bool SphereOverlapComponent(class UPrimitiveComponent* InComponent, const struct FVector& Pos, const struct FQuat& rot, float Radius, int32 ItemIndex, bool bTraceComplex);
	static bool SphereTraceComponent(class UPrimitiveComponent* InComponent, struct FHitResult* OutHit, const struct FVector& Start, const struct FVector& End, const struct FQuat& rot, float Radius, int32 ItemIndex, bool bTraceComplex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TraceComponentUtilityLibrary">();
	}
	static class UTraceComponentUtilityLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTraceComponentUtilityLibrary>();
	}
};

// Class Marvel.PhysicsWeaponSubAnimInstance
// 0x0010 (0x0450 - 0x0440)
class UPhysicsWeaponSubAnimInstance final : public UPhysicsWeaponSubAnimInstanceBase
{
public:
	bool                                          bDoubleHand;                                       // 0x0440(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_441[0x7];                                      // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimSequence*                          NowPhysicsWeaponIdleAnim;                          // 0x0448(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsWeaponSubAnimInstance">();
	}
	static class UPhysicsWeaponSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsWeaponSubAnimInstance>();
	}
};

// Class Marvel.PhysicsWeaponExSubAnimInstance
// 0x0040 (0x0480 - 0x0440)
class UPhysicsWeaponExSubAnimInstance final : public UPhysicsWeaponSubAnimInstanceBase
{
public:
	bool                                          bUsingIK_L;                                        // 0x0440(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_441[0x7];                                      // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                IKEffect_L;                                        // 0x0448(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IKWeight_L;                                        // 0x0460(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bShouldSetIKBoneRot_L;                             // 0x0464(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_465[0x3];                                      // 0x0465(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               IKBoneRotation_L;                                  // 0x0468(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PhysicsWeaponExSubAnimInstance">();
	}
	static class UPhysicsWeaponExSubAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPhysicsWeaponExSubAnimInstance>();
	}
};

// Class Marvel.SimpleBoxPlayerCheckComponent
// 0x0160 (0x0A00 - 0x08A0)
#pragma pack(push, 0x1)
class alignas(0x10) USimpleBoxPlayerCheckComponent : public UBoxComponent
{
public:
	struct FVector                                BoxHalfSize;                                       // 0x08A0(0x0018)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8B8[0x8];                                      // 0x08B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             LocalTransform;                                    // 0x08C0(0x0060)(BlueprintVisible, BlueprintReadOnly, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CheckFrequency;                                    // 0x0920(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_924[0x4];                                      // 0x0924(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class ACharacter* Character)> OnPlayerEnter;                                     // 0x0928(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class ACharacter* Character)> OnPlayerExit;                                      // 0x0938(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_948[0x58];                                     // 0x0948(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class ACharacter*>                       InsidePlayerList;                                  // 0x09A0(0x0050)(Protected, NativeAccessSpecifierProtected)
	class AMarvelGameState*                       CurrentGameState;                                  // 0x09F0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleBoxPlayerCheckComponent">();
	}
	static class USimpleBoxPlayerCheckComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleBoxPlayerCheckComponent>();
	}
};
#pragma pack(pop)

// Class Marvel.PlayerPenetrationCheckComponent
// 0x0180 (0x0B80 - 0x0A00)
class UPlayerPenetrationCheckComponent final : public USimpleBoxPlayerCheckComponent
{
public:
	TSet<class UActorComponent*>                  CheckAttachChildren;                               // 0x09F8(0x0050)(ExportObject, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_A48[0x30];                                     // 0x0A48(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAvailable;                                        // 0x0A78(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A79[0x3];                                      // 0x0A79(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ServerTolerance;                                   // 0x0A7C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BoxExtendUpdateInterval;                           // 0x0A80(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_A84[0x4];                                      // 0x0A84(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                BoxExtendExtraSize;                                // 0x0A88(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bOnlyCheckSummonedOnServer;                        // 0x0AA0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0AA1(0x0001)(BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA2[0x6];                                      // 0x0AA2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class AActor*>                           InsideSummonedList;                                // 0x0AA8(0x0050)(NativeAccessSpecifierPrivate)
	TSet<class AActor*>                           InsideSpecialActorList;                            // 0x0AF8(0x0050)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_B48[0x38];                                     // 0x0B48(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearInsideActor();
	void OnComponentAttached(class USceneComponent* SrcComp, class USceneComponent* AttachedComp);
	void OnComponentDetached(class USceneComponent* SrcComp, class USceneComponent* DetachedComp);
	void OnRep_Enable();
	void OnSummonedRecycleAgentTask(class AActor* InActor);
	void SetAvailable(bool bIsAvailable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerPenetrationCheckComponent">();
	}
	static class UPlayerPenetrationCheckComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerPenetrationCheckComponent>();
	}
};

// Class Marvel.TriggerHapticFeedbackLibrary
// 0x0000 (0x0030 - 0x0030)
class UTriggerHapticFeedbackLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ResetHapticFeedbackEffect(class UObject* WorldContextObject, bool bIsRightMask, float Threshold);
	static void SetHapticFeedbackSettingState(class UObject* WorldContextObject, bool bIsOpen);
	static void UpdateHapticFeedbackState(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TriggerHapticFeedbackLibrary">();
	}
	static class UTriggerHapticFeedbackLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTriggerHapticFeedbackLibrary>();
	}
};

// Class Marvel.PlayerStartBillboardComponent
// 0x0040 (0x04B0 - 0x0470)
class UPlayerStartBillboardComponent final : public USceneComponent
{
public:
	class ABirthBase*                             OwnerBirthBase;                                    // 0x0470(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartRadius;                                       // 0x0478(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartCount;                                        // 0x047C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UBillboardComponent*>            GoodSprites;                                       // 0x0480(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	TArray<class UBillboardComponent*>            BadSprites;                                        // 0x0490(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A0[0x10];                                     // 0x04A0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerStartBillboardComponent">();
	}
	static class UPlayerStartBillboardComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerStartBillboardComponent>();
	}
};

// Class Marvel.PlayerStatistics
// 0x0060 (0x0090 - 0x0030)
class UPlayerStatistics final : public UObject
{
public:
	TMap<int32, class UHeroStatistics*>           HeroToStatistics;                                  // 0x0030(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	class UHeroStatisticsController*              HeroController;                                    // 0x0080(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SelectHeroID;                                      // 0x0088(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerUID;                                         // 0x008C(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void Initialize(class UHeroStatisticsController* InLogController, int32 PlayerUID_0);
	void OnBattleEnd();
	void OnBattleStart();
	void OnLeaveGame();
	void OnPlayerLeaveGame(const int32 HeroID);
	void OnPossessCharacter(class AMarvelPlayerState* PlayerState, class AMarvelBaseCharacter* Character);
	void OnTransitionStart();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerStatistics">();
	}
	static class UPlayerStatistics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerStatistics>();
	}
};

// Class Marvel.TriggerHapticFeedbackEffect_Weapon
// 0x0090 (0x0170 - 0x00E0)
class UTriggerHapticFeedbackEffect_Weapon final : public UTriggerHapticFeedbackEffect_Base
{
public:
	uint8                                         StartPosition;                                     // 0x00E0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         EndPosition;                                       // 0x00E1(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         WeaponStrength;                                    // 0x00E2(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E3[0x5];                                       // 0x00E3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     WeaponStrengthCurve;                               // 0x00E8(0x0088)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TriggerHapticFeedbackEffect_Weapon">();
	}
	static class UTriggerHapticFeedbackEffect_Weapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTriggerHapticFeedbackEffect_Weapon>();
	}
};

// Class Marvel.PortalPhantomSubsystem
// 0x0050 (0x0088 - 0x0038)
class UPortalPhantomSubsystem final : public UWorldSubsystem
{
public:
	TMap<class UObject*, struct FMarvelPhantomActors> PhantomMap;                                        // 0x0038(0x0050)(Protected, NativeAccessSpecifierProtected)

public:
	static bool CreatePhantom(class UObject* InLinkTarget, class UObject* INCreatePhantomObject, bool bCustomPhantom);
	static class UPortalPhantomSubsystem* Get(const class UObject* WCO);

	void RefreshPhantom(class AActor* ActorNeedChange);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PortalPhantomSubsystem">();
	}
	static class UPortalPhantomSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPortalPhantomSubsystem>();
	}
};

// Class Marvel.PortalCollisionMeshComponent
// 0x0000 (0x0930 - 0x0930)
class UPortalCollisionMeshComponent final : public UStaticMeshComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PortalCollisionMeshComponent">();
	}
	static class UPortalCollisionMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPortalCollisionMeshComponent>();
	}
};

// Class Marvel.MarvelPortalCalcCameraInterface
// 0x0000 (0x0030 - 0x0030)
class IMarvelPortalCalcCameraInterface final : public IInterface
{
public:
	class APortalViewActor* GetOverlappingPortal() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelPortalCalcCameraInterface">();
	}
	static class IMarvelPortalCalcCameraInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IMarvelPortalCalcCameraInterface>();
	}
};

// Class Marvel.PortalViewActor
// 0x0360 (0x0BF0 - 0x0890)
#pragma pack(push, 0x1)
class alignas(0x10) APortalViewActor : public AMarvelSummonerBase
{
public:
	uint8                                         Pad_890[0xA8];                                     // 0x0890(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InsertingTraceHeight;                              // 0x0938(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxCaptureDistance;                                // 0x093C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsSingleSide;                                     // 0x0940(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsLevelPortal;                                     // 0x0941(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_942[0x2];                                      // 0x0942(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LevelPortalViewDistance;                           // 0x0944(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         WeightedDistanceToCamera;                          // 0x0948(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlusSpeed;                                         // 0x094C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PortalRadius;                                      // 0x0950(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_954[0x4];                                      // 0x0954(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APortalViewActor*                       LinkPortal;                                        // 0x0958(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         TranslateBuffID;                                   // 0x0960(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_964[0x4];                                      // 0x0964(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USceneComponent*                        BlockingVolumes;                                   // 0x0968(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bToggleDebug;                                      // 0x0970(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPortalCamera;                                     // 0x0971(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPortalCameraBlockingVolume;                       // 0x0972(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_973[0x1];                                      // 0x0973(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ClosePortalCameraDistance;                         // 0x0974(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         CloseCharacterDistance;                            // 0x0978(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPortalUpdateControlRotation;                      // 0x097C(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_97D[0x3];                                      // 0x097D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PortalUpdateControlRotationTotalTime;              // 0x0980(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EEasingFunc                                   ControlType;                                       // 0x0984(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_985[0x3];                                      // 0x0985(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         BlendExp;                                          // 0x0988(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Steps;                                             // 0x098C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnPortalTransformUpdated;                          // 0x0990(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bEnable)>  OnLinkPortalIsInFog;                               // 0x09A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FName                                   PortalID;                                          // 0x09B0(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9BC[0x4];                                      // 0x09BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                TraceBoxSizeMulti;                                 // 0x09C0(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UPortalCollisionMeshComponent*          CollisionMesh;                                     // 0x09D8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UStaticMeshComponent*                   BoundMesh;                                         // 0x09E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         PotentiallyTranslatedActors;                       // 0x09E8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class AActor*>                         OverlappingActorsLastTick;                         // 0x09F8(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TArray<class UChildConnection*>               PortalConnections;                                 // 0x0A08(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	struct FObjectForceChangedInfo                CurrentForceChangedInfo;                           // 0x0A18(0x00A8)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_AC0[0x28];                                     // 0x0AC0(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           MeshScaleCurve;                                    // 0x0AE8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelTimelineComponent*               TimelineComp;                                      // 0x0AF0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsReadyToTranslate;                               // 0x0AF8(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AF9[0x77];                                     // 0x0AF9(0x0077)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<int32>                                 AbilityIDCantTranslateCharacter;                   // 0x0B70(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  GameplayTagsCantTranslateCharacter;                // 0x0B80(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	void ClearLastTeleportActors();
	void OnBirthBaseActiveDispatch(class AActor* InBirthBase);
	void OnFlipFlop_GameThread(class UPrimitiveComponent* FlipFlopComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, bool bFrontToBack);
	void OnRep_LinkPortal();
	void SetNewCameraLag(class AActor* InActor);
	bool SetNewLocation(class AActor* InActor);
	void SetNewRotation(class AActor* InActor);
	void SetNewVelocity(class AActor* InActor);
	void UpdateFakeCamera();
	void UpdateMeshScale(const struct FVector& InValue);
	void UpdatePhantom(bool bEnable, class AActor* SourceActorForPhantom);

	bool IsDirFacingPortal(const struct FVector& InDir) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PortalViewActor">();
	}
	static class APortalViewActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APortalViewActor>();
	}
};
#pragma pack(pop)

// Class Marvel.UIAutoConsoleCommandDelegateHub
// 0x0050 (0x0080 - 0x0030)
class UUIAutoConsoleCommandDelegateHub final : public UObject
{
public:
	TMap<class FString, TDelegate<void(const TArray<class FString>& Args, class UWorld* World)>> Delegates;                                         // 0x0030(0x0050)(Edit, BlueprintVisible, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	void Register(const class FString& Command, const TDelegate<void(const TArray<class FString>& Args, class UWorld* World)>& Delegate);
	void UnRegister(const class FString& Command);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIAutoConsoleCommandDelegateHub">();
	}
	static class UUIAutoConsoleCommandDelegateHub* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIAutoConsoleCommandDelegateHub>();
	}
};

// Class Marvel.Cue_Summoner_Loop_10186301
// 0x0160 (0x0FF0 - 0x0E90)
class alignas(0x10) ACue_Summoner_Loop_10186301 : public AMarvelCueNotify_Summoned
{
public:
	uint8                                         Pad_E90[0x78];                                     // 0x0E90(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RenderTargetScalar;                                // 0x0F08(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F0C[0x4];                                      // 0x0F0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CaptureInterval;                                   // 0x0F10(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EPortalScalability                            Scalability;                                       // 0x0F14(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F15[0x3];                                      // 0x0F15(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UCreatePhantomStaticMeshComponent*      PortalMesh;                                        // 0x0F18(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   BoundMesh;                                         // 0x0F20(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStaticMeshComponent*                   FillCustomDepthMesh;                               // 0x0F28(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        FogMeshes;                                         // 0x0F30(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneCaptureWithScissorComponent2D*    PortalCapture;                                     // 0x0F38(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveVector*                           MeshScaleCurve;                                    // 0x0F40(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelTimelineComponent*               TimelineComp;                                      // 0x0F48(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTextureRenderTarget2D*                 PortalRT;                                          // 0x0F50(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnTimelineStart;                                   // 0x0F58(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     NormalMeshMaterial;                                // 0x0F68(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     NormalMeshMaterialSingleSide;                      // 0x0F70(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     BlockedMeshMaterial;                               // 0x0F78(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F80[0x70];                                     // 0x0F80(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CallResetCache();
	void OnLinkPortalIsInFog(bool bEnable);
	void OnOwnerPortalTransformUpdated();
	void UpdateMeshScale(const struct FVector& OutValue);
	void UpdateSceneCaptureTeamOutlineColor();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Summoner_Loop_10186301">();
	}
	static class ACue_Summoner_Loop_10186301* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Summoner_Loop_10186301>();
	}
};

// Class Marvel.CreatePhantomStaticMeshComponent
// 0x0120 (0x0A50 - 0x0930)
class UCreatePhantomStaticMeshComponent final : public UStaticMeshComponent
{
public:
	uint8                                         Pad_930[0x78];                                     // 0x0930(0x0078)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class AActor*, class AActor*>            PhantomMap;                                        // 0x09A8(0x0050)(NativeAccessSpecifierPublic)
	TMap<class AActor*, class AActor*>            CustomPhantomMap;                                  // 0x09F8(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_A48[0x8];                                      // 0x0A48(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CreatePhantomStaticMeshComponent">();
	}
	static class UCreatePhantomStaticMeshComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCreatePhantomStaticMeshComponent>();
	}
};

// Class Marvel.PortalViewActor_Level
// 0x00A0 (0x0C90 - 0x0BF0)
class APortalViewActor_Level final : public APortalViewActor
{
public:
	class USummonedComp_Level*                    SummonedComponent;                                 // 0x0BE8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ExtraGameplayTags;                                 // 0x0BF0(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	class APortalViewActor*                       LinkedLevelPortal;                                 // 0x0C58(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBlockedPortalSettings                 BlockedSettings;                                   // 0x0C60(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bBlocked)> OnPortalBlockedUpdate;                             // 0x0C80(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	void CaptureCube();
	void SetCubeComponent(class USceneCaptureComponentCube* Comp);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PortalViewActor_Level">();
	}
	static class APortalViewActor_Level* GetDefaultObj()
	{
		return GetDefaultObjImpl<APortalViewActor_Level>();
	}
};

// Class Marvel.Widget_AbilityTarget
// 0x0000 (0x08A0 - 0x08A0)
class UWidget_AbilityTarget : public UMarvel3DWidget
{
public:
	void AddTip(const int32 InTipID, const struct FUIActionData& InActionData);
	int32 GetTipsNum();
	void RemoveTip(const int32 InTipID);
	void Reset();
	void SetIsEnemy(bool bIsEnemy);
	void SetIsPhysics(bool bIsPhysics);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_AbilityTarget">();
	}
	static class UWidget_AbilityTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_AbilityTarget>();
	}
};

// Class Marvel.SummonedComp_Level
// 0x0000 (0x0CA0 - 0x0CA0)
class USummonedComp_Level final : public USummonedComp_10186101
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SummonedComp_Level">();
	}
	static class USummonedComp_Level* GetDefaultObj()
	{
		return GetDefaultObjImpl<USummonedComp_Level>();
	}
};

// Class Marvel.PortalViewActor_101863
// 0x0000 (0x0BF0 - 0x0BF0)
class APortalViewActor_101863 final : public APortalViewActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PortalViewActor_101863">();
	}
	static class APortalViewActor_101863* GetDefaultObj()
	{
		return GetDefaultObjImpl<APortalViewActor_101863>();
	}
};

// Class Marvel.Cue_Summoner_Loop_10186301_Level
// 0x0010 (0x1000 - 0x0FF0)
class ACue_Summoner_Loop_10186301_Level final : public ACue_Summoner_Loop_10186301
{
public:
	class UNiagaraComponent*                      BlockedNiagaraComp;                                // 0x0FF0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_FF8[0x8];                                      // 0x0FF8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnOwnerLevelPortalBlockedUpdate(bool bEnable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Cue_Summoner_Loop_10186301_Level">();
	}
	static class ACue_Summoner_Loop_10186301_Level* GetDefaultObj()
	{
		return GetDefaultObjImpl<ACue_Summoner_Loop_10186301_Level>();
	}
};

// Class Marvel.PortalViewActorSubSystem
// 0x0068 (0x00B0 - 0x0048)
class UPortalViewActorSubSystem final : public UTickableWorldSubsystem
{
public:
	uint8                                         Pad_48[0x68];                                      // 0x0048(0x0068)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void DrawDebugBlockedMsg(class UCanvas* Canvas, class APlayerController* PC);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PortalViewActorSubSystem">();
	}
	static class UPortalViewActorSubSystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPortalViewActorSubSystem>();
	}
};

// Class Marvel.WidgetSettings_CharacterInfo
// 0x0018 (0x0048 - 0x0030)
class UWidgetSettings_CharacterInfo final : public UObject
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetSettings_CharacterInfo">();
	}
	static class UWidgetSettings_CharacterInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetSettings_CharacterInfo>();
	}
};

// Class Marvel.PresetDestructionVolume
// 0x0060 (0x0510 - 0x04B0)
class APresetDestructionVolume final : public AMarvelActorBase
{
public:
	uint8                                         Pad_4B0[0x30];                                     // 0x04B0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class UStaticMeshComponent*                   StaticMeshComponent;                               // 0x04E0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTeamComponent*                         TeamComponent;                                     // 0x04E8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UDestructionVolumeMesh*                 DestructionVolumeMeshComponent;                    // 0x04F0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelBaseAbilitySystemComponent*      AbilitySystemComponent;                            // 0x04F8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulateDamageAmount;                            // 0x0500(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         VolumeID;                                          // 0x0504(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageTypeForDestruction                     MinDamageTypeToBreak;                              // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_509[0x7];                                      // 0x0509(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void InitVolumeMesh(class UDestructionVolumeMesh* StaticMesh);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PresetDestructionVolume">();
	}
	static class APresetDestructionVolume* GetDefaultObj()
	{
		return GetDefaultObjImpl<APresetDestructionVolume>();
	}
};

// Class Marvel.DestructionVolumeComponent
// 0x00C0 (0x0960 - 0x08A0)
class UDestructionVolumeComponent final : public UBoxComponent
{
public:
	int32                                         VolumeID;                                          // 0x08A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EDamageTypeForDestruction                     MinDamageTypeToBreak;                              // 0x08A4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A5[0x3];                                      // 0x08A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastDamagedTime;                                   // 0x08A8(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8AC[0x4];                                      // 0x08AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarvelPresetVolumeColorParams> ColorParams;                                       // 0x08B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FLinearColor                           FadeInitColor;                                     // 0x08C0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           FadeTargetColor;                                   // 0x08D0(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E0[0x4];                                      // 0x08E0(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AccumulateDamage;                                  // 0x08E4(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8E8[0x8];                                      // 0x08E8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             Transform_UI;                                      // 0x08F0(0x0060)(Edit, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_950[0x10];                                     // 0x0950(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_AccumulateDamage();

	void OnRep_LastDamagedTime() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DestructionVolumeComponent">();
	}
	static class UDestructionVolumeComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDestructionVolumeComponent>();
	}
};

// Class Marvel.DestructionVolumeMesh
// 0x0040 (0x0970 - 0x0930)
class UDestructionVolumeMesh final : public UStaticMeshComponent
{
public:
	EDamageTypeForDestruction                     MinDamageTypeToBreak;                              // 0x0930(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_931[0x3];                                      // 0x0931(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FColor                                 RenderColor;                                       // 0x0934(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AccumulateDamage;                                  // 0x0938(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_93C[0x4];                                      // 0x093C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelPresetDestructionActor*          PresetDestructionActor;                            // 0x0940(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APresetDestructionVolume*               VolumeMeshActor;                                   // 0x0948(0x0008)(Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnable;                                           // 0x0950(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_951[0x1F];                                     // 0x0951(0x001F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnRep_VolumeMeshActor();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"DestructionVolumeMesh">();
	}
	static class UDestructionVolumeMesh* GetDefaultObj()
	{
		return GetDefaultObjImpl<UDestructionVolumeMesh>();
	}
};

// Class Marvel.PresetSpectatorTarget
// 0x0010 (0x04A0 - 0x0490)
class APresetSpectatorTarget final : public AActor
{
public:
	class UCameraComponent*                       CameraComponent;                                   // 0x0490(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpectatorIndex;                                    // 0x0498(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49C[0x4];                                      // 0x049C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PresetSpectatorTarget">();
	}
	static class APresetSpectatorTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<APresetSpectatorTarget>();
	}
};

// Class Marvel.Widget_HpBar_VX
// 0x0018 (0x05C0 - 0x05A8)
class UWidget_HpBar_VX : public UMarvelUserWidget
{
public:
	class UWidgetAnimation*                       Anim_Pointer_FadeOut;                              // 0x05A8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Anim_Hit01;                                        // 0x05B0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Anim_Hit02;                                        // 0x05B8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_HpBar_VX">();
	}
	static class UWidget_HpBar_VX* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_HpBar_VX>();
	}
};

// Class Marvel.PresetTopDownSpectator
// 0x0008 (0x0498 - 0x0490)
class APresetTopDownSpectator final : public AActor
{
public:
	class UCameraComponent*                       CameraComponent;                                   // 0x0490(0x0008)(Edit, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PresetTopDownSpectator">();
	}
	static class APresetTopDownSpectator* GetDefaultObj()
	{
		return GetDefaultObjImpl<APresetTopDownSpectator>();
	}
};

// Class Marvel.PresetSpectatingBoundAnchor
// 0x0010 (0x04A0 - 0x0490)
class APresetSpectatingBoundAnchor final : public AActor
{
public:
	class USceneComponent*                        SceneComponent;                                    // 0x0490(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         GroupId;                                           // 0x0498(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49C[0x4];                                      // 0x049C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PresetSpectatingBoundAnchor">();
	}
	static class APresetSpectatingBoundAnchor* GetDefaultObj()
	{
		return GetDefaultObjImpl<APresetSpectatingBoundAnchor>();
	}
};

// Class Marvel.PresetSpectationTargetManager
// 0x0068 (0x0098 - 0x0030)
class UPresetSpectationTargetManager final : public UObject
{
public:
	TArray<class APresetSpectatorTarget*>         PresetSpectatorTargets;                            // 0x0030(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	class APresetTopDownSpectator*                PresetTopDownSpectator;                            // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x50];                                      // 0x0048(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UPresetSpectationTargetManager* Get(class UObject* WCO);

	bool ClampSpectatingLocation(struct FVector* OutLocation);
	class APresetSpectatorTarget* GetPresetTargetByIndex(int32 Index_0);
	void RegisterSpectatorTarget(class APresetSpectatorTarget* SpectatorTarget);
	void UnRegisterSpectatorTarget(class APresetSpectatorTarget* SpectatorTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PresetSpectationTargetManager">();
	}
	static class UPresetSpectationTargetManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPresetSpectationTargetManager>();
	}
};

// Class Marvel.ProfileFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UProfileFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float GetDownscaleFactorForLoadingPath(const class FString& Path);
	static class FString GetLastCSVFileName();
	static class FString GetLastNetProfileFileName();
	static class FString GetLastStatFileName();
	static class FString GetLastTraceFileName();
	static class FString GetProfingDir();
	static class FString GetSavedDir();
	static class FString ServerGetSessionName(class UObject* WorldContextObject);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProfileFunctionLibrary">();
	}
	static class UProfileFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProfileFunctionLibrary>();
	}
};

// Class Marvel.ProjectileAbilityStatisticsImpl
// 0x0000 (0x00F0 - 0x00F0)
class UProjectileAbilityStatisticsImpl final : public UHitRateAbilityStatisticsImpl
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProjectileAbilityStatisticsImpl">();
	}
	static class UProjectileAbilityStatisticsImpl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProjectileAbilityStatisticsImpl>();
	}
};

// Class Marvel.ProjectileCollisionComponent
// 0x0040 (0x08D0 - 0x0890)
#pragma pack(push, 0x1)
class alignas(0x10) UProjectileCollisionComponent : public USphereComponent
{
public:
	int32                                         NotifiedHits;                                      // 0x0888(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_88C[0x4];                                      // 0x088C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UShapeComponent*>                CollisionComponents;                               // 0x0890(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          bEnableTrace;                                      // 0x08A0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableRoleTrace;                                  // 0x08A1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableSceneTrace;                                 // 0x08A2(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8A3[0x1];                                      // 0x08A3(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         RoleTraceRadius;                                   // 0x08A4(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         RoleTraceRadius_Ally;                              // 0x08A8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8AC[0x1C];                                     // 0x08AC(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnNotifyHit(class UPrimitiveComponent* HitComponent, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);
	void SetEnableRoleTrace(bool bEnable);
	void SetEnableSceneTrace(bool bEnable);
	void SetRadiusForRoleTrace(float InRadiusForEnemy, float InRadiusForAlly);

	bool GetEnableRoleTrace() const;
	bool GetEnableSceneTrace() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProjectileCollisionComponent">();
	}
	static class UProjectileCollisionComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProjectileCollisionComponent>();
	}
};
#pragma pack(pop)

// Class Marvel.UIInputUserWidgetExtension
// 0x0078 (0x00A8 - 0x0030)
class UUIInputUserWidgetExtension final : public UMarvelUserWidgetExtension
{
public:
	class UInputMappingContext*                   UIActionMappingContextBP;                          // 0x0030(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   InputContextPriorityName;                          // 0x0038(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_44[0x64];                                      // 0x0044(0x0064)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ClearEnhancedInputActionBindings();
	void ClearGlobalInputKey();
	void ClearInputActionBindings();
	void ClearInputKeyBinds();
	void ClearMyAllInputBindings();
	void ReceiveGlobalInputKeyExecutCallback(int32 Handle);
	void RegisterAxisKey(const struct FKey& Key, bool bConsume);
	void RegisterEnhancedInputAction(const class UInputAction* Action, ETriggerEvent InTriggerEvent, bool InWithTriggerEvent, bool InWithValue);
	void RegisterGlobalInputKey(const struct FKey& Key, const EInputEvent KeyEvent, bool bConsume);
	int32 RegisterInputAction(class FName ActionName, const EInputEvent EventType, bool bConsume);
	void RegisterInputAxis(const class FName AxisName, bool bConsume);
	void RegisterInputChord(const struct FInputChord& Chord, const EInputEvent KeyEvent, bool bConsume);
	void RegisterInputKey(const struct FKey& Key, const EInputEvent KeyEvent, bool bConsume);
	void RequestRegisterInputContextBp();
	void RequestUnRegisterInputContextBp();
	void UnRegisterAxisKey(const struct FKey& Key);
	void UnRegisterEnhancedInputAction(const class UInputAction* Action);
	void UnRegisterGlobalInputKey(const struct FKey& Key, const EInputEvent KeyEvent);
	void UnregisterInputActionByActionName(class FName ActionName);
	void UnregisterInputActionByHandle(int32 Handle);
	void UnregisterInputAxis(const class FName AxisName);
	void UnregisterInputChord(const struct FInputChord& Chord, const EInputEvent KeyEvent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIInputUserWidgetExtension">();
	}
	static class UUIInputUserWidgetExtension* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIInputUserWidgetExtension>();
	}
};

// Class Marvel.ProjectileHomingComponent
// 0x0090 (0x0180 - 0x00F0)
class UProjectileHomingComponent final : public UActorComponent
{
public:
	EHomingAcceMagType                            HomingAcceType;                                    // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0x3];                                       // 0x00F1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DefaultHomingAcceMag;                              // 0x00F4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            HomingAcceMagCurve;                                // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EndDistance;                                       // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHomingSeconds;                                  // 0x0104(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   HomingAttachMeshComName;                           // 0x0108(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bWaitForTarget;                                    // 0x0114(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bStopLoseTarget;                                   // 0x0115(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNeedUpdateRotation;                               // 0x0116(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_117[0x1];                                      // 0x0117(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 HomingTarget;                                      // 0x0118(0x0008)(BlueprintVisible, Net, ZeroConstructor, Transient, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableHoming;                                     // 0x0120(0x0001)(BlueprintVisible, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121[0x3];                                      // 0x0121(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HomingStartTime;                                   // 0x0124(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBeginHoming;                                     // 0x0128(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnEndHoming;                                       // 0x0138(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EHomingResult                                 HomingResult;                                      // 0x0148(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_149[0x7];                                      // 0x0149(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelProjectileComponent*             MovementComponent;                                 // 0x0150(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           MaxHomingTimer;                                    // 0x0158(0x0018)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_170[0x10];                                     // 0x0170(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnModifyMoveDelta(struct FVector* MoveDelta);
	void OnRep_bHomingFlag();
	void OnRep_HomingTarget();
	bool StartHoming(class AActor* TargetActor);
	void StopHoming();
	bool TryHomingToTarget(class AActor* TargetActor);
	void UpdateHomingStatus();

	bool IsHoming() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProjectileHomingComponent">();
	}
	static class UProjectileHomingComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProjectileHomingComponent>();
	}
};

// Class Marvel.ProjectileTableFuncLibrary
// 0x0000 (0x0030 - 0x0030)
class UProjectileTableFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static TArray<int32> GetAllProjectileDataKey(const int32 HeroID);
	static struct FMarvelProjectileAgentTable GetProjectileData(const int32 ProjectileID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProjectileTableFuncLibrary">();
	}
	static class UProjectileTableFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProjectileTableFuncLibrary>();
	}
};

// Class Marvel.LightingChannelFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class ULightingChannelFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void SetActorLightingChannelEnable(class AActor* Target, int32 LightingChannelIdx, bool bEnable);
	static void SetPrimitiveLightingChannelEnable(class UPrimitiveComponent* Primitive, int32 LightingChannelIdx, bool bEnable);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LightingChannelFunctionLibrary">();
	}
	static class ULightingChannelFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULightingChannelFunctionLibrary>();
	}
};

// Class Marvel.HealthProtectiveInterface
// 0x0000 (0x0030 - 0x0030)
class IHealthProtectiveInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"HealthProtectiveInterface">();
	}
	static class IHealthProtectiveInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IHealthProtectiveInterface>();
	}
};

// Class Marvel.UITableFuncLibrary
// 0x0000 (0x0030 - 0x0030)
class UUITableFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FAbilityUIAssetRow GetAbilityUIAsset(const int32 AbilityID, const int32 SkinID);
	static class UDataTable* GetHeroAbilityUITable();
	static struct FMarvelHeroAbilityUIRow GetHeroAbilityUITableData(const int32 HeroID);
	static class UDataTable* GetHeroBattleUITable();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UITableFuncLibrary">();
	}
	static class UUITableFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUITableFuncLibrary>();
	}
};

// Class Marvel.ProtectiveSummoner
// 0x00E0 (0x0970 - 0x0890)
#pragma pack(push, 0x1)
class alignas(0x10) AProtectiveSummoner : public AMarvelSummonerBase
{
public:
	uint8                                         Pad_890[0x8];                                      // 0x0890(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAttachToMesh;                                     // 0x0898(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_899[0x3];                                      // 0x0899(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   DefaultSocketName;                                 // 0x089C(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultZOffset;                                    // 0x08A8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_8AC[0x4];                                      // 0x08AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  IgnoreTags;                                        // 0x08B0(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMap<int32, float>                            SpecialZOffsets;                                   // 0x0918(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProtectiveSummoner">();
	}
	static class AProtectiveSummoner* GetDefaultObj()
	{
		return GetDefaultObjImpl<AProtectiveSummoner>();
	}
};
#pragma pack(pop)

// Class Marvel.ProtectiveSummonedComponent
// 0x0070 (0x0D10 - 0x0CA0)
class UProtectiveSummonedComponent : public UMarvelSummonedComponent
{
public:
	class UMarvelBaseAbilitySystemComponent*      ProtectiveAbilityComponent;                        // 0x0CA0(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AProtectiveSummoner*                    OwnerSummoner;                                     // 0x0CA8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CB0[0x60];                                     // 0x0CB0(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool OnPreDamageApplied(const struct FGameplayEffectSpec& Spec);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ProtectiveSummonedComponent">();
	}
	static class UProtectiveSummonedComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UProtectiveSummonedComponent>();
	}
};

// Class Marvel.UIWidgetTagManager
// 0x00A0 (0x00D0 - 0x0030)
class UUIWidgetTagManager final : public UObject
{
public:
	TMap<TWeakObjectPtr<class UWidget>, struct FGameplayTag> CacheRegisterWidgetTags;                           // 0x0030(0x0050)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TMap<TWeakObjectPtr<class UWidget>, struct FGameplayTag> CacheAttachWidgetTags;                             // 0x0080(0x0050)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UUIWidgetTagManager* Get(class UObject* WCO);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIWidgetTagManager">();
	}
	static class UUIWidgetTagManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIWidgetTagManager>();
	}
};

// Class Marvel.RecoveryEffectMeshActor
// 0x0080 (0x0510 - 0x0490)
class ARecoveryEffectMeshActor final : public AChaosDestructionStaticMeshActor
{
public:
	uint8                                         Pad_490[0x80];                                     // 0x0490(0x0080)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RecoveryEffectMeshActor">();
	}
	static class ARecoveryEffectMeshActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARecoveryEffectMeshActor>();
	}
};

// Class Marvel.ReleasesAbilityStatisticsImpl
// 0x0050 (0x0140 - 0x00F0)
class UReleasesAbilityStatisticsImpl final : public UHitRateAbilityStatisticsImpl
{
public:
	TMap<class FString, struct FActionLogSessionActorInfo> SessionTargetActors;                               // 0x00F0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReleasesAbilityStatisticsImpl">();
	}
	static class UReleasesAbilityStatisticsImpl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReleasesAbilityStatisticsImpl>();
	}
};

// Class Marvel.RenderPipelineFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class URenderPipelineFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void SwitchTemporalAADownSample(bool SWITCH);
	static void SwitchTSRDownSample(bool SWITCH);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RenderPipelineFunctionLibrary">();
	}
	static class URenderPipelineFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<URenderPipelineFunctionLibrary>();
	}
};

// Class Marvel.RenderShellComponent
// 0x0068 (0x0158 - 0x00F0)
class URenderShellComponent final : public UActorComponent
{
public:
	uint8                                         bDisableRenderShell : 1;                           // 0x00F0(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         RenderShellValue;                                  // 0x00F1(0x0001)(Edit, ZeroConstructor, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FRenderShellSpec>               RenderShellSpecs;                                  // 0x00F8(0x0010)(Edit, ZeroConstructor, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_108[0x50];                                     // 0x0108(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void SetComponentIgnoreRenderShell(class UPrimitiveComponent* InComponent, bool bState);
	static void SetComponentWantRenderShell(class UPrimitiveComponent* InComponent, bool bState);
	static bool ShouldComponentRenderShell(class UPrimitiveComponent* InComponent);

	void AddActiveMeshComponent(class UMeshComponent* InMeshComponent, bool bRecursive);
	void ForceUpdateRenderShell();
	void OnSourceComponentChildAttached(class USceneComponent* InSourceComponent, class USceneComponent* InChildComponent);
	void OnSourceComponentChildDetached(class USceneComponent* InSourceComponent, class USceneComponent* InChildComponent);
	void RemoveActiveMeshComponent(class UMeshComponent* InMeshComponent);
	void RemoveRenderShell(uint8 InRenderShellType);
	void SetDisableRenderShell(bool bDisable);
	void UpdateRenderShell(uint8 InRenderShellType, int32 CampVisibility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RenderShellComponent">();
	}
	static class URenderShellComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URenderShellComponent>();
	}
};

// Class Marvel.VirtualActorFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UVirtualActorFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class AVirtualActorManager* GetVirtualActorManager(class UObject* WCO);
	static class AMarvelVirtualCarActor* GetVirtualCarActor(class UObject* WCO);
	static class AMarvelVirtualSceneActor* GetVirtualSceneActor(class UObject* WCO);
	static bool VirtualActorApplyDamage(class UAbilitySystemComponent* Source, class UAbilitySystemComponent* Target, int32 Damage);
	static bool VirtualActorForceKill(class UAbilitySystemComponent* Source, class UAbilitySystemComponent* Target);
	static bool VirtualActorRegonAllCos(class UAbilitySystemComponent* Source, class UAbilitySystemComponent* Target);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VirtualActorFunctionLibrary">();
	}
	static class UVirtualActorFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVirtualActorFunctionLibrary>();
	}
};

// Class Marvel.RenderShellInterface
// 0x0000 (0x0030 - 0x0030)
class IRenderShellInterface final : public IInterface
{
public:
	class URenderShellComponent* GetRenderShellComponent() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RenderShellInterface">();
	}
	static class IRenderShellInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IRenderShellInterface>();
	}
};

// Class Marvel.ReplicateTimerFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UReplicateTimerFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void BindOnDataUpdate(struct FReplicateTimer& ReplicateTimer, TDelegate<void()> OnDataUpdatedCallback);
	static void BindOnServerTimeChanged(class UObject* WCO, TDelegate<void()> OnDataUpdatedCallback);
	static void BroadcastOnDataUpdate(struct FReplicateTimer& ReplicateTimer);
	static void ClearTimer(struct FReplicateTimer& ReplicateTimer);
	static class FString Conv_ReplicateTimerDataToString(const struct FReplicateTimerData& ReplicateTimerData);
	static class FString Conv_ReplicateTimerToString(struct FReplicateTimer& ReplicateTimer);
	static struct FReplicateTimerData GetCurrent(struct FReplicateTimer& ReplicateTimer);
	static bool IsValidTimer(const struct FReplicateTimer& ReplicateTimer);
	static void PauseTimer(struct FReplicateTimer& ReplicateTimer);
	static void SetOwner(struct FReplicateTimer& ReplicateTimer, class UObject* Owner);
	static void SetTimer(struct FReplicateTimer& ReplicateTimer, class UObject* Owner, TDelegate<void()> Delegate, float Time, bool bLooping, float InitialStartDelay);
	static void SetTimerRemainTime(struct FReplicateTimer& ReplicateTimer, float RemainTime);
	static void SetTimerTotalAndRemainTime(struct FReplicateTimer& ReplicateTimer, float TotalTime, float RemainTime);
	static void UnbindOnDataUpdate(struct FReplicateTimer& ReplicateTimer, TDelegate<void()> OnDataUpdatedCallback);
	static void UnbindOnServerTimeChanged(class UObject* WCO, TDelegate<void()> OnDataUpdatedCallback);
	static void UnpauseTimer(struct FReplicateTimer& ReplicateTimer);
	static void UpdateCurrent(struct FReplicateTimer& ReplicateTimer);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ReplicateTimerFunctionLibrary">();
	}
	static class UReplicateTimerFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UReplicateTimerFunctionLibrary>();
	}
};

// Class Marvel.RichTextBlockHyperlinkDecorator
// 0x0EF0 (0x0F20 - 0x0030)
class URichTextBlockHyperlinkDecorator : public URichTextBlockDecorator
{
public:
	class UDataTable*                             HyperlinkSet;                                      // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FHyperlinkStyle                        OutLinkStyleOverride;                              // 0x0040(0x0770)(Edit, Protected, NativeAccessSpecifierProtected)
	struct FHyperlinkStyle                        InLinkStyleOverride;                               // 0x07B0(0x0770)(Edit, Protected, NativeAccessSpecifierProtected)

public:
	void OnClickHyperlink(EHyperlinkType LinkType, const class FString& Args);
	void OnHoveredHyperlink(EHyperlinkType LinkType, const class FString& Args);
	void OnRightClickHyperlink(EHyperlinkType LinkType, const class FString& Args);
	void OnUnhoveredHyperlink(EHyperlinkType LinkType, const class FString& Args);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RichTextBlockHyperlinkDecorator">();
	}
	static class URichTextBlockHyperlinkDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<URichTextBlockHyperlinkDecorator>();
	}
};

// Class Marvel.ActorTeamManager
// 0x0EA0 (0x0ED0 - 0x0030)
class UActorTeamManager final : public UObject
{
public:
	uint8                                         Pad_30[0xEA0];                                     // 0x0030(0x0EA0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetAllTeamComponents(TArray<class UTeamComponent*>* TeamComponents);
	void RegisterActor(class AActor* InActor, int32 InTeamID);
	void UnregisterActor(class AActor* InActor, int32 InTeamID);
	void UpdateAllTeamComponents();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ActorTeamManager">();
	}
	static class UActorTeamManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UActorTeamManager>();
	}
};

// Class Marvel.RichTextBlockHyperlinkImageDecorator
// 0x0008 (0x0038 - 0x0030)
class URichTextBlockHyperlinkImageDecorator : public URichTextBlockDecorator
{
public:
	class UDataTable*                             HyperlinkImageSet;                                 // 0x0030(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnClickHyperlink(EHyperlinkType LinkType, const class FString& Args);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RichTextBlockHyperlinkImageDecorator">();
	}
	static class URichTextBlockHyperlinkImageDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<URichTextBlockHyperlinkImageDecorator>();
	}
};

// Class Marvel.RichTextBlockTimeDecorator
// 0x0000 (0x0030 - 0x0030)
class URichTextBlockTimeDecorator : public URichTextBlockDecorator
{
public:
	class FString FormatTimeFromPython(const class FString& TimeString);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RichTextBlockTimeDecorator">();
	}
	static class URichTextBlockTimeDecorator* GetDefaultObj()
	{
		return GetDefaultObjImpl<URichTextBlockTimeDecorator>();
	}
};

// Class Marvel.RideOnCharacterManagementComponent
// 0x0160 (0x0250 - 0x00F0)
class URideOnCharacterManagementComponent : public UActorComponent
{
public:
	TSet<int32>                                   SameBuffSet;                                       // 0x00F0(0x0050)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AllMarkOnGrootTags;                                // 0x0140(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TSet<int32>                                   BondIDSet;                                         // 0x01A8(0x0050)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bShouldTick)> OnCoopAbilityTickStateChangedDispatcher;           // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(bool bIsRiding, class AMarvelBaseCharacter* RideCharacter)> OnCoopRideStateChangedDispatcher;                  // 0x0208(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   OwningCharacter;                                   // 0x0218(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelBaseCharacter*                   Groot;                                             // 0x0220(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelCharacterChildActor*             OwningChildActor;                                  // 0x0228(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTag                           MarkOnGrootTag;                                    // 0x0230(0x000C)(Edit, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_23C[0x14];                                     // 0x023C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class AMarvelBaseCharacter* GetGroot();
	bool IsOwningCharacterOnGroot();
	void OnBondCharacterChanged(class AMarvelBaseCharacter* TriggerCharacter, const TArray<struct FBondInstance>& RefBondInstances);
	void OnBondStateChanged(const struct FBondInstance& InBondInstance, const TArray<class AMarvelBaseCharacter*>& TriggerCharacters);
	void OnGrootForceChangedByPortal_ThreadSafe(class APortalViewActor* InPortal);
	void OnGrootGameplayEffectApply(class UAbilitySystemComponent* Target, const struct FGameplayEffectSpecStackHandle& EffectSpec, const struct FActiveGameplayEffectHandle& EffectHandle);
	void OnGrootGameplayEffectRemoved(const struct FGameplayEffectSpecStackHandle& ExpiredEffectHandle, bool bPrematureRemoval);
	void OnMarkOnGrootTagUpdated(const struct FGameplayTag& Tag, bool bTagExists);
	void OnOwnerGameplayEffectApply(class UAbilitySystemComponent* Target, const struct FGameplayEffectSpecStackHandle& EffectSpec, const struct FActiveGameplayEffectHandle& EffectHandle);
	void OnOwnerGameplayEffectRemoved(const struct FGameplayEffectSpecStackHandle& ExpiredEffectHandle, bool bPrematureRemoval);
	void SetGroot(class AMarvelBaseCharacter* InGroot);
	void TryRecoverOwnerMeshRelativeInfo();
	void UpdateRaccoonGrootMeshTickGroup(class AMarvelBaseCharacter* InGroot, bool bAttach);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RideOnCharacterManagementComponent">();
	}
	static class URideOnCharacterManagementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URideOnCharacterManagementComponent>();
	}
};

// Class Marvel.Robot2099AnimInstance
// 0x0000 (0x0910 - 0x0910)
class URobot2099AnimInstance final : public UMarvelAnimInstance
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Robot2099AnimInstance">();
	}
	static class URobot2099AnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<URobot2099AnimInstance>();
	}
};

// Class Marvel.TestActorTick
// 0x0008 (0x0498 - 0x0490)
class ATestActorTick final : public AActor
{
public:
	uint8                                         Pad_490[0x8];                                      // 0x0490(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetTickInterval(float Interval);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TestActorTick">();
	}
	static class ATestActorTick* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATestActorTick>();
	}
};

// Class Marvel.Robot2099Character
// 0x0010 (0x1820 - 0x1810)
class ARobot2099Character final : public AMarvelBaseCharacter
{
public:
	class URobot2099MoveLogicBaseComponent*       Robot2099MoveLogic;                                // 0x1810(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1818[0x8];                                     // 0x1818(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Robot2099Character">();
	}
	static class ARobot2099Character* GetDefaultObj()
	{
		return GetDefaultObjImpl<ARobot2099Character>();
	}
};

// Class Marvel.Robot2099MoveLogicBaseComponent
// 0x0000 (0x03F0 - 0x03F0)
class URobot2099MoveLogicBaseComponent final : public UMarvelMoveLogicBaseComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Robot2099MoveLogicBaseComponent">();
	}
	static class URobot2099MoveLogicBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URobot2099MoveLogicBaseComponent>();
	}
};

// Class Marvel.RouteFollowingComponentBase
// 0x0000 (0x00F0 - 0x00F0)
class URouteFollowingComponentBase final : public UActorComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RouteFollowingComponentBase">();
	}
	static class URouteFollowingComponentBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<URouteFollowingComponentBase>();
	}
};

// Class Marvel.ScaleGravityAbility
// 0x0008 (0x1100 - 0x10F8)
class UScaleGravityAbility final : public UMarvelEffectGameplayAbility
{
public:
	float                                         ScaleValue;                                        // 0x10F8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10FC[0x4];                                     // 0x10FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetGravityScale(float NewScale);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScaleGravityAbility">();
	}
	static class UScaleGravityAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScaleGravityAbility>();
	}
};

// Class Marvel.ATCmdSequenceAsset
// 0x0010 (0x0048 - 0x0038)
class UATCmdSequenceAsset final : public UPrimaryDataAsset
{
public:
	TArray<struct FATCmdEntry>                    CmdSequence;                                       // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ATCmdSequenceAsset">();
	}
	static class UATCmdSequenceAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UATCmdSequenceAsset>();
	}
};

// Class Marvel.SceneComment
// 0x0030 (0x04C0 - 0x0490)
class ASceneComment final : public AActor
{
public:
	class UWidgetComponent*                       WidgetComp;                                        // 0x0490(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UArrowComponent*                        ArrowComp;                                         // 0x0498(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FText                                   CommentText;                                       // 0x04A0(0x0018)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	class AActor*                                 TargetActor;                                       // 0x04B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SceneComment">();
	}
	static class ASceneComment* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASceneComment>();
	}
};

// Class Marvel.SceneObjectFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class USceneObjectFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool IsChaosDes(class AActor* Actor);
	static bool IsControlPoint(class AActor* Actor);
	static bool IsCrossLevelLinkableActor(class AActor* InActor);
	static bool IsDestructingPreset(class AActor* Actor);
	static bool IsForceFractureActor(class AActor* Actor);
	static bool IsFracturedBlastMesh(class AActor* Actor);
	static bool IsPresetDestruction(class AActor* Actor);
	static bool IsSceneObject(class AActor* Actor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SceneObjectFunctionLibrary">();
	}
	static class USceneObjectFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USceneObjectFunctionLibrary>();
	}
};

// Class Marvel.ScopeAbilityStatisticsImpl
// 0x0000 (0x00F0 - 0x00F0)
class UScopeAbilityStatisticsImpl final : public UHitRateAbilityStatisticsImpl
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScopeAbilityStatisticsImpl">();
	}
	static class UScopeAbilityStatisticsImpl* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScopeAbilityStatisticsImpl>();
	}
};

// Class Marvel.ScopeTableFuncLibrary
// 0x0000 (0x0030 - 0x0030)
class UScopeTableFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static TArray<int32> GetAllScopeDataKey(const int32 HeroID);
	static struct FMarvelScopeAgentTable GetScopeData(const int32 ScopeId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ScopeTableFuncLibrary">();
	}
	static class UScopeTableFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UScopeTableFuncLibrary>();
	}
};

// Class Marvel.ServerDebugHUD
// 0x0018 (0x0710 - 0x06F8)
class AServerDebugHUD final : public AMarvelHUD
{
public:
	class AServerDebugInfo*                       ServerInfo;                                        // 0x06F8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_700[0x10];                                     // 0x0700(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ServerDebugHUD">();
	}
	static class AServerDebugHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<AServerDebugHUD>();
	}
};

// Class Marvel.ServerDebugInfo
// 0x0218 (0x06A8 - 0x0490)
class AServerDebugInfo final : public AActor
{
public:
	uint8                                         Pad_490[0x200];                                    // 0x0490(0x0200)(Fixing Size After Last Property [ Dumper-7 ])
	class AGameStateBase*                         GameState;                                         // 0x0690(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UNetConnection*                         Connection;                                        // 0x0698(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UActorChannel*                          Channel;                                           // 0x06A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	void ChangeInfo(float ServerTimeSpan, int32 ServerFrameNum, double LastUpdateWorldTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ServerDebugInfo">();
	}
	static class AServerDebugInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<AServerDebugInfo>();
	}
};

// Class Marvel.Widget_AbilityActionTips
// 0x0010 (0x05B8 - 0x05A8)
class UWidget_AbilityActionTips : public UMarvelUserWidget
{
public:
	TArray<class UWidget_AbilityActionTip*>       ActionTips;                                        // 0x05A8(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UWidget_AbilityActionTips* Get(class UObject* WCO);

	void AddTips(const int32 InAbilityId, const struct FWidget_ActionTip& Tips);
	void AddTipsByActionTipsParam(const int32 IndexID, const struct FActionTipsParam& TipsParam);
	void RemoveOnlyTips(const int32 InAbilityId, const struct FWidget_ActionTip& Tips);
	void RemoveOnlyTipsByActionTipsParam(const int32 IndexID, const struct FActionTipsParam& TipsParam);
	void RemoveTips(const int32 InAbilityId);
	void SetStyle(const TArray<struct FWidget_ActionTip>& Tips);
	void SetVisible(bool bInVisible);
	void Update();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_AbilityActionTips">();
	}
	static class UWidget_AbilityActionTips* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_AbilityActionTips>();
	}
};

// Class Marvel.SettlementFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class USettlementFunctionLibrary final : public UObject
{
public:
	static int32 GetBuffType(class UObject* WCO, int32 BuffID);
	static float GetTerrainKillDuration(class UObject* WCO);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettlementFunctionLibrary">();
	}
	static class USettlementFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettlementFunctionLibrary>();
	}
};

// Class Marvel.SettlementInfo
// 0x00A8 (0x00D8 - 0x0030)
class USettlementInfo final : public UObject
{
public:
	int32                                         SourceActorType;                                   // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerUID;                                         // 0x0034(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 SourceActor;                                       // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   MarvelCharacter;                                   // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuffOvertime;                                      // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageOvertime;                                    // 0x004C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeathKillOvertime;                                 // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x84];                                      // 0x0054(0x0084)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CheckOvertimeBuff();
	void CheckOvertimeDamage(bool CheckType);
	void Initialize(int32 PlayerUID_0, int32 InActorType);
	void OnActorReborn(class AActor* InInstigator, class AActor* InTarget);
	void OnBuffApplied(class AActor* InInstigator, class AActor* InCauser, class AActor* InTarget, const struct FGameplayEffectSpec& InEffectSpec, const struct FActiveGameplayEffectHandle& EffectHandle);
	void OnBuffRemoved(class AActor* InInstigator, class AActor* InCauser, class AActor* InTarget, const struct FGameplayEffectSpec& InEffectSpec, const struct FActiveGameplayEffectHandle& EffectHandle);
	void OnPostTakeDamage(class AActor* InInstigator, class AActor* InTarget, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void Shutdown();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SettlementInfo">();
	}
	static class USettlementInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<USettlementInfo>();
	}
};

// Class Marvel.ShootingInterface
// 0x0000 (0x0030 - 0x0030)
class IShootingInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShootingInterface">();
	}
	static class IShootingInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IShootingInterface>();
	}
};

// Class Marvel.Widget_AbilityCommon
// 0x0000 (0x05A8 - 0x05A8)
class UWidget_AbilityCommon final : public UMarvelUserWidget
{
public:
	class UAbilityCommonExtraWidgets* GetWidgetsByStyles(const struct FWidgetStyle_AbilityCommon& InStyle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_AbilityCommon">();
	}
	static class UWidget_AbilityCommon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_AbilityCommon>();
	}
};

// Class Marvel.ShootingLogic_AbilityScope
// 0x0A58 (0x1080 - 0x0628)
class UShootingLogic_AbilityScope final : public UShootingLogic_Base
{
public:
	class AMarvelAbilityTargetActor_Scope*        ReplicatedAmmoScope;                               // 0x0628(0x0008)(Net, ZeroConstructor, Transient, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAbilityTask_Projectile*          ScopeSpawnTask;                                    // 0x0630(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_638[0xA2C];                                    // 0x0638(0x0A2C)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ScopeId;                                           // 0x1064(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bInstancedPerExecution : 1;                        // 0x1068(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_1069[0x7];                                     // 0x1069(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            DamageDecayCurveByDuration;                        // 0x1070(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCurveFloat*                            DamageDecayCurveByCapacity;                        // 0x1078(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void EndShootAbility();
	void OnAmmoScopeEndTask(class AActor* SpawnActor);
	void OnAmmoScopePreTrace();
	void OnAmmoScopeReady(class AActor* SpawnActor, const struct FGameplayAbilityTargetDataHandle& TargetData);
	void OnRep_ReplicatedAmmoScope();
	void ServerFire(int32 ShootNum, const struct FPredictionKey& PredictionKey, const struct FWeaponFireOptData& OptData);

	const struct FMarvelScopeAgentTable GetScopeAgentData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShootingLogic_AbilityScope">();
	}
	static class UShootingLogic_AbilityScope* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShootingLogic_AbilityScope>();
	}
};

// Class Marvel.ShootingLogic_AbilityProjectile
// 0x0FE8 (0x1618 - 0x0630)
class UShootingLogic_AbilityProjectile : public UShootingLogic_Generic
{
public:
	int32                                         ProjectileID;                                      // 0x0630(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_634[0x4];                                      // 0x0634(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAbilityTask_LoopProjectile*      AbilityProjectileTask;                             // 0x0638(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_640[0xFD8];                                    // 0x0640(0x0FD8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ServerFireAbilityProjectile(const struct FVector_NetQuantize10& TraceStart, const struct FRotator& ShootRot, const struct FRotator& ShootRawRot, const struct FVector_NetQuantize10& InitAimLocation, uint16 InClientSpread, int32 InClientVersion, const struct FPredictionKey& PredictionKey, const struct FWeaponFireOptData& OptData);
	void ServerFireAbilityProjectileWithSocketInfo(const struct FMarvelAbilitySocketInfo& AbilitySocketInfo, int32 InClientVersion, const struct FPredictionKey& PredictionKey, const struct FWeaponFireOptData& OptData);

	const struct FMarvelProjectileAgentTable GetProjectileData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShootingLogic_AbilityProjectile">();
	}
	static class UShootingLogic_AbilityProjectile* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShootingLogic_AbilityProjectile>();
	}
};

// Class Marvel.Widget_AbilityStatus_Level
// 0x0000 (0x03B8 - 0x03B8)
class UWidget_AbilityStatus_Level final : public UUserWidget
{
public:
	void SetPercent(float InPercent);
	void SetSegmentCur(int32 InSegmentCur);
	void SetSegmentMax(int32 InSegmentMax);
	void SetTransparent(bool bInTransparent);
	void SetVisible(bool bInVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_AbilityStatus_Level">();
	}
	static class UWidget_AbilityStatus_Level* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_AbilityStatus_Level>();
	}
};

// Class Marvel.ShootingLogic_Shotgun
// 0x0018 (0x0648 - 0x0630)
class UShootingLogic_Shotgun : public UShootingLogic_Generic
{
public:
	int32                                         AmmoPerShot;                                       // 0x0630(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_634[0x4];                                      // 0x0634(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAmmoFixedSpread>               AmmoFixedSpreads;                                  // 0x0638(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShootingLogic_Shotgun">();
	}
	static class UShootingLogic_Shotgun* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShootingLogic_Shotgun>();
	}
};

// Class Marvel.ShootingLogic_InstantShotgun
// 0x0788 (0x0DD0 - 0x0648)
class UShootingLogic_InstantShotgun final : public UShootingLogic_Shotgun
{
public:
	class AInstantAmmo*                           PersistentAmmo;                                    // 0x0648(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_650[0x778];                                    // 0x0650(0x0778)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InstantAmmoID;                                     // 0x0DC8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DCC[0x4];                                      // 0x0DCC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ServerFireInstants(const struct FInstantHitResults& InstantHitResults, const struct FRotator& ShootRawRot, uint16 InClientSpread, int32 InRandomSeed, float InRandomValue0, const struct FVector_NetQuantize10& InitAimLocation, int32 InClientVersion, const struct FPredictionKey& PredictionKey, const struct FWeaponFireOptData& OptData);

	const struct FMarvelInstantAmmoTable GetInstantAmmoData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShootingLogic_InstantShotgun">();
	}
	static class UShootingLogic_InstantShotgun* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShootingLogic_InstantShotgun>();
	}
};

// Class Marvel.ShootingLogic_AbilityProjectileShotgun
// 0x0FE8 (0x1630 - 0x0648)
class UShootingLogic_AbilityProjectileShotgun final : public UShootingLogic_Shotgun
{
public:
	int32                                         ProjectileID;                                      // 0x0648(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_64C[0x4];                                      // 0x064C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelAbilityTask_LoopProjectile*      AbilityProjectileTask;                             // 0x0650(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_658[0xFD8];                                    // 0x0658(0x0FD8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ServerFireAbilityProjectiles(const struct FVector_NetQuantize10& TraceStart, const struct FRotator& ShootRawRot, uint16 InClientSpread, int32 InRandomSeed, float InRandomValue0, const struct FVector_NetQuantize10& InitAimLocation, int32 InClientVersion, const struct FPredictionKey& PredictionKey, const struct FWeaponFireOptData& OptData);

	const struct FMarvelProjectileAgentTable GetProjectileData() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShootingLogic_AbilityProjectileShotgun">();
	}
	static class UShootingLogic_AbilityProjectileShotgun* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShootingLogic_AbilityProjectileShotgun>();
	}
};

// Class Marvel.ShootingWeapon
// 0x07E0 (0x0C90 - 0x04B0)
class AShootingWeapon : public AMarvelActorBase
{
public:
	uint8                                         Pad_4B0[0x18];                                     // 0x04B0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(int32 ModeIndex)> OnWeaponFired;                                     // 0x04C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 ModeIndex)> OnWeaponCueFired;                                  // 0x04D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 ModeIndex, bool bState)> OnWeaponFireStateChanged;                          // 0x04E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 ModeIndex, bool bState)> OnWeaponCueFireStateChanged;                       // 0x04F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FWeaponNotifyEvent& Event)> OnWeaponEvent;                                     // 0x0508(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 ModeIndex, const struct FWeaponNotifyEvent& ModeEvent)> OnWeaponModeEvent;                                 // 0x0518(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FTimerHandle                           AmmoMaxReloadTimerHandle;                          // 0x0528(0x0018)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_540[0x320];                                    // 0x0540(0x0320)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                CachedAbilitySystemComponent;                      // 0x0860(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USceneComponent*                        WeaponRoot;                                        // 0x0868(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 CachedMesh3P;                                      // 0x0870(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class USkeletalMeshComponent*                 CachedSecondaryMesh3P;                             // 0x0878(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_880[0x8];                                      // 0x0880(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWeaponCrosshairSpec*>           CrosshairSpecs;                                    // 0x0888(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<struct FWeaponShootingLogicReplaceInfo> ShootingLogicReplaceInfos;                         // 0x0898(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TArray<class UShootingLogic_Base*>            ShootingLogics;                                    // 0x08A8(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	float                                         ReloadTime;                                        // 0x08B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8BC[0xC];                                      // 0x08BC(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDeclarationHolder                     DeclarePlayerViewSideHolder;                       // 0x08C8(0x0010)(Protected, NativeAccessSpecifierProtected)
	int32                                         EquipID;                                           // 0x08D8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WeaponIndex;                                       // 0x08DC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentModeIndex;                                  // 0x08E0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurrentSkinID;                                     // 0x08E4(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         UID;                                               // 0x08E8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReloadAbilityID;                                   // 0x08EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMinimalReplicationTagCountMap         ReplicatedWeaponStateTags;                         // 0x08F0(0x00B8)(Net, Transient, RepNotify, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_9A8[0x2D0];                                    // 0x09A8(0x02D0)(Fixing Size After Last Property [ Dumper-7 ])
	class UEquipComponent*                        EquipComponent;                                    // 0x0C78(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class APawn*                                  WeaponViewer;                                      // 0x0C80(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 CurrentAimingTarget;                               // 0x0C88(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void AddReplicatedWeaponStateTag(const struct FGameplayTag& Tag);
	void AddWeaponStateTag(const struct FGameplayTag& Tag, int32 Count);
	void AmmoMaxReload();
	void AppendReplicatedWeaponStateTags(const struct FGameplayTagContainer& TagContainer);
	void AppendWeaponStateTags(const struct FGameplayTagContainer& TagContainer, int32 Count);
	struct FVector GetAimTartgetLocation(int32 ModeIndex);
	class UMarvelAudioComponent* GetAudioComponent();
	void K2_CallWeaponEvent(const struct FWeaponNotifyEvent& Event);
	void K2_OnWeaponAmmoChanged(int32 SpecIndex);
	void K2_OnWeaponEquip(const struct FMarvelEquipmentTable& WeaponInfo);
	void K2_OnWeaponUnEquip(const struct FMarvelEquipmentTable& WeaponInfo);
	bool MakeWeaponFireContext(int32 ModeIndex, struct FWeaponFireContext* Context);
	void OnCharacterSkinInitialized(const int32 InSkinID);
	void OnPlayerViewSideChanged(EClientPlayerViewSide InViewSide);
	void OnRep_CurrentModeIndex(int32 OldModeIndex);
	void OnRep_EquipID();
	void OnRep_ReplicatedWeaponStateTags();
	bool OwnerAnimation_Stop(class UAnimSequenceBase* AnimToStop);
	void RemoveReplicatedWeaponStateTag(const struct FGameplayTag& Tag);
	void RemoveReplicatedWeaponStateTags(const struct FGameplayTagContainer& TagContainer);
	void RemoveWeaponStateTag(const struct FGameplayTag& Tag, int32 Count);
	void RemoveWeaponStateTags(const struct FGameplayTagContainer& TagContainer, int32 Count);
	void SetBlockingNoticeEnabled(bool bNewState);
	void SetModeAbilityContext(const TArray<int32>& InModeIndexes, class UGameplayAbility* InAbility, int32 InAbilityId);
	void SetModeAbilityContextEx(const TArray<int32>& InModeIndexes, const struct FWeaponAbilityContext& InAbilityContext);
	void SetReplicatedWeaponStateTagEnabled(const struct FGameplayTag& Tag, bool Enabled);
	void SetShootingMode(int32 NewModeIdx);
	void SetWeaponViewer(class APawn* InWeaponViewer);
	void UpdateShootingLogicContext(const TArray<int32>& ModeIndexes);
	void WeaponFireWithContext(const TArray<int32>& ModeIndexes, struct FWeaponFireContext& Context);
	void WeaponFireWithModes(const TArray<int32>& ModeIndexes);

	bool CanReload() const;
	bool CheckIfConditionalBuffState(struct FWeaponShootingLogicReplaceInfo* OutReplacedInfo) const;
	bool CostAmmoWithModes(const TArray<int32>& ModeIndexes, bool bEnforce, bool bUseWithoutCheck) const;
	bool EnoughAmmoWithModes(const TArray<int32>& ModeIndexes) const;
	int32 FindModeIndex(const struct FGameplayTag& InModeNameTag) const;
	TArray<struct FGameplayAttribute> GetAmmoAttributes(const TArray<int32>& ShootingModes) const;
	bool GetAmmoType(int32 ModeIndex, EAmmoClipType* AmmoType) const;
	bool GetAmmoTypeBySpec(int32 SpecIndex, EAmmoClipType* AmmoType) const;
	float GetAmmoValue(int32 ModeIndex) const;
	float GetAmmoValueBySpec(int32 SpecIndex) const;
	class UAnimMontage* GetAnimationOverride(const TArray<struct FTaggedAnimationOverride>& TaggedAnimations) const;
	class USceneComponent* GetCachedWeaponMesh(EWeaponMeshType MeshType) const;
	class UMarvelCrosshairComponent* GetCrosshairComponent() const;
	const class UWeaponCrosshairSpec* GetCrosshairSpec(int32 ModeIndex) const;
	struct FVector GetCurrentMuzzleLocation(bool bIgnoreSocket) const;
	const struct FMarvelEquipmentTable GetEquipData() const;
	class UEquipComponent* GetEquipmentComponent() const;
	class AMarvelBaseCharacter* GetInstigatorCharacter() const;
	float GetMaxAmmoValue(int32 ModeIndex) const;
	float GetMaxAmmoValueBySpec(int32 SpecIndex) const;
	class USkeletalMeshComponent* GetMesh() const;
	class USkeletalMeshComponent* GetMesh3P() const;
	struct FGameplayTag GetModeNameTag(int32 ModeIndex) const;
	int32 GetMutableShootingLogicID(int32 ModeIndex) const;
	TArray<int32> GetMutableShootingLogicIDs(const TArray<int32>& ModeIndexes) const;
	class UAbilitySystemComponent* GetOwnerAbilitySystemComponent() const;
	class AMarvelBaseCharacter* GetOwnerCharacter() const;
	class USkeletalMeshComponent* GetSecondaryMesh3P() const;
	class UShootingLogic_Base* GetShootingLogic(int32 ModeIndex) const;
	class UShootingLogic_Base* GetShootingLogicByModeNameTag(const struct FGameplayTag& InModeNameTag) const;
	class UShootingLogic_Base* GetStaticShootingLogic(int32 ModeIndex) const;
	class USceneComponent* GetWeaponAttachedComponent(EWeaponMeshType MeshType, class FName SocketName, class FName* OutAttachedSocketName) const;
	class USkeletalMeshComponent* GetWeaponAttachedMesh() const;
	bool HasAllMatchingGameplayTags(const struct FGameplayTagContainer& TagContainer) const;
	bool HasAnyMatchingGameplayTags(const struct FGameplayTagContainer& TagContainer) const;
	bool HasMatchingGameplayTag(const struct FGameplayTag& TagToCheck) const;
	bool IsBlockingNoticeEnabled() const;
	bool IsClientEquipped() const;
	bool IsCurrentWeapon() const;
	bool IsEquipped() const;
	bool IsModeUseAmmo(int32 ModeIndex) const;
	bool IsPredictEquipped() const;
	bool IsPresent() const;
	bool IsValidModeIndex(int32 ModeIndex) const;
	bool IsValidModeNameTag(const struct FGameplayTag& InModeNameTag) const;
	bool UseAmmoWithModes(const TArray<int32>& ModeIndexes, bool bEnforce, bool bUseWithoutCheck) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShootingWeapon">();
	}
	static class AShootingWeapon* GetDefaultObj()
	{
		return GetDefaultObjImpl<AShootingWeapon>();
	}
};

// Class Marvel.Widget_AbilityStatusPanel
// 0x00A8 (0x0460 - 0x03B8)
class UWidget_AbilityStatusPanel final : public UUserWidget
{
public:
	TSubclassOf<class UUserWidget>                DefaultClass_AbilityNormal;                        // 0x03B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                DefaultClass_AbilityUltimate;                      // 0x03C0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                DefaultClass_Weapon;                               // 0x03C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                DefaultClass_WeaponMagazine;                       // 0x03D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                DefaultClass_SelectTarget;                         // 0x03D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                DefaultClass_SummonUpHpBar;                        // 0x03E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUserWidget>                DefaultClass_EnergyWidget;                         // 0x03E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UUIController_AeroAbilityActionTip> Class_UIC_AeroAbilityActionTips;                   // 0x03F0(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<EBattleHUDDurationLocation, TSubclassOf<class UUserWidget>> DurationWidgetClass;                               // 0x03F8(0x0050)(Edit, UObjectWrapper, NativeAccessSpecifierPublic)
	TSubclassOf<class UUIC_Reload>                Class_UIC_Reload;                                  // 0x0448(0x0008)(Edit, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAbilityActionDisplayOrder*             AbilityActionDisplayOrder;                         // 0x0450(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UUIC_AbilityStatusPanel*                PanelController;                                   // 0x0458(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UWidget_AbilityStatusPanel* Get(class UObject* WCO);

	void AddAbilityWidget(class UUserWidget* InWidget, int32 SlotIndex);
	void AddOtherWidget(class UUserWidget* InWidget, EAbilityStatusWidgetType Type);
	void AddWeaponWidget(class UUserWidget* InWidget, int32 WeaponIndex);
	void AddWidget(class UUserWidget* InWidget);
	void ClearCommonWidget();
	class UWidget_AbilityActionTips* GetActionTips();
	class UWidget_AbilityDuration* GetDurationWidget(EWidgetPosition BarPosition);
	class UWidget_AbilityEnergy_Charge* GetEnergyChargeWidget();
	class UWidget_AbilityEnergy* GetEnergyWidget(EEnergyWidgetType WidgetType);
	class UUIC_AbilityStatusPanel* GetUICAbilityStatusPanel();
	class UAbilityCommonExtraWidgets* GetWidgetsByStyles(const struct FWidgetStyle_AbilityCommon& InStyle);
	class UAbilityCommonExtraWidgets* GetWidgetsByStyles_V5(const struct FWidgetStyle_AbilityCommon_V5& InStyle);
	void HideStateHint(const struct FCueHintData& HintData);
	void OnAbilityWidgetLoaded(int32 AbilityID);
	void PreAddAbilityWidget(int32 AbilityID);
	void RemoveWidget(class UUserWidget* Widget);
	void SetTargetActor(class AActor* InTargetActor);
	void ShowStateHint(const struct FCueHintData& HintData);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_AbilityStatusPanel">();
	}
	static class UWidget_AbilityStatusPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_AbilityStatusPanel>();
	}
};

// Class Marvel.ShowActorBase
// 0x0008 (0x0498 - 0x0490)
class AShowActorBase : public AActor
{
public:
	float                                         GazeLeadTimePersonality;                           // 0x0490(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         GazeLeadTimeStandPersonality;                      // 0x0494(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	TArray<struct FSoftObjectPath> GetSoftReferenceAssets();
	void LoadSoftReferenceAssets();
	bool OnANSSetAllBodiesBelowSimulatePhysicsBegin(class USkeletalMeshComponent* MeshComp, class FName BoneName, bool bSimulatePhysics, bool bIncludeSelf);
	bool OnANSSetAllBodiesBelowSimulatePhysicsEnd(class USkeletalMeshComponent* MeshComp, class FName BoneName, bool bSimulatePhysics, bool bIncludeSelf);
	void SetBindingTagInLevelSequenceActor(class ALevelSequenceActor* InActor);
	void SetVisible(bool Visible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShowActorBase">();
	}
	static class AShowActorBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<AShowActorBase>();
	}
};

// Class Marvel.ShowActorControl
// 0x0000 (0x0490 - 0x0490)
class AShowActorControl : public AActor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShowActorControl">();
	}
	static class AShowActorControl* GetDefaultObj()
	{
		return GetDefaultObjImpl<AShowActorControl>();
	}
};

// Class Marvel.ShowActorHelper
// 0x0000 (0x0030 - 0x0030)
class UShowActorHelper final : public UObject
{
public:
	static class UShowActorHelper* GetShowActorHelperInWorld(class UObject* InWCO);

	void CreateCacheForShowActor(class AActor* InActor);
	void SetPhysicsForShowActor(class AActor* InActor);
	void ShowCharacterBG();
	void UpdateForViewHero(bool bIsMVP);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShowActorHelper">();
	}
	static class UShowActorHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShowActorHelper>();
	}
};

// Class Marvel.ShrikerMoveLogicBaseComponent
// 0x0008 (0x03F8 - 0x03F0)
class UShrikerMoveLogicBaseComponent final : public UMarvelMoveLogicBaseComponent
{
public:
	TWeakObjectPtr<class AMovingCameraActor>      LandscapeCamera;                                   // 0x03F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ShrikerMoveLogicBaseComponent">();
	}
	static class UShrikerMoveLogicBaseComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UShrikerMoveLogicBaseComponent>();
	}
};

// Class Marvel.SignalFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class USignalFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void BreakSignalResult(const struct FSignalResult& Result, class AMarvelPlayerState** Owner, struct FGameplayTag* Tag, struct FHitResult* HitResult, class AActor** Respondent);
	static struct FSignalResult GetClosestSignalResult(class AMarvelBaseCharacter* InCharacter, const TArray<struct FSignalResult>& InSignalResults);
	static struct FSignalResult MakeSignalResult(class AMarvelPlayerState* Owner, const struct FGameplayTag& Tag, const struct FHitResult& HitResult, class AActor* Respondent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SignalFunctionLibrary">();
	}
	static class USignalFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USignalFunctionLibrary>();
	}
};

// Class Marvel.SignalHandlerActor
// 0x0190 (0x0640 - 0x04B0)
class ASignalHandlerActor : public AMarvelActorBase
{
public:
	uint8                                         Pad_4B0[0x8];                                      // 0x04B0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSignalDetails                         SignalDetailsConfig;                               // 0x04B8(0x0160)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTag                           SignalTag;                                         // 0x0618(0x000C)(BlueprintVisible, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          CanResponse;                                       // 0x0624(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_625[0x3];                                      // 0x0625(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SignalOwnerChar;                                   // 0x0628(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 SignalRespondent;                                  // 0x0630(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bActive;                                           // 0x0638(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_639[0x7];                                      // 0x0639(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool IsActive();
	void SetActive(bool bInActive);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SignalHandlerActor">();
	}
	static class ASignalHandlerActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASignalHandlerActor>();
	}
};

// Class Marvel.SignalHandlerInterface
// 0x0000 (0x0030 - 0x0030)
class ISignalHandlerInterface final : public IInterface
{
public:
	bool CanHandlerSignal();
	bool CanResponseSignal(class AActor* InResponseActor, bool bClick);
	void EndHandleSignal(const struct FSignalResult& RequestResult);
	struct FGameplayTag GetDefaultTag();
	class UUserWidget* GetSignalWidget();
	struct FGameplayTag GetSpecificTag(const struct FSignalResult& RequestResult);
	void SetResponsableState(bool IsResponsable);
	void StartHandleSignal(const struct FSignalResult& RequestResult);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SignalHandlerInterface">();
	}
	static class ISignalHandlerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ISignalHandlerInterface>();
	}
};

// Class Marvel.SignalWorldSubsystem
// 0x0118 (0x0150 - 0x0038)
class USignalWorldSubsystem final : public UWorldSubsystem
{
public:
	class UObject*                                ResponseHandlerActor;                              // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              Distance;                                          // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class UObject*, class ASignalHandlerActor*> Object2HandlerActor;                               // 0x0050(0x0050)(NativeAccessSpecifierPrivate)
	TMap<class UObject*, class UObject*>          Object2Handler;                                    // 0x00A0(0x0050)(NativeAccessSpecifierPrivate)
	TMap<struct FGameplayTag, class UObject*>     Tag2Handler;                                       // 0x00F0(0x0050)(NativeAccessSpecifierPrivate)
	TArray<class UObject*>                        ResponseHandlers;                                  // 0x0140(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)

public:
	void AddObject2Handler(class UObject* Object, class UObject* Handler);
	void AddObject2HandlerActor(class UObject* Object, class ASignalHandlerActor* HandlerActor);
	void AddResponseHandler(class UObject* Handler);
	void AddTag2Handler(const struct FGameplayTag& Tag, class UObject* Handler);
	void CheckValidResponseSignal();
	class UObject* GetObjectHandler(class UObject* Object);
	class ASignalHandlerActor* GetObjectHandlerActor(class UObject* Object);
	class UObject* GetTagHandler(const struct FGameplayTag& Tag);
	void RemoveObject2Handler(class UObject* Object, class UObject* Handler);
	void RemoveObject2HandlerActor(class UObject* Object, class ASignalHandlerActor* HandlerActor);
	void RemoveResponseHandler(class UObject* Handler);
	void RemoveTag2Handler(const struct FGameplayTag& Tag, class UObject* Handler);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SignalWorldSubsystem">();
	}
	static class USignalWorldSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USignalWorldSubsystem>();
	}
};

// Class Marvel.SignalDataAsset
// 0x0098 (0x00D0 - 0x0038)
class USignalDataAsset : public UPrimaryDataAsset
{
public:
	struct FSignalSettings                        AdvancedSettings;                                  // 0x0038(0x0098)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SignalDataAsset">();
	}
	static class USignalDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USignalDataAsset>();
	}
};

// Class Marvel.SimpleTraceFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class USimpleTraceFunctionLibrary final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SimpleTraceFunctionLibrary">();
	}
	static class USimpleTraceFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USimpleTraceFunctionLibrary>();
	}
};

// Class Marvel.SingletonTestFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class USingletonTestFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool SphereOverlapMultiByChannel(class UObject* WorldContextObject, TArray<struct FOverlapResult>* OutOverlaps, const struct FVector& Start, const struct FVector& End, float Radius, ETraceTypeQuery TraceChannel, EDrawDebugTrace DrawDebugType, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, int32 Count);
	static bool SphereOverlapMultiForObjectss(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, const TArray<EObjectTypeQuery>& ObjectTypes, TArray<struct FOverlapResult>* OutOverlaps, EDrawDebugTrace DrawDebugType, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, int32 Count);
	static bool SphereTraceMultiByChannel(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, ETraceTypeQuery TraceChannel, TArray<struct FHitResult>* OutHits, EDrawDebugTrace DrawDebugType, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, int32 Count);
	static bool SphereTraceMultiByProfile(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, class FName ProfileName, TArray<struct FHitResult>* OutHits, EDrawDebugTrace DrawDebugType, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, int32 Count);
	static bool SphereTraceMultiForObjects(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, const TArray<EObjectTypeQuery>& ObjectTypes, TArray<struct FHitResult>* OutHits, EDrawDebugTrace DrawDebugType, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, int32 Count);
	static bool SphereTraceSingleByChannel(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, ETraceTypeQuery TraceChannel, struct FHitResult* OutHit, EDrawDebugTrace DrawDebugType, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, int32 Count);
	static bool SphereTraceSingleByProfile(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, class FName ProfileName, struct FHitResult* OutHit, EDrawDebugTrace DrawDebugType, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, int32 Count);
	static bool SphereTraceSingleForObjects(const class UObject* WorldContextObject, const struct FVector& Start, const struct FVector& End, float Radius, const TArray<EObjectTypeQuery>& ObjectTypes, struct FHitResult* OutHit, EDrawDebugTrace DrawDebugType, const struct FLinearColor& TraceColor, const struct FLinearColor& TraceHitColor, int32 Count);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SingletonTestFunctionLibrary">();
	}
	static class USingletonTestFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USingletonTestFunctionLibrary>();
	}
};

// Class Marvel.MarvelGroundMotionAnimMetaData
// 0x0050 (0x0080 - 0x0030)
class UMarvelGroundMotionAnimMetaData final : public UAnimMetaData
{
public:
	TMap<float, struct FVector2D>                 LandDistCurve;                                     // 0x0030(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MarvelGroundMotionAnimMetaData">();
	}
	static class UMarvelGroundMotionAnimMetaData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMarvelGroundMotionAnimMetaData>();
	}
};

// Class Marvel.SkinTableFuncLibrary
// 0x0000 (0x0030 - 0x0030)
class USkinTableFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static const class UAeroAnimData* GetAeroAnimData(const int32 HeroID, const int32 SkinID, const int32 SculptID, int32& InOutAnimDataIndex);
	static const class UAimOffsetAnimData* GetAimOffsetAnimData(const int32 HeroID, const int32 SkinID, const int32 SculptID, int32& InOutAnimDataIndex);
	static const class UAnimationDataCollection* GetCustomAnimData(const int32 HeroID, const int32 SkinID, const int32 SculptID, const class FString& InAnimKey);
	static const class USixDirGroundMotionAnimData* GetGroundMotionAnimData(const int32 HeroID, const int32 SkinID, const int32 SculptID, int32& InOutAnimDataIndex);
	static struct FMarvelHeroSculptSpec GetHeroSculptSpec(const int32 HeroID, const int32 SkinID, const int32 SculptID);
	static struct FMarvelHeroSkinTable GetHeroSkinData(const int32 HeroID);
	static struct FMarvelHeroSkinSpec GetHeroSkinSpec(const int32 HeroID, const int32 SkinID);
	static struct FMarvelHeroSkinSpec GetHeroSkinSpecByLongSkinID(const int32 LongSkinID);
	static bool GetHeroSkinSpecs(const int32 HeroID, TMap<int32, struct FMarvelHeroSkinSpec>* OutSkins);
	static const class UHeroStateAnimData* GetHeroStateAnimData(const int32 HeroID, const int32 SkinID, const int32 SculptID, int32& InOutAnimDataIndex);
	static const class UHitAnimData* GetHitAnimData(const int32 HeroID, const int32 SkinID, const int32 SculptID, int32& InOutAnimDataIndex);
	static const class UDataTable* GetResTable(const int32 HeroID, const int32 SkinID);
	static struct FMarvelSummonedSkinTable GetSummonedSkinData(const int32 SummonedID);
	static bool GetSummonedSkinDatas(const int32 SummonedID, TMap<int32, struct FMarvelHeroSkinSpec>* OutSkins);
	static struct FMarvelHeroSkinSpec GetSummonedSkinSpec(const int32 SummonedID, const int32 SkinID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SkinTableFuncLibrary">();
	}
	static class USkinTableFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USkinTableFuncLibrary>();
	}
};

// Class Marvel.SpiderManBaseAnimInstance
// 0x0AA0 (0x13B0 - 0x0910)
class USpiderManBaseAnimInstance : public UMarvelAnimInstance
{
public:
	float                                         MaxSwingRollAngle;                                 // 0x0910(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SwingRollAngleRestoreSpeed;                        // 0x0914(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinCeilingHeight;                                  // 0x0918(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HeightToInterruptLaunchAnim;                       // 0x091C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxTurningAngle;                                   // 0x0920(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurningAngleInterpSpeed;                           // 0x0924(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAimOffsetBlendSpace*                   OnWallIdleAimOffset_2D;                            // 0x0928(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurnAngleThreshold;                                // 0x0930(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FBIKInterpSpeed;                                   // 0x0934(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HandOffsetFwd;                                     // 0x0938(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HandOffsetUp;                                      // 0x093C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FootOffsetFwd;                                     // 0x0940(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FootOffsetUp;                                      // 0x0944(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HandIKInterpSpeed;                                 // 0x0948(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FootIKInterpSpeed;                                 // 0x094C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveVector*                           BodyRotationCurve;                                 // 0x0950(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSpiderManIKItem                       HandL;                                             // 0x0958(0x0078)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FSpiderManIKItem                       HandR;                                             // 0x09D0(0x0078)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FSpiderManIKItem                       FootL;                                             // 0x0A48(0x0078)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FSpiderManIKItem                       FootR;                                             // 0x0AC0(0x0078)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          bShouldUseAO;                                      // 0x0B38(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bNeedStartToGroundMotion;                          // 0x0B39(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EStartGroundMotionReason                      StartGroundMotionReason;                           // 0x0B3A(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsSwingToLeft;                                    // 0x0B3B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsInSwingLoopStage;                               // 0x0B3C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESwingType                                    SwingType;                                         // 0x0B3D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B3E[0x2];                                      // 0x0B3E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SwingAngle;                                        // 0x0B40(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bShouldSwingSpin;                                  // 0x0B44(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B45[0x3];                                      // 0x0B45(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SwingLaunchAnimIndex;                              // 0x0B48(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Direction103641;                                   // 0x0B4C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsLowSwingingToRunForward;                        // 0x0B50(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B51[0x3];                                      // 0x0B51(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LowSwingingToRunAngle_Forward;                     // 0x0B54(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LowSwingingToRunAngle_Backward;                    // 0x0B58(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SwingRollAngle;                                    // 0x0B5C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SwingAlphaHandL;                                   // 0x0B60(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SwingAlphaHandR;                                   // 0x0B64(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EStartWallRunReason                           StartWallRunReason;                                // 0x0B68(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsInSprint;                                       // 0x0B69(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsMovingOnWall;                                   // 0x0B6A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsStopMovingOnLeftFoot;                           // 0x0B6B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsOnWallIdle;                                     // 0x0B6C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsHeadDownWhenEnterWallIdle;                      // 0x0B6D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B6E[0x2];                                      // 0x0B6E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TurningAngleSpine1_3;                              // 0x0B70(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TurningAngleSpine5;                                // 0x0B74(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FBIKAlpha;                                         // 0x0B78(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BodyRotationX;                                     // 0x0B7C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BodyRotationY;                                     // 0x0B80(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         BodyRotationZ;                                     // 0x0B84(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAnimStateOnWall;                                  // 0x0B88(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAnimStateGroundMotion;                            // 0x0B89(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAnimStateDoubleJumping;                           // 0x0B8A(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAnimStateSpecialFalling;                          // 0x0B8B(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAnimStateSwinging;                                // 0x0B8C(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bGroundMotion_To_AbilityState103641;               // 0x0B8D(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAbilityState103641_To_GroundMotion;               // 0x0B8E(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAbilityState103641_To_EndToRun;                   // 0x0B8F(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEndToRun_To_GroundMotion;                         // 0x0B90(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAbilityState103641End;                            // 0x0B91(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bStartGroundMotion_To_Conduit;                     // 0x0B92(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bConduit_To_DefaultGroundMotion;                   // 0x0B93(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bConduit_To_DefaultGroundMotion_FromSwinging;      // 0x0B94(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bConduit_To_Land;                                  // 0x0B95(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bLand_To_DefaultGroundMotion;                      // 0x0B96(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bStartWallRunning_To_OnWallRunning;                // 0x0B97(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnWallRunning_To_StartWallIdle;                   // 0x0B98(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bOnWallRunning_To_StartWallIdleWithTurnBack;       // 0x0B99(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B9A[0x6];                                      // 0x0B9A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class ASpiderManBaseCharacter*                SpiderManBaseCharacter;                            // 0x0BA0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_BA8[0x808];                                    // 0x0BA8(0x0808)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiderManBaseAnimInstance">();
	}
	static class USpiderManBaseAnimInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpiderManBaseAnimInstance>();
	}
};

// Class Marvel.SpiderManBaseCharacter
// 0x0030 (0x1840 - 0x1810)
#pragma pack(push, 0x1)
class alignas(0x10) ASpiderManBaseCharacter : public AMarvelBaseCharacter
{
public:
	TMulticastInlineDelegate<void(EAbilityState103641 AbilityState)> OnAbilityState103641ChangedDelegate;               // 0x1810(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, BlueprintCallable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1820[0x2];                                     // 0x1820(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	EAbilityState103641                           AbilityState103641;                                // 0x1822(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1823[0x1];                                     // 0x1823(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Direction103641;                                   // 0x1824(0x0004)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsGetOnWallFromSpecialMoving;                     // 0x1828(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsGetOnWallFromSwinging;                          // 0x1829(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_182A[0x6];                                     // 0x182A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterSwingingComponent*            SwingingComponent;                                 // 0x1830(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	EAbilityState103641 GetAbilityState103641();
	float GetDirection103641();
	bool GetIsGetOnWallFromSpecialMoving();
	bool GetIsGetOnWallFromSwinging();
	class UCharacterSwingingComponent* GetSwingingComponent();
	void OnRep_AbilityState103641();
	void SetAbilityState103641(EAbilityState103641 InAbilityState103641);
	void SetDirection103641(float InDirection);
	void SetIsGetOnWallFromSpecialMoving(bool IsGetOnWallFromSpecialMoving);
	void SetIsGetOnWallFromSwinging(bool IsGetOnWallFromSwinging);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiderManBaseCharacter">();
	}
	static class ASpiderManBaseCharacter* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASpiderManBaseCharacter>();
	}
};
#pragma pack(pop)

// Class Marvel.SpiderWebDecalComponent
// 0x0290 (0x0700 - 0x0470)
class USpiderWebDecalComponent final : public USceneComponent
{
public:
	class UMarvelPyramidMeshComponent*            PyramidMeshComponent;                              // 0x0470(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSpiderWebDecalParam                   SpiderWebDecalParam;                               // 0x0478(0x00C0)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	uint8                                         Pad_538[0x1C8];                                    // 0x0538(0x01C8)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USpiderWebDecalComponent* SpawnComponentAttached(const class UObject* WorldContextObject, const struct FHitResult& InHitResult, const struct FSpiderWebDecalParam& Param);

	void HideSpiderWeb();
	void OnDestructibleFracture();
	void ResetElapsedLifeTime();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpiderWebDecalComponent">();
	}
	static class USpiderWebDecalComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpiderWebDecalComponent>();
	}
};

// Class Marvel.Widget_HurtOutlineUnit
// 0x0028 (0x05D0 - 0x05A8)
class UWidget_HurtOutlineUnit final : public UMarvelUserWidget
{
public:
	struct FVector                                TargetPosition;                                    // 0x05A8(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Mat_Hit;                                           // 0x05C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsFirstSet;                                       // 0x05C8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5C9[0x7];                                      // 0x05C9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_HurtOutlineUnit">();
	}
	static class UWidget_HurtOutlineUnit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_HurtOutlineUnit>();
	}
};

// Class Marvel.SplineActor
// 0x00A0 (0x0530 - 0x0490)
class ASplineActor final : public AActor
{
public:
	bool                                          bUseCustomCircle;                                  // 0x0490(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_491[0x3];                                      // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CircleRadius;                                      // 0x0494(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CircleHeight;                                      // 0x0498(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49C[0x4];                                      // 0x049C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                CircleScale;                                       // 0x04A0(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FixVelocity;                                       // 0x04B8(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4BC[0x4];                                      // 0x04BC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            VelocityTransitionCurve;                           // 0x04C0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESplineChildRotationType                      ChildRotationType;                                 // 0x04C8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C9[0x7];                                      // 0x04C9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               RelativeRotationToParent;                          // 0x04D0(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	struct FRotator                               AdjustRotation;                                    // 0x04E8(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	class USplineComponent*                       SplineComponent;                                   // 0x0500(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class USceneComponent*>                ChildComps;                                        // 0x0508(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_518[0x18];                                     // 0x0518(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnableVelocityTransition(bool bEnable, bool IsReverse);
	void SetVisibleCompNum(int32 InNum);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SplineActor">();
	}
	static class ASplineActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASplineActor>();
	}
};

// Class Marvel.SplineNiagaraActor
// 0x0028 (0x04B8 - 0x0490)
class ASplineNiagaraActor final : public AActor
{
public:
	class USplineComponent*                       SplineComponent;                                   // 0x0490(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UNiagaraComponent*                      NiagaraComponent;                                  // 0x0498(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   EditingDataInterface;                              // 0x04A0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4AC[0x4];                                      // 0x04AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UNiagaraSystem*                         LastAsset;                                         // 0x04B0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SplineNiagaraActor">();
	}
	static class ASplineNiagaraActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASplineNiagaraActor>();
	}
};

// Class Marvel.StackPanelChild
// 0x0000 (0x0030 - 0x0030)
class IStackPanelChild final : public IInterface
{
public:
	void OnBecomeNoneTop();
	void OnBecomeTop();
	void OnEnterStack();
	void OnLeaveStack();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StackPanelChild">();
	}
	static class IStackPanelChild* GetDefaultObj()
	{
		return GetDefaultObjImpl<IStackPanelChild>();
	}
};

// Class Marvel.StackPanelSlot
// 0x0008 (0x0070 - 0x0068)
class UStackPanelSlot final : public UOverlaySlot
{
public:
	bool                                          bIsOnTop;                                          // 0x0068(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bInLogicStack;                                     // 0x0069(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6A[0x6];                                       // 0x006A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UStackPanelSlot* SlotAsStackSlot(class UWidget* Widget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StackPanelSlot">();
	}
	static class UStackPanelSlot* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStackPanelSlot>();
	}
};

// Class Marvel.Widget_ListEntry
// 0x0008 (0x05B0 - 0x05A8)
class UWidget_ListEntry : public UMarvelUserWidget
{
public:
	uint8                                         Pad_5A8[0x8];                                      // 0x05A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UListViewBase* GetOwningListView() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_ListEntry">();
	}
	static class UWidget_ListEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_ListEntry>();
	}
};

// Class Marvel.StackPanel
// 0x0018 (0x02A0 - 0x0288)
class UStackPanel final : public UMarvelOverlay
{
public:
	TWeakObjectPtr<class UStackPanelSlot>         TopSlot;                                           // 0x0288(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UWidget* OldTop, class UWidget* NewTop)> OnTopWidgetChanged;                                // 0x0290(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	class UOverlaySlot* AddChildToStack(class UWidget* Content, EActionOnOldHUD Action);
	class UStackPanelSlot* GetTopSlot();
	class UWidget* GetTopWidget();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StackPanel">();
	}
	static class UStackPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStackPanel>();
	}
};

// Class Marvel.RootUserWidget
// 0x0010 (0x03C8 - 0x03B8)
class URootUserWidget final : public UUserWidget
{
public:
	class UCanvasPanel*                           RootPanel;                                         // 0x03B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UStackPanel*                            StackPanel;                                        // 0x03C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RootUserWidget">();
	}
	static class URootUserWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<URootUserWidget>();
	}
};

// Class Marvel.Widget_CommonReticle
// 0x0168 (0x0520 - 0x03B8)
class UWidget_CommonReticle : public UUserWidget
{
public:
	class UReticleManager*                        ReticleManager;                                    // 0x03B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCanvasPanel*                           CanvasPanel_Reticle;                               // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Mat_Dot;                                           // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Mat_RangeLine;                                     // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Mat_Accumulate;                                    // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Mat_AccumulateSub;                                 // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Mat_RangeCircle;                                   // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Anim_Dot_FadeIn;                                   // 0x03F0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Anim_RangeCircle_FadeIn;                           // 0x03F8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidgetAnimation*                       Anim_RangeLine_FadeIn;                             // 0x0400(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsUseDot;                                         // 0x0408(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_409[0x3];                                      // 0x0409(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Radius;                                            // 0x040C(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FReticleStyleParameterFloat            RadiusScale;                                       // 0x0410(0x0010)(BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	ECommonReticleType                            CurType;                                           // 0x0420(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ShouldPlayReticleAnim;                             // 0x0421(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_422[0x2];                                      // 0x0422(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FReticleStyle                          DefaultReticleStyle;                               // 0x0424(0x00E4)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	float                                         DefaultReticleRadius;                              // 0x0508(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DefaultCircleLengthDiff;                           // 0x050C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         CurEquipID;                                        // 0x0510(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BlockOpacity;                                      // 0x0514(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_518[0x8];                                      // 0x0518(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnCharReloadBegin();
	void OnCharReloadEnd();
	void OnHitTarget(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void Reset();
	void SetAngle(float InAngle);
	void SetbUseDot(bool bInUseDot);
	void SetCircleNumber(float InNumber);
	void SetCircleThickness(float InThickness);
	void SetColor(const struct FLinearColor& InCrosshairColor, const struct FLinearColor& InCircleColor, const struct FLinearColor& InDotColor);
	void SetLength(float InLength);
	void SetNumber(float InNumber);
	void SetOpacity(float InCrosshairOpacity, float InCircleOpacity, float InDotOpacity);
	void SetRadius(float InRadius);
	void SetRadiusScale(float InCrosshairRadiusScale, float InCircleRadiusScale, float InDotRadiusScale);
	void SetReticleType(ECommonReticleType InReticleType);
	void SetScatter(float InCrosshairScatter, float InCircleScatter);
	void SetShadowColor(const struct FLinearColor& InShadowColor);
	void SetShadowOpacity(float InCrosshairShadowOpacity, float InCircleShadowOpacity, float InDotShadowOpacity);
	void SetShadowPower(float InCrosshairShadowPower, float InCircleShadowPower, float InDotShadowPower);
	void SetSmoothPixel(float InCrosshairSmoothPixel, float InCircleSmoothPixel, float InDotSmoothPixel);
	void SetSpread(float InDistance, float InSpread, float InRadius);
	void SetThickness(float Crosshair, float Circle, float Dot);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_CommonReticle">();
	}
	static class UWidget_CommonReticle* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_CommonReticle>();
	}
};

// Class Marvel.StencilManager
// 0x0120 (0x0150 - 0x0030)
class UStencilManager final : public UObject
{
public:
	uint8                                         Pad_30[0x20];                                      // 0x0030(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UStencilComponent*>              StencilComponents;                                 // 0x0050(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UTeamOutlineColorAsset*                 CachedDefaultOutlineColorAsset;                    // 0x0060(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCustomColorManager*                    CachedCustomColorManager;                          // 0x0068(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_70[0x18];                                      // 0x0070(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class UStencilComponent*, int32>         AssignedOcclusionIDMap;                            // 0x0088(0x0050)(ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_D8[0x78];                                      // 0x00D8(0x0078)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UStencilManager* Get(const class UObject* WCO);

	void UpdateAllStencilComponents();
	void UpdateHasAnyFillColorEffect();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StencilManager">();
	}
	static class UStencilManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStencilManager>();
	}
};

// Class Marvel.StencilModifierHelper
// 0x0000 (0x0030 - 0x0030)
class UStencilModifierHelper final : public UObject
{
public:
	static void DisableDitheringTransparent_Modify(struct FStencilModifier_DisableDitheringTransparent* Handle, class AActor* TargetActor);
	static void DisableDitheringTransparent_Reset(struct FStencilModifier_DisableDitheringTransparent* Handle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StencilModifierHelper">();
	}
	static class UStencilModifierHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStencilModifierHelper>();
	}
};

// Class Marvel.StencilSettings
// 0x00B0 (0x00F8 - 0x0048)
class UStencilSettings : public UDeveloperSettings
{
public:
	bool                                          bUsingOutlineMaskInsteadOfCustomStencil;           // 0x0048(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDisplayDebugInfo;                                 // 0x0049(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableOutlineForEnemyBlockedByViewTarget;         // 0x004A(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableFillColorForEnemyBlockedByViewTarget;       // 0x004B(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableUIWidgetForEnemyBlockedByViewTarget;        // 0x004C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableTransparentOutlineForViewTarget;            // 0x004D(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnableTransparentFillColorForViewTarget;          // 0x004E(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePPLegacyTransparent;                        // 0x004F(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEnablePPDitheringTransparent;                     // 0x0050(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     ActorDitheringOpacityCurve;                        // 0x0058(0x0088)(Edit, Config, NativeAccessSpecifierPublic)
	bool                                          bEnableCharacterPPDitheringTransparent;            // 0x00E0(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         ComponentsAffectedByStencilExceptHasIgnoreStencilTag; // 0x00E8(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)

public:
	static class UStencilSettings* Get();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StencilSettings">();
	}
	static class UStencilSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStencilSettings>();
	}
};

// Class Marvel.StickMouseWidget
// 0x0070 (0x0428 - 0x03B8)
class UStickMouseWidget : public UUserWidget
{
public:
	uint8                                         Pad_3B8[0x8];                                      // 0x03B8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UCanvasPanel*                           CanvasPanel_0;                                     // 0x03C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C8[0x8];                                      // 0x03C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Anim_FadeIn;                                       // 0x03D0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Anim_FadeOut;                                      // 0x03D8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Anim_FadeIn_Settlement;                            // 0x03E0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Img_Like;                                          // 0x03E8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Img_HighLight;                                     // 0x03F0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FadeOutSpeed;                                      // 0x03F8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3FC[0x4];                                      // 0x03FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UFocusManager*                          FocusManager;                                      // 0x0400(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_408[0x20];                                     // 0x0408(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ResetCursorType();
	void SetCursorSettlementStyle(const bool IsLike);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StickMouseWidget">();
	}
	static class UStickMouseWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStickMouseWidget>();
	}
};

// Class Marvel.Widget_SignalIndicator
// 0x0010 (0x08B0 - 0x08A0)
class UWidget_SignalIndicator : public UMarvel3DWidget
{
public:
	uint8                                         Pad_898[0x10];                                     // 0x0898(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   TargetCharacter;                                   // 0x08A8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetDying(bool bIsDying);
	void SetTargetCharacter(class AMarvelBaseCharacter* InTargetCharacter);
	void UpdateDyingState();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_SignalIndicator">();
	}
	static class UWidget_SignalIndicator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_SignalIndicator>();
	}
};

// Class Marvel.StringTableManager
// 0x0050 (0x0080 - 0x0030)
class UStringTableManager final : public UObject
{
public:
	TMap<class FString, class UStringTable*>      StringTableMap;                                    // 0x0030(0x0050)(Transient, NativeAccessSpecifierPrivate)

public:
	static class UStringTable* GetStringTable(const class FString& StringTableName);
	static bool GetStringTablePaths(const TArray<class FString>& PackagePaths, const TArray<class FString>& Keywords, TArray<struct FSoftObjectPath>* OutTables);
	static class UStringTable* LoadTable(const class FString& StringTableName, bool bLoadIfNotExist);
	static bool LoadTables(const TArray<class FString>& Keywords, TArray<class UStringTable*>* OutTables, const bool bLoadIfNotExist);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"StringTableManager">();
	}
	static class UStringTableManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UStringTableManager>();
	}
};

// Class Marvel.SummonedAbilitySystemComponent
// 0x0040 (0x6540 - 0x6500)
class USummonedAbilitySystemComponent final : public UMarvelBaseAbilitySystemComponent
{
public:
	uint8                                         Pad_6500[0x28];                                    // 0x6500(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMarvelSummonedAbilityInfo>     SummonedAbilityInfos;                              // 0x6528(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_6538[0x8];                                     // 0x6538(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool ActivateAbilityWithId(int32 AbilityID, bool bAllowRemoteActivation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SummonedAbilitySystemComponent">();
	}
	static class USummonedAbilitySystemComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USummonedAbilitySystemComponent>();
	}
};

// Class Marvel.SummonedAttributeSet
// 0x0008 (0x0250 - 0x0248)
class USummonedAttributeSet final : public UMarvelAttributeSet
{
public:
	uint8                                         Pad_248[0x8];                                      // 0x0248(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SummonedAttributeSet">();
	}
	static class USummonedAttributeSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<USummonedAttributeSet>();
	}
};

// Class Marvel.WallRunningAbility
// 0x0088 (0x2608 - 0x2580)
class UWallRunningAbility : public UMarvelGameplayAbility
{
public:
	class FName                                   WallRunMoveModeKeyName;                            // 0x2580(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   VerticallyUpwardValueName;                         // 0x258C(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   TowardsCameraValueName;                            // 0x2598(0x000C)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_25A4[0x4];                                     // 0x25A4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UWallRunningAbilityConfig*              Config_WallRun;                                    // 0x25A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWallRunningPassiveAbilityConfig*       Config_WallRunPassive;                             // 0x25B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x25B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCharacterWallRunningComponent*         WallRunningComponent;                              // 0x25C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelGameplayTask_Tick*               TickTaskWhenIdle;                                  // 0x25C8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAbilityTask_PlayMontageAndWaitForEvent* TimelineTask;                                      // 0x25D0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_25D8[0x30];                                    // 0x25D8(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CheckCanUnblockAbilitiesWhenIdle(float DeltaTime);
	float ConstructEventData();
	void ExtractInfoFromEventData(float EventMagnitude);
	void K2_OnTick(float DeltaTime);
	bool K2_OnWallRunningEnd(const struct FWallRunningEndInfo& InWallRunningEndInfo);
	void MakeSurePassiveAbilityConfig();
	void ModifyEventData(struct FGameplayEventData& Data);
	void OnActivateStateEnd(float Time);
	void OnFullWallIdleStateChanged(bool IsInFullWallIdleState);
	void OnSprintRunningStateChange(bool IsSprintRunning);
	void OnSprintStateEnd(float Time);
	void OnSprintStateStart(float Time);
	void OnWallRunMoveModegChanged();
	void OnWallRunningEnd(const struct FWallRunningEndInfo& InWallRunningEndInfo);
	void OnWallRunningStart();
	void OnWallRunningTimeOut();
	void ResetDefault();
	void SetWallRunParams();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WallRunningAbility">();
	}
	static class UWallRunningAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWallRunningAbility>();
	}
};

// Class Marvel.SummonedBaseAttributeSet
// 0x0000 (0x0078 - 0x0078)
class USummonedBaseAttributeSet final : public UMarvelBaseAttributeSet
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SummonedBaseAttributeSet">();
	}
	static class USummonedBaseAttributeSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<USummonedBaseAttributeSet>();
	}
};

// Class Marvel.SummonedAudioComponent
// 0x0000 (0x04A8 - 0x04A8)
class USummonedAudioComponent final : public UMarvelAudioComponent
{
public:
	void OnOwnerBeginTask(class AActor* InActor);
	void OnOwnerRecycle(class AActor* InActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SummonedAudioComponent">();
	}
	static class USummonedAudioComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USummonedAudioComponent>();
	}
};

// Class Marvel.SummonedCharacterBase
// 0x0490 (0x0EA0 - 0x0A10)
#pragma pack(push, 0x1)
class alignas(0x10) ASummonedCharacterBase : public ACharacter
{
public:
	uint8                                         Pad_A10[0x260];                                    // 0x0A10(0x0260)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bCapsuleChildrenLazyUpdate;                        // 0x0C70(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C71[0x7];                                      // 0x0C71(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USceneComponent*>                LazyUpdatedComponents;                             // 0x0C78(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_C88[0x18];                                     // 0x0C88(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         SummonedID;                                        // 0x0CA0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA4[0x4];                                      // 0x0CA4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayTask*                          DashTask;                                          // 0x0CA8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CB0[0x18];                                     // 0x0CB0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class USummonedAbilitySystemComponent*        AbilitySystemComponent;                            // 0x0CC8(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class ASummonedAIController*                  SummonedAIController;                              // 0x0CD0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimTimelineComponent*                 AnimTimelineComponent;                             // 0x0CD8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelSkinComponent*                   SkinComponent;                                     // 0x0CE0(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateStencilComponent;                           // 0x0CE8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CE9[0x7];                                      // 0x0CE9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UStencilComponent*                      StencilComponent;                                  // 0x0CF0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UReactivePropertyComponent*             ReactivePropertyComponent;                         // 0x0CF8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAudioComponent*                  AudioComponent;                                    // 0x0D00(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, EditConst, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         BeginPlayIdx;                                      // 0x0D08(0x0004)(Net, ZeroConstructor, IsPlainOldData, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D0C[0x4];                                      // 0x0D0C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelActorPoolComponent*              ActorPoolComponent;                                // 0x0D10(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USummonedMovementComponent*             CacheSummonedMovementComponent;                    // 0x0D18(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMeshOverlayMaterialComponent*          OverlayMaterialComponent;                          // 0x0D20(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UCharacterMaterialComponent*            MaterialComponent;                                 // 0x0D28(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 GenerateID;                                        // 0x0D30(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USceneComponent*                        HeadWidgetRootComponent;                           // 0x0D40(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  MarvelActorTags;                                   // 0x0D48(0x0068)(Edit, BlueprintVisible, AdvancedDisplay, NativeAccessSpecifierPublic)
	class UMarvelSummonedHiddenComponent*         SummonedHiddenComponent;                           // 0x0DB0(0x0008)(Edit, BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_DB8[0xC0];                                     // 0x0DB8(0x00C0)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayAbility*                       OwningAbility;                                     // 0x0E78(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 QuoteSource;                                       // 0x0E80(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 SourceActor;                                       // 0x0E88(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELieDownState                                 LieDownState;                                      // 0x0E90(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E91[0x7];                                      // 0x0E91(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetHeightAboveGround(bool bTraceDestructible, bool bTraceSceneSummoned, float MaxGroundSlope, bool bTraceAirWall);
	ELieDownState GetLieDownState();
	class USummonedMovementComponent* GetSummonedMovementComponent();
	void MulticastChangeVelocity(const struct FVector& Velocity);
	void OnLazyChildComponentAttached(class USceneComponent* InComponent, class USceneComponent* InChildComponent);
	void OnLazyChildComponentDetached(class USceneComponent* InComponent, class USceneComponent* InChildComponent);
	void OnRep_ActorPoolBeginPlayChanged();
	void SetLieDownState(ELieDownState InLieDownState, float InAnimPlayRate);

	class UMarvelSummonedComponent* GetSummonedComponent() const;
	bool IsAlive() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SummonedCharacterBase">();
	}
	static class ASummonedCharacterBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASummonedCharacterBase>();
	}
};
#pragma pack(pop)

// Class Marvel.SummonedDefaultSphereRootComp
// 0x0020 (0x08B0 - 0x0890)
class USummonedDefaultSphereRootComp : public USphereComponent
{
public:
	class AMarvelSummonerBase*                    SummonedOwner;                                     // 0x0888(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bApplyTerrainKill;                                 // 0x0890(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_891[0x7];                                      // 0x0891(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnAttachmentChangedDelegate;                       // 0x0898(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_8A8[0x8];                                      // 0x08A8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SummonedDefaultSphereRootComp">();
	}
	static class USummonedDefaultSphereRootComp* GetDefaultObj()
	{
		return GetDefaultObjImpl<USummonedDefaultSphereRootComp>();
	}
};

// Class Marvel.WeaponAbilityContextStatics
// 0x0000 (0x0030 - 0x0030)
class UWeaponAbilityContextStatics final : public UBlueprintFunctionLibrary
{
public:
	static int32 GetAbilityID(const struct FWeaponAbilityContext& InContext);
	static class UGameplayAbility* GetSourceAbility(const struct FWeaponAbilityContext& InContext);
	static struct FWeaponAbilityContext MakeAbilityContext(int32 InAbilityId, class UGameplayAbility* InSourceAbility);
	static bool SetAbilityID(struct FWeaponAbilityContext& InContext, int32 InAbilityId);
	static bool SetSourceAbility(struct FWeaponAbilityContext& InContext, class UGameplayAbility* InSourceAbility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WeaponAbilityContextStatics">();
	}
	static class UWeaponAbilityContextStatics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponAbilityContextStatics>();
	}
};

// Class Marvel.SummonedFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class USummonedFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static int32 GetSummonedID(class AActor* InActor);
	static class FString GetSummonedName(class AActor* Actor);
	static ESummonedVisibleType GetSummonedVisibleType(class AActor* InActor);
	static bool IsSummoned(class AActor* Actor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SummonedFunctionLibrary">();
	}
	static class USummonedFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USummonedFunctionLibrary>();
	}
};

// Class Marvel.SummonedMovementComponent
// 0x08C0 (0x0A40 - 0x0180)
class alignas(0x10) USummonedMovementComponent : public UMovementComponent
{
public:
	bool                                          bAutoStartWhenBeginPlay;                           // 0x0180(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bMovementBase;                                     // 0x0181(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESummonedDetachType                           SummonedDetachType;                                // 0x0182(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLockRotation;                                     // 0x0183(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseBoxShape;                                      // 0x0184(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_185[0x3];                                      // 0x0185(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                RelativeLocation;                                  // 0x0188(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                HalfVector;                                        // 0x01A0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAlwaysSweep;                                      // 0x01B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCustomFractureLimit;                           // 0x01B9(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1BA[0x2];                                      // 0x01BA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxFractureVelocity;                               // 0x01BC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxFractureAngleChangeValue;                       // 0x01C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCustomResponseParams;                             // 0x01C4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCollisionResponseContainer            CustomCollisionResponseParams;                     // 0x01C5(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bEnableSlide;                                      // 0x01E5(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E6[0x2];                                      // 0x01E6(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ValidAngle;                                        // 0x01E8(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckComponentForbidPlaceSummoned;                // 0x01EC(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESummonedLevelPenetrationType                 SummonedLevelPenetrationType;                      // 0x01ED(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EE[0x2];                                      // 0x01EE(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   LevelPushIgnoreCompTag;                            // 0x01F0(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   RequiredPenetrationCompTag;                        // 0x01FC(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LevelPenetrationPushScale;                         // 0x0208(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIgnoreLevelForceEnd;                              // 0x020C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bEndSummonedByBackTrackEvent;                      // 0x020D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCheckBackTrackDesPenetration;                     // 0x020E(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20F[0x1];                                      // 0x020F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CheckBackTrackPenetrationPeriod;                   // 0x0210(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_214[0x4];                                      // 0x0214(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    SweepComponent;                                    // 0x0218(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_220[0x8];                                      // 0x0220(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UPrimitiveComponent*                    MovementBase;                                      // 0x0228(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_230[0x228];                                    // 0x0230(0x0228)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRepSummonedMovement                   CustomSummonedRepMovement;                         // 0x0458(0x0200)(Net, RepNotify, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_658[0x3E0];                                    // 0x0658(0x03E0)(Fixing Size After Last Property [ Dumper-7 ])
	class ABackTrackManagerActor*                 CheckBackTrackManagerActor;                        // 0x0A38(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void OnBeginBackTrackAnim();
	void OnChaosDesGeneratorResetCollision();
	void OnClientOnlyDestructionActorBreak();
	void OnFinishBackTrack();
	void OnFinishBackTrackAnim();
	void OnMovementBaseCollisionChange(class UPrimitiveComponent* InMovementBase);
	void OnPivotDestructibleFracture(class FName BoneName, const struct FVector& ImpactPoint);
	void OnRep_CustomSummonedRepMovement();
	void SetPresetHitResult(const struct FHitResult& InHitResult);
	void SetSummonedMoveState(ESummonedMoveState NewMoveState);
	void StartSummonedMovement();
	void StopSummonedMovement();

	class UPrimitiveComponent* GetSummonedMovementBase() const;
	ESummonedMoveState GetSummonedMoveState() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SummonedMovementComponent">();
	}
	static class USummonedMovementComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USummonedMovementComponent>();
	}
};

// Class Marvel.SummonedStatisticsUnit
// 0x0090 (0x00C0 - 0x0030)
class USummonedStatisticsUnit : public UObject
{
public:
	class UBattleStatisticsManager*               BattleStatisticsManager;                           // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SummonedID;                                        // 0x0038(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 SummonedUniqueID;                                  // 0x0040(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMarvelBattleLogDamageUnit>     TakeDamageList;                                    // 0x0050(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TMap<struct FMarvelBattleLogBuffUnitKey, struct FMarvelBattleLogBuffUnit> PendingBuffDict;                                   // 0x0060(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TArray<struct FMarvelBattleLogBuffUnit>       TakeBuffList;                                      // 0x00B0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	void Initialize(class UBattleStatisticsManager* InBattleStatisticsManager, int32 InSummonedID, const class FString& InSummonedUniqueID);
	void OnTakeBuff(const struct FBuffInfoContext& BuffInfoContext);
	void OnTakeBuffRemoved(const struct FBuffInfoContext& BuffInfoContext);
	void OnTakeDamage(const struct FBattleInfoContext& BattleInfoContext);
	void PyInitialize();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SummonedStatisticsUnit">();
	}
	static class USummonedStatisticsUnit* GetDefaultObj()
	{
		return GetDefaultObjImpl<USummonedStatisticsUnit>();
	}
};

// Class Marvel.WeaponTask_AudoTransitIdleAnimation
// 0x0010 (0x0088 - 0x0078)
class UWeaponTask_AudoTransitIdleAnimation final : public UGameplayTask
{
public:
	TArray<class USkeletalMeshComponent*>         MeshComponents;                                    // 0x0078(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	static class UWeaponTask_AudoTransitIdleAnimation* AudoTransitIdleAnimation(class UGameplayTasksComponent* TasksComponent, class USkeletalMeshComponent* MeshComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WeaponTask_AudoTransitIdleAnimation">();
	}
	static class UWeaponTask_AudoTransitIdleAnimation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponTask_AudoTransitIdleAnimation>();
	}
};

// Class Marvel.SummonedTableFuncLibrary
// 0x0000 (0x0030 - 0x0030)
class USummonedTableFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FMarvelSummonerAgentTable GetSummonedData(const int32 SummonedID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SummonedTableFuncLibrary">();
	}
	static class USummonedTableFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USummonedTableFuncLibrary>();
	}
};

// Class Marvel.SummonerWeaponComponent
// 0x1340 (0x1430 - 0x00F0)
class USummonerWeaponComponent final : public UActorComponent
{
public:
	EPhysicsWeaponType                            SummonerWeaponType;                                // 0x00F0(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_F1[0xF];                                       // 0x00F1(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             HoldingRelativeTransform;                          // 0x0100(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FTransform                             LeftHandIKTargetTransform;                         // 0x0160(0x0060)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxHealth;                                         // 0x01C0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUseCollisionBox;                                  // 0x01C4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C5[0x3];                                      // 0x01C5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelBaseCharacter*                   InstigatorCharacter;                               // 0x01C8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AActor*                                 InstigatorActor;                                   // 0x01D0(0x0008)(Net, ZeroConstructor, RepNotify, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* InActor, bool bSucceed)> OnInterpMoveStop;                                  // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Value)> OnThrowWeapon;                                     // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FVector& Impulse, const struct FVector& Location)> OnTakeImpulseDispatcher;                           // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* Value)> OnOwnerChanged;                                    // 0x0208(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnWeaponReset;                                     // 0x0218(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FPhysicsWeaponPossessInfo              ReplicatedPossessInfo;                             // 0x0228(0x0070)(Net, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_298[0x8];                                      // 0x0298(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLoopAdsorbTaskParameters              ReplicatedLoopAdsorbInfo;                          // 0x02A0(0x10B0)(Net, ContainsInstancedReference, NativeAccessSpecifierPublic)
	bool                                          bShieldCollisionState;                             // 0x1350(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1351[0x3];                                     // 0x1351(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CurrentHealth;                                     // 0x1354(0x0004)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EInteractorUsedType                           UsedType;                                          // 0x1358(0x0001)(Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1359[0xC7];                                    // 0x1359(0x00C7)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OwnerActor;                                        // 0x1420(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UPrimitiveComponent*                    OwnerRootComponent;                                // 0x1428(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	struct FVector GetMeshCenterLocation();
	float GetMeshMinRadius();
	void MulticastOnTakeImpulse(const struct FVector& InImpulse, const struct FVector& InLocation);
	void MulticastReplaceMesh(int32 Index_0);
	void MulticastSetInterpMoveToTarget(class AActor* InOwner, const struct FLoopAdsorbTaskParameters& InAdsorbParams);
	void MulticastStopInterpMoveToTarget(bool bSucceed);
	void OnCharacterEndPlay();
	void OnProjectileSpawnSuccess(class AActor* SpawnActor, const struct FGameplayAbilityTargetDataHandle& Data);
	void OnRep_InstigatorActor();
	void OnTakeImpulse(const struct FVector& InImpulse, const struct FVector& InLocation);
	void OnWeaponUnHold(bool bIsUsed);
	bool PossessWeapon(class AMarvelBaseCharacter* InOwner, const struct FPhysicsWeaponPossessInfo& PossessInfo);
	void ReduceHealth(float Value);
	void SetCustomTransform(const struct FTransform& InCustomTransform);
	void SetInterpMoveToTarget(class AActor* InOwner, struct FLoopAdsorbTaskParameters* InAdsorbParams);
	void SetShieldCollisionEnabled(bool bNewCollision);
	void StopInterpMoveToTarget();
	bool ThrowWeapon(class UMarvelBaseGameplayAbility* OwnerAbility, int32 ProjectileID, const struct FMarvelAbilitySocketInfo& SocketInfo, float HealthReduction, bool bIsAimingTransform, class UMarvelSummonedComponent* InSummonedComponent);
	void UnPossessWeapon();

	void SetLocalPossessCue(bool bEnable, const struct FGameplayTag& CueTag) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SummonerWeaponComponent">();
	}
	static class USummonerWeaponComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USummonerWeaponComponent>();
	}
};

// Class Marvel.SustainedAbilityStatisticsImpl
// 0x00A0 (0x0190 - 0x00F0)
class USustainedAbilityStatisticsImpl final : public UHitRateAbilityStatisticsImpl
{
public:
	uint8                                         Pad_F0[0xA0];                                      // 0x00F0(0x00A0)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SustainedAbilityStatisticsImpl">();
	}
	static class USustainedAbilityStatisticsImpl* GetDefaultObj()
	{
		return GetDefaultObjImpl<USustainedAbilityStatisticsImpl>();
	}
};

// Class Marvel.TagAbilityStatistics
// 0x0018 (0x0088 - 0x0070)
class UTagAbilityStatistics : public UAbilityStatistics
{
public:
	class UTagAbilityStatisticsImpl*              StatisticsImpl;                                    // 0x0070(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTagAbilityStatisticsImpl*>      UnitStatisticsImpls;                               // 0x0078(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TagAbilityStatistics">();
	}
	static class UTagAbilityStatistics* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTagAbilityStatistics>();
	}
};

// Class Marvel.TargetActorNodeInfo
// 0x0070 (0x00A0 - 0x0030)
class UTargetActorNodeInfo final : public UObject
{
public:
	class UTargetActorNodeInfo*                   Parent;                                            // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSet<class UTargetActorNodeInfo*>             Children;                                          // 0x0038(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 UniqueID;                                          // 0x0088(0x0010)(BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ETargetActorType                              NodeType;                                          // 0x0098(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TargetActorNodeInfo">();
	}
	static class UTargetActorNodeInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTargetActorNodeInfo>();
	}
};

// Class Marvel.TargetActorParentManager
// 0x00A0 (0x00D0 - 0x0030)
class UTargetActorParentManager final : public UObject
{
public:
	TSet<class UTargetActorNodeInfo*>             TargetActorForest;                                 // 0x0030(0x0050)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	TMap<class FString, class UTargetActorNodeInfo*> TargetActorInfos;                                  // 0x0080(0x0050)(BlueprintVisible, Protected, NativeAccessSpecifierProtected)

public:
	void AddTargetActor(const class FString& UniqueID, ETargetActorType ActorType, const class FString& ParentID);
	void DelTargetActor(const class FString& UniqueID);
	ETargetActorType GetActorType(const class FString& UniqueID);
	class FString GetParent(const class FString& UniqueID);
	ETargetActorType GetParentType(const class FString& UniqueID);
	class FString GetRoot(const class FString& UniqueID);
	ETargetActorType GetRootType(const class FString& UniqueID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TargetActorParentManager">();
	}
	static class UTargetActorParentManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTargetActorParentManager>();
	}
};

// Class Marvel.TeamComponent
// 0x0D68 (0x0E58 - 0x00F0)
class UTeamComponent final : public UActorComponent
{
public:
	uint8                                         Pad_F0[0xD28];                                     // 0x00F0(0x0D28)(Fixing Size After Last Property [ Dumper-7 ])
	EBattleSide                                   UseCustomBattleSide;                               // 0x0E18(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E19[0x3F];                                     // 0x0E19(0x003F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ForceUpdate();
	int32 GetTeamID();
	void GmSetTeamID(const int32 InTeamID);
	void OnCameraManagerSpawned();
	void SetDeceptiveTeamID(bool bInOverrideTeamID, int32 InTeamID);
	void SetTeamID(int32 InTeamID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TeamComponent">();
	}
	static class UTeamComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTeamComponent>();
	}
};

// Class Marvel.TeamStatisticsController
// 0x00C0 (0x00F0 - 0x0030)
class UTeamStatisticsController final : public UObject
{
public:
	class UActionLogController*                   LogController;                                     // 0x0030(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelGameplayEventManager*            GlobalEventManager;                                // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelGameState*                       MarvelGameState;                                   // 0x0040(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<int32, struct FMemberHeroInfo>           RedPlayerToHeroInfo;                               // 0x0048(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, struct FMemberHeroInfo>           BluePlayerToHeroInfo;                              // 0x0098(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	bool                                          bBattleStart;                                      // 0x00E8(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         TeamCompositionStartTime;                          // 0x00EC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void BindEvents();
	void Initialize(class UActionLogController* InLogController);
	void OnCharacterSelectIDChanged(class AMarvelPlayerState* PlayerState, int32 HeroID);
	void OnRemovePlayerState(class AMarvelPlayerState* PlayerState);
	void OnRoundBattleEnd();
	void OnRoundBattleStart();
	void OnTeamCompositionChanged();
	void OnTeamCompositionStart();
	void OnTransitionStart();
	void ResetTeamComposition();
	void Shutdown();
	void UnbindEvents();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TeamStatisticsController">();
	}
	static class UTeamStatisticsController* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTeamStatisticsController>();
	}
};

// Class Marvel.TeamVisualEffectLibrary
// 0x0000 (0x0030 - 0x0030)
class UTeamVisualEffectLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float GetEnemyParam(const struct FTeamVisual& TeamVisual);
	static struct FTeamVisual GetTeamVisual(const class UObject* WCO, int32 UID, class AMarvelBaseCharacter* MarvelCharacter);
	static class UNiagaraComponent* SendAttachedCombineFXDataToNiagara(class USceneComponent* AttachedParent, class UFXSystemAsset* Template, class FName SocketName, struct FCombineTriggerFXInstanceData* InInstanceData, const struct FTeamVisual& TeamVisual);
	static class UNiagaraComponent* SendWorldCombineFXDataToNiagara(class AActor* AttachedParent, class UFXSystemAsset* Template, struct FCombineTriggerFXInstanceData* InInstanceData, const struct FTeamVisual& TeamVisual);
	static void SetDecalTeamVisualEffectWithUID(class UDecalComponent* InDecalComponent, int32 UID);
	static void SetMaterialTeamVisualEffectWithUID(class UMaterialInstanceDynamic* InMaterialInstanceDynamic, int32 UID);
	static void SetMeshTeamVisualEffect(class UMeshComponent* InMeshComponent, int32 UID);
	static void SetNiagaraTeamEffectWithUID(class UNiagaraComponent* InNiagaraComponent, int32 UID);
	static void SetNiagaraTeamVisualEffect(class UNiagaraComponent* InNiagaraComponent, const struct FTeamVisual& TeamVisual);
	static class UNiagaraComponent* SpawnNiagaraAtLocation(struct FNiagaraSystemSpawnParameters* InOutSpawnParams, const struct FTeamVisual& TeamVisual);
	static class UNiagaraComponent* SpawnNiagaraAttached(struct FNiagaraSystemSpawnParameters* InOutSpawnParams, const struct FTeamVisual& TeamVisual);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TeamVisualEffectLibrary">();
	}
	static class UTeamVisualEffectLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTeamVisualEffectLibrary>();
	}
};

// Class Marvel.TestStakeAbilityHitListener
// 0x0000 (0x00F0 - 0x00F0)
class UTestStakeAbilityHitListener final : public UActorComponent
{
public:
	void OnOwnerAbilityHit(class UGameplayAbility* InAbility, const struct FMarvelAbilityHitParams& HitParams, const TArray<struct FHitResult>& InHitResults);
	void OnOwnerApplyDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierParameter& InModifierParameter);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TestStakeAbilityHitListener">();
	}
	static class UTestStakeAbilityHitListener* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTestStakeAbilityHitListener>();
	}
};

// Class Marvel.TestStakeLineBatchComponent
// 0x0060 (0x08E0 - 0x0880)
class UTestStakeLineBatchComponent final : public ULineBatchComponent
{
public:
	uint8                                         Pad_880[0x60];                                     // 0x0880(0x0060)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TestStakeLineBatchComponent">();
	}
	static class UTestStakeLineBatchComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTestStakeLineBatchComponent>();
	}
};

// Class Marvel.TextureFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UTextureFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool DeleteDownScale(class UTexture* InTexture);
	static void FinishTextureCompilation(const TArray<class UTexture*>& InTextures);
	static void ResizeTextureRenderTarget2D(class UTextureRenderTarget2D* RT, int32 SizeX, int32 SizeY);
	static void UpdateTextureResource(class UTexture* InTexture);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TextureFunctionLibrary">();
	}
	static class UTextureFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTextureFunctionLibrary>();
	}
};

// Class Marvel.TexturePixelSampler
// 0x0000 (0x0030 - 0x0030)
class UTexturePixelSampler final : public UBlueprintFunctionLibrary
{
public:
	static class UBilinerSampleResult* SampleTextureBiliner(class UTexture2D* InTexture);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TexturePixelSampler">();
	}
	static class UTexturePixelSampler* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTexturePixelSampler>();
	}
};

// Class Marvel.ThreatValueAdmin
// 0x0328 (0x07B8 - 0x0490)
class AThreatValueAdmin : public AActor
{
public:
	TMap<int32, float>                            HeroThreat;                                        // 0x0490(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TMap<int32, struct FSculptThreatInfo>         SculptThreats;                                     // 0x04E0(0x0050)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UCurveVector*                           DistanceThreatCurve;                               // 0x0530(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ViewThreat;                                        // 0x0538(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimingThreat;                                      // 0x053C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireThreat;                                        // 0x0540(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageThreat;                                      // 0x0544(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuffThreat;                                        // 0x0548(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UltimateThreat;                                    // 0x054C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AllyWeight;                                        // 0x0550(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         EnemyWeight;                                       // 0x0554(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimingThreatAngleMin;                              // 0x0558(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AimingThreatAngleMax;                              // 0x055C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireThreatDistanceThreshold;                       // 0x0560(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         FireThreatFadeoutTime;                             // 0x0564(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DamageThreatFadeoutTime;                           // 0x0568(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         BuffThreatFadeoutTime;                             // 0x056C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           TraceTargetBones;                                  // 0x0570(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<EObjectTypeQuery>                      TraceBlockTypes;                                   // 0x0580(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	EDrawDebugTrace                               VisibleDebugType;                                  // 0x0590(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_591[0x3];                                      // 0x0591(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         ThreatTopNum;                                      // 0x0594(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThreatHighNum;                                     // 0x0598(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThreatMiddleNum;                                   // 0x059C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  ValidBuffTags;                                     // 0x05A0(0x0068)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	float                                         LockLocalThreat;                                   // 0x0608(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ThreatRtpcInterpMs;                                // 0x060C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DistanceThreatDistanceMax;                         // 0x0610(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_614[0x3C];                                     // 0x0614(0x003C)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<TWeakObjectPtr<class AMarvelBaseCharacter>, struct FHeroThreatInfo> PlayerThreatInfos;                                 // 0x0650(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	TMap<TWeakObjectPtr<class AMarvelBaseCharacter>, struct FCharacterAkComponentSet> PlayerAkComponents;                                // 0x06A0(0x0050)(Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AMarvelBaseCharacter>    ViewingCharacter;                                  // 0x06F0(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelAudioData*                       AudioConfig;                                       // 0x06F8(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UAudioWorldSubSystem*                   WorldSystem;                                       // 0x0700(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelGameInstance*                    MarvelGI;                                          // 0x0708(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_710[0x58];                                     // 0x0710(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class AMarvelBaseCharacter>> HighThreatEnemies;                                 // 0x0768(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class AMarvelBaseCharacter>> CurrentChars;                                      // 0x0778(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class AMarvelBaseCharacter>> NewChars;                                          // 0x0788(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class AMarvelBaseCharacter>> ExitChars;                                         // 0x0798(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<TWeakObjectPtr<class UAkComponent>>    UnRootedAkComponents;                              // 0x07A8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	void ApplyGameplayEffect(class AMarvelBaseCharacter* Source, class AMarvelBaseCharacter* Target);
	TArray<struct FHeroThreatInfo> GetPlayerThreatInfo();
	float GetThreatValue(class AMarvelBaseCharacter* InActor);
	float GetViewThreatValue(class AMarvelBaseCharacter* InActor);
	bool IsThreatEnable();
	void LockCharacterThreatValue(class AMarvelBaseCharacter* Character, float InThreatValue);
	void OnApplyDamage(class AActor* InSourceAvatar, class AActor* InTargetAvatar, const struct FAttributeModifierHandle& ModifierParameterHandle);
	void OnGameplayEffectApply(const struct FActiveGameplayEffectHandle& EffectHandleconst, const struct FGameplayEffectSpecStackHandle& EffectSpecHandle);
	void RegisterAkComponent(class AMarvelBaseCharacter* Character, class UAkComponent* AkComponent);
	void SetThreatEnable(bool bNewEnable);
	void SetThreatPause(bool bNewPause);
	void UnlockAllThreatValue();
	void UnlockCharacterThreatValue(class AMarvelBaseCharacter* Character);
	void UnregisterAkComponent(class AMarvelBaseCharacter* Character, class UAkComponent* AkComponent);

	bool IsThreatPaused() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ThreatValueAdmin">();
	}
	static class AThreatValueAdmin* GetDefaultObj()
	{
		return GetDefaultObjImpl<AThreatValueAdmin>();
	}
};

// Class Marvel.TrainComputer
// 0x0058 (0x04E8 - 0x0490)
class ATrainComputer : public AMarvelLevelActorBase
{
public:
	struct FTeleportPostProcessParam              TeleportPostProcessParam;                          // 0x0490(0x0020)(Edit, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B0[0x38];                                     // 0x04B0(0x0038)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EnableTeleportPostProcess();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TrainComputer">();
	}
	static class ATrainComputer* GetDefaultObj()
	{
		return GetDefaultObjImpl<ATrainComputer>();
	}
};

// Class Marvel.TriggerHapticFeedbackComponent
// 0x0040 (0x0130 - 0x00F0)
class UTriggerHapticFeedbackComponent final : public UActorComponent
{
public:
	class UInputMappingContext*                   InputMappingContext;                               // 0x00F0(0x0008)(Edit, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UTriggerHapticFeedbackEffect_Base*> CurrentRightHapticFeedbackEffects;                 // 0x00F8(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class UTriggerHapticFeedbackEffect_Base*> CurrentLeftHapticFeedbackEffects;                  // 0x0108(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	bool                                          bShouldPlayHapticFeedBackEffect;                   // 0x0118(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_119[0x7];                                      // 0x0119(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UTriggerHapticFeedbackEffect_Base*      RightHapticFeedbackEffect;                         // 0x0120(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTriggerHapticFeedbackEffect_Base*      LeftHapticFeedbackEffect;                          // 0x0128(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool AddTriggerEffect(class UTriggerHapticFeedbackEffect_Base* TriggerEffect, bool bIsRightMask);
	void EndTriggerEffect(class UTriggerHapticFeedbackEffect_Base* TriggerEffect);
	bool GetShouldApplyEffect();
	void OnTriggerValueChanged(float NewValue);
	void UpdateCurrentFeedbackEffect();
	void UpdateShouldPlayEffect(bool bNewState);
	void UpdateShouldTick();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TriggerHapticFeedbackComponent">();
	}
	static class UTriggerHapticFeedbackComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTriggerHapticFeedbackComponent>();
	}
};

// Class Marvel.TriggerHapticFeedbackEffect_MultiVibration
// 0x0018 (0x00F8 - 0x00E0)
class UTriggerHapticFeedbackEffect_MultiVibration final : public UTriggerHapticFeedbackEffect_Base
{
public:
	uint8                                         VibrationFrequency;                                // 0x00E0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E1[0x7];                                       // 0x00E1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<uint8>                                 Amplitudes;                                        // 0x00E8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TriggerHapticFeedbackEffect_MultiVibration">();
	}
	static class UTriggerHapticFeedbackEffect_MultiVibration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTriggerHapticFeedbackEffect_MultiVibration>();
	}
};

// Class Marvel.UIController_AeroAbilityActionTip
// 0x0008 (0x0038 - 0x0030)
class UUIController_AeroAbilityActionTip final : public UObject
{
public:
	class UMarvelGameplayAbility*                 Ability;                                           // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void Construct();
	void Destruct();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIController_AeroAbilityActionTip">();
	}
	static class UUIController_AeroAbilityActionTip* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIController_AeroAbilityActionTip>();
	}
};

// Class Marvel.UIController_BattleHUD_AbilityDuration
// 0x0010 (0x01E0 - 0x01D0)
class UUIController_BattleHUD_AbilityDuration final : public UUIController_BattleHUD_Duration
{
public:
	class UMarvelGameplayAbility*                 Ability;                                           // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   Character;                                         // 0x01D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnAbilityDurationTimerChanged();
	void OnTagUpdate(const struct FGameplayTag& InTag, bool bExists);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIController_BattleHUD_AbilityDuration">();
	}
	static class UUIController_BattleHUD_AbilityDuration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIController_BattleHUD_AbilityDuration>();
	}
};

// Class Marvel.UIController_BattleHUD_AbilityTaskDuration
// 0x0060 (0x0230 - 0x01D0)
class UUIController_BattleHUD_AbilityTaskDuration final : public UUIController_BattleHUD_Duration
{
public:
	class UMarvelGameplayAbility*                 Ability;                                           // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class UWidget_AbilityDuration*> Widgets;                                           // 0x01D8(0x0050)(ExportObject, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_228[0x8];                                      // 0x0228(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateWidgetDuration(const struct FReplicateTimerSpecHandle& SpecHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIController_BattleHUD_AbilityTaskDuration">();
	}
	static class UUIController_BattleHUD_AbilityTaskDuration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIController_BattleHUD_AbilityTaskDuration>();
	}
};

// Class Marvel.BuffDurationHelper
// 0x0000 (0x0030 - 0x0030)
class UBuffDurationHelper final : public UObject
{
public:
	static void GetBuffTotalTimeAndDuration(class UAbilitySystemComponent* Source, class UAbilitySystemComponent* Target, int32 BuffID, float* OutTotalTime, float* OutDuration);
	static struct FBuffDurationSubscribeHandle SubscribeBuffDuration(class UAbilitySystemComponent* Source, class UAbilitySystemComponent* Target, int32 BuffID, TDelegate<void()> Callback);
	static void UnsubscribeBuffDuration(struct FBuffDurationSubscribeHandle& Handle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BuffDurationHelper">();
	}
	static class UBuffDurationHelper* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBuffDurationHelper>();
	}
};

// Class Marvel.UIController_CharacterAbilities
// 0x0010 (0x0040 - 0x0030)
class UUIController_CharacterAbilities : public UObject
{
public:
	class AMarvelBaseCharacter*                   Character;                                         // 0x0030(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget_AbilityStatusPanel*             AbilityStatusPanel;                                // 0x0038(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void Construct();
	void Destruct();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIController_CharacterAbilities">();
	}
	static class UUIController_CharacterAbilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIController_CharacterAbilities>();
	}
};

// Class Marvel.UIController_SummonUpHpBar
// 0x0130 (0x0160 - 0x0030)
class UUIController_SummonUpHpBar final : public UObject
{
public:
	class UWidget_AbilityDuration*                Widget_SummonUpHpBar;                              // 0x0030(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelCueNotify_Summoned*              OwnerCue;                                          // 0x0038(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bExternalVisible;                                  // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           TimerHandle_CreateWidget;                          // 0x0048(0x0018)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FTimerHandle                           LoopTimerHandle;                                   // 0x0060(0x0018)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FWidgetConfig_SummonUpHpBar            WidgetConfig;                                      // 0x0078(0x00D8)(Protected, NativeAccessSpecifierProtected)
	struct FDeclarationHolder                     ViewingCharacterBinding;                           // 0x0150(0x0010)(Transient, Protected, NativeAccessSpecifierProtected)

public:
	void OnCueActiveChanged();
	void OnViewingCharacterChanged(class AActor* ViewingTarget);
	void SetVisible(bool bInExternalVisible);
	void UpdateWidgetParams();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIController_SummonUpHpBar">();
	}
	static class UUIController_SummonUpHpBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIController_SummonUpHpBar>();
	}
};

// Class Marvel.UIC_Reload
// 0x0000 (0x0030 - 0x0030)
class UUIC_Reload final : public UObject
{
public:
	void AddAbility(class UMarvelGameplayAbility* InAbility);
	void Construct();
	void Destruct();
	void SetTargetCharacter(class AMarvelBaseCharacter* InTargetCharacter);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIC_Reload">();
	}
	static class UUIC_Reload* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIC_Reload>();
	}
};

// Class Marvel.UIDataFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UUIDataFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool GetDefaultUIHeroAbility(int32 HeroID, struct FUIHeroAbilityRow* OutUIHeroAbility);
	static bool GetUIHeroAbility(int32 HeroID, int32 ShapeID, struct FUIHeroAbilityRow* OutUIHeroAbility);
	static bool TryGetUIHeroAbility(int32 HeroID, int32 ShapeID, struct FUIHeroAbilityRow* OutUIHeroAbility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIDataFunctionLibrary">();
	}
	static class UUIDataFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIDataFunctionLibrary>();
	}
};

// Class Marvel.UIFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UUIFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddWidgetToCanvas(class UCanvasPanel* CanvasPanel, class UWidget* Widget, ECanvasChildStyle Style);
	static struct FLinearColor BilinearFilterSampler(const struct FTextureColorArray& ColorArray, const struct FVector2D& UV);
	static ESlateVisibility BoolToVisibility(bool bVisible);
	static float CalcScreenSpreadPixel(class UObject* WCO, float Distance, float Radius);
	static float CalculateCustomPerspectiveScale(const float Depth, const struct FCustomPerspectiveData& PerspectiveData);
	static float CalculateCustomPerspectiveScaleFromCamera(class UObject* WCO, const struct FVector& InLocation, const struct FCustomPerspectiveData& Data);
	static float CalculateWidgetPerspectiveScale(class UObject* WCO, const struct FVector& Location, const struct FWidgetPerspectiveParam& Param, EWidgetSpace WidgetSpace);
	static void CenterMouseInViewport(class UObject* WCO);
	static class FString ChangeFolderPathDialog(const class FString& DialogTitle, const class FString& DefaultPath);
	static void ClampPointWithinArea(const struct FVector2D& InPoint, const struct FWidgetValidArea& ValidSpace, struct FVector2D* OutPoint, bool* bWithinArea);
	static void ClearScreenshotTexture();
	static struct FVector ClientGetCameraLocation(class UObject* WCO, int32 PlayerIndex);
	static float ClientGetDepthToCamera(class UObject* WCO, const struct FVector& Location);
	static struct FMatrix ClientGetViewProjectionMatrix(class UObject* WCO);
	static void ClientLockViewTarget(class UObject* WCO, bool bLockViewTarget);
	static void ConstrainPoint_Circle(const struct FVector2D& InPosition, const struct FVector2D& CircleCenter, float CircleRadius, struct FVector2D* OutPosition, bool* bWithinArea);
	static void ConstrainPoint_Rectangle(const struct FVector2D& InPoisition, const struct FMargin& InRect, struct FVector2D* OutPosition, bool* bWithinArea);
	static struct FVector2D Conv_ProjectionToWidgetSpace(class UObject* WCO, const struct FVector2D& ProjectionPosition);
	static void ConvConstrain_RectangleToCircle(const struct FVector2D& position, const struct FMargin& Rect, struct FVector2D* OutPosition, bool* bOutWithinCircle);
	static float CounterProjectionDivision(class UObject* WCO, const struct FVector& InLocation);
	static float CustomPerspective(class UObject* WCO, const struct FVector& InLocation, const struct FCustomPerspectiveData& PerspectiveData);
	static struct FVector CustomProjectWorldToView(const struct FVector& Location, const struct FTransform& ViewTransform, float Horizontal_FOV_Degree, float AspectRatio);
	static class FString DateTimeToString(const struct FDateTime& DateTime);
	static void FillRenderTargetWithUserMorseCode(const class FString& MorseCode, const class FString& RenderTargetPath);
	static void FlashTaskbarkIcon(class APlayerController* PC);
	static struct FKey GetActionFirstKey(class FName ActionName, const class UObject* WCO);
	static struct FKey GetActionFirstKeyByCustomInputType(Marvel::EInputType InputType, class FName ActionName, const class UObject* WCO);
	static struct FKey GetActionFirstKeyByInputAction(const class UObject* WCO, class UInputAction* InUInputAction, Marvel::EInputType InInputType);
	static struct FKey GetActionFirstKeyByUIActionData(class UCommonKeyWidget* InKeyWidget, const struct FUIActionData& InUIActionData, Marvel::EInputType InInputType);
	static struct FKey GetActionFirstKeyByUIInputType(class FName ActionName, const class UObject* WCO);
	static struct FVector2D GetAllotedLocation(struct FPaintContext& InContext);
	static struct FVector2D GetAllotedSize(struct FPaintContext& InContext);
	static float GetAnimationLeftTime(class UUserWidget* InUserWidget, class UWidgetAnimation* InAnimation);
	static float GetAppUnfocusedVolume();
	static EBeHitUIType GetBeHitUIType(int32 AbilityID);
	static EBuildConfig GetBuildConfig();
	static struct FVector GetCharacterWidgetComponentOffset(class AActor* InActor);
	static class FString GetCultureNameForTime();
	static class FString GetCurrentBranchName();
	static class UWidget* GetCurrentCursorWidget(class UObject* WCO);
	static class FString GetCurrentRevision();
	static class FString GetCustomTimeString(const int64 Timestamp, const class FString& Format);
	static int64 GetDateTableTim(const struct FDateTime& DateTime);
	static class UWidget* GetDefaultFocusWidget(class UUserWidget* InUserWidget);
	static class UTexture2D* GetDefaultTexture();
	static class FString GetDefaultTimeString(const int64 Timestamp);
	static float GetDepthToTransform(const struct FVector& Location, const struct FTransform& Transform);
	static struct FUIAbilityInfo GetFinalUIAbilityInfo(const struct FUIAbilityInfo& OriginAbilityInfo);
	static struct FKey GetFirstKeyOfInputBind(EAbilityInputBinds InInputBind, const class UObject* WCO);
	static struct FKey GetFirstKeyOfInputBindByCustomInputType(Marvel::EInputType InputType, EAbilityInputBinds InInputBind, const class UObject* WCO);
	static struct FKey GetFirstKeyOfInputBindByUIInputType(EAbilityInputBinds InInputBind, const class UObject* WCO);
	static class FText GetFormattedText(const class FText& FormatText, const TArray<class FString>& FormatKeys, const TArray<class FText>& FormatValues);
	static float GetInputAxisScale(class FName AxisName);
	static float GetLocalCharacterFOVDegrees(class UObject* WCO);
	static struct FVector2f GetLocalLocation(struct FPaintContext& InContext);
	static int32 GetLocalTimeZoneOffset(const int64 Timestamp);
	static class AMarvelHUD* GetMainWorldMarvelHUD(class UObject* WCO);
	static class AMarvelHUD* GetMarvelHUD(class UObject* WCO);
	static struct FVector2D GetOriginViewportPixelSize(class UObject* WCO);
	static class UUserWidget* GetParentUserWidget(const class UWidget* InWidget);
	static float GetPolarAngleToScreenCenter(class UObject* WCO, const struct FVector2D& WidgetSpaceLocation);
	static class UTexture2D* GetScreenshotTexture();
	static class UTexture2D* GetScreenshotToTexture();
	static class FString GetShortOnlyDateString(const int64 Timestamp);
	static class FString GetShortOnlyTimeString(const int64 Timestamp);
	static class FString GetShortTimeString(const int64 Timestamp);
	static struct FVector2D GetWidgetCenterPosition(class UObject* WC0);
	static struct FVector2D GetWidgetLocationPosition(class UObject* WCO);
	static struct FVector2D Intersection_RayAndCircle(float PolarAngleRadians, const struct FVector2D& CircleCenter, float CircleRadius);
	static struct FVector2D Intersection_RayAndEllipse(float PolarAngleRadians, float A, float B, float C);
	static struct FVector2D Intersection_RayAndRectangle(float PolarAngleRadians, const struct FMargin& Rectangle);
	static bool IsComponentInVision(const class USceneComponent* Comp, const struct FVector& CompSize, int32 Limit);
	static bool IsDLSSPluginEnabled();
	static bool IsPointInVision(const class UObject* WorldContextObject, const struct FVector& Point);
	static class UUserWidget* MarvelCreateWidget(class UObject* WorldContextObject, TSubclassOf<class UUserWidget> WidgetType, class FName WidgetName);
	static class UUserWidget* MarvelCreateWidgetByGameInstance(class UObject* WorldContextObject, TSubclassOf<class UUserWidget> WidgetType, class FName WidgetName);
	static class UObject* MarvelGetDefaultObject(class UClass* MarvelClass);
	static void MarvelRemoveFromParent(class UWidget* InWidget);
	static void MarvelSetVisible(class UWidget* InWidget, bool bInVisible);
	static void MarvelSetVisibleImmediately(class UWidget* InWidget, bool bInVisible);
	static struct FVector2D MeasureTextSizeByFont(const class FText& InputText, const struct FSlateFontInfo& InFontInfo);
	static float MoveAngleToward(float Current, float Target, float Speed, float MaxDiff);
	static void NeedInputModeUI(class UObject* WCO);
	static int32 NumPrecompilesRemaining();
	static void OffScreenProjection(class UObject* WCO, const struct FVector& InTargetLocation, struct FVector2D* OutProjectionSpacePos, bool* bIsOnScreen);
	static void OutputTimeStringByCultureName(const class FString& Culture);
	static bool ProjectWorldLocationToWidgetPosition(class APlayerController* Player, const struct FVector& WorldLocation, struct FVector2D* WidgetPosition);
	static void RegisterInputPreProcess(const struct FKey& Key, const TDelegate<void()>& OnInputPreProcess);
	static void RequestScreenshotToTexture(bool bShowUI);
	static void ResumeBatching();
	static void RetriveColorFromTexture(class UTexture2D* InTexture, struct FTextureColorArray* OutColorArray);
	static void SetAppUnfocusedVolume(float InVolume);
	static void SetBatchMode(int32 Mode);
	static void SetBlockStickMoveCursor(bool bEnable);
	static void SetBlockStickScrollList(bool bEnable);
	static void SetBlockStickSwitchState(bool bEnable);
	static void SetCursorToPosition(const struct FVector2D& InPosition);
	static void SetCursorToStepSliderThumb(class USlider* InSlider, float MaxValue, float MinValue, float CurValue);
	static void SetCursorToWidgetCenter(class UWidget* InWidget);
	static void SetCursorType(EMouseCursor InCursorType);
	static bool SetWidgetLocation(class UWidget* InWidget, const struct FVector2D& InWidgetPosition);
	static void SetWorldRendering(bool bRendering);
	static void ShowWindowTopmost(class APlayerController* PC);
	static void SimulateKeyEvent(class UObject* WCO, const struct FKey& InKey, EInputEvent InEvent);
	static void StopNeedInputModeUI(class UObject* WCO);
	static bool TextHasInvalidGlyph(const class FString& InText, const struct FSlateFontInfo& InFontInfo);
	static void TryInvalidateAllWidgets();
	static class FString TryTransformForRichText(const class FString& RichText, bool bIsToTitle);
	static void UnRegisterInputPreProcess(const struct FKey& Key, const TDelegate<void()>& OnInputPreProcess);
	static int32 UpperTruncate(float Num);
	static struct FVector2D ViewspaceToScreenSpace(const struct FVector2D& ViewSpaceLocation);
	static class UTextureRenderTarget2D* WidgetToTexture(const class UUserWidget* Widget, const struct FVector2D& DrawSize, bool bIsLinearSpace, float TargetGamma);

	void ChangeUIInputType(Marvel::EInputType InputType, class UObject* WCO);
	bool CreateMessageDialog(const class FText& msg);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIFunctionLibrary">();
	}
	static class UUIFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIFunctionLibrary>();
	}
};

// Class Marvel.UIGameFunctionLibraray
// 0x0008 (0x0038 - 0x0030)
class UUIGameFunctionLibraray : public UObject
{
public:
	class UWidget_ReticleContainer*               ReticleContainer;                                  // 0x0030(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UUIGameFunctionLibraray* Get(class UObject* WCO);
	static class UWidget_ReticleContainer* GetReticleContainer(class UObject* WCO);

	void AddHitIndicator(const class UMarvelCueNotify_HitImpact* MyCue, class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	class UUserWidget* GetAbilityStatusPanel();
	void PlayShakeAnim(EMarvelAbilityUIHudAnim anim_style);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIGameFunctionLibraray">();
	}
	static class UUIGameFunctionLibraray* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIGameFunctionLibraray>();
	}
};

// Class Marvel.UIInputHandler
// 0x0000 (0x0030 - 0x0030)
class IUIInputHandler final : public IInterface
{
public:
	void ActionChatTextPressed();
	void ActionExitPressed();
	void ActionScorePressed();
	void ActionScoreReleased();
	void ActionSelectHeroPressed();
	void ActionSelectServerPressed();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIInputHandler">();
	}
	static class IUIInputHandler* GetDefaultObj()
	{
		return GetDefaultObjImpl<IUIInputHandler>();
	}
};

// Class Marvel.UIManagerWidget
// 0x0000 (0x03B8 - 0x03B8)
class UUIManagerWidget : public UUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIManagerWidget">();
	}
	static class UUIManagerWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIManagerWidget>();
	}
};

// Class Marvel.UIStackManager
// 0x0030 (0x0060 - 0x0030)
class UUIStackManager final : public UObject
{
public:
	TArray<TWeakObjectPtr<class UWidget>>         UIStackFromStackPanel;                             // 0x0030(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TWeakObjectPtr<class UWidget>>         UIStackFromAllPanel;                               // 0x0040(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TMulticastInlineDelegate<void()>              OnTopWidgetChangeFromAllUIStackNotify;             // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UUIStackManager* Get(class UObject* WCO);

	void AddOnTopWidget(class UWidget* InWidget);
	bool GetIsInAllPanelList(class UWidget* InWidget);
	bool GetIsTopPanelFromAllPanelList(class UWidget* InWidget);
	class UWidget* GetTopWidgetFromAllPanelList();
	class UWidget* GetTopWidgetFromStackPanelList();
	void RemoveOnTopWidge(class UWidget* InWidget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIStackManager">();
	}
	static class UUIStackManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIStackManager>();
	}
};

// Class Marvel.VersionFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UVersionFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool IsOverseasVersion();
	static void SetIsOverseasVersion(bool bIsOversea);
	static bool UseOverseasEffect();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VersionFunctionLibrary">();
	}
	static class UVersionFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UVersionFunctionLibrary>();
	}
};

// Class Marvel.ViewingWorldManager
// 0x0000 (0x0038 - 0x0038)
class UViewingWorldManager final : public UWorldSubsystem
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ViewingWorldManager">();
	}
	static class UViewingWorldManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UViewingWorldManager>();
	}
};

// Class Marvel.VirtualActorManager
// 0x0048 (0x04F8 - 0x04B0)
class AVirtualActorManager : public AMarvelActorBase
{
public:
	TSubclassOf<class AMarvelVirtualSceneActor>   MarvelVirtualSceneActorClass;                      // 0x04B0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class AMarvelVirtualCarActor>     MarvelVirtualCarActorClass;                        // 0x04B8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelVirtualSceneActor*               VirtualSceneActor;                                 // 0x04C0(0x0008)(BlueprintVisible, Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class AMarvelVirtualCarActor*                 VirtualCarActor;                                   // 0x04C8(0x0008)(BlueprintVisible, Net, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            ForceKillEffectClass;                              // 0x04D0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            DamageEffectClass;                                 // 0x04D8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffect>            RegonAllCostEffectClass;                           // 0x04E0(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           CrashedWhiteList;                                  // 0x04E8(0x0010)(BlueprintVisible, Net, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"VirtualActorManager">();
	}
	static class AVirtualActorManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<AVirtualActorManager>();
	}
};

// Class Marvel.WallRunningAbilityConfig
// 0x0080 (0x0118 - 0x0098)
class UWallRunningAbilityConfig : public UMarvelAbilityConfig
{
public:
	int32                                         PassiveAbilityID;                                  // 0x0098(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedPlayTimeline;                                  // 0x009C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9D[0x3];                                       // 0x009D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxWallRunningDuration;                            // 0x00A0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         WallRunningBuffId;                                 // 0x00A4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NeedJumpWhenReleaseWallRunKey;                     // 0x00A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GetOffWallImmediatelyWhenReleaseWallRunKey;        // 0x00A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStateChangedTaskParam                 ActiveUserSetting;                                 // 0x00AC(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          bNeedSprintOnWall;                                 // 0x00D4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FStateChangedTaskParam                 SprintUserSetting;                                 // 0x00D8(0x0028)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)
	int32                                         SprintBuffId;                                      // 0x0100(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TagToBlockOtherAbility;                            // 0x0104(0x000C)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinCameraAngleCanActivateAbilityWhenIdle;          // 0x0110(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_114[0x4];                                      // 0x0114(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WallRunningAbilityConfig">();
	}
	static class UWallRunningAbilityConfig* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWallRunningAbilityConfig>();
	}
};

// Class Marvel.WallRunningPassiveAbility
// 0x0018 (0x2598 - 0x2580)
class UWallRunningPassiveAbility : public UMarvelGameplayAbility
{
public:
	class UWallRunningPassiveAbilityConfig*       Config_WallRunPassive;                             // 0x2580(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelBaseCharacter*                   OwnerCharacter;                                    // 0x2588(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bBlueprintTickEnable;                              // 0x2590(0x0001)(BlueprintVisible, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2591[0x7];                                     // 0x2591(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	bool K2_CanGetOnWall();
	void K2_OnTick(float DeltaTime);
	void OnWallRunKeyPress(float TimeWaited);
	void OnWallRunKeyRelease(float TimeWaited);
	void ResetDefault();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WallRunningPassiveAbility">();
	}
	static class UWallRunningPassiveAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWallRunningPassiveAbility>();
	}
};

// Class Marvel.WaterPlane
// 0x0000 (0x0490 - 0x0490)
class AWaterPlane final : public AActor
{
public:
	void OnWaterPlaneHit(class UGameplayAbility* SourceAbility, const struct FHitResult& InHitResult, const struct FVector& HitDirection);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WaterPlane">();
	}
	static class AWaterPlane* GetDefaultObj()
	{
		return GetDefaultObjImpl<AWaterPlane>();
	}
};

// Class Marvel.WeaponFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UWeaponFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool AdjustWeaponMuzzleV3(class AActor* WeaponOwner, struct FWeaponAdjustedMuzzle& InOutMuzzleData, struct FMarvelAbilityTargetFilter& TargetTraceFilter, bool bDebugDraw);
	static bool AimForObjects(struct FHitResult* OutHitResult, class AMarvelBaseCharacter* Character, const TArray<EObjectTypeQuery>& ObjectTypes, const struct FVector& AimDirection, float MaxDistance);
	static bool CalcCamDistanceCapsule(const struct FVector& CamLoc, const struct FVector& CamDir, const struct FVector& Origin, float Radius, float HalfHeight, float* OutDistance);
	static bool CalcCamDistanceSphere(const struct FVector& CamLoc, const struct FVector& CamDir, const struct FVector& Origin, float Radius, float* OutDistance);
	static void CalcCamStartBehindHead(const class APawn* Viewer, struct FVector* OutLocation, const struct FRotator& OutRotation, bool bFrapCam);
	static struct FMarvelWeaponExternAmmoInfo ConstructWeaponExternAmmoInfo(float CurClips, float MaxClips);
	static struct FVector FindGoodAimLocationByAbilityTrace(class APawn* Viewer, const struct FVector& MuzzleLocation, struct FMarvelAbilityTargetFilter& TargetTraceFilter, float FireRange, bool bDebugDraw, const struct FAimTraceExtraInfo& ExtraInfo);
	static struct FVector FindGoodAimLocationByTrace(class AMarvelBaseCharacter* Character, const struct FVector& MuzzleLocation, float FireRange, EAimTargetType TargetType, bool bDebugDraw);
	static struct FVector FindGoodAimLocationFromHit(const struct FHitResult& AimHit, const struct FVector& CameraDirection, const struct FVector& MuzzleLocation);
	static void FindGoodAimLocationV3(class APawn* Viewer, struct FWeaponTargetingData& TargetingData, struct FMarvelAbilityTargetFilter& TargetTraceFilter, float FireRange, bool bDebugDraw, const struct FAimTraceExtraInfo& ExtraInfo);
	static struct FHitResult GetAimHitResult(class AMarvelBaseCharacter* Character, const struct FVector& StartPoint, const struct FVector& EndPoint, EAimTargetType TargetType, bool IgonrePenetarble, bool bTraceComplex);
	static void GetAimHitResultByAbilityTrace(class AActor* Source, const struct FVector& StartPoint, const struct FVector& EndPoint, struct FMarvelAbilityTargetFilter* TargetTraceFilter, struct FHitResult* OutHit, struct FLineSegments* OutSegments, EDrawDebugTrace DrawDebugType, const struct FAimTraceExtraInfo& ExtraInfo);
	static struct FVector GetAimLocation(class AMarvelBaseCharacter* Character, const struct FVector& AimDirection, float MaxDistance, EAimTargetType TargetType, bool bTraceComplex);
	static struct FVector GetAimLocationByAbilityTrace(class AMarvelBaseCharacter* Character, const struct FVector& AimDirection, struct FMarvelAbilityTargetFilter& TargetTraceFilter, float MaxDistance, const struct FAimTraceExtraInfo& ExtraInfo);
	static void GetAimStart(const class APawn* Character, struct FVector* OutPosition, struct FVector* OutDirection, bool bFrapCam, bool bUseOriginalCamera);
	static void GetAimStartAndRot(const class APawn* Viewer, struct FVector* OutLocation, struct FRotator* OutRotation, bool bFrapCam, bool bUseOriginalCamera);
	static bool GetAimStartSafe(class APawn* Viewer, struct FVector* OutPosition, struct FVector* OutDirection, const struct FMarvelAbilityTraceContext& TraceContext);
	static struct FTransform GetAimTransform(const struct FVector& StartPoint, const struct FVector& EndPoint, const struct FVector& Scale);
	static TArray<struct FHitResult> GetAllAimHitResult(class AActor* Source, const struct FVector& StartPoint, const struct FVector& EndPoint, EAimTargetType TargetType, bool IgonrePenetarble, bool bTraceComplex);
	static void GetAllAimHitResultByAbilityTrace(class AActor* Source, const struct FVector& StartPoint, const struct FVector& EndPoint, struct FMarvelAbilityTargetFilter* TargetTraceFilter, TArray<struct FHitResult>* OutHits, struct FLineSegments* OutSegments, EDrawDebugTrace DrawDebugType, const struct FAimTraceExtraInfo& ExtraInfo);
	static class USkeletalMeshComponent* GetCurrentWeaponMeshSafe(const class AMarvelBaseCharacter* Character, const bool bLogError);
	static void GetSphereTraceAimLocation(class AActor* AbilityOwner, struct FVector* Start, struct FVector* End, float TraceLength, float TraceRadius);
	static struct FMarvelWeaponExternAmmoInfo GetWeaponExternAmmoInfo(const class AActor* Actor, const class UMarvelGameplayAbility* Ability);
	static void HighlightActor_Interactive(class AActor* Actor, float Strength);
	static void HighlightComponent_Interactive(class UMeshComponent* Component, float Streagth);
	static void SetCurWeaponBlockNoticeHidden(const class AActor* InActor, bool bHidden);
	static EAimTargetType ToAimTargetType(const struct FMarvelAbilityTargetFilter& TargetFilter);
	static bool WeaponAnimation_Play(class USkeletalMeshComponent* MeshComponent, class UAnimSequenceBase* AnimToPlay, float PlayRate, float position);
	static bool WeaponAnimation_Stop(class USkeletalMeshComponent* MeshComponent, const class UAnimSequenceBase* AnimToStop);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WeaponFunctionLibrary">();
	}
	static class UWeaponFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWeaponFunctionLibrary>();
	}
};

// Class Marvel.Widget3D_Dying
// 0x0020 (0x08C0 - 0x08A0)
class UWidget3D_Dying : public UMarvel3DWidget
{
public:
	struct FVector2D                              VisibleScreenSpaceRangeForTextDying;               // 0x0898(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidget*                                Text_Dying;                                        // 0x08A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bCustomColorPreview;                               // 0x08B0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8B1[0xF];                                      // 0x08B1(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget3D_Dying">();
	}
	static class UWidget3D_Dying* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget3D_Dying>();
	}
};

// Class Marvel.Widget3D_LittleArrow
// 0x0030 (0x08D0 - 0x08A0)
class UWidget3D_LittleArrow : public UMarvel3DWidget
{
public:
	struct FLinearColor                           AllyFullHealthColor;                               // 0x0898(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           AllyNotFullHealthColor;                            // 0x08A8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FLinearColor                           EnemyColor;                                        // 0x08B8(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_8C8[0x8];                                      // 0x08C8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetArrowColor(const struct FLinearColor& Color);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget3D_LittleArrow">();
	}
	static class UWidget3D_LittleArrow* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget3D_LittleArrow>();
	}
};

// Class Marvel.Widget3D_RespawnCountdown
// 0x0030 (0x08D0 - 0x08A0)
class UWidget3D_RespawnCountdown : public UMarvel3DWidget
{
public:
	class APlayerState*                           PlayerState;                                       // 0x0898(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ProgressBarColorWhenBattle;                        // 0x08A0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ProgressBarColorWhenSpectatingAlly;                // 0x08B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ProgressBarColorWhenSpectatingEnemy;               // 0x08C0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void OnPlayerStateChanged();
	void SetCanBeResurrected(bool bCanBeResurrected);
	void SetPlayerState(class APlayerState* InPlayerState);
	void SetProgressBarColor(const struct FLinearColor& InColor);
	void UpdateProgressBarColor();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget3D_RespawnCountdown">();
	}
	static class UWidget3D_RespawnCountdown* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget3D_RespawnCountdown>();
	}
};

// Class Marvel.Widget3DStyleAsset
// 0x0000 (0x0030 - 0x0030)
class UWidget3DStyleAsset : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget3DStyleAsset">();
	}
	static class UWidget3DStyleAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget3DStyleAsset>();
	}
};

// Class Marvel.WidgetStyleAsset_3DWidget
// 0x0078 (0x00A8 - 0x0030)
class UWidgetStyleAsset_3DWidget final : public UWidget3DStyleAsset
{
public:
	struct FWidgetStyle_3DWidget                  WidgetStyle;                                       // 0x0030(0x0078)(Edit, BlueprintVisible, NoDestructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"WidgetStyleAsset_3DWidget">();
	}
	static class UWidgetStyleAsset_3DWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidgetStyleAsset_3DWidget>();
	}
};

// Class Marvel.Widget_AbilityEnergy
// 0x0040 (0x05E8 - 0x05A8)
class UWidget_AbilityEnergy : public UMarvelUserWidget
{
public:
	class UCanvasPanel*                           Canvas_Root;                                       // 0x05A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Img_ProgressBg;                                    // 0x05B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Img_ChargeIcon;                                    // 0x05B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Mat_Progress_Vx;                                   // 0x05C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UImage*                                 Mat_Progress;                                      // 0x05C8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsVisible;                                        // 0x05D0(0x0001)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSmoothPercent;                                    // 0x05D1(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D2[0x2];                                      // 0x05D2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         SmoothSpeed;                                       // 0x05D4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PercentSmoothed;                                   // 0x05D8(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Percent;                                           // 0x05DC(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInstanceDynamic*               MID_Percent;                                       // 0x05E0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void ActivateFailed();
	void SetCooling(bool bInCooling);
	void SetEnergyColor(const struct FLinearColor& InColor);
	void SetMaterialPercent(float InPercent);
	void SetPercent(float InPercent);
	void SetSegmentCur(int32 InSegmentCur);
	void SetSegmentMax(int32 InSegmentMax);
	void SetStyle(const struct FWidgetStyle_AbilityEnergy& Style);
	void SetStyle_V5(const struct FWidgetStyle_AbilityEnergy_V5& Style);
	void SetVisible(bool bInVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_AbilityEnergy">();
	}
	static class UWidget_AbilityEnergy* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_AbilityEnergy>();
	}
};

// Class Marvel.Widget_AbilityEnergy_Charge
// 0x0000 (0x05A8 - 0x05A8)
class UWidget_AbilityEnergy_Charge : public UMarvelUserWidget
{
public:
	void CustomActivate();
	void CustomDeactivate();
	void SetPercent(float InCurruentValue, float InMaxValue);
	void SetSpeed(float InMax, float InSpeed);
	void SetStyle(const struct FWidgetStyle_AbilityCharge& Style);
	void SetVisible(bool bInVisible);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_AbilityEnergy_Charge">();
	}
	static class UWidget_AbilityEnergy_Charge* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_AbilityEnergy_Charge>();
	}
};

// Class Marvel.Widget_AbilityDuration
// 0x1598 (0x1B40 - 0x05A8)
class UWidget_AbilityDuration final : public UMarvelUserWidget
{
public:
	class UTextBlock*                             Text_RemainSecond;                                 // 0x05A8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UTextBlock*                             Text_Second;                                       // 0x05B0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UImage*                                 Img_Icon;                                          // 0x05B8(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Anim_Percent;                                      // 0x05C0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FWidgetStyle_BattleHUD_Duration        DefaultStyle;                                      // 0x05C8(0x0140)(Edit, BlueprintVisible, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_708[0x1438];                                   // 0x0708(0x1438)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetDurationAndTimeRemaining(float* OutDuration, float* OutTimeRemaining);
	void SetAbilitySoftIcon(const TSoftObjectPtr<class UTexture2D>& SoftIcon);
	void SetDuration(float InDuration);
	void SetDurationAndTimeRemaining(float InDuration, float InTimeRemaining);
	void SetMaxDegree(int32 InMaxDegree);
	void SetPercent(float InPercent);
	void SetStyle(const struct FWidgetStyle_BattleHUD_Duration& InStyle);
	void SetSummonHpBarIcon(class UTexture2D* InIcon);
	void SetTimeRemaining(float InTimeRemaining);
	void SetTipText(const class FString& InText);
	void StartCountDown(bool bReset);
	void StopCountDown();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_AbilityDuration">();
	}
	static class UWidget_AbilityDuration* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_AbilityDuration>();
	}
};

// Class Marvel.UIC_AbilityStatusPanel
// 0x01A8 (0x01D8 - 0x0030)
class UUIC_AbilityStatusPanel final : public UObject
{
public:
	TMap<int32, int32>                            Slot2AID;                                          // 0x0030(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, class UUIC_Ability*>              AID2UIC;                                           // 0x0080(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, class UUIC_Ability*>              ACDID2UIC;                                         // 0x00D0(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	TMap<int32, int32>                            AID2SlotIdx;                                       // 0x0120(0x0050)(BlueprintVisible, NativeAccessSpecifierPublic)
	class AMarvelBaseCharacter*                   Character;                                         // 0x0170(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UWidget_AbilityStatusPanel*             AbilityPanel;                                      // 0x0178(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UBindingProxy_CharacterAbilities*       ProxyAbilities;                                    // 0x0180(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_188[0x38];                                     // 0x0188(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UUserWidget*>                    RightDurationWidgets;                              // 0x01C0(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UUIC_Reload*                            UIController_Reload;                               // 0x01D0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetTargetActor(class AActor* InTargetActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIC_AbilityStatusPanel">();
	}
	static class UUIC_AbilityStatusPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIC_AbilityStatusPanel>();
	}
};

// Class Marvel.UIC_SelectTarget
// 0x0128 (0x0158 - 0x0030)
class UUIC_SelectTarget : public UObject
{
public:
	int32                                         AbilityID;                                         // 0x0030(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMarvelGameplayAbility*                 Ability;                                           // 0x0038(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USelectTargetUIManager*                 Manager;                                           // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMarvelAbilityTask_SelectTarget*        SelectTask;                                        // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TickFrequence;                                     // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FUISelectTargetStyle                   Style;                                             // 0x0058(0x00F0)(NativeAccessSpecifierPublic)
	uint8                                         Pad_148[0x10];                                     // 0x0148(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Destruct();
	TArray<class AActor*> GetCurrentTargets();
	struct FVector GetLocationFromActor(class AActor* InActor);
	TArray<class AActor*> GetTargets();
	bool GetTask();
	TArray<struct FSelectTaskResult> GetTaskResults();
	TArray<class UUserWidget*> GetWidgets();
	void OnDestruct();
	void OnInit();
	void OnTargetChanged();
	void SetAbility(class UMarvelGameplayAbility* InAbility, const struct FUISelectTargetStyle& InStyle);
	bool ShouldTrace();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIC_SelectTarget">();
	}
	static class UUIC_SelectTarget* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIC_SelectTarget>();
	}
};

// Class Marvel.UIController_BattlePersistentTip
// 0x0060 (0x0090 - 0x0030)
class UUIController_BattlePersistentTip final : public UObject
{
public:
	uint8                                         Pad_30[0x48];                                      // 0x0030(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget_BattleTipsPanel*                CachedTipsPanel;                                   // 0x0078(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelCueNotify_Actor*                 CachedCue;                                         // 0x0080(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_88[0x8];                                       // 0x0088(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void UpdateTip();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UIController_BattlePersistentTip">();
	}
	static class UUIController_BattlePersistentTip* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUIController_BattlePersistentTip>();
	}
};

// Class Marvel.UISettingEntryHandler_WidgetCharacterInfo
// 0x0000 (0x0030 - 0x0030)
class UUISettingEntryHandler_WidgetCharacterInfo final : public UUISettingEntrySettingHandler
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"UISettingEntryHandler_WidgetCharacterInfo">();
	}
	static class UUISettingEntryHandler_WidgetCharacterInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<UUISettingEntryHandler_WidgetCharacterInfo>();
	}
};

// Class Marvel.PlayerInfoColorAsset
// 0x0080 (0x00B8 - 0x0038)
class UPlayerInfoColorAsset final : public UPrimaryDataAsset
{
public:
	struct FLinearColor                           ColorHpBarHealth;                                  // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorHpBarShield;                                  // 0x0048(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorHpBarAlly;                                    // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ColorHpBarEnemy;                                   // 0x0068(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HPDeductColorEnemy;                                // 0x0078(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           HPDeductColorAlly;                                 // 0x0088(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           IDColorEnemy;                                      // 0x0098(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           IDColorAlly;                                       // 0x00A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PlayerInfoColorAsset">();
	}
	static class UPlayerInfoColorAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPlayerInfoColorAsset>();
	}
};

// Class Marvel.Widget_CombatSituation
// 0x0000 (0x03B8 - 0x03B8)
class UWidget_CombatSituation final : public UUserWidget
{
public:
	static struct FCombatSituationInfo KillParameterToCombatSituation(const struct FAttributeModifierParameter& ParamInfo);
	static struct FCombatSituationInfo RebornInfoToCombatSituation(const struct FCharacterRebornParam& Param);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_CombatSituation">();
	}
	static class UWidget_CombatSituation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_CombatSituation>();
	}
};

// Class Marvel.Widget_HpBar
// 0x01F0 (0x0798 - 0x05A8)
class UWidget_HpBar : public UMarvelUserWidget
{
public:
	float                                         HpPerUnit;                                         // 0x05A8(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HpInterpDuration;                                  // 0x05AC(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HpHurtUpdateDelay;                                 // 0x05B0(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         HpHurtInterpDuration;                              // 0x05B4(0x0004)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 TargetActor;                                       // 0x05B8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FGameplayTag>                   RegisterCueTags;                                   // 0x05C0(0x0010)(BlueprintVisible, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_5D0[0x18];                                     // 0x05D0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       Anim_Hitted;                                       // 0x05E8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Anim_FirstShoot;                                   // 0x05F0(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UWidgetAnimation*                       Anim_Break;                                        // 0x05F8(0x0008)(BlueprintVisible, ZeroConstructor, Transient, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UImage*>                         ImagesShowTotalHp;                                 // 0x0600(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UImage*>                         ImagesShowMaxHp;                                   // 0x0610(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	class UMaterialInstanceDynamic*               MID_HpBar;                                         // 0x0620(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class UWidget*>                        HurtVXImages;                                      // 0x0628(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	float                                         BeheadedRatio;                                     // 0x0638(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_63C[0x4];                                      // 0x063C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget*>                        WidgetsAlignToBeheaded;                            // 0x0640(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UImage*>                         ImagesShowBeheaded;                                // 0x0650(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_660[0xB8];                                     // 0x0660(0x00B8)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidgetAnimation*                       OriginAnim_FadeOut;                                // 0x0718(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UMarvelWidgetComponent*                 ParentWidgetComponent;                             // 0x0720(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UOverlay*                               Overlay_HP;                                        // 0x0728(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_730[0x8];                                      // 0x0730(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget_HpBar_VX*                       HurtVxWidget;                                      // 0x0738(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          KeepVisibleWithEmptyHealth;                        // 0x0740(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_741[0x3];                                      // 0x0741(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxFirstHurtTime;                                  // 0x0744(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MaxHurtHPTime;                                     // 0x0748(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IsNeedHurtVX;                                      // 0x074C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UpdateHurtHPOnHittedFinished;                      // 0x074D(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_74E[0x2];                                      // 0x074E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HurtVXInterval;                                    // 0x0750(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EHpBarColorSource                             HpColorSource;                                     // 0x0754(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_755[0x13];                                     // 0x0755(0x0013)(Fixing Size After Last Property [ Dumper-7 ])
	class UPlayerInfoColorAsset*                  DefaultColor;                                      // 0x0768(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_770[0x28];                                     // 0x0770(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnComponentVisibilityChanged();
	void OnTagUpdated(const struct FGameplayTag& Tag, bool bInExist);
	void SetAllExistingTags(const TArray<struct FGameplayTag>& InTags);
	void SetBeheadedRatio(float InBeheadedRatio);
	void SetHpBlueLogic(float Current, float Max);
	void SetHpColor(const struct FLinearColor& Color);
	void SetHpColorSource(EHpBarColorSource InColorSource);
	void SetHpDeductColor(const struct FLinearColor& Color);
	void SetHpGreyLogic(float Current, float Max);
	void SetHpWhiteLogic(float Current, float Max);
	void SetIsFullHp(bool bInFullHp);
	void SetIsUnderTreatment(bool InUnderTreatment);
	void SetParentBg(bool IsCharacter, bool isReplay, bool isTeamate);
	void SetShieldColor(const struct FLinearColor& Color);
	void SetTargetActor(class AActor* InActor);
	void SetTargetTreatPercentageCur(float InPercentage);
	void SetTotalHpCur(float InTotalHpCur);
	void SetTotalHpMax(float InTotalHpMax);
	void UpdateHpHurt(float InDeltaTime, const bool bImmediately);
	void UpdateMaterialParameters();
	void UpdateSmoothedProperty(const float DeltaTime, const bool bImmediately);

	float GetBeheadedRatio() const;
	bool GetIsFullHp() const;
	bool GetIsUnderTreatment() const;
	bool IsHpBarVisible() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_HpBar">();
	}
	static class UWidget_HpBar* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_HpBar>();
	}
};

// Class Marvel.Widget_BuffIcon
// 0x0048 (0x0400 - 0x03B8)
class UWidget_BuffIcon final : public UUserWidget
{
public:
	class AMarvelBaseCharacter*                   Character;                                         // 0x03B8(0x0008)(BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FBuffIconInfo                          BuffIconInfo;                                      // 0x03C0(0x0040)(BlueprintVisible, NativeAccessSpecifierPublic)

public:
	void SetBuffIconInfo(const struct FBuffIconInfo& InBuffIconInfo);
	void SetCharacter(class AActor* InActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_BuffIcon">();
	}
	static class UWidget_BuffIcon* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_BuffIcon>();
	}
};

// Class Marvel.Widget_ScreenFXManager
// 0x0030 (0x05D8 - 0x05A8)
class UWidget_ScreenFXManager : public UMarvelUserWidget
{
public:
	class AActor*                                 TargetActor;                                       // 0x05A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FGameplayTag>                   RegisterCueTags;                                   // 0x05B0(0x0010)(BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_5C0[0x18];                                     // 0x05C0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnTagUpdated(const struct FGameplayTag& Tag, bool bInExist);
	void SetTargetActor(class AActor* InActor);
	void SetTargetTreatPercentageCur(float InPercentage);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_ScreenFXManager">();
	}
	static class UWidget_ScreenFXManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_ScreenFXManager>();
	}
};

// Class Marvel.Widget_HurtCenterUnit
// 0x0020 (0x05C8 - 0x05A8)
class UWidget_HurtCenterUnit final : public UMarvelUserWidget
{
public:
	struct FVector                                TargetPosition;                                    // 0x05A8(0x0018)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCanvasPanel*                           CanvasPanel_HitCenter;                             // 0x05C0(0x0008)(BlueprintVisible, ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_HurtCenterUnit">();
	}
	static class UWidget_HurtCenterUnit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_HurtCenterUnit>();
	}
};

// Class Marvel.Widget_HurtHintPanel
// 0x0038 (0x05E0 - 0x05A8)
class UWidget_HurtHintPanel : public UMarvelUserWidget
{
public:
	bool                                          bNewVersion;                                       // 0x05A8(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5A9[0x7];                                      // 0x05A9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UWidget_HurtCenterUnit*>         CenterWidgets;                                     // 0x05B0(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UWidget_HurtOutlineUnit*>        OutlineWidgets;                                    // 0x05C0(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UWidget_HurtCenter*>             CenterWidgetsCache;                                // 0x05D0(0x0010)(BlueprintVisible, ExportObject, ZeroConstructor, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void SetDying(bool bInDying);
	void SetTargetCharacter(class AMarvelBaseCharacter* InCharacter);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_HurtHintPanel">();
	}
	static class UWidget_HurtHintPanel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_HurtHintPanel>();
	}
};

// Class Marvel.Widget_Killcam
// 0x0000 (0x05A8 - 0x05A8)
class UWidget_Killcam final : public UMarvelUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_Killcam">();
	}
	static class UWidget_Killcam* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_Killcam>();
	}
};

// Class Marvel.Widget_Line
// 0x0010 (0x03C8 - 0x03B8)
class UWidget_Line : public UUserWidget
{
public:
	bool                                          bAntiAlias;                                        // 0x03B8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3B9[0x3];                                      // 0x03B9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Thickness;                                         // 0x03BC(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LineAngle;                                         // 0x03C0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAdjustWithDPIScale;                               // 0x03C4(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C5[0x3];                                      // 0x03C5(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_Line">();
	}
	static class UWidget_Line* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_Line>();
	}
};

// Class Marvel.Widget_ReplayPlayerItem
// 0x0000 (0x05A8 - 0x05A8)
class UWidget_ReplayPlayerItem final : public UMarvelUserWidget
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_ReplayPlayerItem">();
	}
	static class UWidget_ReplayPlayerItem* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_ReplayPlayerItem>();
	}
};

// Class Marvel.Widget_UltimateAbility
// 0x0008 (0x05B0 - 0x05A8)
class UWidget_UltimateAbility final : public UMarvelUserWidget
{
public:
	class AActor*                                 TargetActor;                                       // 0x05A8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void SetDeclarationActive(bool IsActive);
	void SetEnergyFull(bool IsFull);
	void SetEnergyPercent(float Percent);
	void SetTargetActor(class AActor* InActor);
	void SetUltimateAbilityActive(bool IsActive);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_UltimateAbility">();
	}
	static class UWidget_UltimateAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_UltimateAbility>();
	}
};

// Class Marvel.Widget_ScoreBoardUnit
// 0x0028 (0x05D0 - 0x05A8)
class UWidget_ScoreBoardUnit : public UMarvelUserWidget
{
public:
	uint8                                         Pad_5A8[0x10];                                     // 0x05A8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class AMarvelPlayerState*                     PlayerState;                                       // 0x05B8(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AMarvelBaseCharacter*                   Character;                                         // 0x05C0(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UReactivePropertyComponent*             CachedProperty;                                    // 0x05C8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void SetTargetPlayerState(class AMarvelPlayerState* InPlayerState);
	void SetUltimateEnergyPercent(float InUltimateEnergyPercent);
	void SwitchDeclaration(bool IsOn);
	void UpdateUltimateEnergyPercent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"Widget_ScoreBoardUnit">();
	}
	static class UWidget_ScoreBoardUnit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWidget_ScoreBoardUnit>();
	}
};

// Class Marvel.SummonedUIFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class USummonedUIFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FWidgetStyle_SceneIndicator CastToStyleSceneIndicator(const struct FWidgetStyle_SceneIndicator_Ability& InWidgetStyle_SceneIndicator);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SummonedUIFunctionLibrary">();
	}
	static class USummonedUIFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USummonedUIFunctionLibrary>();
	}
};

// Class Marvel.ChaosFieldActorBP
// 0x0008 (0x0498 - 0x0490)
class AChaosFieldActorBP final : public AActor
{
public:
	class UFieldSystemComponent*                  FieldSystemComponent;                              // 0x0490(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ActiveFieldBP(bool bActive);
	void ActiveFieldMulticast();
	void OnActiveDamageField();
	void OnActiveImpulseField();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChaosFieldActorBP">();
	}
	static class AChaosFieldActorBP* GetDefaultObj()
	{
		return GetDefaultObjImpl<AChaosFieldActorBP>();
	}
};

}

