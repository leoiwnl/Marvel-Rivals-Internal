#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ability_condition

#include "Basic.hpp"

#include "ability_condition_classes.hpp"
#include "ability_condition_parameters.hpp"


namespace SDK
{

// PythonFunction ability_condition.PyAIConditionBase.CouldPass
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FRequiredAIDataForAutoAbility    AIAutoAbilityContext                                   (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

bool UPyAIConditionBase::CouldPass(const struct FRequiredAIDataForAutoAbility& AIAutoAbilityContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyAIConditionBase", "CouldPass");

	Params::PyAIConditionBase_CouldPass Parms{};

	Parms.AIAutoAbilityContext = std::move(AIAutoAbilityContext);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

