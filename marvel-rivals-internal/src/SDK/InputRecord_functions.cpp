#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: InputRecord

#include "Basic.hpp"

#include "InputRecord_classes.hpp"
#include "InputRecord_parameters.hpp"


namespace SDK
{

// Function InputRecord.InputRecordComponent.Client_LoadRecord
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class FString                           RecordName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputRecordPath                        RecordPath                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordComponent::Client_LoadRecord(const class FString& RecordName, EInputRecordPath RecordPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "Client_LoadRecord");

	Params::InputRecordComponent_Client_LoadRecord Parms{};

	Parms.RecordName = std::move(RecordName);
	Parms.RecordPath = RecordPath;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.Client_LockDeltaTime
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class FString                           InDeltaTime                                            (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordComponent::Client_LockDeltaTime(const class FString& InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "Client_LockDeltaTime");

	Params::InputRecordComponent_Client_LockDeltaTime Parms{};

	Parms.InDeltaTime = std::move(InDeltaTime);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.Client_LockFPS
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class FString                           InFPS                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordComponent::Client_LockFPS(const class FString& InFPS)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "Client_LockFPS");

	Params::InputRecordComponent_Client_LockFPS Parms{};

	Parms.InFPS = std::move(InFPS);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.Client_LoopPlay
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                                    InLoopPlay                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordComponent::Client_LoopPlay(bool InLoopPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "Client_LoopPlay");

	Params::InputRecordComponent_Client_LoopPlay Parms{};

	Parms.InLoopPlay = InLoopPlay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.Client_PlayRecord
// (Net, NetReliable, Native, Event, Public, NetClient)

void UInputRecordComponent::Client_PlayRecord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "Client_PlayRecord");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.Client_SaveRecord
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// class FString                           RecordName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputRecordPath                        RecordPath                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordComponent::Client_SaveRecord(const class FString& RecordName, EInputRecordPath RecordPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "Client_SaveRecord");

	Params::InputRecordComponent_Client_SaveRecord Parms{};

	Parms.RecordName = std::move(RecordName);
	Parms.RecordPath = RecordPath;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.Client_Setting
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// struct FInputRecordSetting              Setting                                                (ConstParm, Parm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UInputRecordComponent::Client_Setting(const struct FInputRecordSetting& Setting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "Client_Setting");

	Params::InputRecordComponent_Client_Setting Parms{};

	Parms.Setting = std::move(Setting);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.Client_StartRecord
// (Net, NetReliable, Native, Event, Public, NetClient)

void UInputRecordComponent::Client_StartRecord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "Client_StartRecord");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.Client_StopPlayRecord
// (Net, NetReliable, Native, Event, Public, NetClient)

void UInputRecordComponent::Client_StopPlayRecord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "Client_StopPlayRecord");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.Client_StopRecord
// (Net, NetReliable, Native, Event, Public, NetClient)

void UInputRecordComponent::Client_StopRecord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "Client_StopRecord");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.Client_ToggleCorrection
// (Net, NetReliable, Native, Event, Public, NetClient)
// Parameters:
// bool                                    bCorrection                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordComponent::Client_ToggleCorrection(bool bCorrection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "Client_ToggleCorrection");

	Params::InputRecordComponent_Client_ToggleCorrection Parms{};

	Parms.bCorrection = bCorrection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.DiscardAILocationCorrection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bDiscard                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordComponent::DiscardAILocationCorrection(bool bDiscard)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "DiscardAILocationCorrection");

	Params::InputRecordComponent_DiscardAILocationCorrection Parms{};

	Parms.bDiscard = bDiscard;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.GetCurrentLockDeltaTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UInputRecordComponent::GetCurrentLockDeltaTime()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "GetCurrentLockDeltaTime");

	Params::InputRecordComponent_GetCurrentLockDeltaTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordComponent.HasFrameCounterData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputRecordComponent::HasFrameCounterData()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "HasFrameCounterData");

	Params::InputRecordComponent_HasFrameCounterData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordComponent.IsUseFrameCounter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputRecordComponent::IsUseFrameCounter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "IsUseFrameCounter");

	Params::InputRecordComponent_IsUseFrameCounter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordComponent.LoadRecord
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           RecordName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputRecordPath                        RecordPath                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordComponent::LoadRecord(const class FString& RecordName, EInputRecordPath RecordPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "LoadRecord");

	Params::InputRecordComponent_LoadRecord Parms{};

	Parms.RecordName = std::move(RecordName);
	Parms.RecordPath = RecordPath;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.LockDeltaTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InDeltaTime                                            (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordComponent::LockDeltaTime(const float InDeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "LockDeltaTime");

	Params::InputRecordComponent_LockDeltaTime Parms{};

	Parms.InDeltaTime = InDeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.LockDeltaTimeDependOnFPS
// (Final, Native, Public, BlueprintCallable)

void UInputRecordComponent::LockDeltaTimeDependOnFPS()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "LockDeltaTimeDependOnFPS");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.PawnPossessed
// (Final, Native, Public)
// Parameters:
// class APawn*                            OldPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APawn*                            NewPawn                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordComponent::PawnPossessed(class APawn* OldPawn, class APawn* NewPawn)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "PawnPossessed");

	Params::InputRecordComponent_PawnPossessed Parms{};

	Parms.OldPawn = OldPawn;
	Parms.NewPawn = NewPawn;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.PlayRecord
// (Final, Native, Public, BlueprintCallable)

void UInputRecordComponent::PlayRecord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "PlayRecord");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.SaveRecord
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           RecordName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EInputRecordPath                        RecordPath                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordComponent::SaveRecord(const class FString& RecordName, EInputRecordPath RecordPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "SaveRecord");

	Params::InputRecordComponent_SaveRecord Parms{};

	Parms.RecordName = std::move(RecordName);
	Parms.RecordPath = RecordPath;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.ServerSetActorTransform
// (Net, NetReliable, Native, Event, Public, NetServer, HasDefaults)
// Parameters:
// struct FTransform                       NewTransform                                           (ConstParm, Parm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordComponent::ServerSetActorTransform(const struct FTransform& NewTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "ServerSetActorTransform");

	Params::InputRecordComponent_ServerSetActorTransform Parms{};

	Parms.NewTransform = std::move(NewTransform);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.SetEnableCorrectionWhenLockDeltaTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordComponent::SetEnableCorrectionWhenLockDeltaTime(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "SetEnableCorrectionWhenLockDeltaTime");

	Params::InputRecordComponent_SetEnableCorrectionWhenLockDeltaTime Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.SetLockActorTickDeltaTimeEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bLock                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordComponent::SetLockActorTickDeltaTimeEnabled(bool bLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "SetLockActorTickDeltaTimeEnabled");

	Params::InputRecordComponent_SetLockActorTickDeltaTimeEnabled Parms{};

	Parms.bLock = bLock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.SetLockCompTickDeltaTimeEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bLock                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordComponent::SetLockCompTickDeltaTimeEnabled(bool bLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "SetLockCompTickDeltaTimeEnabled");

	Params::InputRecordComponent_SetLockCompTickDeltaTimeEnabled Parms{};

	Parms.bLock = bLock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.SetLockCoreTickerDeltaTimeEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bLock                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordComponent::SetLockCoreTickerDeltaTimeEnabled(bool bLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "SetLockCoreTickerDeltaTimeEnabled");

	Params::InputRecordComponent_SetLockCoreTickerDeltaTimeEnabled Parms{};

	Parms.bLock = bLock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.SetLockDeltaTimeEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bLock                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordComponent::SetLockDeltaTimeEnabled(bool bLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "SetLockDeltaTimeEnabled");

	Params::InputRecordComponent_SetLockDeltaTimeEnabled Parms{};

	Parms.bLock = bLock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.SetLockFPSEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bLock                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordComponent::SetLockFPSEnabled(bool bLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "SetLockFPSEnabled");

	Params::InputRecordComponent_SetLockFPSEnabled Parms{};

	Parms.bLock = bLock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.SetLockInputDeltaTimeEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bLock                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordComponent::SetLockInputDeltaTimeEnabled(bool bLock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "SetLockInputDeltaTimeEnabled");

	Params::InputRecordComponent_SetLockInputDeltaTimeEnabled Parms{};

	Parms.bLock = bLock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.SetRecordPath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EInputRecordPath                        InPathType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InNewPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordComponent::SetRecordPath(const EInputRecordPath InPathType, const class FString& InNewPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "SetRecordPath");

	Params::InputRecordComponent_SetRecordPath Parms{};

	Parms.InPathType = InPathType;
	Parms.InNewPath = std::move(InNewPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.SetRecordSetting
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInputRecordSetting              InRecordSetting                                        (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void UInputRecordComponent::SetRecordSetting(const struct FInputRecordSetting& InRecordSetting)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "SetRecordSetting");

	Params::InputRecordComponent_SetRecordSetting Parms{};

	Parms.InRecordSetting = std::move(InRecordSetting);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.StartRecord
// (Final, Native, Public, BlueprintCallable)

void UInputRecordComponent::StartRecord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "StartRecord");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.StopPlayRecord
// (Final, Native, Public, BlueprintCallable)

void UInputRecordComponent::StopPlayRecord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "StopPlayRecord");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.StopRecord
// (Final, Native, Public, BlueprintCallable)

void UInputRecordComponent::StopRecord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "StopRecord");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.ToggleCorrection
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bCorrection                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordComponent::ToggleCorrection(bool bCorrection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "ToggleCorrection");

	Params::InputRecordComponent_ToggleCorrection Parms{};

	Parms.bCorrection = bCorrection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.ToggleLoopPlay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InLoopPlay                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordComponent::ToggleLoopPlay(bool InLoopPlay)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "ToggleLoopPlay");

	Params::InputRecordComponent_ToggleLoopPlay Parms{};

	Parms.InLoopPlay = InLoopPlay;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordComponent.GetRecordFileName
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UInputRecordComponent::GetRecordFileName() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "GetRecordFileName");

	Params::InputRecordComponent_GetRecordFileName Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordComponent.GetRecordMaxTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UInputRecordComponent::GetRecordMaxTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "GetRecordMaxTime");

	Params::InputRecordComponent_GetRecordMaxTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordComponent.GetRecordPlayTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UInputRecordComponent::GetRecordPlayTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "GetRecordPlayTime");

	Params::InputRecordComponent_GetRecordPlayTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordComponent.GetRecordSetting
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// const struct FInputRecordSetting        ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

const struct FInputRecordSetting UInputRecordComponent::GetRecordSetting() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "GetRecordSetting");

	Params::InputRecordComponent_GetRecordSetting Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordComponent.IsCorrection
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputRecordComponent::IsCorrection() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "IsCorrection");

	Params::InputRecordComponent_IsCorrection Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordComponent.IsEnableCorrectionWhenLockDeltaTime
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputRecordComponent::IsEnableCorrectionWhenLockDeltaTime() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "IsEnableCorrectionWhenLockDeltaTime");

	Params::InputRecordComponent_IsEnableCorrectionWhenLockDeltaTime Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordComponent.IsInitialize
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputRecordComponent::IsInitialize() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "IsInitialize");

	Params::InputRecordComponent_IsInitialize Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordComponent.IsLoading
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputRecordComponent::IsLoading() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "IsLoading");

	Params::InputRecordComponent_IsLoading Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordComponent.IsLockActorTickDeltaTimeEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputRecordComponent::IsLockActorTickDeltaTimeEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "IsLockActorTickDeltaTimeEnabled");

	Params::InputRecordComponent_IsLockActorTickDeltaTimeEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordComponent.IsLockCompTickDeltaTimeEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputRecordComponent::IsLockCompTickDeltaTimeEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "IsLockCompTickDeltaTimeEnabled");

	Params::InputRecordComponent_IsLockCompTickDeltaTimeEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordComponent.IsLockCoreTickerDeltaTimeEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputRecordComponent::IsLockCoreTickerDeltaTimeEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "IsLockCoreTickerDeltaTimeEnabled");

	Params::InputRecordComponent_IsLockCoreTickerDeltaTimeEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordComponent.IsLockDeltaTimeEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputRecordComponent::IsLockDeltaTimeEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "IsLockDeltaTimeEnabled");

	Params::InputRecordComponent_IsLockDeltaTimeEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordComponent.IsLockFPSEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputRecordComponent::IsLockFPSEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "IsLockFPSEnabled");

	Params::InputRecordComponent_IsLockFPSEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordComponent.IsLockInputDeltaTimeEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputRecordComponent::IsLockInputDeltaTimeEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "IsLockInputDeltaTimeEnabled");

	Params::InputRecordComponent_IsLockInputDeltaTimeEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordComponent.IsPlaying
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputRecordComponent::IsPlaying() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "IsPlaying");

	Params::InputRecordComponent_IsPlaying Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordComponent.IsRecording
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UInputRecordComponent::IsRecording() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordComponent", "IsRecording");

	Params::InputRecordComponent_IsRecording Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordLibrary.GetPlayerControllers
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWorld*                           WC                                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class AMarvelPlayerController*>  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class AMarvelPlayerController*> UInputRecordLibrary::GetPlayerControllers(class UWorld* WC)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputRecordLibrary", "GetPlayerControllers");

	Params::InputRecordLibrary_GetPlayerControllers Parms{};

	Parms.WC = WC;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordLibrary.NewRecordComponent
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class AActor*                           Owner                                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputRecordComponent*            ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInputRecordComponent* UInputRecordLibrary::NewRecordComponent(class AActor* Owner)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputRecordLibrary", "NewRecordComponent");

	Params::InputRecordLibrary_NewRecordComponent Parms{};

	Parms.Owner = Owner;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordSubsystem.Get
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UInputRecordSubsystem*            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UInputRecordSubsystem* UInputRecordSubsystem::Get()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("InputRecordSubsystem", "Get");

	Params::InputRecordSubsystem_Get Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordSubsystem.GetCurRecordPath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UInputRecordSubsystem::GetCurRecordPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordSubsystem", "GetCurRecordPath");

	Params::InputRecordSubsystem_GetCurRecordPath Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function InputRecord.InputRecordSubsystem.LoadRecord
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           RecordName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordSubsystem::LoadRecord(const class FString& RecordName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordSubsystem", "LoadRecord");

	Params::InputRecordSubsystem_LoadRecord Parms{};

	Parms.RecordName = std::move(RecordName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordSubsystem.LoadRecordSync
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           RecordName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordSubsystem::LoadRecordSync(const class FString& RecordName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordSubsystem", "LoadRecordSync");

	Params::InputRecordSubsystem_LoadRecordSync Parms{};

	Parms.RecordName = std::move(RecordName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordSubsystem.PlayRecord
// (Final, Native, Public, BlueprintCallable)

void UInputRecordSubsystem::PlayRecord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordSubsystem", "PlayRecord");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordSubsystem.SaveRecord
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           RecordName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordSubsystem::SaveRecord(const class FString& RecordName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordSubsystem", "SaveRecord");

	Params::InputRecordSubsystem_SaveRecord Parms{};

	Parms.RecordName = std::move(RecordName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordSubsystem.SaveRecordSync
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           RecordName                                             (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordSubsystem::SaveRecordSync(const class FString& RecordName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordSubsystem", "SaveRecordSync");

	Params::InputRecordSubsystem_SaveRecordSync Parms{};

	Parms.RecordName = std::move(RecordName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordSubsystem.SetRecordPath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EInputRecordPath                        InPathType                                             (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           InNewPath                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordSubsystem::SetRecordPath(const EInputRecordPath InPathType, const class FString& InNewPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordSubsystem", "SetRecordPath");

	Params::InputRecordSubsystem_SetRecordPath Parms{};

	Parms.InPathType = InPathType;
	Parms.InNewPath = std::move(InNewPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordSubsystem.SetRecordPathType
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EInputRecordPath                        InRecordType                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UInputRecordSubsystem::SetRecordPathType(EInputRecordPath InRecordType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordSubsystem", "SetRecordPathType");

	Params::InputRecordSubsystem_SetRecordPathType Parms{};

	Parms.InRecordType = InRecordType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordSubsystem.StartRecord
// (Final, Native, Public, BlueprintCallable)

void UInputRecordSubsystem::StartRecord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordSubsystem", "StartRecord");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordSubsystem.StopPlayRecord
// (Final, Native, Public, BlueprintCallable)

void UInputRecordSubsystem::StopPlayRecord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordSubsystem", "StopPlayRecord");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function InputRecord.InputRecordSubsystem.StopRecord
// (Final, Native, Public, BlueprintCallable)

void UInputRecordSubsystem::StopRecord()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("InputRecordSubsystem", "StopRecord");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

