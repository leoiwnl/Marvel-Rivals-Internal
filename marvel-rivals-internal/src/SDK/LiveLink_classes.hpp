#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: LiveLink

#include "Basic.hpp"

#include "LiveLinkInterface_structs.hpp"
#include "LiveLinkInterface_classes.hpp"
#include "Engine_classes.hpp"
#include "LiveLink_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "TimeManagement_classes.hpp"


namespace SDK
{

// Class LiveLink.LiveLinkBasicFrameInterpolationProcessor
// 0x0018 (0x0048 - 0x0030)
class ULiveLinkBasicFrameInterpolationProcessor : public ULiveLinkFrameInterpolationProcessor
{
public:
	bool                                          bInterpolatePropertyValues;                        // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x17];                                      // 0x0031(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkBasicFrameInterpolationProcessor">();
	}
	static class ULiveLinkBasicFrameInterpolationProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkBasicFrameInterpolationProcessor>();
	}
};

// Class LiveLink.LiveLinkAnimationFrameInterpolationProcessor
// 0x0010 (0x0058 - 0x0048)
class ULiveLinkAnimationFrameInterpolationProcessor final : public ULiveLinkBasicFrameInterpolationProcessor
{
public:
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkAnimationFrameInterpolationProcessor">();
	}
	static class ULiveLinkAnimationFrameInterpolationProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkAnimationFrameInterpolationProcessor>();
	}
};

// Class LiveLink.LiveLinkAnimationVirtualSubject
// 0x0008 (0x0170 - 0x0168)
class ULiveLinkAnimationVirtualSubject final : public ULiveLinkVirtualSubject
{
public:
	uint8                                         Pad_168[0x1];                                      // 0x0168(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bAppendSubjectNameToBones;                         // 0x0169(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_16A[0x6];                                      // 0x016A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkAnimationVirtualSubject">();
	}
	static class ULiveLinkAnimationVirtualSubject* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkAnimationVirtualSubject>();
	}
};

// Class LiveLink.LiveLinkBlueprintLibrary
// 0x0000 (0x0030 - 0x0030)
class ULiveLinkBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static int32 ChildCount(struct FLiveLinkTransform& LiveLinkTransform);
	static void ComponentSpaceTransform(struct FLiveLinkTransform& LiveLinkTransform, struct FTransform* Transform);
	static bool EvaluateLiveLinkFrame(const struct FLiveLinkSubjectRepresentation& SubjectRepresentation, struct FLiveLinkBaseBlueprintData* OutBlueprintData);
	static bool EvaluateLiveLinkFrameAtSceneTime(const struct FLiveLinkSubjectName& SubjectName, TSubclassOf<class ULiveLinkRole> Role, const struct FTimecode& SceneTime, struct FLiveLinkBaseBlueprintData* OutBlueprintData);
	static bool EvaluateLiveLinkFrameAtWorldTimeOffset(const struct FLiveLinkSubjectName& SubjectName, TSubclassOf<class ULiveLinkRole> Role, float WorldTimeOffset, struct FLiveLinkBaseBlueprintData* OutBlueprintData);
	static bool EvaluateLiveLinkFrameWithSpecificRole(const struct FLiveLinkSubjectName& SubjectName, TSubclassOf<class ULiveLinkRole> Role, struct FLiveLinkBaseBlueprintData* OutBlueprintData);
	static bool GetAnimationFrameData(struct FSubjectFrameHandle& SubjectFrameHandle, struct FLiveLinkAnimationFrameData* AnimationFrameData);
	static bool GetAnimationStaticData(struct FSubjectFrameHandle& SubjectFrameHandle, struct FLiveLinkSkeletonStaticData* AnimationStaticData);
	static void GetBasicData(struct FSubjectFrameHandle& SubjectFrameHandle, struct FLiveLinkBasicBlueprintData* BasicBlueprintData);
	static void GetChildren(struct FLiveLinkTransform& LiveLinkTransform, TArray<struct FLiveLinkTransform>* Children);
	static void GetCurves(struct FSubjectFrameHandle& SubjectFrameHandle, TMap<class FName, float>* Curves);
	static TArray<struct FLiveLinkSubjectName> GetLiveLinkEnabledSubjectNames(bool bIncludeVirtualSubject);
	static TSubclassOf<class ULiveLinkRole> GetLiveLinkSubjectRole(const struct FLiveLinkSubjectName& SubjectName);
	static TArray<struct FLiveLinkSubjectKey> GetLiveLinkSubjects(bool bIncludeDisabledSubject, bool bIncludeVirtualSubject);
	static void GetMetadata(struct FSubjectFrameHandle& SubjectFrameHandle, struct FSubjectMetadata* MetaData);
	static void GetParent(struct FLiveLinkTransform& LiveLinkTransform, struct FLiveLinkTransform* Parent);
	static bool GetPropertyValue(struct FLiveLinkBasicBlueprintData& BasicData, class FName PropertyName, float* Value);
	static void GetRootTransform(struct FSubjectFrameHandle& SubjectFrameHandle, struct FLiveLinkTransform* LiveLinkTransform);
	static class FText GetSourceMachineName(struct FLiveLinkSourceHandle& SourceHandle);
	static class FText GetSourceStatus(struct FLiveLinkSourceHandle& SourceHandle);
	static class FText GetSourceType(struct FLiveLinkSourceHandle& SourceHandle);
	static class FText GetSourceTypeFromGuid(const struct FGuid& SourceGuid);
	static TSubclassOf<class ULiveLinkRole> GetSpecificLiveLinkSubjectRole(const struct FLiveLinkSubjectKey& SubjectKey);
	static void GetTransformByIndex(struct FSubjectFrameHandle& SubjectFrameHandle, int32 TransformIndex, struct FLiveLinkTransform* LiveLinkTransform);
	static void GetTransformByName(struct FSubjectFrameHandle& SubjectFrameHandle, class FName TransformName_0, struct FLiveLinkTransform* LiveLinkTransform);
	static bool HasParent(struct FLiveLinkTransform& LiveLinkTransform);
	static bool IsLiveLinkSubjectEnabled(const struct FLiveLinkSubjectName& SubjectName);
	static bool IsSourceStillValid(struct FLiveLinkSourceHandle& SourceHandle);
	static bool IsSpecificLiveLinkSubjectEnabled(const struct FLiveLinkSubjectKey& SubjectKey, bool bForThisFrame);
	static int32 NumberOfTransforms(struct FSubjectFrameHandle& SubjectFrameHandle);
	static void ParentBoneSpaceTransform(struct FLiveLinkTransform& LiveLinkTransform, struct FTransform* Transform);
	static bool RemoveSource(struct FLiveLinkSourceHandle& SourceHandle);
	static void SetLiveLinkSubjectEnabled(const struct FLiveLinkSubjectKey& SubjectKey, bool bEnabled);
	static void TransformName(struct FLiveLinkTransform& LiveLinkTransform, class FName* Name_0);
	static void TransformNames(struct FSubjectFrameHandle& SubjectFrameHandle, TArray<class FName>* TransformNames_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkBlueprintLibrary">();
	}
	static class ULiveLinkBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkBlueprintLibrary>();
	}
};

// Class LiveLink.LiveLinkComponent
// 0x0020 (0x0110 - 0x00F0)
class ULiveLinkComponent final : public UActorComponent
{
public:
	TMulticastInlineDelegate<void(float DeltaTime)> OnLiveLinkUpdated;                                 // 0x00F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_100[0x10];                                     // 0x0100(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GetAvailableSubjectNames(TArray<class FName>* SubjectNames);
	void GetSubjectData(const class FName SubjectName, bool* bSuccess, struct FSubjectFrameHandle* SubjectFrameHandle);
	void GetSubjectDataAtSceneTime(const class FName SubjectName, const struct FTimecode& SceneTime, bool* bSuccess, struct FSubjectFrameHandle* SubjectFrameHandle);
	void GetSubjectDataAtWorldTime(const class FName SubjectName, const float WorldTime, bool* bSuccess, struct FSubjectFrameHandle* SubjectFrameHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkComponent">();
	}
	static class ULiveLinkComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkComponent>();
	}
};

// Class LiveLink.LiveLinkDrivenComponent
// 0x0020 (0x0110 - 0x00F0)
class ULiveLinkDrivenComponent final : public UActorComponent
{
public:
	struct FLiveLinkSubjectName                   SubjectName;                                       // 0x00F0(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActorTransformBone;                                // 0x00FC(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bModifyActorTransform;                             // 0x0108(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSetRelativeLocation;                              // 0x0109(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_10A[0x6];                                      // 0x010A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkDrivenComponent">();
	}
	static class ULiveLinkDrivenComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkDrivenComponent>();
	}
};

// Class LiveLink.LiveLinkMessageBusFinder
// 0x0058 (0x0088 - 0x0030)
class ULiveLinkMessageBusFinder final : public UObject
{
public:
	uint8                                         Pad_30[0x58];                                      // 0x0030(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static void ConnectToProvider(struct FProviderPollResult& Provider, struct FLiveLinkSourceHandle* SourceHandle);
	static class ULiveLinkMessageBusFinder* ConstructMessageBusFinder();

	void GetAvailableProviders(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo, float Duration, TArray<struct FProviderPollResult>* AvailableProviders);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkMessageBusFinder">();
	}
	static class ULiveLinkMessageBusFinder* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkMessageBusFinder>();
	}
};

// Class LiveLink.LiveLinkMessageBusSourceFactory
// 0x0000 (0x0030 - 0x0030)
class ULiveLinkMessageBusSourceFactory final : public ULiveLinkSourceFactory
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkMessageBusSourceFactory">();
	}
	static class ULiveLinkMessageBusSourceFactory* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkMessageBusSourceFactory>();
	}
};

// Class LiveLink.LiveLinkMessageBusSourceSettings
// 0x0000 (0x00B0 - 0x00B0)
class ULiveLinkMessageBusSourceSettings final : public ULiveLinkSourceSettings
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkMessageBusSourceSettings">();
	}
	static class ULiveLinkMessageBusSourceSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkMessageBusSourceSettings>();
	}
};

// Class LiveLink.LiveLinkPreset
// 0x0028 (0x0058 - 0x0030)
class ULiveLinkPreset final : public UObject
{
public:
	TArray<struct FLiveLinkSourcePreset>          Sources;                                           // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	TArray<struct FLiveLinkSubjectPreset>         Subjects;                                          // 0x0040(0x0010)(Edit, ZeroConstructor, EditConst, NativeAccessSpecifierPrivate)
	uint8                                         Pad_50[0x8];                                       // 0x0050(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void ApplyToClientLatent(class UObject* WorldContextObject, const struct FLatentActionInfo& LatentInfo);
	void BuildFromClient();

	bool AddToClient(const bool bRecreatePresets) const;
	bool ApplyToClient() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkPreset">();
	}
	static class ULiveLinkPreset* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkPreset>();
	}
};

// Class LiveLink.LiveLinkUserSettings
// 0x0010 (0x0040 - 0x0030)
class ULiveLinkUserSettings final : public UObject
{
public:
	struct FDirectoryPath                         PresetSaveDir;                                     // 0x0030(0x0010)(Edit, ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkUserSettings">();
	}
	static class ULiveLinkUserSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkUserSettings>();
	}
};

// Class LiveLink.LiveLinkSettings
// 0x00A0 (0x00D0 - 0x0030)
class ULiveLinkSettings final : public UObject
{
public:
	TArray<struct FLiveLinkRoleProjectSetting>    DefaultRoleSettings;                               // 0x0030(0x0010)(Edit, ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class ULiveLinkFrameInterpolationProcessor> FrameInterpolationProcessor;                       // 0x0040(0x0008)(ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftObjectPtr<class ULiveLinkPreset>         DefaultLiveLinkPreset;                             // 0x0048(0x0030)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ClockOffsetCorrectionStep;                         // 0x0078(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ELiveLinkSourceMode                           DefaultMessageBusSourceMode;                       // 0x007C(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MessageBusPingRequestFrequency;                    // 0x0080(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MessageBusHeartbeatFrequency;                      // 0x0088(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MessageBusHeartbeatTimeout;                        // 0x0090(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MessageBusTimeBeforeRemovingInactiveSource;        // 0x0098(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        TimeWithoutFrameToBeConsiderAsInvalid;             // 0x00A0(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           ValidColor;                                        // 0x00A8(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           InvalidColor;                                      // 0x00B8(0x0010)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TextSizeSource;                                    // 0x00C8(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         TextSizeSubject;                                   // 0x00C9(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkSettings">();
	}
	static class ULiveLinkSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkSettings>();
	}
};

// Class LiveLink.LiveLinkTimecodeProvider
// 0x00A0 (0x00D8 - 0x0038)
class ULiveLinkTimecodeProvider final : public UTimecodeProvider
{
public:
	struct FLiveLinkSubjectKey                    SubjectKey;                                        // 0x0038(0x001C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ELiveLinkTimecodeProviderEvaluationType       Evaluation;                                        // 0x0054(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bOverrideFrameRate;                                // 0x0058(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_59[0x3];                                       // 0x0059(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FFrameRate                             OverrideFrameRate;                                 // 0x005C(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         BufferSize;                                        // 0x0064(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_68[0x70];                                      // 0x0068(0x0070)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkTimecodeProvider">();
	}
	static class ULiveLinkTimecodeProvider* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkTimecodeProvider>();
	}
};

// Class LiveLink.LiveLinkTimeSynchronizationSource
// 0x0060 (0x0098 - 0x0038)
class ULiveLinkTimeSynchronizationSource final : public UTimeSynchronizationSource
{
public:
	struct FLiveLinkSubjectName                   SubjectName;                                       // 0x0038(0x000C)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x54];                                      // 0x0044(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkTimeSynchronizationSource">();
	}
	static class ULiveLinkTimeSynchronizationSource* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkTimeSynchronizationSource>();
	}
};

// Class LiveLink.LiveLinkVirtualSubjectSourceSettings
// 0x0010 (0x00C0 - 0x00B0)
class ULiveLinkVirtualSubjectSourceSettings final : public ULiveLinkSourceSettings
{
public:
	class FName                                   SourceName;                                        // 0x00B0(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_BC[0x4];                                       // 0x00BC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkVirtualSubjectSourceSettings">();
	}
	static class ULiveLinkVirtualSubjectSourceSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkVirtualSubjectSourceSettings>();
	}
};

// Class LiveLink.LiveLinkTransformAxisSwitchPreProcessor
// 0x0048 (0x0078 - 0x0030)
class ULiveLinkTransformAxisSwitchPreProcessor : public ULiveLinkFramePreProcessor
{
public:
	ELiveLinkAxis                                 FrontAxis;                                         // 0x0030(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELiveLinkAxis                                 RightAxis;                                         // 0x0031(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ELiveLinkAxis                                 UpAxis;                                            // 0x0032(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseOffsetPosition;                                // 0x0033(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseOffsetOrientation;                             // 0x0034(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OffsetPosition;                                    // 0x0038(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FRotator                               OffsetOrientation;                                 // 0x0050(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_68[0x10];                                      // 0x0068(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkTransformAxisSwitchPreProcessor">();
	}
	static class ULiveLinkTransformAxisSwitchPreProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkTransformAxisSwitchPreProcessor>();
	}
};

// Class LiveLink.LiveLinkAnimationAxisSwitchPreProcessor
// 0x0000 (0x0078 - 0x0078)
class ULiveLinkAnimationAxisSwitchPreProcessor final : public ULiveLinkTransformAxisSwitchPreProcessor
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkAnimationAxisSwitchPreProcessor">();
	}
	static class ULiveLinkAnimationAxisSwitchPreProcessor* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkAnimationAxisSwitchPreProcessor>();
	}
};

// Class LiveLink.LiveLinkAnimationRoleToTransform
// 0x0020 (0x0050 - 0x0030)
class ULiveLinkAnimationRoleToTransform final : public ULiveLinkFrameTranslator
{
public:
	class FName                                   BoneName;                                          // 0x0030(0x000C)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C[0x14];                                      // 0x003C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkAnimationRoleToTransform">();
	}
	static class ULiveLinkAnimationRoleToTransform* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkAnimationRoleToTransform>();
	}
};

// Class LiveLink.LiveLinkBlueprintVirtualSubject
// 0x0028 (0x0190 - 0x0168)
class ULiveLinkBlueprintVirtualSubject final : public ULiveLinkVirtualSubject
{
public:
	uint8                                         Pad_168[0x28];                                     // 0x0168(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnInitialize();
	void OnUpdate();
	bool UpdateVirtualSubjectFrameData_Internal(const struct FLiveLinkBaseFrameData& InStruct, bool bInShouldStampCurrentTime);
	bool UpdateVirtualSubjectStaticData_Internal(const struct FLiveLinkBaseStaticData& InStruct);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LiveLinkBlueprintVirtualSubject">();
	}
	static class ULiveLinkBlueprintVirtualSubject* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULiveLinkBlueprintVirtualSubject>();
	}
};

}

