#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyActionLogRecorder

#include "Basic.hpp"

#include "PyActionLogRecorder_classes.hpp"
#include "PyActionLogRecorder_parameters.hpp"


namespace SDK
{

// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnInitialize
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UPyActionLogRecorder::OnInitialize()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnInitialize");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnShutdown
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UPyActionLogRecorder::OnShutdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnShutdown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordActorDeath
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FActionLogDeathExtraInfo         DeathExtraInfo                                         (Parm, OutParm, NoDestructor)
// struct FActionLogBattleContext          BattleContext                                          (Parm, OutParm)
// struct FAttributeModifierHandle         ParameterHandle                                        (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void UPyActionLogRecorder::OnRecordActorDeath(struct FActionLogDeathExtraInfo* DeathExtraInfo, struct FActionLogBattleContext* BattleContext, const struct FAttributeModifierHandle& ParameterHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordActorDeath");

	Params::PyActionLogRecorder_OnRecordActorDeath Parms{};

	Parms.ParameterHandle = std::move(ParameterHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DeathExtraInfo != nullptr)
		*DeathExtraInfo = std::move(Parms.DeathExtraInfo);

	if (BattleContext != nullptr)
		*BattleContext = std::move(Parms.BattleContext);
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordHeroSwitchOut
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FActionLogHeroUseRecord          HeroUseRecord                                          (Parm, OutParm, NoDestructor)

void UPyActionLogRecorder::OnRecordHeroSwitchOut(struct FActionLogHeroUseRecord* HeroUseRecord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordHeroSwitchOut");

	Params::PyActionLogRecorder_OnRecordHeroSwitchOut Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (HeroUseRecord != nullptr)
		*HeroUseRecord = std::move(Parms.HeroUseRecord);
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordUnitUseInfo
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPyObjectWrapper*                 AbilityUseInfo                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UPyActionLogRecorder::OnRecordUnitUseInfo(class UPyObjectWrapper* AbilityUseInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordUnitUseInfo");

	Params::PyActionLogRecorder_OnRecordUnitUseInfo Parms{};

	Parms.AbilityUseInfo = AbilityUseInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordAbilityUseInfo
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPyObjectWrapper*                 AbilityUseInfo                                         (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UPyActionLogRecorder::OnRecordAbilityUseInfo(class UPyObjectWrapper* AbilityUseInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordAbilityUseInfo");

	Params::PyActionLogRecorder_OnRecordAbilityUseInfo Parms{};

	Parms.AbilityUseInfo = AbilityUseInfo;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordActorDamages
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FActionLogDamageMerge            LogStruct                                              (Parm)

void UPyActionLogRecorder::OnRecordActorDamages(const struct FActionLogDamageMerge& LogStruct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordActorDamages");

	Params::PyActionLogRecorder_OnRecordActorDamages Parms{};

	Parms.LogStruct = std::move(LogStruct);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordActorDamage
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FActionLogBattleContext          BattleContext                                          (ConstParm, Parm, OutParm, ReferenceParm)
// struct FAttributeModifierHandle         ParameterHandle                                        (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void UPyActionLogRecorder::OnRecordActorDamage(const struct FActionLogBattleContext& BattleContext, const struct FAttributeModifierHandle& ParameterHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordActorDamage");

	Params::PyActionLogRecorder_OnRecordActorDamage Parms{};

	Parms.BattleContext = std::move(BattleContext);
	Parms.ParameterHandle = std::move(ParameterHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordActorHeals
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// EActionLogHealType                      HealType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FActionLogDamageMerge            LogStruct                                              (Parm)

void UPyActionLogRecorder::OnRecordActorHeals(EActionLogHealType HealType, const struct FActionLogDamageMerge& LogStruct)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordActorHeals");

	Params::PyActionLogRecorder_OnRecordActorHeals Parms{};

	Parms.HealType = HealType;
	Parms.LogStruct = std::move(LogStruct);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordActorHeal
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// EActionLogHealType                      HealType                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    IsNearDeathHeal                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FActionLogBattleContext          BattleContext                                          (Parm, OutParm)
// struct FAttributeModifierHandle         ParameterHandle                                        (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash)

void UPyActionLogRecorder::OnRecordActorHeal(EActionLogHealType HealType, bool IsNearDeathHeal, struct FActionLogBattleContext* BattleContext, const struct FAttributeModifierHandle& ParameterHandle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordActorHeal");

	Params::PyActionLogRecorder_OnRecordActorHeal Parms{};

	Parms.HealType = HealType;
	Parms.IsNearDeathHeal = IsNearDeathHeal;
	Parms.ParameterHandle = std::move(ParameterHandle);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (BattleContext != nullptr)
		*BattleContext = std::move(Parms.BattleContext);
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordBuffInfoCVer
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPyObjectWrapper*                 Buff                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UPyActionLogRecorder::OnRecordBuffInfoCVer(class UPyObjectWrapper* Buff)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordBuffInfoCVer");

	Params::PyActionLogRecorder_OnRecordBuffInfoCVer Parms{};

	Parms.Buff = Buff;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordBuffInfo
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FActionLogBuffRecord             BuffRecord                                             (Parm, OutParm)

void UPyActionLogRecorder::OnRecordBuffInfo(struct FActionLogBuffRecord* BuffRecord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordBuffInfo");

	Params::PyActionLogRecorder_OnRecordBuffInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (BuffRecord != nullptr)
		*BuffRecord = std::move(Parms.BuffRecord);
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordHeroSculptIDChange
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FActionLogHeroSculptIDChangeRecordChangeRecord                                           (Parm, OutParm, NoDestructor)

void UPyActionLogRecorder::OnRecordHeroSculptIDChange(struct FActionLogHeroSculptIDChangeRecord* ChangeRecord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordHeroSculptIDChange");

	Params::PyActionLogRecorder_OnRecordHeroSculptIDChange Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ChangeRecord != nullptr)
		*ChangeRecord = std::move(Parms.ChangeRecord);
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordEnergyChangedCVer
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class UPyObjectWrapper*                 EnergyChangeRecord                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UPyActionLogRecorder::OnRecordEnergyChangedCVer(class UPyObjectWrapper* EnergyChangeRecord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordEnergyChangedCVer");

	Params::PyActionLogRecorder_OnRecordEnergyChangedCVer Parms{};

	Parms.EnergyChangeRecord = EnergyChangeRecord;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordEnergyChanged
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FActionLogEnergyChangeRecord     EnergyChangeRecord                                     (Parm, OutParm, NoDestructor)

void UPyActionLogRecorder::OnRecordEnergyChanged(struct FActionLogEnergyChangeRecord* EnergyChangeRecord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordEnergyChanged");

	Params::PyActionLogRecorder_OnRecordEnergyChanged Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (EnergyChangeRecord != nullptr)
		*EnergyChangeRecord = std::move(Parms.EnergyChangeRecord);
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordSummonedInfo
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FActionLogSummonedRecord         SummonedRecord                                         (Parm, OutParm)

void UPyActionLogRecorder::OnRecordSummonedInfo(struct FActionLogSummonedRecord* SummonedRecord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordSummonedInfo");

	Params::PyActionLogRecorder_OnRecordSummonedInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (SummonedRecord != nullptr)
		*SummonedRecord = std::move(Parms.SummonedRecord);
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordCompetitionInfo
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FActionLogCompetitionRecord      CompetitionRecord                                      (Parm, OutParm, NoDestructor)

void UPyActionLogRecorder::OnRecordCompetitionInfo(struct FActionLogCompetitionRecord* CompetitionRecord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordCompetitionInfo");

	Params::PyActionLogRecorder_OnRecordCompetitionInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (CompetitionRecord != nullptr)
		*CompetitionRecord = std::move(Parms.CompetitionRecord);
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordUltimateRelease
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FActionLogUltimateRelease        ReleaseRecord                                          (Parm, OutParm, NoDestructor)

void UPyActionLogRecorder::OnRecordUltimateRelease(struct FActionLogUltimateRelease* ReleaseRecord)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordUltimateRelease");

	Params::PyActionLogRecorder_OnRecordUltimateRelease Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (ReleaseRecord != nullptr)
		*ReleaseRecord = std::move(Parms.ReleaseRecord);
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordAbilityExtraNormal
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAbilityExtraBaseInfo            BaseInfo                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor)
// class FString                           ExtraKey                                               (Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   ExtraValue                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPyActionLogRecorder::OnRecordAbilityExtraNormal(const struct FAbilityExtraBaseInfo& BaseInfo, const class FString& ExtraKey, float ExtraValue)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordAbilityExtraNormal");

	Params::PyActionLogRecorder_OnRecordAbilityExtraNormal Parms{};

	Parms.BaseInfo = std::move(BaseInfo);
	Parms.ExtraKey = std::move(ExtraKey);
	Parms.ExtraValue = ExtraValue;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordAbilityExtraHitRate
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FAbilityExtraBaseInfo            BaseInfo                                               (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor)
// class FString                           ExtraKey                                               (Parm, ZeroConstructor, HasGetValueTypeHash)
// struct FAbilityExtraHitRate             ExtraHitRate                                           (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor)

void UPyActionLogRecorder::OnRecordAbilityExtraHitRate(const struct FAbilityExtraBaseInfo& BaseInfo, const class FString& ExtraKey, const struct FAbilityExtraHitRate& ExtraHitRate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordAbilityExtraHitRate");

	Params::PyActionLogRecorder_OnRecordAbilityExtraHitRate Parms{};

	Parms.BaseInfo = std::move(BaseInfo);
	Parms.ExtraKey = std::move(ExtraKey);
	Parms.ExtraHitRate = std::move(ExtraHitRate);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordFirstEnterBattle
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FActionLogFirstEnterBattle       FirstEnterBattle                                       (Parm, OutParm, NoDestructor)

void UPyActionLogRecorder::OnRecordFirstEnterBattle(struct FActionLogFirstEnterBattle* FirstEnterBattle)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordFirstEnterBattle");

	Params::PyActionLogRecorder_OnRecordFirstEnterBattle Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (FirstEnterBattle != nullptr)
		*FirstEnterBattle = std::move(Parms.FirstEnterBattle);
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordHealPackRefreshInfo
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FString                           HealPackName                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UPyActionLogRecorder::OnRecordHealPackRefreshInfo(const class FString& HealPackName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordHealPackRefreshInfo");

	Params::PyActionLogRecorder_OnRecordHealPackRefreshInfo Parms{};

	Parms.HealPackName = std::move(HealPackName);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordLevelTriggerInfo
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FActionLogLevelTriggerInfo       LevelTriggerInfo                                       (Parm, OutParm)

void UPyActionLogRecorder::OnRecordLevelTriggerInfo(struct FActionLogLevelTriggerInfo* LevelTriggerInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordLevelTriggerInfo");

	Params::PyActionLogRecorder_OnRecordLevelTriggerInfo Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (LevelTriggerInfo != nullptr)
		*LevelTriggerInfo = std::move(Parms.LevelTriggerInfo);
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordDestructionDamage
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FActionLogDestructionDamage      DestructionDamage                                      (Parm, OutParm, NoDestructor)
// struct FDestructionExtraInfo            ExtraInfo                                              (ConstParm, Parm, OutParm, ReferenceParm)

void UPyActionLogRecorder::OnRecordDestructionDamage(struct FActionLogDestructionDamage* DestructionDamage, const struct FDestructionExtraInfo& ExtraInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordDestructionDamage");

	Params::PyActionLogRecorder_OnRecordDestructionDamage Parms{};

	Parms.ExtraInfo = std::move(ExtraInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (DestructionDamage != nullptr)
		*DestructionDamage = std::move(Parms.DestructionDamage);
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordChaosDamages
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FActionLogChaosLogInfos          ChaosInfos                                             (Parm)

void UPyActionLogRecorder::OnRecordChaosDamages(const struct FActionLogChaosLogInfos& ChaosInfos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordChaosDamages");

	Params::PyActionLogRecorder_OnRecordChaosDamages Parms{};

	Parms.ChaosInfos = std::move(ChaosInfos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordChaosDamage
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FActionLogChaosLogInfo           ChaosInfo                                              (Parm)

void UPyActionLogRecorder::OnRecordChaosDamage(const struct FActionLogChaosLogInfo& ChaosInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordChaosDamage");

	Params::PyActionLogRecorder_OnRecordChaosDamage Parms{};

	Parms.ChaosInfo = std::move(ChaosInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordChaosBreaks
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FActionLogChaosLogInfos          ChaosInfos                                             (Parm)

void UPyActionLogRecorder::OnRecordChaosBreaks(const struct FActionLogChaosLogInfos& ChaosInfos)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordChaosBreaks");

	Params::PyActionLogRecorder_OnRecordChaosBreaks Parms{};

	Parms.ChaosInfos = std::move(ChaosInfos);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordChaosBreak
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FActionLogChaosLogInfo           ChaosInfo                                              (Parm)

void UPyActionLogRecorder::OnRecordChaosBreak(const struct FActionLogChaosLogInfo& ChaosInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordChaosBreak");

	Params::PyActionLogRecorder_OnRecordChaosBreak Parms{};

	Parms.ChaosInfo = std::move(ChaosInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordChaosRecover
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FActionLogChaosLogInfo           ChaosInfo                                              (Parm)

void UPyActionLogRecorder::OnRecordChaosRecover(const struct FActionLogChaosLogInfo& ChaosInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordChaosRecover");

	Params::PyActionLogRecorder_OnRecordChaosRecover Parms{};

	Parms.ChaosInfo = std::move(ChaosInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordChaosCollapse
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FActionLogChaosLogInfo           ChaosInfo                                              (Parm)

void UPyActionLogRecorder::OnRecordChaosCollapse(const struct FActionLogChaosLogInfo& ChaosInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordChaosCollapse");

	Params::PyActionLogRecorder_OnRecordChaosCollapse Parms{};

	Parms.ChaosInfo = std::move(ChaosInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordChaosEndPlay
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FActionLogChaosLogInfo           ChaosInfo                                              (Parm)

void UPyActionLogRecorder::OnRecordChaosEndPlay(const struct FActionLogChaosLogInfo& ChaosInfo)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordChaosEndPlay");

	Params::PyActionLogRecorder_OnRecordChaosEndPlay Parms{};

	Parms.ChaosInfo = std::move(ChaosInfo);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyActionLogRecorder.PyActionLogRecorder.OnRecordTeamComposition
// (Native, Event, Protected, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// struct FActionLogTeamComposition        TeamComposition                                        (ConstParm, Parm, OutParm, ReferenceParm)

void UPyActionLogRecorder::OnRecordTeamComposition(const struct FActionLogTeamComposition& TeamComposition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyActionLogRecorder", "OnRecordTeamComposition");

	Params::PyActionLogRecorder_OnRecordTeamComposition Parms{};

	Parms.TeamComposition = std::move(TeamComposition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

