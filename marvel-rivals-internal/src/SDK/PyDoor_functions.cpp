#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyDoor

#include "Basic.hpp"

#include "PyDoor_classes.hpp"
#include "PyDoor_parameters.hpp"


namespace SDK
{

// PythonFunction PyDoor.PyDoor.ReceiveBeginPlay
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void APyDoor::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyDoor", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyDoor.PyDoor.DispatchOnOpenStateChanged
// (Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          TaskOwner                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// int64                                   Magnitude                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APyDoor::DispatchOnOpenStateChanged(class UObject* TaskOwner, int64 Magnitude)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyDoor", "DispatchOnOpenStateChanged");

	Params::PyDoor_DispatchOnOpenStateChanged Parms{};

	Parms.TaskOwner = TaskOwner;
	Parms.Magnitude = Magnitude;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyDoor.PyDoor.OnRep_OpenState
// (Native, Public, BlueprintCallable)

void APyDoor::OnRep_OpenState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyDoor", "OnRep_OpenState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyDoor.PyDoor.OnRep_DoorProgress
// (Native, Public, BlueprintCallable)

void APyDoor::OnRep_DoorProgress()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyDoor", "OnRep_DoorProgress");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyDoor.PyDoor.SetDoorsProgress
// (Native, Public, BlueprintCallable)
// Parameters:
// float                                   Progress                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APyDoor::SetDoorsProgress(float Progress)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyDoor", "SetDoorsProgress");

	Params::PyDoor_SetDoorsProgress Parms{};

	Parms.Progress = Progress;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyDoor.PyDoor.DoorAnimFinish
// (Native, Public, BlueprintCallable)

void APyDoor::DoorAnimFinish()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyDoor", "DoorAnimFinish");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyDoor.PyDoor.S_payload_reach
// (Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     event_name                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, HasGetValueTypeHash)
// float                                   event_args                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void APyDoor::S_payload_reach(const struct FGameplayTag& event_name, float event_args)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyDoor", "S_payload_reach");

	Params::PyDoor_S_payload_reach Parms{};

	Parms.event_name = std::move(event_name);
	Parms.event_args = event_args;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyDoor.PyDoor.OpenDoorForBake
// (Native, Public, BlueprintCallable)

void APyDoor::OpenDoorForBake()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyDoor", "OpenDoorForBake");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

