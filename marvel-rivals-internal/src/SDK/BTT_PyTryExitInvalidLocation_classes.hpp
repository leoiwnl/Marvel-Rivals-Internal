#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BTT_PyTryExitInvalidLocation

#include "Basic.hpp"

#include "AIModule_structs.hpp"
#include "PyBTNodeBase_classes.hpp"
#include "BTT_PyMoveToBase_classes.hpp"


namespace SDK
{

// PythonClass BTT_PyTryExitInvalidLocation.BTT_PyTryExitInvalidLocation
// 0x0068 (0x0128 - 0x00C0)
class UBTT_PyTryExitInvalidLocation : public UBTTask_PyBase
{
public:
	float                                         MaxExitTime;                                       // 0x00C0(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 EnemyTarget;                                       // 0x00C8(0x0030)(Edit, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 TeammateTarget;                                    // 0x00F8(0x0030)(Edit, NativeAccessSpecifierPublic)

public:
	void ReceiveAbortAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTT_PyTryExitInvalidLocation">();
	}
	static class UBTT_PyTryExitInvalidLocation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_PyTryExitInvalidLocation>();
	}
};

// PythonClass BTT_PyTryExitInvalidLocation.BTT_PyTryExitInvalidLocationMove
// 0x0078 (0x0148 - 0x00D0)
class UBTT_PyTryExitInvalidLocationMove : public UBTT_PyMoveToBase
{
public:
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FBlackboardKeySelector                 EnemyTarget;                                       // 0x00D0(0x0030)(Edit, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 TeammateTarget;                                    // 0x0100(0x0030)(Edit, NativeAccessSpecifierPublic)
	float                                         ForwardDis;                                        // 0x0130(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         UpDis;                                             // 0x0134(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DownDis;                                           // 0x0138(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CheckRadius;                                       // 0x013C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveForwardDis;                                    // 0x0140(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MoveChangeAngle;                                   // 0x0144(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	void ReceiveOnTaskFinished(class AAIController* OwnerController, class APawn* ControlledPawn, EBTNodeResult Result);
	struct FVector GetMoveTargetLocation(class AAIController* OwnerController, class APawn* ControlledPawn);
	void OnMoveCompleted(const struct FAIRequestID& RequestID, EPathFollowingResult Result);
	void ReceiveTickAI(class AAIController* OwnerController, class APawn* ControlledPawn, float DeltaSeconds);
	void ReceiveExecuteAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTT_PyTryExitInvalidLocationMove">();
	}
	static class UBTT_PyTryExitInvalidLocationMove* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTT_PyTryExitInvalidLocationMove>();
	}
};

// PythonClass BTT_PyTryExitInvalidLocation.BTD_PyCheckShouldTryExit
// 0x0068 (0x0120 - 0x00B8)
class UBTD_PyCheckShouldTryExit final : public UBTDecorator_PyBase
{
public:
	struct FBlackboardKeySelector                 EnemyTarget;                                       // 0x00B8(0x0030)(Edit, NativeAccessSpecifierPublic)
	struct FBlackboardKeySelector                 TeammateTarget;                                    // 0x00E8(0x0030)(Edit, NativeAccessSpecifierPublic)
	float                                         IgnoreDistance;                                    // 0x0118(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	bool PerformConditionCheckAI(class AAIController* OwnerController, class APawn* ControlledPawn);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BTD_PyCheckShouldTryExit">();
	}
	static class UBTD_PyCheckShouldTryExit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBTD_PyCheckShouldTryExit>();
	}
};

}

