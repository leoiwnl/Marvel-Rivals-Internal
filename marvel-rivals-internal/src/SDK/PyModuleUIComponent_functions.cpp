#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyModuleUIComponent

#include "Basic.hpp"

#include "PyModuleUIComponent_classes.hpp"
#include "PyModuleUIComponent_parameters.hpp"


namespace SDK
{

// PythonFunction PyModuleUIComponent.PyModuleUIComponent.ShowCommonText
// (Net, Native, NetMulticast, Public, BlueprintCallable)
// Parameters:
// class FString                           str_content                                            (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           UI_NAME                                                (Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   DurationTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPyModuleUIComponent::ShowCommonText(const class FString& str_content, const class FString& UI_NAME, float DurationTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyModuleUIComponent", "ShowCommonText");

	Params::PyModuleUIComponent_ShowCommonText Parms{};

	Parms.str_content = std::move(str_content);
	Parms.UI_NAME = std::move(UI_NAME);
	Parms.DurationTime = DurationTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyModuleUIComponent.PyModuleUIComponent.ShowUI
// (Net, Native, NetMulticast, Public, BlueprintCallable)
// Parameters:
// class FString                           UI_NAME                                                (Parm, ZeroConstructor, HasGetValueTypeHash)
// float                                   DurationTime                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// int32                                   PlayerUID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPyModuleUIComponent::ShowUI(const class FString& UI_NAME, float DurationTime, int32 PlayerUID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyModuleUIComponent", "ShowUI");

	Params::PyModuleUIComponent_ShowUI Parms{};

	Parms.UI_NAME = std::move(UI_NAME);
	Parms.DurationTime = DurationTime;
	Parms.PlayerUID = PlayerUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyModuleUIComponent.PyModuleUIComponent.HideUI
// (Net, Native, NetMulticast, Public, BlueprintCallable)
// Parameters:
// class FString                           UI_NAME                                                (Parm, ZeroConstructor, HasGetValueTypeHash)
// int32                                   PlayerUID                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPyModuleUIComponent::HideUI(const class FString& UI_NAME, int32 PlayerUID)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyModuleUIComponent", "HideUI");

	Params::PyModuleUIComponent_HideUI Parms{};

	Parms.UI_NAME = std::move(UI_NAME);
	Parms.PlayerUID = PlayerUID;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyModuleUIComponent.PyModuleUIComponent.UpdateBarUI
// (Net, Native, NetMulticast, Public, BlueprintCallable)
// Parameters:
// float                                   Percent                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           UI_NAME                                                (Parm, ZeroConstructor, HasGetValueTypeHash)

void UPyModuleUIComponent::UpdateBarUI(float Percent, const class FString& UI_NAME)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyModuleUIComponent", "UpdateBarUI");

	Params::PyModuleUIComponent_UpdateBarUI Parms{};

	Parms.Percent = Percent;
	Parms.UI_NAME = std::move(UI_NAME);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyModuleUIComponent.PyModuleUIComponent.UpdatePieUI
// (Net, Native, NetMulticast, Public, BlueprintCallable)
// Parameters:
// float                                   Percent                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           UI_NAME                                                (Parm, ZeroConstructor, HasGetValueTypeHash)

void UPyModuleUIComponent::UpdatePieUI(float Percent, const class FString& UI_NAME)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyModuleUIComponent", "UpdatePieUI");

	Params::PyModuleUIComponent_UpdatePieUI Parms{};

	Parms.Percent = Percent;
	Parms.UI_NAME = std::move(UI_NAME);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyModuleUIComponent.PyModuleUIComponent.UpdateCampStateUI
// (Net, Native, NetMulticast, Public, BlueprintCallable)
// Parameters:
// int32                                   Index_0                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           UI_NAME                                                (Parm, ZeroConstructor, HasGetValueTypeHash)

void UPyModuleUIComponent::UpdateCampStateUI(int32 Index_0, const class FString& UI_NAME)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyModuleUIComponent", "UpdateCampStateUI");

	Params::PyModuleUIComponent_UpdateCampStateUI Parms{};

	Parms.Index_0 = Index_0;
	Parms.UI_NAME = std::move(UI_NAME);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyModuleUIComponent.PyModuleUIComponent.UpdateVictoryProgressText
// (Net, Native, NetMulticast, Public, BlueprintCallable)
// Parameters:
// float                                   Percent                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           UI_NAME                                                (Parm, ZeroConstructor, HasGetValueTypeHash)

void UPyModuleUIComponent::UpdateVictoryProgressText(float Percent, const class FString& UI_NAME)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyModuleUIComponent", "UpdateVictoryProgressText");

	Params::PyModuleUIComponent_UpdateVictoryProgressText Parms{};

	Parms.Percent = Percent;
	Parms.UI_NAME = std::move(UI_NAME);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyModuleUIComponent.PyModuleUIComponent.AssaultHint
// (Net, Native, NetMulticast, Public, BlueprintCallable)
// Parameters:
// class FString                           UI_NAME                                                (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           RedSideHint                                            (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           BlueSideHint                                           (Parm, ZeroConstructor, HasGetValueTypeHash)

void UPyModuleUIComponent::AssaultHint(const class FString& UI_NAME, const class FString& RedSideHint, const class FString& BlueSideHint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyModuleUIComponent", "AssaultHint");

	Params::PyModuleUIComponent_AssaultHint Parms{};

	Parms.UI_NAME = std::move(UI_NAME);
	Parms.RedSideHint = std::move(RedSideHint);
	Parms.BlueSideHint = std::move(BlueSideHint);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyModuleUIComponent.PyModuleUIComponent.AssaultObjectiveUnlock
// (Net, Native, NetMulticast, Public, BlueprintCallable)
// Parameters:
// class FString                           CampName                                               (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           UI_NAME                                                (Parm, ZeroConstructor, HasGetValueTypeHash)

void UPyModuleUIComponent::AssaultObjectiveUnlock(const class FString& CampName, const class FString& UI_NAME)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyModuleUIComponent", "AssaultObjectiveUnlock");

	Params::PyModuleUIComponent_AssaultObjectiveUnlock Parms{};

	Parms.CampName = std::move(CampName);
	Parms.UI_NAME = std::move(UI_NAME);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyModuleUIComponent.PyModuleUIComponent.UpdateAssaultPieOccupy
// (Net, Native, NetMulticast, Public, BlueprintCallable)
// Parameters:
// float                                   CurrentProgress                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   TotalProgress                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class FString                           CampName                                               (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           UI_NAME                                                (Parm, ZeroConstructor, HasGetValueTypeHash)

void UPyModuleUIComponent::UpdateAssaultPieOccupy(float CurrentProgress, float TotalProgress, const class FString& CampName, const class FString& UI_NAME)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyModuleUIComponent", "UpdateAssaultPieOccupy");

	Params::PyModuleUIComponent_UpdateAssaultPieOccupy Parms{};

	Parms.CurrentProgress = CurrentProgress;
	Parms.TotalProgress = TotalProgress;
	Parms.CampName = std::move(CampName);
	Parms.UI_NAME = std::move(UI_NAME);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyModuleUIComponent.PyModuleUIComponent.UpdateAssaultBarProcess
// (Net, Native, NetMulticast, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   CurrentProgress                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// TArray<float>                           OccupyProgressStage                                    (ConstParm, Parm, OutParm, ReferenceParm)
// class FString                           UI_NAME                                                (Parm, ZeroConstructor, HasGetValueTypeHash)

void UPyModuleUIComponent::UpdateAssaultBarProcess(float CurrentProgress, const TArray<float>& OccupyProgressStage, const class FString& UI_NAME)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyModuleUIComponent", "UpdateAssaultBarProcess");

	Params::PyModuleUIComponent_UpdateAssaultBarProcess Parms{};

	Parms.CurrentProgress = CurrentProgress;
	Parms.OccupyProgressStage = std::move(OccupyProgressStage);
	Parms.UI_NAME = std::move(UI_NAME);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyModuleUIComponent.PyModuleUIComponent.AssaultObjectiveClose
// (Net, Native, NetMulticast, Public, BlueprintCallable)
// Parameters:
// class FString                           CampName                                               (Parm, ZeroConstructor, HasGetValueTypeHash)
// class FString                           UI_NAME                                                (Parm, ZeroConstructor, HasGetValueTypeHash)

void UPyModuleUIComponent::AssaultObjectiveClose(const class FString& CampName, const class FString& UI_NAME)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyModuleUIComponent", "AssaultObjectiveClose");

	Params::PyModuleUIComponent_AssaultObjectiveClose Parms{};

	Parms.CampName = std::move(CampName);
	Parms.UI_NAME = std::move(UI_NAME);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyModuleUIComponent.PyModuleUIComponent.SetRoute
// (Net, Native, NetMulticast, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<float>                           RouteLength                                            (ConstParm, Parm, OutParm, ReferenceParm)

void UPyModuleUIComponent::SetRoute(const TArray<float>& RouteLength)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyModuleUIComponent", "SetRoute");

	Params::PyModuleUIComponent_SetRoute Parms{};

	Parms.RouteLength = std::move(RouteLength);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyModuleUIComponent.PyModuleUIComponent.ChangeControlColor
// (Net, Native, NetMulticast, Public, BlueprintCallable)
// Parameters:
// class FString                           UI_NAME                                                (Parm, ZeroConstructor, HasGetValueTypeHash)
// EOwnershipType                          OwnerSide                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPyModuleUIComponent::ChangeControlColor(const class FString& UI_NAME, EOwnershipType OwnerSide)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyModuleUIComponent", "ChangeControlColor");

	Params::PyModuleUIComponent_ChangeControlColor Parms{};

	Parms.UI_NAME = std::move(UI_NAME);
	Parms.OwnerSide = OwnerSide;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyModuleUIComponent.PyModuleUIComponent.SetSplineColor
// (Net, Native, NetMulticast, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UMarvelSplineComponent*           MarvelSpline                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPyModuleUIComponent::SetSplineColor(class UMarvelSplineComponent* MarvelSpline, const struct FVector& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyModuleUIComponent", "SetSplineColor");

	Params::PyModuleUIComponent_SetSplineColor Parms{};

	Parms.MarvelSpline = MarvelSpline;
	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyModuleUIComponent.PyModuleUIComponent.ControlActorIndicator
// (Net, Native, NetMulticast, Public, BlueprintCallable)
// Parameters:
// class FString                           ActorName                                              (Parm, ZeroConstructor, HasGetValueTypeHash)
// bool                                    Hiddden                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPyModuleUIComponent::ControlActorIndicator(const class FString& ActorName, bool Hiddden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyModuleUIComponent", "ControlActorIndicator");

	Params::PyModuleUIComponent_ControlActorIndicator Parms{};

	Parms.ActorName = std::move(ActorName);
	Parms.Hiddden = Hiddden;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyModuleUIComponent.PyModuleUIComponent.SetOvertime
// (Net, Native, NetMulticast, Public, BlueprintCallable)
// Parameters:
// float                                   OvertimeRemaining                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// float                                   OvertimeDuration                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPyModuleUIComponent::SetOvertime(float OvertimeRemaining, float OvertimeDuration)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyModuleUIComponent", "SetOvertime");

	Params::PyModuleUIComponent_SetOvertime Parms{};

	Parms.OvertimeRemaining = OvertimeRemaining;
	Parms.OvertimeDuration = OvertimeDuration;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyModuleUIComponent.PyWidget_ModuleIndicator.Construct
// (BlueprintCosmetic, Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UPyWidget_ModuleIndicator::Construct()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyWidget_ModuleIndicator", "Construct");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyModuleUIComponent.PyWC_Module.ReceiveBeginPlay
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UPyWC_Module::ReceiveBeginPlay()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyWC_Module", "ReceiveBeginPlay");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyModuleUIComponent.PyWC_Module.ReceiveTick
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// float                                   DeltaTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPyWC_Module::ReceiveTick(float DeltaTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyWC_Module", "ReceiveTick");

	Params::PyWC_Module_ReceiveTick Parms{};

	Parms.DeltaTime = DeltaTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyModuleUIComponent.PyWC_Module.SetIndicatorVisible
// (Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Visibility                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPyWC_Module::SetIndicatorVisible(bool Visibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyWC_Module", "SetIndicatorVisible");

	Params::PyWC_Module_SetIndicatorVisible Parms{};

	Parms.Visibility = Visibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

