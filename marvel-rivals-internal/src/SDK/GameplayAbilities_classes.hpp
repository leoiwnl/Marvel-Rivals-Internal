#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: GameplayAbilities

#include "Basic.hpp"

#include "GameplayTasks_classes.hpp"
#include "Engine_structs.hpp"
#include "Engine_classes.hpp"
#include "GameplayAbilities_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "MovieScene_classes.hpp"


namespace SDK
{

// Class GameplayAbilities.GameplayEffectComponent
// 0x0000 (0x0030 - 0x0030)
class UGameplayEffectComponent : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayEffectComponent">();
	}
	static class UGameplayEffectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayEffectComponent>();
	}
};

// Class GameplayAbilities.BlockAbilityTagsGameplayEffectComponent
// 0x0138 (0x0168 - 0x0030)
class UBlockAbilityTagsGameplayEffectComponent final : public UGameplayEffectComponent
{
public:
	struct FInheritedTagContainer                 InheritableBlockedAbilityTagsContainer;            // 0x0030(0x0138)(Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"BlockAbilityTagsGameplayEffectComponent">();
	}
	static class UBlockAbilityTagsGameplayEffectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UBlockAbilityTagsGameplayEffectComponent>();
	}
};

// Class GameplayAbilities.PoolFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UPoolFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PoolFunctionLibrary">();
	}
	static class UPoolFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPoolFunctionLibrary>();
	}
};

// Class GameplayAbilities.AbilitySystemDebugHUD
// 0x0000 (0x0580 - 0x0580)
class AAbilitySystemDebugHUD final : public AHUD
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilitySystemDebugHUD">();
	}
	static class AAbilitySystemDebugHUD* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAbilitySystemDebugHUD>();
	}
};

// Class GameplayAbilities.AbilityTask
// 0x0160 (0x01D8 - 0x0078)
class UAbilityTask : public UGameplayTask
{
public:
	uint8                                         Pad_78[0x38];                                      // 0x0078(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bValidCounter;                                     // 0x00B0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayAbility*                       Ability;                                           // 0x00B8(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TWeakObjectPtr<class UAbilitySystemComponent> AbilitySystemComponent;                            // 0x00C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FPredictionKey                         TaskPredictionKey;                                 // 0x00C8(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FPredictionKey>                 WaitingKeys;                                       // 0x0168(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	TArray<class FString>                         LockingAbilityKeys;                                // 0x0178(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPublic)
	int32                                         WaitData;                                          // 0x0188(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_18C[0x1];                                      // 0x018C(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	uint8                                         WaitStateBitMask;                                  // 0x018D(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bWasSuccessfullyDestroyed : 1;                     // 0x018E(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	bool                                          bWithAbility;                                      // 0x018F(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GATaskName;                                        // 0x0190(0x000C)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19C[0x3C];                                     // 0x019C(0x003C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask* K2_NewAbilityTask(class UClass* TaskClass, class UGameplayAbility* ThisAbility, class FName InInstanceName);

	void K2_OnActivate();
	void K2_OnDestroy();

	bool IsForRemoteClient() const;
	bool IsForRunAlone() const;
	bool IsLocallyControlled() const;
	bool IsLocallyControlledPlayer() const;
	bool IsNetAutonomousOrHasLocalNetOwner() const;
	bool IsPredictingClient() const;
	bool ShouldBroadcastAbilityTaskDelegates() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask">();
	}
	static class UAbilityTask* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitDelay
// 0x0030 (0x0208 - 0x01D8)
class UAbilityTask_WaitDelay final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void()>              OnFinish;                                          // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x01E8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	float                                         TimeStarted;                                       // 0x01EC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1F0[0x18];                                     // 0x01F0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_WaitDelay* WaitDelay(class UGameplayAbility* OwningAbility, float Time_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitDelay">();
	}
	static class UAbilityTask_WaitDelay* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitDelay>();
	}
};

// Class GameplayAbilities.AbilitiesGameplayEffectComponent
// 0x0010 (0x0040 - 0x0030)
class UAbilitiesGameplayEffectComponent final : public UGameplayEffectComponent
{
public:
	TArray<struct FGameplayAbilitySpecConfig>     GrantAbilityConfigs;                               // 0x0030(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilitiesGameplayEffectComponent">();
	}
	static class UAbilitiesGameplayEffectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilitiesGameplayEffectComponent>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitGameplayTag
// 0x0028 (0x0200 - 0x01D8)
class UAbilityTask_WaitGameplayTag : public UAbilityTask
{
public:
	struct FGameplayTag                           Tag;                                               // 0x01D8(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegisteredCallback;                                // 0x01E4(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E5[0x3];                                      // 0x01E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                OptionalExternalTarget;                            // 0x01E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseExternalTarget;                                 // 0x01F0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          OnlyTriggerOnce;                                   // 0x01F1(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1F2[0xE];                                      // 0x01F2(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void GameplayTagCallback(const struct FGameplayTag& Tag_0, int32 NewCount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitGameplayTag">();
	}
	static class UAbilityTask_WaitGameplayTag* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitGameplayTag>();
	}
};

// Class GameplayAbilities.GameplayEffectUIData
// 0x0000 (0x0030 - 0x0030)
class UGameplayEffectUIData : public UGameplayEffectComponent
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayEffectUIData">();
	}
	static class UGameplayEffectUIData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayEffectUIData>();
	}
};

// Class GameplayAbilities.GameplayAbilityTargetActor
// 0x02A0 (0x0730 - 0x0490)
class AGameplayAbilityTargetActor : public AActor
{
public:
	bool                                          ShouldProduceTargetDataOnServer;                   // 0x0490(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_491[0xF];                                      // 0x0491(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityTargetingLocationInfo  StartLocation;                                     // 0x04A0(0x00B0)(BlueprintVisible, BlueprintReadOnly, Net, ContainsInstancedReference, ExposeOnSpawn, NativeAccessSpecifierPublic)
	uint8                                         Pad_550[0x30];                                     // 0x0550(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PrimaryPC;                                         // 0x0580(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UGameplayAbility*                       OwningAbility;                                     // 0x0588(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyOnConfirmation;                            // 0x0590(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bDestroyOnCancel;                                  // 0x0591(0x0001)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_592[0x6];                                      // 0x0592(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 SourceActor;                                       // 0x0598(0x0008)(BlueprintVisible, BlueprintReadOnly, Net, ZeroConstructor, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5A0[0x30];                                     // 0x05A0(0x0030)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bDebug;                                            // 0x05D0(0x0001)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5D1[0x7];                                      // 0x05D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                GenericDelegateBoundASC;                           // 0x05D8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5E0[0x150];                                    // 0x05E0(0x0150)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CancelTargeting(int32 InputID);
	void ClientConfirmTargetingAndContinue();
	void ConfirmTargeting(int32 InputID);
	void OnRep_InitSourceActor();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayAbilityTargetActor">();
	}
	static class AGameplayAbilityTargetActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameplayAbilityTargetActor>();
	}
};

// Class GameplayAbilities.AbilityTask_PlayMontageAndWait
// 0x0090 (0x0268 - 0x01D8)
class UAbilityTask_PlayMontageAndWait final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void()>              OnCompleted;                                       // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnBlendOut;                                        // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnInterrupted;                                     // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCancelled;                                       // 0x0208(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_218[0x28];                                     // 0x0218(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           MontageToPlay;                                     // 0x0240(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Rate;                                              // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   StartSection;                                      // 0x024C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         AnimRootMotionTranslationScale;                    // 0x0258(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StartTimeSeconds;                                  // 0x025C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bStopWhenAbilityEnds;                              // 0x0260(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bAllowInterruptAfterBlendOut;                      // 0x0261(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_262[0x6];                                      // 0x0262(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_PlayMontageAndWait* CreatePlayMontageAndWaitProxy(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, class UAnimMontage* MontageToPlay_0, float Rate_0, class FName StartSection_0, bool bStopWhenAbilityEnds_0, float AnimRootMotionTranslationScale_0, float StartTimeSeconds_0, bool bAllowInterruptAfterBlendOut_0);

	void OnGameplayAbilityCancelled();
	void OnMontageBlendingOut(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageEnded(class UAnimMontage* Montage, bool bInterrupted);
	void OnMontageInterrupted();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_PlayMontageAndWait">();
	}
	static class UAbilityTask_PlayMontageAndWait* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_PlayMontageAndWait>();
	}
};

// Class GameplayAbilities.AbilityTask_ApplyRootMotion_Base
// 0x0070 (0x0248 - 0x01D8)
class UAbilityTask_ApplyRootMotion_Base : public UAbilityTask
{
public:
	uint8                                         Pad_1D8[0x8];                                      // 0x01D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   ForceName;                                         // 0x01E0(0x000C)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ERootMotionFinishVelocityMode                 FinishVelocityMode;                                // 0x01EC(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                FinishSetVelocity;                                 // 0x01F0(0x0018)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         FinishClampVelocity;                               // 0x0208(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_20C[0x4];                                      // 0x020C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCharacterMovementComponent*            MovementComponent;                                 // 0x0210(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint16                                        RootMotionSourceID;                                // 0x0218(0x0002)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsFinished;                                       // 0x021A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_21B[0x1];                                      // 0x021B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x021C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         EndTime;                                           // 0x0220(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_224[0x4];                                      // 0x0224(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 PredictionID;                                      // 0x0228(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class ACharacter*                             CharacterOwner;                                    // 0x0238(0x0008)(ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsForRemoteClient;                                // 0x0240(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsBoundToMovementDelegate;                        // 0x0241(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_242[0x6];                                      // 0x0242(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void CheckRootMotionValidAfterMoveUpdated(float DeltaSeconds, const struct FVector& OldLocation, const struct FVector& OldVelocity);
	void CheckRootMotionValidBeforeMove(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_ApplyRootMotion_Base">();
	}
	static class UAbilityTask_ApplyRootMotion_Base* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_ApplyRootMotion_Base>();
	}
};

// Class GameplayAbilities.AbilityTask_ApplyRootMotionConstantForce
// 0x0048 (0x0290 - 0x0248)
class UAbilityTask_ApplyRootMotionConstantForce final : public UAbilityTask_ApplyRootMotion_Base
{
public:
	TMulticastInlineDelegate<void(ERootMotionTaskEndReason RootMotionEndReason)> OnFinish;                                          // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FVector                                WorldDirection;                                    // 0x0258(0x0018)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Strength;                                          // 0x0270(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Duration;                                          // 0x0274(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsAdditive;                                       // 0x0278(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_279[0x7];                                      // 0x0279(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            StrengthOverTime;                                  // 0x0280(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableGravity;                                    // 0x0288(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_289[0x7];                                      // 0x0289(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_ApplyRootMotionConstantForce* ApplyRootMotionConstantForce(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const struct FVector& WorldDirection_0, float Strength_0, float Duration_0, bool bIsAdditive_0, class UCurveFloat* StrengthOverTime_0, ERootMotionFinishVelocityMode VelocityOnFinishMode, const struct FVector& SetVelocityOnFinish, float ClampVelocityOnFinish, bool bEnableGravity_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_ApplyRootMotionConstantForce">();
	}
	static class UAbilityTask_ApplyRootMotionConstantForce* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_ApplyRootMotionConstantForce>();
	}
};

// Class GameplayAbilities.GameplayEffect
// 0x1350 (0x1380 - 0x0030)
class UGameplayEffect : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	EGameplayEffectDurationType                   DurationPolicy;                                    // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectModifierMagnitude       DurationMagnitude;                                 // 0x0040(0x0300)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         Period;                                            // 0x0340(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bExecutePeriodicEffectOnApplication;               // 0x0378(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayEffectPeriodInhibitionRemovedPolicy  PeriodicInhibitionPolicy;                          // 0x0379(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37A[0x6];                                      // 0x037A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayModifierInfo>          Modifiers;                                         // 0x0380(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FGameplayEffectExecutionDefinition> Executions;                                        // 0x0390(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FScalableFloat                         ChanceToApplyToTarget;                             // 0x03A0(0x0038)(Deprecated, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffectCustomApplicationRequirement>> ApplicationRequirements;                           // 0x03D8(0x0010)(ZeroConstructor, Deprecated, UObjectWrapper, NativeAccessSpecifierPublic)
	TSubclassOf<class UGameplayEffectCustomStackRequirement> StackRequirements;                                 // 0x03E8(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    TargetEffectClasses;                               // 0x03F0(0x0010)(ZeroConstructor, Deprecated, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FConditionalGameplayEffect>     ConditionalGameplayEffects;                        // 0x0400(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    OverflowEffects;                                   // 0x0410(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bDenyOverflowApplication;                          // 0x0420(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bClearStackOnOverflow;                             // 0x0421(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_422[0x6];                                      // 0x0422(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UGameplayEffect>>    PrematureExpirationEffectClasses;                  // 0x0428(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    RoutineExpirationEffectClasses;                    // 0x0438(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	bool                                          bModifierCleanAutoRemove;                          // 0x0448(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bRequireModifierSuccessToTriggerCues;              // 0x0449(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuppressStackingCues;                             // 0x044A(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44B[0x5];                                      // 0x044B(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayEffectCue>             GameplayCues;                                      // 0x0450(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	class UGameplayEffectUIData*                  UIData;                                            // 0x0460(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, Transient, InstancedReference, NoDestructor, PersistentInstance, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EffectPriority;                                    // 0x0468(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_46C[0x4];                                      // 0x046C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FInheritedTagContainer                 InheritableGameplayEffectTags;                     // 0x0470(0x0138)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FInheritedTagContainer                 InheritableOwnedTagsContainer;                     // 0x05A8(0x0138)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FInheritedTagContainer                 InheritableBlockedAbilityTagsContainer;            // 0x06E0(0x0138)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               OngoingTagRequirements;                            // 0x0818(0x0118)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               ApplicationTagRequirements;                        // 0x0930(0x0118)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               RemovalTagRequirements;                            // 0x0A48(0x0118)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FInheritedTagContainer                 RemoveGameplayEffectsWithTags;                     // 0x0B60(0x0138)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  CancelAbilitiesWithTag;                            // 0x0C98(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  BlockAbilitiesWithTag;                             // 0x0D00(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               GrantedApplicationImmunityTags;                    // 0x0D68(0x0118)(BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	struct FGameplayEffectQuery                   GrantedApplicationImmunityQuery;                   // 0x0E80(0x01C0)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_1040[0x8];                                     // 0x1040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayEffectQuery                   RemoveGameplayEffectQuery;                         // 0x1048(0x01C0)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, NativeAccessSpecifierPublic)
	uint8                                         Pad_1208[0x11];                                    // 0x1208(0x0011)(Fixing Size After Last Property [ Dumper-7 ])
	EGameplayEffectStackingType                   StackingType;                                      // 0x1219(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Coexist;                                           // 0x121A(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_121B[0x1];                                     // 0x121B(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StackLimitCount;                                   // 0x121C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayEffectStackingDurationPolicy         StackDurationRefreshPolicy;                        // 0x1220(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayEffectStackingPeriodPolicy           StackPeriodResetPolicy;                            // 0x1221(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EGameplayEffectStackingExpirationPolicy       StackExpirationPolicy;                             // 0x1222(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1223[0x5];                                     // 0x1223(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayAbilitySpecDef>        GrantedAbilities;                                  // 0x1228(0x0010)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_1238[0x138];                                   // 0x1238(0x0138)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGameplayEffectComponent*>       GEComponents;                                      // 0x1370(0x0010)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, Protected, UObjectWrapper, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayEffect">();
	}
	static class UGameplayEffect* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayEffect>();
	}
};

// Class GameplayAbilities.AdditionalEffectsGameplayEffectComponent
// 0x0048 (0x0078 - 0x0030)
class UAdditionalEffectsGameplayEffectComponent final : public UGameplayEffectComponent
{
public:
	bool                                          bOnApplicationCopyDataFromOriginalSpec;            // 0x0030(0x0001)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FConditionalGameplayEffect>     OnApplicationGameplayEffects;                      // 0x0038(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    OnCompleteAlways;                                  // 0x0048(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    OnCompleteNormal;                                  // 0x0058(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    OnCompletePrematurely;                             // 0x0068(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AdditionalEffectsGameplayEffectComponent">();
	}
	static class UAdditionalEffectsGameplayEffectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAdditionalEffectsGameplayEffectComponent>();
	}
};

// Class GameplayAbilities.AssetTagsGameplayEffectComponent
// 0x0138 (0x0168 - 0x0030)
class UAssetTagsGameplayEffectComponent final : public UGameplayEffectComponent
{
public:
	struct FInheritedTagContainer                 InheritableAssetTags;                              // 0x0030(0x0138)(Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AssetTagsGameplayEffectComponent">();
	}
	static class UAssetTagsGameplayEffectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAssetTagsGameplayEffectComponent>();
	}
};

// Class GameplayAbilities.ChanceToApplyGameplayEffectComponent
// 0x0038 (0x0068 - 0x0030)
class UChanceToApplyGameplayEffectComponent final : public UGameplayEffectComponent
{
public:
	struct FScalableFloat                         ChanceToApplyToTarget;                             // 0x0030(0x0038)(Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ChanceToApplyGameplayEffectComponent">();
	}
	static class UChanceToApplyGameplayEffectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UChanceToApplyGameplayEffectComponent>();
	}
};

// Class GameplayAbilities.CustomCanApplyGameplayEffectComponent
// 0x0010 (0x0040 - 0x0030)
class UCustomCanApplyGameplayEffectComponent final : public UGameplayEffectComponent
{
public:
	TArray<TSubclassOf<class UGameplayEffectCustomApplicationRequirement>> ApplicationRequirements;                           // 0x0030(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CustomCanApplyGameplayEffectComponent">();
	}
	static class UCustomCanApplyGameplayEffectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCustomCanApplyGameplayEffectComponent>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitConfirm
// 0x0028 (0x0200 - 0x01D8)
class UAbilityTask_WaitConfirm final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void()>              OnConfirm;                                         // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          RegisteredCallback;                                // 0x01E8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1E9[0xF];                                      // 0x01E9(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         StartTime;                                         // 0x01F8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_WaitConfirm* WaitConfirm(class UGameplayAbility* OwningAbility);

	void OnConfirmCallback(class UGameplayAbility* InAbility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitConfirm">();
	}
	static class UAbilityTask_WaitConfirm* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitConfirm>();
	}
};

// Class GameplayAbilities.GameplayAttributeGlobals
// 0x0038 (0x0068 - 0x0030)
class UGameplayAttributeGlobals : public UObject
{
public:
	struct FSoftClassPath                         GameplayAttributeGlobalsClassName;                 // 0x0030(0x0028)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58[0x10];                                      // 0x0058(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayAttributeGlobals">();
	}
	static class UGameplayAttributeGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayAttributeGlobals>();
	}
};

// Class GameplayAbilities.GameplayEffectCustomStackRequirement
// 0x0000 (0x0030 - 0x0030)
class UGameplayEffectCustomStackRequirement final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayEffectCustomStackRequirement">();
	}
	static class UGameplayEffectCustomStackRequirement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayEffectCustomStackRequirement>();
	}
};

// Class GameplayAbilities.GameplayEffectUIData_TextOnly
// 0x0018 (0x0048 - 0x0030)
class UGameplayEffectUIData_TextOnly final : public UGameplayEffectUIData
{
public:
	class FText                                   Description;                                       // 0x0030(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayEffectUIData_TextOnly">();
	}
	static class UGameplayEffectUIData_TextOnly* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayEffectUIData_TextOnly>();
	}
};

// Class GameplayAbilities.ImmunityGameplayEffectComponent
// 0x0010 (0x0040 - 0x0030)
class UImmunityGameplayEffectComponent final : public UGameplayEffectComponent
{
public:
	TArray<struct FGameplayEffectQuery>           ImmunityQueries;                                   // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ImmunityGameplayEffectComponent">();
	}
	static class UImmunityGameplayEffectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UImmunityGameplayEffectComponent>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitInputPress
// 0x00B8 (0x0290 - 0x01D8)
class UAbilityTask_WaitInputPress final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(float TimeWaited)> OnPress;                                           // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x01E8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTestInitialState;                                 // 0x01EC(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         PressKey;                                          // 0x01F0(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UAbilityTask_WaitInputPress* WaitInputPress(class UGameplayAbility* OwningAbility, bool bTestAlreadyPressed);

	void OnLocalPressCallback();
	void OnPressCallback(float Duration);
	void OnReplicatePressCallback(const struct FGameplayAbilityTargetDataHandle& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitInputPress">();
	}
	static class UAbilityTask_WaitInputPress* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitInputPress>();
	}
};

// Class GameplayAbilities.PredictionFuncLibrary
// 0x0000 (0x0030 - 0x0030)
class UPredictionFuncLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool GetReplicatedData_ArrayHit(const struct FPredictionDynamicParamHandle& InHandle, TArray<struct FHitResult>* OutData);
	static bool GetReplicatedData_ArrayInt(const struct FPredictionDynamicParamHandle& InHandle, TArray<int32>* OutData);
	static bool GetReplicatedData_ArrayObject(const struct FPredictionDynamicParamHandle& InHandle, TArray<class UObject*>* OutData);
	static bool GetReplicatedData_Float(const struct FPredictionDynamicParamHandle& InHandle, float* OutData);
	static bool GetReplicatedData_Hit(const struct FPredictionDynamicParamHandle& InHandle, struct FHitResult* OutData);
	static bool GetReplicatedData_Int(const struct FPredictionDynamicParamHandle& InHandle, int32* OutData);
	static bool GetReplicatedData_Vector(const struct FPredictionDynamicParamHandle& InHandle, struct FVector* OutData);
	static struct FPredictionDynamicParamHandle MakeReplicatedData_ArrayHit(const TArray<struct FHitResult>& InParam);
	static struct FPredictionDynamicParamHandle MakeReplicatedData_ArrayInt(const TArray<int32>& InParam);
	static struct FPredictionDynamicParamHandle MakeReplicatedData_ArrayObject(const TArray<class UObject*>& InParam);
	static struct FPredictionDynamicParamHandle MakeReplicatedData_Float(float InParam);
	static struct FPredictionDynamicParamHandle MakeReplicatedData_Hit(const struct FHitResult& InParam);
	static struct FPredictionDynamicParamHandle MakeReplicatedData_Int(int32 InParam);
	static struct FPredictionDynamicParamHandle MakeReplicatedData_Vector(const struct FVector& InParam);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"PredictionFuncLibrary">();
	}
	static class UPredictionFuncLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UPredictionFuncLibrary>();
	}
};

// Class GameplayAbilities.RemoveOtherGameplayEffectComponent
// 0x0010 (0x0040 - 0x0030)
class URemoveOtherGameplayEffectComponent final : public UGameplayEffectComponent
{
public:
	TArray<struct FGameplayEffectQuery>           RemoveGameplayEffectQueries;                       // 0x0030(0x0010)(Edit, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, ContainsInstancedReference, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"RemoveOtherGameplayEffectComponent">();
	}
	static class URemoveOtherGameplayEffectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<URemoveOtherGameplayEffectComponent>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitGameplayEffectStackChange
// 0x0038 (0x0210 - 0x01D8)
class UAbilityTask_WaitGameplayEffectStackChange final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(const struct FActiveGameplayEffectHandle& Handle, int32 NewCount, int32 OldCount)> OnChange;                                          // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(const struct FActiveGameplayEffectHandle& Handle, int32 NewCount, int32 OldCount)> InvalidHandle;                                     // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F8[0x8];                                      // 0x01F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Registered;                                        // 0x0200(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_201[0xF];                                      // 0x0201(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_WaitGameplayEffectStackChange* WaitForGameplayEffectStackChange(class UGameplayAbility* OwningAbility, const struct FActiveGameplayEffectHandle& Handle);

	void OnGameplayEffectStackChange(const struct FActiveGameplayEffectHandle& Handle, int32 NewCount, int32 OldCount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitGameplayEffectStackChange">();
	}
	static class UAbilityTask_WaitGameplayEffectStackChange* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitGameplayEffectStackChange>();
	}
};

// Class GameplayAbilities.TargetTagRequirementsGameplayEffectComponent
// 0x0348 (0x0378 - 0x0030)
class UTargetTagRequirementsGameplayEffectComponent final : public UGameplayEffectComponent
{
public:
	struct FGameplayTagRequirements               ApplicationTagRequirements;                        // 0x0030(0x0118)(Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               OngoingTagRequirements;                            // 0x0148(0x0118)(Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               RemovalTagRequirements;                            // 0x0260(0x0118)(Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TargetTagRequirementsGameplayEffectComponent">();
	}
	static class UTargetTagRequirementsGameplayEffectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTargetTagRequirementsGameplayEffectComponent>();
	}
};

// Class GameplayAbilities.TargetTagsGameplayEffectComponent
// 0x0138 (0x0168 - 0x0030)
class UTargetTagsGameplayEffectComponent final : public UGameplayEffectComponent
{
public:
	struct FInheritedTagContainer                 InheritableGrantedTagsContainer;                   // 0x0030(0x0138)(Edit, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TargetTagsGameplayEffectComponent">();
	}
	static class UTargetTagsGameplayEffectComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTargetTagsGameplayEffectComponent>();
	}
};

// Class GameplayAbilities.AbilityAsync
// 0x0008 (0x0040 - 0x0038)
class UAbilityAsync : public UCancellableAsyncAction
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void EndAction();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityAsync">();
	}
	static class UAbilityAsync* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityAsync>();
	}
};

// Class GameplayAbilities.AbilityAsync_WaitAttributeChanged
// 0x0060 (0x00A0 - 0x0040)
class UAbilityAsync_WaitAttributeChanged final : public UAbilityAsync
{
public:
	TMulticastInlineDelegate<void(const struct FGameplayAttribute& Attribute, float NewValue, float OldValue)> Changed;                                           // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x50];                                      // 0x0050(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityAsync_WaitAttributeChanged* WaitForAttributeChanged(class AActor* TargetActor, const struct FGameplayAttribute& Attribute, bool OnlyTriggerOnce);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityAsync_WaitAttributeChanged">();
	}
	static class UAbilityAsync_WaitAttributeChanged* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityAsync_WaitAttributeChanged>();
	}
};

// Class GameplayAbilities.AbilityAsync_WaitGameplayEffectApplied
// 0x0270 (0x02B0 - 0x0040)
class UAbilityAsync_WaitGameplayEffectApplied final : public UAbilityAsync
{
public:
	TMulticastInlineDelegate<void(class AActor* Source, const struct FGameplayEffectSpecHandle& SpecHandle, const struct FActiveGameplayEffectHandle& ActiveHandle)> OnApplied;                                         // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x260];                                     // 0x0050(0x0260)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityAsync_WaitGameplayEffectApplied* WaitGameplayEffectAppliedToActor(class AActor* TargetActor, const struct FGameplayTargetDataFilterHandle& SourceFilter, const struct FGameplayTagRequirements& SourceTagRequirements, const struct FGameplayTagRequirements& TargetTagRequirements, bool TriggerOnce, bool ListenForPeriodicEffect);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityAsync_WaitGameplayEffectApplied">();
	}
	static class UAbilityAsync_WaitGameplayEffectApplied* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityAsync_WaitGameplayEffectApplied>();
	}
};

// Class GameplayAbilities.AbilityAsync_WaitGameplayEvent
// 0x0028 (0x0068 - 0x0040)
class UAbilityAsync_WaitGameplayEvent final : public UAbilityAsync
{
public:
	TMulticastInlineDelegate<void(const struct FGameplayEventData& Payload)> EventReceived;                                     // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_50[0x18];                                      // 0x0050(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityAsync_WaitGameplayEvent* WaitGameplayEventToActor(class AActor* TargetActor, const struct FGameplayTag& EventTag, bool OnlyTriggerOnce, bool OnlyMatchExact);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityAsync_WaitGameplayEvent">();
	}
	static class UAbilityAsync_WaitGameplayEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityAsync_WaitGameplayEvent>();
	}
};

// Class GameplayAbilities.AbilityAsync_WaitGameplayTag
// 0x0020 (0x0060 - 0x0040)
class UAbilityAsync_WaitGameplayTag : public UAbilityAsync
{
public:
	uint8                                         Pad_40[0x20];                                      // 0x0040(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityAsync_WaitGameplayTag">();
	}
	static class UAbilityAsync_WaitGameplayTag* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityAsync_WaitGameplayTag>();
	}
};

// Class GameplayAbilities.AbilityAsync_WaitGameplayTagAdded
// 0x0010 (0x0070 - 0x0060)
class UAbilityAsync_WaitGameplayTagAdded final : public UAbilityAsync_WaitGameplayTag
{
public:
	TMulticastInlineDelegate<void()>              Added;                                             // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UAbilityAsync_WaitGameplayTagAdded* WaitGameplayTagAddToActor(class AActor* TargetActor, const struct FGameplayTag& Tag, bool OnlyTriggerOnce);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityAsync_WaitGameplayTagAdded">();
	}
	static class UAbilityAsync_WaitGameplayTagAdded* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityAsync_WaitGameplayTagAdded>();
	}
};

// Class GameplayAbilities.AbilityAsync_WaitGameplayTagRemoved
// 0x0010 (0x0070 - 0x0060)
class UAbilityAsync_WaitGameplayTagRemoved final : public UAbilityAsync_WaitGameplayTag
{
public:
	TMulticastInlineDelegate<void()>              Removed;                                           // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UAbilityAsync_WaitGameplayTagRemoved* WaitGameplayTagRemoveFromActor(class AActor* TargetActor, const struct FGameplayTag& Tag, bool OnlyTriggerOnce);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityAsync_WaitGameplayTagRemoved">();
	}
	static class UAbilityAsync_WaitGameplayTagRemoved* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityAsync_WaitGameplayTagRemoved>();
	}
};

// Class GameplayAbilities.AbilityAsync_WaitGameplayTagQuery
// 0x0118 (0x0158 - 0x0040)
class UAbilityAsync_WaitGameplayTagQuery final : public UAbilityAsync
{
public:
	uint8                                         Pad_40[0x108];                                     // 0x0040(0x0108)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              Triggered;                                         // 0x0148(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)

public:
	static class UAbilityAsync_WaitGameplayTagQuery* WaitGameplayTagQueryOnActor(class AActor* TargetActor, const struct FGameplayTagQuery& TagQuery, const EWaitGameplayTagQueryTriggerCondition TriggerCondition, const bool bOnlyTriggerOnce);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityAsync_WaitGameplayTagQuery">();
	}
	static class UAbilityAsync_WaitGameplayTagQuery* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityAsync_WaitGameplayTagQuery>();
	}
};

// Class GameplayAbilities.GameplayAbility
// 0x0D60 (0x0D90 - 0x0030)
class UGameplayAbility : public UObject
{
public:
	uint8                                         Pad_30[0x220];                                     // 0x0030(0x0220)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  AbilityTags;                                       // 0x0250(0x0068)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	bool                                          bReplicateInputDirectly;                           // 0x02B8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RemoteInstanceEnded;                               // 0x02B9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2BA[0x6];                                      // 0x02BA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<int32, class AActor*>                    RemoteActorMap;                                    // 0x02C0(0x0050)(NativeAccessSpecifierPublic)
	uint8                                         Pad_310[0x4];                                      // 0x0310(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	EGameplayAbilityReplicationPolicy             ReplicationPolicy;                                 // 0x0314(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EGameplayAbilityInstancingPolicy              InstancingPolicy;                                  // 0x0315(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bServerRespectsRemoteAbilityCancellation;          // 0x0316(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRetriggerInstancedAbility;                        // 0x0317(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayAbilityActivationInfo         CurrentActivationInfo;                             // 0x0318(0x0298)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	struct FGameplayEventData                     CurrentEventData;                                  // 0x05B0(0x0290)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	EGameplayAbilityNetExecutionPolicy            NetExecutionPolicy;                                // 0x0840(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bEnableActivationBuffer;                           // 0x0841(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bKeepKeyExpiredImmediatelyWhenEndAbility;          // 0x0842(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EGameplayAbilityNetSecurityPolicy             NetSecurityPolicy;                                 // 0x0843(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         CancelAllowedPolicy;                               // 0x0844(0x0004)(BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            CostGameplayEffectClass;                           // 0x0848(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FAbilityTriggerData>            AbilityTriggers;                                   // 0x0850(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	TSubclassOf<class UGameplayEffect>            CooldownGameplayEffectClass;                       // 0x0860(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  CancelAbilitiesWithTag;                            // 0x0868(0x0068)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  BlockAbilitiesWithTag;                             // 0x08D0(0x0068)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  ActivationOwnedTags;                               // 0x0938(0x0068)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  ActivationRequiredTags;                            // 0x09A0(0x0068)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  ActivationBlockedTags;                             // 0x0A08(0x0068)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  ActivationRequiredAnyTags;                         // 0x0A70(0x0068)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  SourceRequiredTags;                                // 0x0AD8(0x0068)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  SourceBlockedTags;                                 // 0x0B40(0x0068)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  TargetRequiredTags;                                // 0x0BA8(0x0068)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayTagContainer                  TargetBlockedTags;                                 // 0x0C10(0x0068)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_C78[0x20];                                     // 0x0C78(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGameplayTask*>                  ActiveTasks;                                       // 0x0C98(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_CA8[0x10];                                     // 0x0CA8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UAnimMontage*                           CurrentMontage;                                    // 0x0CB8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_CC0[0x60];                                     // 0x0CC0(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bIsActive;                                         // 0x0D20(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsAbilityEnding;                                  // 0x0D21(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsCancelable;                                     // 0x0D22(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsAbilityCancelling;                              // 0x0D23(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsBlockingOtherAbilities;                         // 0x0D24(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D25[0x13];                                     // 0x0D25(0x0013)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bMarkPendingKillOnAbilityEnd;                      // 0x0D38(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_D39[0x4F];                                     // 0x0D39(0x004F)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          IsImportantLog;                                    // 0x0D88(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D89[0x7];                                      // 0x0D89(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddAbilityOperationTag(const struct FGameplayTag& InTag);
	void BothTimelineAndMontageJumpToSection(class FName SectionName);
	struct FActiveGameplayEffectHandle BP_ApplyGameplayEffectToOwner(TSubclassOf<class UGameplayEffect> GameplayEffectClass, int32 GameplayEffectLevel, int32 Stacks);
	TArray<struct FActiveGameplayEffectHandle> BP_ApplyGameplayEffectToTarget(const struct FGameplayAbilityTargetDataHandle& TargetData, TSubclassOf<class UGameplayEffect> GameplayEffectClass, int32 GameplayEffectLevel, int32 Stacks);
	void BP_RemoveGameplayEffectFromOwnerWithAssetTags(const struct FGameplayTagContainer& WithAssetTags, int32 StacksToRemove);
	void BP_RemoveGameplayEffectFromOwnerWithGrantedTags(const struct FGameplayTagContainer& WithGrantedTags, int32 StacksToRemove);
	void BP_RemoveGameplayEffectFromOwnerWithHandle(const struct FActiveGameplayEffectHandle& Handle, int32 StacksToRemove);
	bool CanAddToActivateBuffer(const class FString& ActivateKey);
	void CancelTaskByInstanceName(class FName InstanceName);
	void ConfirmTaskByInstanceName(class FName InstanceName, bool bEndTask);
	void CurrentTimelineJumpToSection(class FName SectionName);
	void EndAbilityState(class FName OptionalStateNameToEnd);
	void EndTaskByInstanceName(class FName InstanceName);
	TArray<class FString> GetCustomActivationDependentKeys();
	class UGameplayAbility* GetSourceAbility();
	void K2_ActivateAbility();
	void K2_ActivateAbilityFromEvent(const struct FGameplayEventData& EventData);
	void K2_AddGameplayCue(const struct FGameplayTag& GameplayCueTag, const struct FGameplayEffectContextHandle& Context, bool bRemoveOnAbilityEnd);
	void K2_AddGameplayCueWithParams(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameter, bool bRemoveOnAbilityEnd);
	struct FActiveGameplayEffectHandle K2_ApplyGameplayEffectSpecToOwner(const struct FGameplayEffectSpecHandle& EffectSpecHandle);
	TArray<struct FActiveGameplayEffectHandle> K2_ApplyGameplayEffectSpecToTarget(const struct FGameplayEffectSpecHandle& EffectSpecHandle, const struct FGameplayAbilityTargetDataHandle& TargetData);
	void K2_CancelAbility(EAbilityEndReason EndReason);
	bool K2_CheckAbilityCooldown();
	bool K2_CheckAbilityCost();
	bool K2_CommitAbility();
	bool K2_CommitAbilityCooldown(bool BroadcastCommitEvent, bool ForceCooldown);
	bool K2_CommitAbilityCost(bool BroadcastCommitEvent);
	void K2_CommitExecute();
	void K2_EndAbility(EAbilityEndReason EndReason);
	void K2_EndAbilityLocally(EAbilityEndReason EndReason);
	void K2_ExecuteGameplayCue(const struct FGameplayTag& GameplayCueTag, const struct FGameplayEffectContextHandle& Context);
	void K2_ExecuteGameplayCueWithParams(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	void K2_OnClientActivateAbilityRejected(bool bIsCurrentActivation);
	void K2_OnEndAbility(bool bWasCancelled);
	void K2_RemoveGameplayCue(const struct FGameplayTag& GameplayCueTag);
	struct FGameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerActor();
	struct FGameplayAbilityTargetingLocationInfo MakeTargetLocationInfoFromOwnerSkeletalMeshComponent(class FName SocketName);
	void MontageJumpToSection_ThreadSafe(class FName SectionName);
	void MontageSetNextSectionName(class FName FromSectionName, class FName ToSectionName);
	void MontageStop(float OverrideBlendOutTime);
	void RemoveGrantedByEffect();
	void SendGameplayEvent(const struct FGameplayTag& EventTag, const struct FGameplayEventData& Payload);
	void SetCanBeCanceled(bool bCanBeCanceled);
	void SetCancelAllowedPolicy(int32 InPolicy);
	void SetCancelAllowedPolicyDirect(EGACancelType InPolicy);
	void SetShouldBlockOtherAbilities(bool bShouldBlockAbilities);
	void TimelineJumpToSection(class UAnimTimeline* InTimeline, class FName SectionName);
	bool TryMakeTriggerContext(struct FGameplayEventData& EventData);

	EAbilityEndReason GetAbilityEndReason() const;
	int32 GetAbilityLevel() const;
	int32 GetAbilityLevel_BP(const struct FGameplayAbilitySpecHandle& Handle, const struct FGameplayAbilityActorInfo& ActorInfo) const;
	struct FGameplayTagContainer GetAbilityOperationTags() const;
	class UAbilitySystemComponent* GetAbilitySystemComponentFromActorInfo() const;
	struct FGameplayAbilityActorInfo GetActorInfo() const;
	class AActor* GetAvatarActorFromActorInfo() const;
	int32 GetCancelAllowedPolicy() const;
	struct FGameplayEffectContextHandle GetContextFromOwner(const struct FGameplayAbilityTargetDataHandle& OptionalTargetData) const;
	float GetCooldownTimeRemaining() const;
	class UAnimMontage* GetCurrentMontage() const;
	class UObject* GetCurrentSourceObject() const;
	struct FGameplayEffectContextHandle GetGrantedByEffectContext() const;
	class AActor* GetOwningActorFromActorInfo() const;
	class USkeletalMeshComponent* GetOwningComponentFromActorInfo() const;
	class UObject* GetSourceObject_BP(const struct FGameplayAbilitySpecHandle& Handle, const struct FGameplayAbilityActorInfo& ActorInfo) const;
	bool HasAbilityOperationTag(const struct FGameplayTag& InTag) const;
	bool HasRemoteEndContext() const;
	void InvalidateClientPredictionKey() const;
	bool IsForRemoteClient() const;
	bool IsForRunAlone() const;
	bool IsLocallyControlled() const;
	bool IsNetAutonomousOrHasLocalNetOwner() const;
	bool IsPredictingAbility() const;
	bool IsPredictingClient() const;
	bool K2_CanActivateAbility(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayAbilitySpecHandle& Handle, struct FGameplayTagContainer* RelevantTags) const;
	bool K2_HasAuthority() const;
	bool K2_ShouldAbilityRespondToEvent(const struct FGameplayAbilityActorInfo& ActorInfo, const struct FGameplayEventData& Payload) const;
	struct FGameplayEffectSpecHandle MakeOutgoingGameplayEffectSpec(TSubclassOf<class UGameplayEffect> GameplayEffectClass, float Level) const;
	bool RemoteHasAbilityOperationTag(const struct FGameplayTag& InTag) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayAbility">();
	}
	static class UGameplayAbility* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayAbility>();
	}
};

// Class GameplayAbilities.GameplayAbilitySet
// 0x0010 (0x0048 - 0x0038)
class UGameplayAbilitySet final : public UDataAsset
{
public:
	TArray<struct FGameplayAbilityBindInfo>       Abilities;                                         // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayAbilitySet">();
	}
	static class UGameplayAbilitySet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayAbilitySet>();
	}
};

// Class GameplayAbilities.GameplayAbilityTargetActor_Trace
// 0x0020 (0x0750 - 0x0730)
class AGameplayAbilityTargetActor_Trace : public AGameplayAbilityTargetActor
{
public:
	float                                         MaxRange;                                          // 0x0730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCollisionProfileName                  TraceProfile;                                      // 0x0734(0x000C)(Edit, BlueprintVisible, Config, NoDestructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	bool                                          bTraceAffectsAimPitch;                             // 0x0740(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_741[0xF];                                      // 0x0741(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayAbilityTargetActor_Trace">();
	}
	static class AGameplayAbilityTargetActor_Trace* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameplayAbilityTargetActor_Trace>();
	}
};

// Class GameplayAbilities.GameplayAbilityTargetActor_GroundTrace
// 0x0020 (0x0770 - 0x0750)
class AGameplayAbilityTargetActor_GroundTrace : public AGameplayAbilityTargetActor_Trace
{
public:
	float                                         CollisionRadius;                                   // 0x0750(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CollisionHeight;                                   // 0x0754(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_758[0x18];                                     // 0x0758(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayAbilityTargetActor_GroundTrace">();
	}
	static class AGameplayAbilityTargetActor_GroundTrace* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameplayAbilityTargetActor_GroundTrace>();
	}
};

// Class GameplayAbilities.GameplayAbilityTargetActor_ActorPlacement
// 0x0020 (0x0790 - 0x0770)
class AGameplayAbilityTargetActor_ActorPlacement final : public AGameplayAbilityTargetActor_GroundTrace
{
public:
	TSubclassOf<class UObject>                    PlacedActorClass;                                  // 0x0770(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     PlacedActorMaterial;                               // 0x0778(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, ExposeOnSpawn, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_780[0x10];                                     // 0x0780(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayAbilityTargetActor_ActorPlacement">();
	}
	static class AGameplayAbilityTargetActor_ActorPlacement* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameplayAbilityTargetActor_ActorPlacement>();
	}
};

// Class GameplayAbilities.GameplayAbilityTargetActor_Radius
// 0x0010 (0x0740 - 0x0730)
class AGameplayAbilityTargetActor_Radius final : public AGameplayAbilityTargetActor
{
public:
	float                                         Radius;                                            // 0x0730(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_734[0xC];                                      // 0x0734(0x000C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayAbilityTargetActor_Radius">();
	}
	static class AGameplayAbilityTargetActor_Radius* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameplayAbilityTargetActor_Radius>();
	}
};

// Class GameplayAbilities.GameplayAbilityTargetActor_SingleLineTrace
// 0x0000 (0x0750 - 0x0750)
class AGameplayAbilityTargetActor_SingleLineTrace final : public AGameplayAbilityTargetActor_Trace
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayAbilityTargetActor_SingleLineTrace">();
	}
	static class AGameplayAbilityTargetActor_SingleLineTrace* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameplayAbilityTargetActor_SingleLineTrace>();
	}
};

// Class GameplayAbilities.AbilityTask_SpawnActor
// 0x0188 (0x0360 - 0x01D8)
class UAbilityTask_SpawnActor : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(class AActor* SpawnedActor)> Success;                                           // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class AActor* SpawnedActor)> DidNotSpawn;                                       // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F8[0x168];                                    // 0x01F8(0x0168)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_SpawnActor* SpawnActor(class UGameplayAbility* OwningAbility, const struct FGameplayAbilityTargetDataHandle& TargetData, TSubclassOf<class AActor> Class_0);

	bool BeginSpawningActor(class UGameplayAbility* OwningAbility, const struct FGameplayAbilityTargetDataHandle& TargetData, TSubclassOf<class AActor> Class_0, class AActor** SpawnedActor);
	void FinishSpawningActor(class UGameplayAbility* OwningAbility, const struct FGameplayAbilityTargetDataHandle& TargetData, class AActor* SpawnedActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_SpawnActor">();
	}
	static class UAbilityTask_SpawnActor* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_SpawnActor>();
	}
};

// Class GameplayAbilities.GameplayAbilityWorldReticle
// 0x0030 (0x04C0 - 0x0490)
class AGameplayAbilityWorldReticle : public AActor
{
public:
	struct FWorldReticleParameters                Parameters;                                        // 0x0490(0x0018)(Edit, BlueprintVisible, DisableEditOnTemplate, NoDestructor, ExposeOnSpawn, NativeAccessSpecifierPublic)
	bool                                          bFaceOwnerFlat;                                    // 0x04A8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnapToTargetedActor;                              // 0x04A9(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsTargetValid;                                    // 0x04AA(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsTargetAnActor;                                  // 0x04AB(0x0001)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4AC[0x4];                                      // 0x04AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      PrimaryPC;                                         // 0x04B0(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AGameplayAbilityTargetActor*            TargetingActor;                                    // 0x04B8(0x0008)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void FaceTowardSource(bool bFaceIn2D);
	void OnParametersInitialized();
	void OnTargetingAnActor(bool bNewValue);
	void OnValidTargetChanged(bool bNewValue);
	void SetReticleMaterialParamFloat(class FName ParamName, float Value);
	void SetReticleMaterialParamVector(class FName ParamName, const struct FVector& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayAbilityWorldReticle">();
	}
	static class AGameplayAbilityWorldReticle* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameplayAbilityWorldReticle>();
	}
};

// Class GameplayAbilities.GameplayAbilityWorldReticle_ActorVisualization
// 0x0018 (0x04D8 - 0x04C0)
class AGameplayAbilityWorldReticle_ActorVisualization final : public AGameplayAbilityWorldReticle
{
public:
	class UCapsuleComponent*                      CollisionComponent;                                // 0x04C0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class UActorComponent*>                VisualizationComponents;                           // 0x04C8(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayAbilityWorldReticle_ActorVisualization">();
	}
	static class AGameplayAbilityWorldReticle_ActorVisualization* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameplayAbilityWorldReticle_ActorVisualization>();
	}
};

// Class GameplayAbilities.AbilityTask_ApplyRootMotionMoveToForce
// 0x0078 (0x02C0 - 0x0248)
class UAbilityTask_ApplyRootMotionMoveToForce final : public UAbilityTask_ApplyRootMotion_Base
{
public:
	TMulticastInlineDelegate<void()>              OnTimedOut;                                        // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnTimedOutAndDestinationReached;                   // 0x0258(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ERootMotionTaskEndReason RootMotionEndReason)> OnFinish;                                          // 0x0268(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FVector                                StartLocation;                                     // 0x0278(0x0018)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                TargetLocation;                                    // 0x0290(0x0018)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Duration;                                          // 0x02A8(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSetNewMovementMode;                               // 0x02AC(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMovementMode                                 NewMovementMode;                                   // 0x02AD(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRestrictSpeedToExpected;                          // 0x02AE(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2AF[0x1];                                      // 0x02AF(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           PathOffsetCurve;                                   // 0x02B0(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B8[0x8];                                      // 0x02B8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_ApplyRootMotionMoveToForce* ApplyRootMotionMoveToForce(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const struct FVector& TargetLocation_0, float Duration_0, bool bSetNewMovementMode_0, EMovementMode MovementMode, bool bRestrictSpeedToExpected_0, class UCurveVector* PathOffsetCurve_0, ERootMotionFinishVelocityMode VelocityOnFinishMode, const struct FVector& SetVelocityOnFinish, float ClampVelocityOnFinish);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_ApplyRootMotionMoveToForce">();
	}
	static class UAbilityTask_ApplyRootMotionMoveToForce* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_ApplyRootMotionMoveToForce>();
	}
};

// Class GameplayAbilities.GameplayAbility_CharacterJump
// 0x0000 (0x0D90 - 0x0D90)
class UGameplayAbility_CharacterJump final : public UGameplayAbility
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayAbility_CharacterJump">();
	}
	static class UGameplayAbility_CharacterJump* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayAbility_CharacterJump>();
	}
};

// Class GameplayAbilities.GameplayAbility_Montage
// 0x0038 (0x0DC8 - 0x0D90)
class UGameplayAbility_Montage final : public UGameplayAbility
{
public:
	class UAnimMontage*                           MontageToPlay;                                     // 0x0D90(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x0D98(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SectionName;                                       // 0x0D9C(0x000C)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UGameplayEffect>>    GameplayEffectClassesWhileAnimating;               // 0x0DA8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<class UGameplayEffect*>                GameplayEffectsWhileAnimating;                     // 0x0DB8(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, UObjectWrapper, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayAbility_Montage">();
	}
	static class UGameplayAbility_Montage* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayAbility_Montage>();
	}
};

// Class GameplayAbilities.AbilityTask_ApplyRootMotionJumpForce
// 0x0068 (0x02B0 - 0x0248)
class UAbilityTask_ApplyRootMotionJumpForce final : public UAbilityTask_ApplyRootMotion_Base
{
public:
	TMulticastInlineDelegate<void()>              OnFinish;                                          // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnLanded;                                          // 0x0258(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FRotator                               Rotation;                                          // 0x0268(0x0018)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)
	float                                         Distance;                                          // 0x0280(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Height;                                            // 0x0284(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Duration;                                          // 0x0288(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinimumLandedTriggerTime;                          // 0x028C(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bFinishOnLanded;                                   // 0x0290(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_291[0x7];                                      // 0x0291(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           PathOffsetCurve;                                   // 0x0298(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            TimeMappingCurve;                                  // 0x02A0(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bHasLanded;                                        // 0x02A8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A9[0x7];                                      // 0x02A9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_ApplyRootMotionJumpForce* ApplyRootMotionJumpForce(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const struct FRotator& Rotation_0, float Distance_0, float Height_0, float Duration_0, float MinimumLandedTriggerTime_0, bool bFinishOnLanded_0, ERootMotionFinishVelocityMode VelocityOnFinishMode, const struct FVector& SetVelocityOnFinish, float ClampVelocityOnFinish, class UCurveVector* PathOffsetCurve_0, class UCurveFloat* TimeMappingCurve_0);

	void Finish();
	void OnLandedCallback(const struct FHitResult& Hit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_ApplyRootMotionJumpForce">();
	}
	static class UAbilityTask_ApplyRootMotionJumpForce* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_ApplyRootMotionJumpForce>();
	}
};

// Class GameplayAbilities.AbilityTask_ApplyRootMotionMoveToActorForce
// 0x00B0 (0x02F8 - 0x0248)
class UAbilityTask_ApplyRootMotionMoveToActorForce final : public UAbilityTask_ApplyRootMotion_Base
{
public:
	TMulticastInlineDelegate<void(bool DestinationReached, bool TimedOut, const struct FVector& FinalTargetLocation)> OnFinished;                                        // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(ERootMotionTaskEndReason RootMotionTaskEndReason)> OnFinish;                                          // 0x0258(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_268[0x8];                                      // 0x0268(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartLocation;                                     // 0x0270(0x0018)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                TargetLocation;                                    // 0x0288(0x0018)(Net, ZeroConstructor, Transient, IsPlainOldData, RepNotify, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 TargetActor;                                       // 0x02A0(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                TargetLocationOffset;                              // 0x02A8(0x0018)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ERootMotionMoveToActorTargetOffsetType        OffsetAlignment;                                   // 0x02C0(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2C1[0x3];                                      // 0x02C1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Duration;                                          // 0x02C4(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bDisableDestinationReachedInterrupt;               // 0x02C8(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bSetNewMovementMode;                               // 0x02C9(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMovementMode                                 NewMovementMode;                                   // 0x02CA(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bRestrictSpeedToExpected;                          // 0x02CB(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2CC[0x4];                                      // 0x02CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveVector*                           PathOffsetCurve;                                   // 0x02D0(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            TimeMappingCurve;                                  // 0x02D8(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            TargetLerpSpeedHorizontalCurve;                    // 0x02E0(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            TargetLerpSpeedVerticalCurve;                      // 0x02E8(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F0[0x8];                                      // 0x02F0(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_ApplyRootMotionMoveToActorForce* ApplyRootMotionMoveToActorForce(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, class AActor* TargetActor_0, const struct FVector& TargetLocationOffset_0, ERootMotionMoveToActorTargetOffsetType OffsetAlignment_0, float Duration_0, class UCurveFloat* TargetLerpSpeedHorizontal, class UCurveFloat* TargetLerpSpeedVertical, bool bSetNewMovementMode_0, EMovementMode MovementMode, bool bRestrictSpeedToExpected_0, class UCurveVector* PathOffsetCurve_0, class UCurveFloat* TimeMappingCurve_0, ERootMotionFinishVelocityMode VelocityOnFinishMode, const struct FVector& SetVelocityOnFinish, float ClampVelocityOnFinish, bool bDisableDestinationReachedInterrupt_0);
	static class UAbilityTask_ApplyRootMotionMoveToActorForce* ApplyRootMotionMoveToTargetDataActorForce(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const struct FGameplayAbilityTargetDataHandle& TargetDataHandle, int32 TargetDataIndex, int32 TargetActorIndex, const struct FVector& TargetLocationOffset_0, ERootMotionMoveToActorTargetOffsetType OffsetAlignment_0, float Duration_0, class UCurveFloat* TargetLerpSpeedHorizontal, class UCurveFloat* TargetLerpSpeedVertical, bool bSetNewMovementMode_0, EMovementMode MovementMode, bool bRestrictSpeedToExpected_0, class UCurveVector* PathOffsetCurve_0, class UCurveFloat* TimeMappingCurve_0, ERootMotionFinishVelocityMode VelocityOnFinishMode, const struct FVector& SetVelocityOnFinish, float ClampVelocityOnFinish, bool bDisableDestinationReachedInterrupt_0);

	void OnRep_TargetLocation();
	void OnTargetActorSwapped(class AActor* OriginalTarget, class AActor* NewTarget);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_ApplyRootMotionMoveToActorForce">();
	}
	static class UAbilityTask_ApplyRootMotionMoveToActorForce* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_ApplyRootMotionMoveToActorForce>();
	}
};

// Class GameplayAbilities.AbilityTask_ApplyRootMotionRadialForce
// 0x0070 (0x02B8 - 0x0248)
class UAbilityTask_ApplyRootMotionRadialForce final : public UAbilityTask_ApplyRootMotion_Base
{
public:
	TMulticastInlineDelegate<void(ERootMotionTaskEndReason TaskEndReason)> OnFinish;                                          // 0x0248(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FVector                                Location;                                          // 0x0258(0x0018)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AActor*                                 LocationActor;                                     // 0x0270(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Strength;                                          // 0x0278(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Duration;                                          // 0x027C(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         Radius;                                            // 0x0280(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsPush;                                           // 0x0284(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bIsAdditive;                                       // 0x0285(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bNoZForce;                                         // 0x0286(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_287[0x1];                                      // 0x0287(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            StrengthDistanceFalloff;                           // 0x0288(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveFloat*                            StrengthOverTime;                                  // 0x0290(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bUseFixedWorldDirection;                           // 0x0298(0x0001)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_299[0x7];                                      // 0x0299(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               FixedWorldDirection;                               // 0x02A0(0x0018)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, NativeAccessSpecifierProtected)

public:
	static class UAbilityTask_ApplyRootMotionRadialForce* ApplyRootMotionRadialForce(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const struct FVector& Location_0, class AActor* LocationActor_0, float Strength_0, float Duration_0, float Radius_0, bool bIsPush_0, bool bIsAdditive_0, bool bNoZForce_0, class UCurveFloat* StrengthDistanceFalloff_0, class UCurveFloat* StrengthOverTime_0, bool bUseFixedWorldDirection_0, const struct FRotator& FixedWorldDirection_0, ERootMotionFinishVelocityMode VelocityOnFinishMode, const struct FVector& SetVelocityOnFinish, float ClampVelocityOnFinish);

	void UpdateTargetAndLocation(class AActor* NewActor, const struct FVector& NewLocation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_ApplyRootMotionRadialForce">();
	}
	static class UAbilityTask_ApplyRootMotionRadialForce* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_ApplyRootMotionRadialForce>();
	}
};

// Class GameplayAbilities.AbilityTask_MoveToLocation
// 0x0070 (0x0248 - 0x01D8)
class UAbilityTask_MoveToLocation final : public UAbilityTask
{
public:
	uint8                                         Pad_1D8[0x8];                                      // 0x01D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnTargetLocationReached;                           // 0x01E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          bIsFinished;                                       // 0x01F0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1F1[0x7];                                      // 0x01F1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                StartLocation;                                     // 0x01F8(0x0018)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                TargetLocation;                                    // 0x0210(0x0018)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         DurationOfMovement;                                // 0x0228(0x0004)(Net, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimeMoveStarted;                                   // 0x022C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimeMoveWillEnd;                                   // 0x0230(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_234[0x4];                                      // 0x0234(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UCurveFloat*                            LerpCurve;                                         // 0x0238(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveVector*                           LerpCurveVector;                                   // 0x0240(0x0008)(Net, ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UAbilityTask_MoveToLocation* MoveToLocation(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, const struct FVector& Location, float Duration, class UCurveFloat* OptionalInterpolationCurve, class UCurveVector* OptionalVectorInterpolationCurve);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_MoveToLocation">();
	}
	static class UAbilityTask_MoveToLocation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_MoveToLocation>();
	}
};

// Class GameplayAbilities.AbilityTask_NetworkSyncPoint
// 0x0048 (0x0220 - 0x01D8)
class UAbilityTask_NetworkSyncPoint : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void()>              OnHanging;                                         // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnAdvanced;                                        // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnSync;                                            // 0x01F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FGameplayAbilityTargetDataHandle& Data)> OnSyncWithData;                                    // 0x0208(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	EAbilityTaskNetSyncType                       SyncType;                                          // 0x0218(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bWithData;                                         // 0x0219(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_21A[0x6];                                      // 0x021A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_NetworkSyncPoint* WaitNetSync(class UGameplayAbility* OwningAbility, EAbilityTaskNetSyncType SyncType_0);

	void OnSignalCallback();
	void OnSignalCallbackWithData(const struct FGameplayAbilityTargetDataHandle& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_NetworkSyncPoint">();
	}
	static class UAbilityTask_NetworkSyncPoint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_NetworkSyncPoint>();
	}
};

// Class GameplayAbilities.AbilityTask_Repeat
// 0x0048 (0x0220 - 0x01D8)
class UAbilityTask_Repeat final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(int32 ActionNumber)> OnPerformAction;                                   // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(int32 ActionNumber)> OnFinished;                                        // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         ActionPerformancesDesired;                         // 0x01F8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ActionCounter;                                     // 0x01FC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         TimeBetweenActions;                                // 0x0200(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_204[0x1C];                                     // 0x0204(0x001C)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_Repeat* RepeatAction(class UGameplayAbility* OwningAbility, float TimeBetweenActions_0, int32 TotalActionCount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_Repeat">();
	}
	static class UAbilityTask_Repeat* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_Repeat>();
	}
};

// Class GameplayAbilities.AbilityTask_StartAbilityState
// 0x0038 (0x0210 - 0x01D8)
class UAbilityTask_StartAbilityState final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void()>              OnStateEnded;                                      // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnStateInterrupted;                                // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F8[0x10];                                     // 0x01F8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bWasEnded;                                         // 0x0208(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bWasInterrupted;                                   // 0x0209(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bEndCurrentState;                                  // 0x020A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_20B[0x5];                                      // 0x020B(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_StartAbilityState* StartAbilityState(class UGameplayAbility* OwningAbility, class FName StateName, bool bEndCurrentState_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_StartAbilityState">();
	}
	static class UAbilityTask_StartAbilityState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_StartAbilityState>();
	}
};

// Class GameplayAbilities.AbilityTask_VisualizeTargeting
// 0x0038 (0x0210 - 0x01D8)
class UAbilityTask_VisualizeTargeting final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void()>              TimeElapsed;                                       // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8[0x28];                                     // 0x01E8(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_VisualizeTargeting* VisualizeTargeting(class UGameplayAbility* OwningAbility, TSubclassOf<class AGameplayAbilityTargetActor> Class_0, class FName TaskInstanceName, float Duration);
	static class UAbilityTask_VisualizeTargeting* VisualizeTargetingUsingActor(class UGameplayAbility* OwningAbility, class AGameplayAbilityTargetActor* TargetActor, class FName TaskInstanceName, float Duration);

	bool BeginSpawningActor(class UGameplayAbility* OwningAbility, TSubclassOf<class AGameplayAbilityTargetActor> Class_0, class AGameplayAbilityTargetActor** SpawnedActor);
	void FinishSpawningActor(class UGameplayAbility* OwningAbility, class AGameplayAbilityTargetActor* SpawnedActor);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_VisualizeTargeting">();
	}
	static class UAbilityTask_VisualizeTargeting* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_VisualizeTargeting>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitAbilityActivate
// 0x0198 (0x0370 - 0x01D8)
class UAbilityTask_WaitAbilityActivate final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(class UGameplayAbility* ActivatedAbility)> OnActivate;                                        // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithTag;                                           // 0x01E8(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithoutTag;                                        // 0x01F4(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IncludeTriggeredAbilities;                         // 0x0200(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x0201(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_202[0x6];                                      // 0x0202(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagRequirements               TagRequirements;                                   // 0x0208(0x0118)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_320[0x50];                                     // 0x0320(0x0050)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_WaitAbilityActivate* WaitForAbilityActivate(class UGameplayAbility* OwningAbility, const struct FGameplayTag& WithTag_0, const struct FGameplayTag& WithoutTag_0, bool IncludeTriggeredAbilities_0, bool TriggerOnce_0);
	static class UAbilityTask_WaitAbilityActivate* WaitForAbilityActivate_Query(class UGameplayAbility* OwningAbility, const struct FGameplayTagQuery& Query, bool IncludeTriggeredAbilities_0, bool TriggerOnce_0);
	static class UAbilityTask_WaitAbilityActivate* WaitForAbilityActivateWithTagRequirements(class UGameplayAbility* OwningAbility, const struct FGameplayTagRequirements& TagRequirements_0, bool IncludeTriggeredAbilities_0, bool TriggerOnce_0);

	void OnAbilityActivate(class UGameplayAbility* ActivatedAbility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitAbilityActivate">();
	}
	static class UAbilityTask_WaitAbilityActivate* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitAbilityActivate>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitAbilityCommit
// 0x0080 (0x0258 - 0x01D8)
class UAbilityTask_WaitAbilityCommit final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(class UGameplayAbility* ActivatedAbility)> OnCommit;                                          // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithTag;                                           // 0x01E8(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithoutTag;                                        // 0x01F4(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x0200(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_201[0x7];                                      // 0x0201(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagQuery                      Query;                                             // 0x0208(0x0048)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_250[0x8];                                      // 0x0250(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_WaitAbilityCommit* WaitForAbilityCommit(class UGameplayAbility* OwningAbility, const struct FGameplayTag& WithTag_0, const struct FGameplayTag& WithoutTage, bool TriggerOnce_0);
	static class UAbilityTask_WaitAbilityCommit* WaitForAbilityCommit_Query(class UGameplayAbility* OwningAbility, const struct FGameplayTagQuery& Query_0, bool TriggerOnce_0);

	void OnAbilityCommit(class UGameplayAbility* ActivatedAbility);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitAbilityCommit">();
	}
	static class UAbilityTask_WaitAbilityCommit* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitAbilityCommit>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitAttributeChange
// 0x0088 (0x0260 - 0x01D8)
class UAbilityTask_WaitAttributeChange final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void()>              OnChange;                                          // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithTag;                                           // 0x01E8(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           WithoutTag;                                        // 0x01F4(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x0200(0x0040)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWaitAttributeChangeComparison                ComparisonType;                                    // 0x0240(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_241[0x3];                                      // 0x0241(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ComparisonValue;                                   // 0x0244(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriggerOnce;                                      // 0x0248(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_249[0xF];                                      // 0x0249(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                ExternalOwner;                                     // 0x0258(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UAbilityTask_WaitAttributeChange* WaitForAttributeChange(class UGameplayAbility* OwningAbility, const struct FGameplayAttribute& Attribute_0, const struct FGameplayTag& WithSrcTag, const struct FGameplayTag& WithoutSrcTag, bool TriggerOnce, class AActor* OptionalExternalOwner);
	static class UAbilityTask_WaitAttributeChange* WaitForAttributeChangeWithComparison(class UGameplayAbility* OwningAbility, const struct FGameplayAttribute& InAttribute, const struct FGameplayTag& InWithTag, const struct FGameplayTag& InWithoutTag, EWaitAttributeChangeComparison InComparisonType, float InComparisonValue, bool TriggerOnce, class AActor* OptionalExternalOwner);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitAttributeChange">();
	}
	static class UAbilityTask_WaitAttributeChange* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitAttributeChange>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitAttributeChangeRatioThreshold
// 0x00E0 (0x02B8 - 0x01D8)
class UAbilityTask_WaitAttributeChangeRatioThreshold final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(bool bMatchesComparison, float CurrentRatio)> OnChange;                                          // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     AttributeNumerator;                                // 0x01E8(0x0040)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     AttributeDenominator;                              // 0x0228(0x0040)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWaitAttributeChangeComparison                ComparisonType;                                    // 0x0268(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWaitAttributeChangeComparison                OtherComparisonType;                               // 0x0269(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_26A[0x2];                                      // 0x026A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ComparisonValue;                                   // 0x026C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         OtherComparisonValue;                              // 0x0270(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriggerOnce;                                      // 0x0274(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_275[0x13];                                     // 0x0275(0x0013)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         LastAttributeNumeratorValue;                       // 0x0288(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         LastAttributeDenominatorValue;                     // 0x028C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bMatchedComparisonLastAttributeChange;             // 0x0290(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_291[0x1F];                                     // 0x0291(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                ExternalOwner;                                     // 0x02B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UAbilityTask_WaitAttributeChangeRatioThreshold* WaitForAttributeChangeRatioThreshold(class UGameplayAbility* OwningAbility, const struct FGameplayAttribute& AttributeNumerator_0, const struct FGameplayAttribute& AttributeDenominator_0, EWaitAttributeChangeComparison ComparisonType_0, float ComparisonValue_0, bool bTriggerOnce_0, class AActor* OptionalExternalOwner);
	static class UAbilityTask_WaitAttributeChangeRatioThreshold* WaitForAttributeChangeRatioThresholds(class UGameplayAbility* OwningAbility, const struct FGameplayAttribute& AttributeNumerator_0, const struct FGameplayAttribute& AttributeDenominator_0, EWaitAttributeChangeComparison ComparisonType_0, EWaitAttributeChangeComparison OtherComparisonType_0, float ComparisonValue_0, float OtherComparisonValue_0, bool bTriggerOnce_0, class AActor* OptionalExternalOwner);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitAttributeChangeRatioThreshold">();
	}
	static class UAbilityTask_WaitAttributeChangeRatioThreshold* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitAttributeChangeRatioThreshold>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitAttributeChangeThreshold
// 0x0078 (0x0250 - 0x01D8)
class UAbilityTask_WaitAttributeChangeThreshold final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(bool bMatchesComparison, float CurrentValue)> OnChange;                                          // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayAttribute                     Attribute;                                         // 0x01E8(0x0040)(Transient, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EWaitAttributeChangeComparison                ComparisonType;                                    // 0x0228(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_229[0x3];                                      // 0x0229(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         ComparisonValue;                                   // 0x022C(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bTriggerOnce;                                      // 0x0230(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_231[0xF];                                      // 0x0231(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bMatchedComparisonLastAttributeChange;             // 0x0240(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_241[0x7];                                      // 0x0241(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                ExternalOwner;                                     // 0x0248(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UAbilityTask_WaitAttributeChangeThreshold* WaitForAttributeChangeThreshold(class UGameplayAbility* OwningAbility, const struct FGameplayAttribute& Attribute_0, EWaitAttributeChangeComparison ComparisonType_0, float ComparisonValue_0, bool bTriggerOnce_0, class AActor* OptionalExternalOwner);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitAttributeChangeThreshold">();
	}
	static class UAbilityTask_WaitAttributeChangeThreshold* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitAttributeChangeThreshold>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitCancel
// 0x00C0 (0x0298 - 0x01D8)
class UAbilityTask_WaitCancel final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void()>              OnCancel;                                          // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	int32                                         CancelInputID;                                     // 0x01E8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          RegisteredCallbacks;                               // 0x01EC(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         CancelKey;                                         // 0x01F0(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         StartTime;                                         // 0x0290(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_294[0x4];                                      // 0x0294(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_WaitCancel* WaitCancel(class UGameplayAbility* OwningAbility);

	void OnCancelCallback();
	void OnLocalCancelCallback(int32 InputID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitCancel">();
	}
	static class UAbilityTask_WaitCancel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitCancel>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitConfirmCancel
// 0x0188 (0x0360 - 0x01D8)
class UAbilityTask_WaitConfirmCancel final : public UAbilityTask
{
public:
	TDelegate<void()>                             IsConfirmAllowed;                                  // 0x01D8(0x0014)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1EC[0x4];                                      // 0x01EC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnConfirm;                                         // 0x01F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void()>              OnCancel;                                          // 0x0200(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	bool                                          RegisteredCallbacks;                               // 0x0210(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_211[0x3];                                      // 0x0211(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CancelInputID;                                     // 0x0214(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         ConfirmInputID;                                    // 0x0218(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_21C[0x4];                                      // 0x021C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         CancelKey;                                         // 0x0220(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPredictionKey                         ConfirmKey;                                        // 0x02C0(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UAbilityTask_WaitConfirmCancel* WaitConfirmCancel(class UGameplayAbility* OwningAbility);

	void OnCancelCallback();
	void OnConfirmCallback();
	void OnLocalCancelCallback(int32 InputID);
	void OnLocalConfirmCallback(int32 InputID);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitConfirmCancel">();
	}
	static class UAbilityTask_WaitConfirmCancel* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitConfirmCancel>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitGameplayEffectApplied
// 0x02E8 (0x04C0 - 0x01D8)
class UAbilityTask_WaitGameplayEffectApplied : public UAbilityTask
{
public:
	uint8                                         Pad_1D8[0x10];                                     // 0x01D8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagRequirements               SourceTagRequirements;                             // 0x01E8(0x0118)(Transient, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               TargetTagRequirements;                             // 0x0300(0x0118)(Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_418[0x90];                                     // 0x0418(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          TriggerOnce;                                       // 0x04A8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ListenForPeriodicEffects;                          // 0x04A9(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegisteredCallback;                                // 0x04AA(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseExternalOwner;                                  // 0x04AB(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4AC[0x4];                                      // 0x04AC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                ExternalOwner;                                     // 0x04B0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Locked;                                            // 0x04B8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_4B9[0x7];                                      // 0x04B9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnApplyGameplayEffectCallback(class UAbilitySystemComponent* Target, const struct FGameplayEffectSpecStackHandle& SpecHandleApplied, const struct FActiveGameplayEffectHandle& ActiveHandle);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitGameplayEffectApplied">();
	}
	static class UAbilityTask_WaitGameplayEffectApplied* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitGameplayEffectApplied>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitGameplayEffectApplied_Self
// 0x0020 (0x04E0 - 0x04C0)
class UAbilityTask_WaitGameplayEffectApplied_Self final : public UAbilityTask_WaitGameplayEffectApplied
{
public:
	TMulticastInlineDelegate<void(class AActor* Source, const struct FGameplayEffectSpecHandle& SpecHandle, const struct FActiveGameplayEffectHandle& ActiveHandle)> OnApplied;                                         // 0x04C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D0[0x10];                                     // 0x04D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_WaitGameplayEffectApplied_Self* WaitGameplayEffectAppliedToSelf(class UGameplayAbility* InOwningAbility, const struct FGameplayTargetDataFilterHandle& InSourceFilter, const struct FGameplayTagRequirements& InSourceTagRequirements, const struct FGameplayTagRequirements& InTargetTagRequirements, bool InTriggerOnce, class AActor* OptionalExternalOwner, bool InListenForPeriodicEffect);
	static class UAbilityTask_WaitGameplayEffectApplied_Self* WaitGameplayEffectAppliedToSelf_Query(class UGameplayAbility* InOwningAbility, const struct FGameplayTargetDataFilterHandle& InSourceFilter, const struct FGameplayTagQuery& InSourceTagQuery, const struct FGameplayTagQuery& InTargetTagQuery, bool InTriggerOnce, class AActor* OptionalExternalOwner, bool InListenForPeriodicEffect);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitGameplayEffectApplied_Self">();
	}
	static class UAbilityTask_WaitGameplayEffectApplied_Self* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitGameplayEffectApplied_Self>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitGameplayEffectApplied_Target
// 0x0020 (0x04E0 - 0x04C0)
class UAbilityTask_WaitGameplayEffectApplied_Target final : public UAbilityTask_WaitGameplayEffectApplied
{
public:
	TMulticastInlineDelegate<void(class AActor* Target, const struct FGameplayEffectSpecHandle& SpecHandle, const struct FActiveGameplayEffectHandle& ActiveHandle)> OnApplied;                                         // 0x04C0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D0[0x10];                                     // 0x04D0(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_WaitGameplayEffectApplied_Target* WaitGameplayEffectAppliedToTarget(class UGameplayAbility* InOwningAbility, const struct FGameplayTargetDataFilterHandle& InTargetFilter, const struct FGameplayTagRequirements& InSourceTagRequirements, const struct FGameplayTagRequirements& InTargetTagRequirements, bool InTriggerOnce, class AActor* OptionalExternalOwner, bool InListenForPeriodicEffects);
	static class UAbilityTask_WaitGameplayEffectApplied_Target* WaitGameplayEffectAppliedToTarget_Query(class UGameplayAbility* InOwningAbility, const struct FGameplayTargetDataFilterHandle& InSourceFilter, const struct FGameplayTagQuery& InSourceTagQuery, const struct FGameplayTagQuery& InTargetTagQuery, bool InTriggerOnce, class AActor* OptionalExternalOwner, bool InListenForPeriodicEffect);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitGameplayEffectApplied_Target">();
	}
	static class UAbilityTask_WaitGameplayEffectApplied_Target* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitGameplayEffectApplied_Target>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitGameplayEffectBlockedImmunity
// 0x0258 (0x0430 - 0x01D8)
class UAbilityTask_WaitGameplayEffectBlockedImmunity final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(const struct FGameplayEffectSpecHandle& BlockedSpec, const struct FActiveGameplayEffectHandle& ImmunityGameplayEffectHandle)> bLocked;                                           // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               SourceTagRequirements;                             // 0x01E8(0x0118)(Transient, NativeAccessSpecifierPublic)
	struct FGameplayTagRequirements               TargetTagRequirements;                             // 0x0300(0x0118)(Transient, NativeAccessSpecifierPublic)
	bool                                          TriggerOnce;                                       // 0x0418(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ListenForPeriodicEffects;                          // 0x0419(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          RegisteredCallback;                                // 0x041A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseExternalOwner;                                  // 0x041B(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_41C[0x4];                                      // 0x041C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                ExternalOwner;                                     // 0x0420(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_428[0x8];                                      // 0x0428(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_WaitGameplayEffectBlockedImmunity* WaitGameplayEffectBlockedByImmunity(class UGameplayAbility* OwningAbility, const struct FGameplayTagRequirements& SourceTagRequirements_0, const struct FGameplayTagRequirements& TargetTagRequirements_0, class AActor* OptionalExternalTarget, bool OnlyTriggerOnce);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitGameplayEffectBlockedImmunity">();
	}
	static class UAbilityTask_WaitGameplayEffectBlockedImmunity* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitGameplayEffectBlockedImmunity>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitGameplayEffectRemoved
// 0x00E0 (0x02B8 - 0x01D8)
class UAbilityTask_WaitGameplayEffectRemoved final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo)> OnRemoved;                                         // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FGameplayEffectRemovalInfo& GameplayEffectRemovalInfo)> InvalidHandle;                                     // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F8[0x8];                                      // 0x01F8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Registered;                                        // 0x0200(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_201[0x17];                                     // 0x0201(0x0017)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         RemoveKey;                                         // 0x0218(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UAbilityTask_WaitGameplayEffectRemoved* WaitForGameplayEffectRemoved(class UGameplayAbility* OwningAbility, const struct FActiveGameplayEffectHandle& Handle);

	void OnGameplayEffectRemoved(const struct FGameplayEffectRemovalInfo& InGameplayEffectRemovalInfo);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitGameplayEffectRemoved">();
	}
	static class UAbilityTask_WaitGameplayEffectRemoved* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitGameplayEffectRemoved>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitGameplayEvent
// 0x0038 (0x0210 - 0x01D8)
class UAbilityTask_WaitGameplayEvent final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(const struct FGameplayEventData& Payload)> EventReceived;                                     // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	struct FGameplayTag                           Tag;                                               // 0x01E8(0x000C)(Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                OptionalExternalTarget;                            // 0x01F8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseExternalTarget;                                 // 0x0200(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyTriggerOnce;                                   // 0x0201(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          OnlyMatchExact;                                    // 0x0202(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_203[0xD];                                      // 0x0203(0x000D)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_WaitGameplayEvent* WaitGameplayEvent(class UGameplayAbility* OwningAbility, const struct FGameplayTag& EventTag, class AActor* OptionalExternalTarget_0, bool OnlyTriggerOnce_0, bool OnlyMatchExact_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitGameplayEvent">();
	}
	static class UAbilityTask_WaitGameplayEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitGameplayEvent>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitGameplayTagAdded
// 0x0010 (0x0210 - 0x0200)
class UAbilityTask_WaitGameplayTagAdded final : public UAbilityTask_WaitGameplayTag
{
public:
	TMulticastInlineDelegate<void()>              Added;                                             // 0x0200(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UAbilityTask_WaitGameplayTagAdded* WaitGameplayTagAdd(class UGameplayAbility* OwningAbility, const struct FGameplayTag& InTag, class AActor* InOptionalExternalTarget, bool InOnlyTriggerOnce);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitGameplayTagAdded">();
	}
	static class UAbilityTask_WaitGameplayTagAdded* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitGameplayTagAdded>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitGameplayTagRemoved
// 0x0010 (0x0210 - 0x0200)
class UAbilityTask_WaitGameplayTagRemoved final : public UAbilityTask_WaitGameplayTag
{
public:
	TMulticastInlineDelegate<void()>              Removed;                                           // 0x0200(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UAbilityTask_WaitGameplayTagRemoved* WaitGameplayTagRemove(class UGameplayAbility* OwningAbility, const struct FGameplayTag& InTag, class AActor* InOptionalExternalTarget, bool InOnlyTriggerOnce);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitGameplayTagRemoved">();
	}
	static class UAbilityTask_WaitGameplayTagRemoved* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitGameplayTagRemoved>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitGameplayTagQuery
// 0x0128 (0x0300 - 0x01D8)
class UAbilityTask_WaitGameplayTagQuery final : public UAbilityTask
{
public:
	uint8                                         Pad_1D8[0x108];                                    // 0x01D8(0x0108)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              Triggered;                                         // 0x02E0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	class UAbilitySystemComponent*                OptionalExternalTarget;                            // 0x02F0(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_2F8[0x8];                                      // 0x02F8(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_WaitGameplayTagQuery* WaitGameplayTagQuery(class UGameplayAbility* OwningAbility, const struct FGameplayTagQuery& TagQuery, const class AActor* InOptionalExternalTarget, const EWaitGameplayTagQueryTriggerCondition TriggerCondition, const bool bOnlyTriggerOnce);

	void UpdateTargetTags(const struct FGameplayTag& Tag, int32 NewCount);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitGameplayTagQuery">();
	}
	static class UAbilityTask_WaitGameplayTagQuery* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitGameplayTagQuery>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitInputRelease
// 0x00C0 (0x0298 - 0x01D8)
class UAbilityTask_WaitInputRelease final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(float TimeHeld)> OnRelease;                                         // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	float                                         StartTime;                                         // 0x01E8(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bTestInitialState;                                 // 0x01EC(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1ED[0x3];                                      // 0x01ED(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         ReleaseKey;                                        // 0x01F0(0x00A0)(Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_290[0x8];                                      // 0x0290(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_WaitInputRelease* WaitInputRelease(class UGameplayAbility* OwningAbility, bool bTestAlreadyReleased);

	void OnLocalReleaseCallback();
	void OnReleaseCallback(float Duration);
	void OnReplicateReleaseCallback(const struct FGameplayAbilityTargetDataHandle& Data);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitInputRelease">();
	}
	static class UAbilityTask_WaitInputRelease* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitInputRelease>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitMovementModeChange
// 0x0020 (0x01F8 - 0x01D8)
class UAbilityTask_WaitMovementModeChange final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(EMovementMode NewMovementMode)> OnChange;                                          // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_1E8[0x10];                                     // 0x01E8(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_WaitMovementModeChange* CreateWaitMovementModeChange(class UGameplayAbility* OwningAbility, EMovementMode NewMode);

	void OnMovementModeChange(class ACharacter* Character, EMovementMode PrevMovementMode, uint8 PreviousCustomMode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitMovementModeChange">();
	}
	static class UAbilityTask_WaitMovementModeChange* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitMovementModeChange>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitOverlap
// 0x0010 (0x01E8 - 0x01D8)
class UAbilityTask_WaitOverlap final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(struct FGameplayAbilityTargetDataHandle& TargetData)> OnOverlap;                                         // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)

public:
	static class UAbilityTask_WaitOverlap* WaitForOverlap(class UGameplayAbility* OwningAbility);

	void OnHitCallback(class UPrimitiveComponent* HitComp, class AActor* OtherActor, class UPrimitiveComponent* OtherComp, const struct FVector& NormalImpulse, const struct FHitResult& Hit);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitOverlap">();
	}
	static class UAbilityTask_WaitOverlap* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitOverlap>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitTargetData
// 0x0040 (0x0218 - 0x01D8)
class UAbilityTask_WaitTargetData final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void(struct FGameplayAbilityTargetDataHandle& Data)> ValidData;                                         // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(struct FGameplayAbilityTargetDataHandle& Data)> Cancelled;                                         // 0x01E8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TSubclassOf<class AGameplayAbilityTargetActor> TargetClass;                                       // 0x01F8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class AGameplayAbilityTargetActor*            TargetActor;                                       // 0x0200(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EGameplayTargetingConfirmation                ConfirmationType;                                  // 0x0208(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_209[0xF];                                      // 0x0209(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UAbilityTask_WaitTargetData* WaitTargetData(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, EGameplayTargetingConfirmation ConfirmationType_0, TSubclassOf<class AGameplayAbilityTargetActor> Class_0);
	static class UAbilityTask_WaitTargetData* WaitTargetDataUsingActor(class UGameplayAbility* OwningAbility, class FName TaskInstanceName, EGameplayTargetingConfirmation ConfirmationType_0, class AGameplayAbilityTargetActor* TargetActor_0);

	bool BeginSpawningActor(class UGameplayAbility* OwningAbility, TSubclassOf<class AGameplayAbilityTargetActor> Class_0, class AGameplayAbilityTargetActor** SpawnedActor);
	void FinishSpawningActor(class UGameplayAbility* OwningAbility, class AGameplayAbilityTargetActor* SpawnedActor);
	void OnTargetDataCancelledCallback(const struct FGameplayAbilityTargetDataHandle& Data);
	void OnTargetDataReadyCallback(const struct FGameplayAbilityTargetDataHandle& Data);
	void OnTargetDataReplicatedCallback(const struct FGameplayAbilityTargetDataHandle& Data, const struct FGameplayTag& ActivationTag);
	void OnTargetDataReplicatedCancelledCallback();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitTargetData">();
	}
	static class UAbilityTask_WaitTargetData* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitTargetData>();
	}
};

// Class GameplayAbilities.AbilityTask_WaitVelocityChange
// 0x0038 (0x0210 - 0x01D8)
class UAbilityTask_WaitVelocityChange final : public UAbilityTask
{
public:
	TMulticastInlineDelegate<void()>              OnVelocityChage;                                   // 0x01D8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class UMovementComponent*                     CachedMovementComponent;                           // 0x01E8(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         MinimumMagnitude;                                  // 0x01F0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1F4[0x4];                                      // 0x01F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Direction;                                         // 0x01F8(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	static class UAbilityTask_WaitVelocityChange* CreateWaitVelocityChange(class UGameplayAbility* OwningAbility, const struct FVector& Direction_0, float MinimumMagnitude_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityTask_WaitVelocityChange">();
	}
	static class UAbilityTask_WaitVelocityChange* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilityTask_WaitVelocityChange>();
	}
};

// Class GameplayAbilities.AbilitySystemBlueprintLibrary
// 0x0000 (0x0030 - 0x0030)
class UAbilitySystemBlueprintLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromActor(class AActor* Actor);
	static struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromActorArray(const TArray<class AActor*>& ActorArray, bool OneTargetPerHandle);
	static struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromHitResult(const struct FHitResult& HitResult);
	static struct FGameplayAbilityTargetDataHandle AbilityTargetDataFromLocations(const struct FGameplayAbilityTargetingLocationInfo& SourceLocation, const struct FGameplayAbilityTargetingLocationInfo& TargetLocation);
	static struct FGameplayEffectSpecHandle AddAssetTag(const struct FGameplayEffectSpecHandle& SpecHandle, const struct FGameplayTag& NewGameplayTag);
	static struct FGameplayEffectSpecHandle AddAssetTags(const struct FGameplayEffectSpecHandle& SpecHandle, const struct FGameplayTagContainer& NewGameplayTags);
	static struct FGameplayEffectSpecHandle AddGrantedTag(const struct FGameplayEffectSpecHandle& SpecHandle, const struct FGameplayTag& NewGameplayTag);
	static struct FGameplayEffectSpecHandle AddGrantedTags(const struct FGameplayEffectSpecHandle& SpecHandle, const struct FGameplayTagContainer& NewGameplayTags);
	static struct FGameplayEffectSpecHandle AddLinkedGameplayEffect(const struct FGameplayEffectSpecHandle& SpecHandle, TSubclassOf<class UGameplayEffect> LinkedGameplayEffect);
	static struct FGameplayEffectSpecHandle AddLinkedGameplayEffectSpec(const struct FGameplayEffectSpecHandle& SpecHandle, const struct FGameplayEffectSpecHandle& LinkedGameplayEffectSpec);
	static bool AddLooseGameplayTags(class AActor* Actor, const struct FGameplayTagContainer& GameplayTags, bool bShouldReplicate);
	static struct FGameplayAbilityTargetDataHandle AppendTargetDataHandle(const struct FGameplayAbilityTargetDataHandle& TargetHandle, const struct FGameplayAbilityTargetDataHandle& HandleToAdd);
	static struct FGameplayEffectSpecHandle AssignSetByCallerMagnitude(const struct FGameplayEffectSpecHandle& SpecHandle, class FName DataName, float Magnitude);
	static struct FGameplayEffectSpecHandle AssignTagSetByCallerMagnitude(const struct FGameplayEffectSpecHandle& SpecHandle, const struct FGameplayTag& DataTag, float Magnitude);
	static void BreakGameplayCueParameters(const struct FGameplayCueParameters& Parameters, float* NormalizedMagnitude, float* RawMagnitude, EGameplayEffectDurationType* DurationPolicy, float* Duration, float* Period, struct FGameplayEffectContextHandle* EffectContext, struct FGameplayTag* MatchedTagName, struct FGameplayTag* OriginalTag, struct FGameplayTagContainer* AggregatedSourceTags, struct FGameplayTagContainer* AggregatedTargetTags, struct FVector* Location, struct FVector* Normal, class AActor** Instigator, class AActor** EffectCauser, class UObject** SourceObject, class UPhysicalMaterial** PhysicalMaterial, int32* GameplayEffectLevel, int32* AbilityLevel, class USceneComponent** TargetAttachComponent, bool* bReplicateLocationWhenUsingMinimalRepProxy);
	static struct FGameplayEffectSpecHandle CloneSpecHandle(class AActor* InNewInstigator, class AActor* InEffectCauser, const struct FGameplayEffectSpecHandle& GameplayEffectSpecHandle_Clone);
	static bool DoesGameplayCueMeetTagRequirements(const struct FGameplayCueParameters& Parameters, const struct FGameplayTagRequirements& SourceTagReqs, const struct FGameplayTagRequirements& TargetTagReqs);
	static bool DoesTargetDataContainActor(const struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index_0, class AActor* Actor);
	static void EffectContextAddHitResult(const struct FGameplayEffectContextHandle& EffectContext, const struct FHitResult& HitResult, bool bReset);
	static class AActor* EffectContextGetEffectCauser(const struct FGameplayEffectContextHandle& EffectContext);
	static struct FHitResult EffectContextGetHitResult(const struct FGameplayEffectContextHandle& EffectContext);
	static class AActor* EffectContextGetInstigatorActor(const struct FGameplayEffectContextHandle& EffectContext);
	static struct FVector EffectContextGetOrigin(const struct FGameplayEffectContextHandle& EffectContext);
	static class AActor* EffectContextGetOriginalInstigatorActor(const struct FGameplayEffectContextHandle& EffectContext);
	static class UObject* EffectContextGetSourceObject(const struct FGameplayEffectContextHandle& EffectContext);
	static bool EffectContextHasHitResult(const struct FGameplayEffectContextHandle& EffectContext);
	static bool EffectContextIsInstigatorLocallyControlled(const struct FGameplayEffectContextHandle& EffectContext);
	static bool EffectContextIsValid(const struct FGameplayEffectContextHandle& EffectContext);
	static void EffectContextSetOrigin(const struct FGameplayEffectContextHandle& EffectContext, const struct FVector& Origin);
	static bool EqualEqual_ActiveGameplayEffectHandle(const struct FActiveGameplayEffectHandle& A, const struct FActiveGameplayEffectHandle& B);
	static bool EqualEqual_GameplayAbilitySpecHandle(const struct FGameplayAbilitySpecHandle& A, const struct FGameplayAbilitySpecHandle& B);
	static bool EqualEqual_GameplayAttributeGameplayAttribute(const struct FGameplayAttribute& AttributeA, const struct FGameplayAttribute& AttributeB);
	static float EvaluateAttributeValueWithTags(class UAbilitySystemComponent* AbilitySystem, const struct FGameplayAttribute& Attribute, const struct FGameplayTagContainer& SourceTags, const struct FGameplayTagContainer& TargetTags, bool* bSuccess);
	static float EvaluateAttributeValueWithTagsAndBase(class UAbilitySystemComponent* AbilitySystem, const struct FGameplayAttribute& Attribute, const struct FGameplayTagContainer& SourceTags, const struct FGameplayTagContainer& TargetTags, float BaseValue, bool* bSuccess);
	static struct FGameplayAbilityTargetDataHandle FilterTargetData(const struct FGameplayAbilityTargetDataHandle& TargetDataHandle, const struct FGameplayTargetDataFilterHandle& ActorFilterClass);
	static void ForwardGameplayCueToTarget(TScriptInterface<class IGameplayCueInterface> TargetCueInterface, EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	static const class UGameplayAbility* GetAbility(const struct FGameplayCueParameters& Parameters);
	static class UAbilitySystemComponent* GetAbilitySystemComponent(class AActor* Actor);
	static class FString GetActiveGameplayEffectDebugString(const struct FActiveGameplayEffectHandle& ActiveHandle);
	static float GetActiveGameplayEffectExpectedEndTime(const struct FActiveGameplayEffectHandle& ActiveHandle);
	static float GetActiveGameplayEffectRemainingDuration(class UObject* WorldContextObject, const struct FActiveGameplayEffectHandle& ActiveHandle);
	static int32 GetActiveGameplayEffectStackCount(const struct FActiveGameplayEffectHandle& ActiveHandle);
	static int32 GetActiveGameplayEffectStackLimitCount(const struct FActiveGameplayEffectHandle& ActiveHandle);
	static float GetActiveGameplayEffectStartTime(const struct FActiveGameplayEffectHandle& ActiveHandle);
	static float GetActiveGameplayEffectTotalDuration(const struct FActiveGameplayEffectHandle& ActiveHandle);
	static class AActor* GetActorByIndex(const struct FGameplayCueParameters& Parameters, int32 Index_0);
	static int32 GetActorCount(const struct FGameplayCueParameters& Parameters);
	static TArray<class AActor*> GetActorsFromTargetData(const struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index_0);
	static TArray<class AActor*> GetAllActorsFromTargetData(const struct FGameplayAbilityTargetDataHandle& TargetData);
	static TArray<struct FGameplayEffectSpecHandle> GetAllLinkedGameplayEffectSpecHandles(const struct FGameplayEffectSpecHandle& SpecHandle);
	static int32 GetDataCountFromTargetData(const struct FGameplayAbilityTargetDataHandle& TargetData);
	static class FString GetDebugStringFromGameplayAttribute(const struct FGameplayAttribute& Attribute);
	static struct FGameplayEffectContextHandle GetEffectContext(const struct FGameplayEffectSpecHandle& SpecHandle);
	static float GetFloatAttribute(const class AActor* Actor, const struct FGameplayAttribute& Attribute, bool* bSuccessfullyFoundAttribute);
	static float GetFloatAttributeBase(const class AActor* Actor, const struct FGameplayAttribute& Attribute, bool* bSuccessfullyFoundAttribute);
	static float GetFloatAttributeBaseFromAbilitySystemComponent(const class UAbilitySystemComponent* AbilitySystemComponent, const struct FGameplayAttribute& Attribute, bool* bSuccessfullyFoundAttribute);
	static float GetFloatAttributeFromAbilitySystemComponent(const class UAbilitySystemComponent* AbilitySystem, const struct FGameplayAttribute& Attribute, bool* bSuccessfullyFoundAttribute);
	static const class UGameplayAbility* GetGameplayAbilityFromSpecHandle(class UAbilitySystemComponent* AbilitySystem, const struct FGameplayAbilitySpecHandle& AbilitySpecHandle, bool* bIsInstance);
	static bool GetGameplayCueDirection(class AActor* TargetActor, const struct FGameplayCueParameters& Parameters, struct FVector* Direction);
	static bool GetGameplayCueEndLocationAndNormal(class AActor* TargetActor, const struct FGameplayCueParameters& Parameters, struct FVector* Location, struct FVector* Normal);
	static const class UGameplayEffect* GetGameplayEffectFromActiveEffectHandle(const struct FActiveGameplayEffectHandle& ActiveHandle);
	static const class UGameplayEffectUIData* GetGameplayEffectUIData(TSubclassOf<class UGameplayEffect> EffectClass, TSubclassOf<class UGameplayEffectUIData> DataType);
	static struct FHitResult GetHitResult(const struct FGameplayCueParameters& Parameters);
	static struct FHitResult GetHitResultFromTargetData(const struct FGameplayAbilityTargetDataHandle& HitResult, int32 Index_0);
	static class AActor* GetInstigatorActor(const struct FGameplayCueParameters& Parameters);
	static struct FTransform GetInstigatorTransform(const struct FGameplayCueParameters& Parameters);
	static float GetModifiedAttributeMagnitude(const struct FGameplayEffectSpecHandle& SpecHandle, const struct FGameplayAttribute& Attribute);
	static struct FVector GetOrigin(const struct FGameplayCueParameters& Parameters);
	static struct FVector GetTargetDataDirection(const struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index_0);
	static struct FVector GetTargetDataEndPoint(const struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index_0);
	static struct FTransform GetTargetDataEndPointTransform(const struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index_0);
	static struct FTransform GetTargetDataOrigin(const struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index_0);
	static bool HasHitResult(const struct FGameplayCueParameters& Parameters);
	static bool IsInstigatorLocallyControlled(const struct FGameplayCueParameters& Parameters);
	static bool IsInstigatorLocallyControlledPlayer(const struct FGameplayCueParameters& Parameters);
	static bool IsValid(const struct FGameplayAttribute& Attribute);
	static struct FGameplayTargetDataFilterHandle MakeFilterHandle(const struct FGameplayTargetDataFilter& Filter, class AActor* FilterActor);
	static struct FGameplayCueParameters MakeGameplayCueParameters(float NormalizedMagnitude, float RawMagnitude, EGameplayEffectDurationType DurationPolicy, float Duration, float Period, const struct FGameplayEffectContextHandle& EffectContext, const struct FGameplayTag& MatchedTagName, const struct FGameplayTag& OriginalTag, const struct FGameplayTagContainer& AggregatedSourceTags, const struct FGameplayTagContainer& AggregatedTargetTags, const struct FVector& Location, const struct FVector& Normal, class AActor* Instigator, class AActor* EffectCauser, class UObject* SourceObject, class UPhysicalMaterial* PhysicalMaterial, int32 GameplayEffectLevel, int32 AbilityLevel, class USceneComponent* TargetAttachComponent, bool bReplicateLocationWhenUsingMinimalRepProxy);
	static struct FGameplayEffectSpecHandle MakeSpecHandle(class UGameplayEffect* InGameplayEffect, class AActor* InInstigator, class AActor* InEffectCauser, float InLevel);
	static bool NotEqual_ActiveGameplayEffectHandle(const struct FActiveGameplayEffectHandle& A, const struct FActiveGameplayEffectHandle& B);
	static bool NotEqual_GameplayAbilitySpecHandle(const struct FGameplayAbilitySpecHandle& A, const struct FGameplayAbilitySpecHandle& B);
	static bool NotEqual_GameplayAttributeGameplayAttribute(const struct FGameplayAttribute& AttributeA, const struct FGameplayAttribute& AttributeB);
	static bool RemoveLooseGameplayTags(class AActor* Actor, const struct FGameplayTagContainer& GameplayTags, bool bShouldReplicate);
	static void SendGameplayEventToActor(class AActor* Actor, const struct FGameplayTag& EventTag, const struct FGameplayEventData& Payload);
	static struct FGameplayEffectSpecHandle SetDuration(const struct FGameplayEffectSpecHandle& SpecHandle, float Duration);
	static struct FGameplayEffectSpecHandle SetStackCount(const struct FGameplayEffectSpecHandle& SpecHandle, int32 StackCount);
	static struct FGameplayEffectSpecHandle SetStackCountToMax(const struct FGameplayEffectSpecHandle& SpecHandle);
	static bool TargetDataHasActor(const struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index_0);
	static bool TargetDataHasEndPoint(const struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index_0);
	static bool TargetDataHasHitResult(const struct FGameplayAbilityTargetDataHandle& HitResult, int32 Index_0);
	static bool TargetDataHasOrigin(const struct FGameplayAbilityTargetDataHandle& TargetData, int32 Index_0);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilitySystemBlueprintLibrary">();
	}
	static class UAbilitySystemBlueprintLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilitySystemBlueprintLibrary>();
	}
};

// Class GameplayAbilities.AbilitySystemComponent
// 0x3688 (0x3800 - 0x0178)
class UAbilitySystemComponent : public UGameplayTasksComponent
{
public:
	uint8                                         Pad_178[0x10];                                     // 0x0178(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FAttributeDefaults>             DefaultStartingData;                               // 0x0188(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	class FName                                   AffectedAnimInstanceTag;                           // 0x0198(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1A4[0x224];                                    // 0x01A4(0x0224)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         OutgoingDuration;                                  // 0x03C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         IncomingDuration;                                  // 0x03CC(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D0[0x68];                                     // 0x03D0(0x0068)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FString>                         ClientDebugStrings;                                // 0x0438(0x0010)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	TArray<class FString>                         ServerDebugStrings;                                // 0x0448(0x0010)(Net, ZeroConstructor, RepNotify, NativeAccessSpecifierPublic)
	bool                                          UserAbilityActivationInhibited;                    // 0x0458(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReplicationProxyEnabled;                           // 0x0459(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuppressGrantAbility;                             // 0x045A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSuppressGameplayCues;                             // 0x045B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45C[0x4];                                      // 0x045C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AGameplayAbilityTargetActor*>    SpawnedTargetActors;                               // 0x0460(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	uint8                                         Pad_470[0x48];                                     // 0x0470(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void(class UAnimTimeline* AnimTimeline)> OnTimelineStartPlaying;                            // 0x04B8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UAnimTimeline* AnimTimeline)> OnTimelineStopPlaying;                             // 0x04C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D8[0x8];                                      // 0x04D8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 OwnerActor;                                        // 0x04E0(0x0008)(Net, ZeroConstructor, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class AActor*                                 AvatarActor;                                       // 0x04E8(0x0008)(Net, ZeroConstructor, RepNotify, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_4F0[0x90];                                     // 0x04F0(0x0090)(Fixing Size After Last Property [ Dumper-7 ])
	struct FPredictionKey                         ScopedPredictionKey;                               // 0x0580(0x00A0)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_620[0x2B0];                                    // 0x0620(0x02B0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilitySpecContainer          ActivatableAbilities;                              // 0x08D0(0x0128)(BlueprintVisible, BlueprintReadOnly, Net, Transient, RepNotify, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_9F8[0x20];                                     // 0x09F8(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	TMap<class FString, class AActor*>            AbilityTargetActorMap;                             // 0x0A18(0x0050)(Protected, NativeAccessSpecifierProtected)
	TMap<class FString, class AActor*>            AbilityReplicatedTargetActorMap;                   // 0x0A68(0x0050)(Protected, NativeAccessSpecifierProtected)
	TArray<class FString>                         AbilityReplicatedTargetActorSpawnKey;              // 0x0AB8(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_AC8[0x10];                                     // 0x0AC8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UGameplayAbility*>               AllReplicatedInstancedAbilities;                   // 0x0AD8(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_AE8[0x990];                                    // 0x0AE8(0x0990)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityRepAnimMontage         RepAnimMontageInfo;                                // 0x1478(0x00F0)(Net, RepNotify, Protected, NativeAccessSpecifierProtected)
	struct FGameplayAbilityMultiRepAnimTimeline   RepMultiAnimTimelineInfo;                          // 0x1568(0x0120)(Net, RepNotify, Protected, NativeAccessSpecifierProtected)
	bool                                          bCachedIsNetSimulated;                             // 0x1688(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bPendingMontageRep;                                // 0x1689(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_168A[0x6];                                     // 0x168A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayAbilityLocalAnimMontage       LocalAnimMontageInfo;                              // 0x1690(0x0028)(Protected, NativeAccessSpecifierProtected)
	struct FGameplayAbilityMultiLocalAnimTimeline LocalMultiAnimTimelineInfo;                        // 0x16B8(0x0010)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_16C8[0xA0];                                    // 0x16C8(0x00A0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayEffectsContainer        ActiveGameplayEffects;                             // 0x1768(0x1318)(Net, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2A80[0x8];                                     // 0x2A80(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FActiveGameplayCueContainer            ActiveGameplayCues;                                // 0x2A88(0x0140)(Net, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FActiveGameplayCueContainer            MinimalReplicationGameplayCues;                    // 0x2BC8(0x0140)(Net, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2D08[0x218];                                   // 0x2D08(0x0218)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMinimalReplicationTagCountMap         MinimalBlockedAbilityTags;                         // 0x2F20(0x00B8)(Net, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<uint8>                                 BlockedAbilityBindings;                            // 0x2FD8(0x0010)(Net, ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2FE8[0x220];                                   // 0x2FE8(0x0220)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMinimalReplicationTagCountMap         MinimalReplicationTags;                            // 0x3208(0x00B8)(Net, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	TArray<class UAttributeSet*>                  SpawnedAttributes;                                 // 0x32C0(0x0010)(ExportObject, Net, ZeroConstructor, Transient, RepNotify, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_32D0[0x20];                                    // 0x32D0(0x0020)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMinimalReplicationTagCountMap         ReplicatedLooseTags;                               // 0x32F0(0x00B8)(Net, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	struct FMinimalReplicationTagCountMap         ReplicatedLooseTags_SkipOwner;                     // 0x33A8(0x00B8)(Net, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<class FString>                         PredictGameplayTagKeys;                            // 0x3460(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_3470[0x8];                                     // 0x3470(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FReplicatedPredictionKeyMap            ReplicatedPredictionKeyMap;                        // 0x3478(0x0128)(Net, Transient, NativeAccessSpecifierPublic)
	uint8                                         Pad_35A0[0x38];                                    // 0x35A0(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	struct FAbilityActivationExtraInfo            PendingActivationExtraInfo;                        // 0x35D8(0x0028)(Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3600[0xD0];                                    // 0x3600(0x00D0)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMinimalReplicationTagOperationContainer TagOperationContainer;                             // 0x36D0(0x0128)(Net, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	bool                                          IsImportantLog;                                    // 0x37F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_37F9[0x7];                                     // 0x37F9(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void AddGameplayTag_Predict(const struct FGameplayTag& GameplayTag, const int32 Count);
	void AddGameplayTags_Predict(const struct FGameplayTagContainer& GameplayTags);
	struct FActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToSelf(const struct FGameplayEffectSpecHandle& SpecHandle);
	struct FActiveGameplayEffectHandle BP_ApplyGameplayEffectSpecToTarget(const struct FGameplayEffectSpecHandle& SpecHandle, class UAbilitySystemComponent* Target);
	struct FActiveGameplayEffectHandle BP_ApplyGameplayEffectToSelf(TSubclassOf<class UGameplayEffect> GameplayEffectClass, float Level, const struct FGameplayEffectContextHandle& EffectContext);
	struct FActiveGameplayEffectHandle BP_ApplyGameplayEffectToTarget(TSubclassOf<class UGameplayEffect> GameplayEffectClass, class UAbilitySystemComponent* Target, float Level, const struct FGameplayEffectContextHandle& Context);
	bool CheckScopedPredicitionKeyReject(bool bCallReject);
	void ClearAbility(const struct FGameplayAbilitySpecHandle& Handle);
	void ClearAllAbilities();
	void ClearAllAbilitiesWithInputID(int32 InputID);
	void ClientActivateAbilityFailed(const struct FGameplayAbilitySpecHandle& AbilityToActivate, const class FString& PredictionKey);
	void ClientActivateAbilitySucceed(const struct FGameplayAbilitySpecHandle& AbilityToActivate, const struct FPredictionKey& PredictionKey);
	void ClientActivateAbilitySucceedWithEventData(const struct FGameplayAbilitySpecHandle& AbilityToActivate, const struct FPredictionKey& PredictionKey, const struct FGameplayEventData& TriggerEventData);
	void ClientCancelAbility(const struct FGameplayAbilitySpecHandle& AbilityToCancel, const struct FGameplayAbilityActivationInfo& ActivationInfo, const struct FAbilityEndContext& EndContext);
	void ClientCatchUpPredictionKey(const class FString& PredictionKey);
	void ClientEndAbility(const struct FGameplayAbilitySpecHandle& AbilityToEnd, const struct FGameplayAbilityActivationInfo& ActivationInfo, const struct FAbilityEndContext& EndContext);
	void ClientInternalReboot_Dynamic(const struct FPredictionKey& PredictionKey, const struct FPredictionDynamicParamHandle& Handle);
	void ClientInternalRebootChannel_Dynamic(const struct FPredictionKey& PredictionKey, const struct FPredictionDynamicParamHandle& Handle);
	void ClientPrintDebug_Response(const TArray<class FString>& Strings, int32 GameFlags);
	void ClientReceivePredictionKey(const struct FPredictionKey& Key);
	void ClientRejectPredictionKey(const class FString& PredictionKey);
	void ClientTestReplicateData(const struct FPredictionKey& Key);
	void ClientTryActivateAbility(const struct FGameplayAbilitySpecHandle& AbilityToActivate);
	void ExecuteGameplayCue(const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& GameplayCueParameters);
	void GetAllAttributes(TArray<struct FGameplayAttribute>* OutAttributes);
	void HandleGameplayCue(const struct FGameplayTag& GameplayCueTag, EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void InputCancel(int32 InputID);
	void InputConfirm(int32 InputID);
	struct FGameplayAbilitySpecHandle K2_GiveAbility(TSubclassOf<class UGameplayAbility> AbilityClass, int32 Level, int32 InputID);
	struct FGameplayAbilitySpecHandle K2_GiveAbilityAndActivateOnce(TSubclassOf<class UGameplayAbility> AbilityClass, int32 Level, int32 InputID);
	void K2_InitStats(TSubclassOf<class UAttributeSet> Attributes, const class UDataTable* DataTable);
	void KeepAbilityRootKeyAsExpiredPredictionKey(class UGameplayAbility* Ability, bool bWasCancelled);
	void KeepExpiredPredictionKey(const class FString& Key);
	void NetMulticast_InvokeGameplayCueAdded(const struct FGameplayTag& GameplayCueTag, const struct FPredictionKey& PredictionKey, const struct FGameplayEffectContextHandle& EffectContext);
	void NetMulticast_InvokeGameplayCueAdded_WithParams(const struct FGameplayTag& GameplayCueTag, const struct FPredictionKey& PredictionKey, const struct FGameplayCueParameters& Parameters);
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_FromSpec(const struct FGameplayEffectSpecForRPC& Spec, const struct FPredictionKey& PredictionKey);
	void NetMulticast_InvokeGameplayCueAddedAndWhileActive_WithParams(const struct FGameplayTag& GameplayCueTag, const struct FPredictionKey& PredictionKey, const struct FGameplayCueParameters& GameplayCueParameters);
	void NetMulticast_InvokeGameplayCueExecuted(const struct FGameplayTag& GameplayCueTag, const struct FPredictionKey& PredictionKey, const struct FGameplayEffectContextHandle& EffectContext);
	void NetMulticast_InvokeGameplayCueExecuted_FromSpec(const struct FGameplayEffectSpecForRPC& Spec, const struct FPredictionKey& PredictionKey);
	void NetMulticast_InvokeGameplayCueExecuted_WithParams(const struct FGameplayTag& GameplayCueTag, const struct FPredictionKey& PredictionKey, const struct FGameplayCueParameters& GameplayCueParameters);
	void NetMulticast_InvokeGameplayCuesAddedAndWhileActive_WithParams(const struct FGameplayTagContainer& GameplayCueTags, const struct FPredictionKey& PredictionKey, const struct FGameplayCueParameters& GameplayCueParameters);
	void NetMulticast_InvokeGameplayCuesExecuted(const struct FGameplayTagContainer& GameplayCueTags, const struct FPredictionKey& PredictionKey, const struct FGameplayEffectContextHandle& EffectContext);
	void NetMulticast_InvokeGameplayCuesExecuted_WithParams(const struct FGameplayTagContainer& GameplayCueTags, const struct FPredictionKey& PredictionKey, const struct FGameplayCueParameters& GameplayCueParameters);
	void NetMulticast_ReplicationActivatableAbilities(const struct FGameplayAbilitySpec& Spec, uint8 Operation);
	void OnAvatarActorDestroyed(class AActor* InActor);
	void OnOwnerActorDestroyed(class AActor* InActor);
	void OnPredictionKeyRejected(const class FString& Key);
	void OnRep_ActivateAbilities();
	void OnRep_ClientDebugString();
	void OnRep_OwningActor();
	void OnRep_ReplicatedAnimMontage();
	void OnRep_ReplicatedAnimTimeline();
	void OnRep_ServerDebugString();
	void OnRep_SpawnedAttributes(const TArray<class UAttributeSet*>& PreviousSpawnedAttributes);
	void OnSpawnedAttributesEndPlayed(class AActor* InActor, EEndPlayReason EndPlayReason);
	void PressInputID(int32 InputID);
	void ReleaseInputID(int32 InputID);
	int32 RemoveActiveEffectsWithAppliedTags(const struct FGameplayTagContainer& Tags);
	int32 RemoveActiveEffectsWithGrantedTagRequirements(const struct FGameplayTagRequirements& TagRequirements);
	int32 RemoveActiveEffectsWithGrantedTags(const struct FGameplayTagContainer& Tags);
	int32 RemoveActiveEffectsWithSourceTags(const struct FGameplayTagContainer& Tags);
	int32 RemoveActiveEffectsWithTags(const struct FGameplayTagContainer& Tags);
	bool RemoveActiveGameplayEffect(const struct FActiveGameplayEffectHandle& Handle, int32 StacksToRemove);
	void RemoveActiveGameplayEffectBySourceEffect(TSubclassOf<class UGameplayEffect> GameplayEffect, class UAbilitySystemComponent* InstigatorAbilitySystemComponent, int32 StacksToRemove);
	void RemoveGameplayTag_Predict(const struct FGameplayTag& GameplayTag, const int32 Count);
	void RemoveGameplayTags_Predict(const struct FGameplayTagContainer& GameplayTags);
	void ServerCancelAbility(const struct FGameplayAbilitySpecHandle& AbilityToCancel, const struct FGameplayAbilityActivationInfo& ActivationInfo, const struct FAbilityEndContext& EndContext);
	void ServerCatchUpOperation(const struct FMinimalReplicationTagOperation& InOperation);
	void ServerCurrentMontageJumpToSectionName(class UAnimMontage* ClientAnimMontage, class FName SectionName);
	void ServerCurrentMontageSetNextSectionName(class UAnimMontage* ClientAnimMontage, float ClientPosition, class FName SectionName, class FName NextSectionName);
	void ServerCurrentMontageSetPlayRate(class UAnimMontage* ClientAnimMontage, float InPlayRate);
	void ServerEndAbility(const struct FGameplayAbilitySpecHandle& AbilityToEnd, const struct FGameplayAbilityActivationInfo& ActivationInfo, const struct FPredictionKey& PredictionKey, const struct FAbilityEndContext& EndContext);
	void ServerInternalOfferData_Dynamic(const struct FPredictionKey& PredictionKey, float ValidTime, const struct FPredictionDynamicParamHandle& Handle);
	void ServerInternalReboot_Dynamic(const struct FPredictionKey& PredictionKey, const struct FPredictionDynamicParamHandle& Handle);
	void ServerInternalRebootChannel_Dynamic(const struct FPredictionKey& PredictionKey, const struct FPredictionDynamicParamHandle& Handle);
	void ServerPrintDebug_Request();
	void ServerPrintDebug_RequestWithStrings(const TArray<class FString>& Strings);
	void ServerTestDynamicParamHandle(const struct FPredictionDynamicParamHandle& Handle);
	void ServerTryActivateAbility(const struct FGameplayAbilitySpecHandle& AbilityToActivate, bool InputPressed, const struct FPredictionKey& PredictionKey, const struct FAbilityActivationExtraInfo& InActivationInfo);
	void ServerTryActivateAbilityWithEventData(const struct FGameplayAbilitySpecHandle& AbilityToActivate, bool InputPressed, const struct FPredictionKey& PredictionKey, const struct FGameplayEventData& TriggerEventData, const struct FAbilityActivationExtraInfo& InActivationInfo);
	void ServerVerifyPredictionKeys(const TArray<class FString>& Keys);
	void SetActiveGameplayEffectLevel(const struct FActiveGameplayEffectHandle& ActiveHandle, int32 NewLevel);
	void SetActiveGameplayEffectLevelUsingQuery(const struct FGameplayEffectQuery& Query, int32 NewLevel);
	void SetMontageRepAnimPositionMethod(ERepAnimPositionMethod InMethod);
	void SetUserAbilityActivationInhibited(bool NewInhibit);
	void TestDynamicRPC();
	void TestFunction(int32 Data1, const TArray<struct FHitResult>& Data2, const struct FHitResult& Data3, const class FString& Data4, class FName Data5);
	void TestFunction2(const struct FHitResult& Data1, const class FString& Data2, int32 Data3, const TArray<struct FHitResult>& Data4, class FName Data5);
	void TestFunction3(int32 Data1, const TArray<struct FHitResult>& Data2, const struct FHitResult& Data3, const class FString& Data4);
	void TestOfferDataCallback(const struct FPredictionDynamicParamHandle& LocalHandle, const struct FPredictionDynamicParamHandle& RemoteHandle);
	void TickUpdatePredictionKey();
	bool TryActivateAbilitiesByTag(const struct FGameplayTagContainer& GameplayTagContainer, bool bAllowRemoteActivation);
	bool TryActivateAbility(const struct FGameplayAbilitySpecHandle& AbilityToActivate, bool bAllowRemoteActivation);
	bool TryActivateAbilityByClass(TSubclassOf<class UGameplayAbility> InAbilityToActivate, bool bAllowRemoteActivation);
	void UpdateActiveGameplayEffectSetByCallerMagnitude(const struct FActiveGameplayEffectHandle& ActiveHandle, const struct FGameplayTag& SetByCallerTag, float NewValue);
	void UpdateActiveGameplayEffectSetByCallerMagnitudes(const struct FActiveGameplayEffectHandle& ActiveHandle, const TMap<struct FGameplayTag, float>& NewSetByCallerValues);

	void FindAllAbilitiesMatchingQuery(TArray<struct FGameplayAbilitySpecHandle>* OutAbilityHandles, const struct FGameplayTagQuery& Query) const;
	void FindAllAbilitiesWithInputID(TArray<struct FGameplayAbilitySpecHandle>* OutAbilityHandles, int32 InputID) const;
	void FindAllAbilitiesWithTags(TArray<struct FGameplayAbilitySpecHandle>* OutAbilityHandles, const struct FGameplayTagContainer& Tags, bool bExactMatch) const;
	float GetAbilityActivateDelayTime(const class FString& InActivationKey) const;
	TArray<struct FActiveGameplayEffectHandle> GetActiveEffects(const struct FGameplayEffectQuery& Query) const;
	TArray<struct FActiveGameplayEffectHandle> GetActiveEffectsWithAllTags(const struct FGameplayTagContainer& Tags) const;
	void GetAllAbilities(TArray<struct FGameplayAbilitySpecHandle>* OutAbilityHandles) const;
	const class UAttributeSet* GetAttributeSet(TSubclassOf<class UAttributeSet> AttributeSetClass) const;
	float GetCurrentAbilityActivateDelayTime() const;
	float GetGameplayAttributeValue(const struct FGameplayAttribute& Attribute, bool* bFound) const;
	int32 GetGameplayEffectCount(TSubclassOf<class UGameplayEffect> SourceGameplayEffect, class UAbilitySystemComponent* OptionalInstigatorFilterComponent, bool bEnforceOnGoingCheck) const;
	int32 GetGameplayEffectCount_IfLoaded(TSoftClassPtr<class UClass> SoftSourceGameplayEffect, class UAbilitySystemComponent* OptionalInstigatorFilterComponent, bool bEnforceOnGoingCheck) const;
	float GetGameplayEffectMagnitude(const struct FActiveGameplayEffectHandle& Handle, const struct FGameplayAttribute& Attribute) const;
	int32 GetGameplayTagCount(const struct FGameplayTag& GameplayTag) const;
	class FString GetKeyDebugString(const class FString& InKey) const;
	bool GetUserAbilityActivationInhibited() const;
	bool IsForRemoteClient() const;
	bool IsForRunAlone() const;
	bool IsGameplayCueActive(const struct FGameplayTag& GameplayCueTag) const;
	bool IsLocallyControlled() const;
	bool IsNetAuthority() const;
	bool IsPredictingClient() const;
	struct FGameplayEffectContextHandle MakeEffectContext() const;
	struct FGameplayEffectSpecHandle MakeOutgoingSpec(TSubclassOf<class UGameplayEffect> GameplayEffectClass, float Level, const struct FGameplayEffectContextHandle& Context) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilitySystemComponent">();
	}
	static class UAbilitySystemComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilitySystemComponent>();
	}
};

// Class GameplayAbilities.AbilitySystemDebugHUDExtension
// 0x0000 (0x0030 - 0x0030)
class UAbilitySystemDebugHUDExtension : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilitySystemDebugHUDExtension">();
	}
	static class UAbilitySystemDebugHUDExtension* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilitySystemDebugHUDExtension>();
	}
};

// Class GameplayAbilities.AbilitySystemDebugHUDExtension_Tags
// 0x0058 (0x0088 - 0x0030)
class UAbilitySystemDebugHUDExtension_Tags final : public UAbilitySystemDebugHUDExtension
{
public:
	uint8                                         Pad_30[0x58];                                      // 0x0030(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilitySystemDebugHUDExtension_Tags">();
	}
	static class UAbilitySystemDebugHUDExtension_Tags* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilitySystemDebugHUDExtension_Tags>();
	}
};

// Class GameplayAbilities.AbilitySystemDebugHUDExtension_Attributes
// 0x0058 (0x0088 - 0x0030)
class UAbilitySystemDebugHUDExtension_Attributes final : public UAbilitySystemDebugHUDExtension
{
public:
	uint8                                         Pad_30[0x58];                                      // 0x0030(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilitySystemDebugHUDExtension_Attributes">();
	}
	static class UAbilitySystemDebugHUDExtension_Attributes* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilitySystemDebugHUDExtension_Attributes>();
	}
};

// Class GameplayAbilities.AbilitySystemDebugHUDExtension_BlockedAbilityTags
// 0x0058 (0x0088 - 0x0030)
class UAbilitySystemDebugHUDExtension_BlockedAbilityTags final : public UAbilitySystemDebugHUDExtension
{
public:
	uint8                                         Pad_30[0x58];                                      // 0x0030(0x0058)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilitySystemDebugHUDExtension_BlockedAbilityTags">();
	}
	static class UAbilitySystemDebugHUDExtension_BlockedAbilityTags* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilitySystemDebugHUDExtension_BlockedAbilityTags>();
	}
};

// Class GameplayAbilities.AbilitySystemGlobals
// 0x0430 (0x0460 - 0x0030)
class UAbilitySystemGlobals : public UObject
{
public:
	struct FSoftClassPath                         AbilitySystemGlobalsClassName;                     // 0x0030(0x0028)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSoftClassPath                         MagnitudeDiffusionClassName;                       // 0x0058(0x0028)(ZeroConstructor, Config, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_80[0x28];                                      // 0x0080(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bUseDebugTargetFromHud;                            // 0x00A8(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          AbilitySupportSimulation;                          // 0x00A9(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AA[0x2];                                       // 0x00AA(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           ActivateFailIsDeadTag;                             // 0x00AC(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivateFailIsDeadName;                            // 0x00B8(0x000C)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ActivateFailActivateIntervalTag;                   // 0x00C4(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivateFailActivateIntervalName;                  // 0x00D0(0x000C)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ActivateFailCooldownTag;                           // 0x00DC(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivateFailCooldownName;                          // 0x00E8(0x000C)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ActivateFailCostTag;                               // 0x00F4(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivateFailCostName;                              // 0x0100(0x000C)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ActivateFailTagsBlockedTag;                        // 0x010C(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivateFailTagsBlockedName;                       // 0x0118(0x000C)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ActivateFailTagsMissingTag;                        // 0x0124(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivateFailTagsMissingName;                       // 0x0130(0x000C)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ActivateFailNetworkingTag;                         // 0x013C(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivateFailNetworkingName;                        // 0x0148(0x000C)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           SimulatedCanActiveTag;                             // 0x0154(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SimulatedCanActiveName;                            // 0x0160(0x000C)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinimalReplicationTagCountBits;                    // 0x016C(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ActivateFailRetryTag;                              // 0x0170(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivateFailRetryName;                             // 0x017C(0x000C)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           ActivateFailHasActiveInstanceTag;                  // 0x0188(0x000C)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActivateFailHasActiveInstanceName;                 // 0x0194(0x000C)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxForceEndByRemoteTime_Server;                    // 0x01A0(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxForceEndByRemoteTime_Client;                    // 0x01A4(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForceEndByRemoteMutableAddedTime;                  // 0x01A8(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxForceEndByRemoteMutableTime;                    // 0x01AC(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ForceEndByRemoteMutableTimeRecoverSpeed;           // 0x01B0(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxActivationBufferWaitTime;                       // 0x01B4(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxActivationBufferWaitingCancelTime;              // 0x01B8(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxActivationBufferWaitingRetryTime;               // 0x01BC(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxActivationBufferSize;                           // 0x01C0(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerDashStopWaitData_Hit;                        // 0x01C4(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ServerDashStopWaitData_Other;                      // 0x01C8(0x0004)(BlueprintVisible, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1CC[0x4];                                      // 0x01CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FNetSerializeScriptStructCache         TargetDataStructCache;                             // 0x01D0(0x0010)(NativeAccessSpecifierPublic)
	struct FNetSerializeScriptStructCache         EffectContextStructCache;                          // 0x01E0(0x0010)(NativeAccessSpecifierPublic)
	bool                                          bAllowGameplayModEvaluationChannels;               // 0x01F0(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EGameplayModEvaluationChannel                 DefaultGameplayModEvaluationChannel;               // 0x01F1(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1F2[0x2];                                      // 0x01F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   GameplayModEvaluationChannelAliases[0xA];          // 0x01F4(0x000C)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_26C[0x4];                                      // 0x026C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        GlobalCurveTableName;                              // 0x0270(0x0028)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UCurveTable*                            GlobalCurveTable;                                  // 0x0298(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        GlobalAttributeMetaDataTableName;                  // 0x02A0(0x0028)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UDataTable*                             GlobalAttributeMetaDataTable;                      // 0x02C8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        GlobalAttributeSetDefaultsTableName;               // 0x02D0(0x0028)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<struct FSoftObjectPath>                GlobalAttributeSetDefaultsTableNames;              // 0x02F8(0x0010)(ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	TArray<class UCurveTable*>                    GlobalAttributeDefaultsTables;                     // 0x0308(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        GlobalGameplayCueManagerClass;                     // 0x0318(0x0028)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        GlobalGameplayCueManagerName;                      // 0x0340(0x0028)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TArray<class FString>                         GameplayCueNotifyPaths;                            // 0x0368(0x0010)(ZeroConstructor, Config, Protected, NativeAccessSpecifierProtected)
	int32                                         MaxCueActorsToPreAllocate;                         // 0x0378(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_37C[0x4];                                      // 0x037C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        GameplayTagResponseTableName;                      // 0x0380(0x0028)(ZeroConstructor, Config, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class UGameplayTagReponseTable*               GameplayTagResponseTable;                          // 0x03A8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B0[0x1];                                      // 0x03B0(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          PredictTargetGameplayEffects;                      // 0x03B1(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          ReplicateActivationOwnedTags;                      // 0x03B2(0x0001)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3B3[0x5];                                      // 0x03B3(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class UGameplayCueManager*                    GlobalGameplayCueManager;                          // 0x03B8(0x0008)(ZeroConstructor, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C0[0x40];                                     // 0x03C0(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        ReferencedObjects;                                 // 0x0400(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	TMap<struct FObjectPoolKey, struct FObjectPoolItems> Pools;                                             // 0x0410(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)

public:
	void ResetIgnoreCooldownAndCost();

	int32 GetIgnoreCostsMode() const;
	bool ShouldIgnoreCooldowns() const;
	bool ShouldIgnoreCosts() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilitySystemGlobals">();
	}
	static class UAbilitySystemGlobals* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilitySystemGlobals>();
	}
};

// Class GameplayAbilities.AbilitySystemInterface
// 0x0000 (0x0030 - 0x0030)
class IAbilitySystemInterface : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilitySystemInterface">();
	}
	static class IAbilitySystemInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAbilitySystemInterface>();
	}
};

// Class GameplayAbilities.AbilitySystemReplicationProxyInterface
// 0x0000 (0x0030 - 0x0030)
class IAbilitySystemReplicationProxyInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilitySystemReplicationProxyInterface">();
	}
	static class IAbilitySystemReplicationProxyInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAbilitySystemReplicationProxyInterface>();
	}
};

// Class GameplayAbilities.AttributeSet
// 0x0008 (0x0038 - 0x0030)
class UAttributeSet : public UObject
{
public:
	uint8                                         Pad_30[0x8];                                       // 0x0030(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AttributeSet">();
	}
	static class UAttributeSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAttributeSet>();
	}
};

// Class GameplayAbilities.AbilitySystemTestAttributeSet
// 0x0048 (0x0080 - 0x0038)
class UAbilitySystemTestAttributeSet final : public UAttributeSet
{
public:
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         MaxHealth;                                         // 0x0040(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Health;                                            // 0x0044(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Mana;                                              // 0x0048(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxMana;                                           // 0x004C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Damage;                                            // 0x0050(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         SpellDamage;                                       // 0x0054(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PhysicalDamage;                                    // 0x0058(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CritChance;                                        // 0x005C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CritMultiplier;                                    // 0x0060(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ArmorDamageReduction;                              // 0x0064(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DodgeChance;                                       // 0x0068(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LifeSteal;                                         // 0x006C(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Strength;                                          // 0x0070(0x0004)(Edit, BlueprintVisible, Net, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StackingAttribute1;                                // 0x0074(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StackingAttribute2;                                // 0x0078(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NoStackAttribute;                                  // 0x007C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilitySystemTestAttributeSet">();
	}
	static class UAbilitySystemTestAttributeSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAbilitySystemTestAttributeSet>();
	}
};

// Class GameplayAbilities.AbilitySystemTestPawn
// 0x0020 (0x0578 - 0x0558)
class AAbilitySystemTestPawn final : public ADefaultPawn
{
public:
	uint8                                         Pad_558[0x18];                                     // 0x0558(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class UAbilitySystemComponent*                AbilitySystemComponent;                            // 0x0570(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilitySystemTestPawn">();
	}
	static class AAbilitySystemTestPawn* GetDefaultObj()
	{
		return GetDefaultObjImpl<AAbilitySystemTestPawn>();
	}
};

// Class GameplayAbilities.AnimNotify_GameplayCue
// 0x0010 (0x0050 - 0x0040)
class UAnimNotify_GameplayCue final : public UAnimNotify
{
public:
	struct FGameplayCueTag                        GameplayCue;                                       // 0x0040(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_GameplayCue">();
	}
	static class UAnimNotify_GameplayCue* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_GameplayCue>();
	}
};

// Class GameplayAbilities.AnimNotify_GameplayCueState
// 0x0010 (0x0048 - 0x0038)
class UAnimNotify_GameplayCueState final : public UAnimNotifyState
{
public:
	struct FGameplayCueTag                        GameplayCue;                                       // 0x0038(0x000C)(Edit, BlueprintVisible, BlueprintReadOnly, NoDestructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AnimNotify_GameplayCueState">();
	}
	static class UAnimNotify_GameplayCueState* GetDefaultObj()
	{
		return GetDefaultObjImpl<UAnimNotify_GameplayCueState>();
	}
};

// Class GameplayAbilities.GameplayAbilityBlueprint
// 0x0000 (0x00B0 - 0x00B0)
class UGameplayAbilityBlueprint final : public UBlueprint
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayAbilityBlueprint">();
	}
	static class UGameplayAbilityBlueprint* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayAbilityBlueprint>();
	}
};

// Class GameplayAbilities.AbilityAsyncDataOwnerInterface
// 0x0000 (0x0030 - 0x0030)
class IAbilityAsyncDataOwnerInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"AbilityAsyncDataOwnerInterface">();
	}
	static class IAbilityAsyncDataOwnerInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IAbilityAsyncDataOwnerInterface>();
	}
};

// Class GameplayAbilities.GameplayCueFunctionLibrary
// 0x0000 (0x0030 - 0x0030)
class UGameplayCueFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void AddGameplayCueOnActor(class AActor* Target, const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& Parameters);
	static void ExecuteGameplayCueOnActor(class AActor* Target, const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& Parameters);
	static struct FGameplayCueParameters MakeGameplayCueParametersFromHitResult(const struct FHitResult& HitResult);
	static void RemoveGameplayCueOnActor(class AActor* Target, const struct FGameplayTag& GameplayCueTag, const struct FGameplayCueParameters& Parameters);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayCueFunctionLibrary">();
	}
	static class UGameplayCueFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayCueFunctionLibrary>();
	}
};

// Class GameplayAbilities.GameplayCueInterface
// 0x0000 (0x0030 - 0x0030)
class IGameplayCueInterface final : public IInterface
{
public:
	void BlueprintCustomHandler(EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	void ForwardGameplayCueToParent();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayCueInterface">();
	}
	static class IGameplayCueInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<IGameplayCueInterface>();
	}
};

// Class GameplayAbilities.GameplayCueManager
// 0x0290 (0x02C8 - 0x0038)
class UGameplayCueManager : public UDataAsset
{
public:
	uint8                                         Pad_38[0x18];                                      // 0x0038(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayCueObjectLibrary              RuntimeGameplayCueObjectLibrary;                   // 0x0050(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCueObjectLibrary              EditorGameplayCueObjectLibrary;                    // 0x00A0(0x0050)(Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_F0[0x178];                                     // 0x00F0(0x0178)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TSubclassOf<class UObject>>            LoadedGameplayCueNotifyClasses;                    // 0x0268(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<TSubclassOf<class AGameplayCueNotify_Actor>> GameplayCueClassesForPreallocation;                // 0x0278(0x0010)(ZeroConstructor, Transient, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	TArray<struct FGameplayCuePendingExecute>     PendingExecuteCues;                                // 0x0288(0x0010)(ZeroConstructor, Transient, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	int32                                         GameplayCueSendContextCount;                       // 0x0298(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_29C[0x4];                                      // 0x029C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FPreallocationInfo>             PreallocationInfoList_Internal;                    // 0x02A0(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_2B0[0x18];                                     // 0x02B0(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayCueManager">();
	}
	static class UGameplayCueManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayCueManager>();
	}
};

// Class GameplayAbilities.GameplayCueNotify_Actor
// 0x0150 (0x05E0 - 0x0490)
class AGameplayCueNotify_Actor : public AActor
{
public:
	bool                                          bAutoDestroyOnRemove;                              // 0x0490(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_491[0x3];                                      // 0x0491(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         AutoDestroyDelay;                                  // 0x0494(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WarnIfTimelineIsStillRunning;                      // 0x0498(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          WarnIfLatentActionIsStillRunning;                  // 0x0499(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49A[0x6];                                      // 0x049A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              OnActiveDispatcher;                                // 0x04A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_4B0[0x18];                                     // 0x04B0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              WhileActiveDispatcher;                             // 0x04C8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_4D8[0x18];                                     // 0x04D8(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              ExecutedDispatcher;                                // 0x04F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_500[0x18];                                     // 0x0500(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              RemovedDispatcher;                                 // 0x0518(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_528[0x18];                                     // 0x0528(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TMulticastInlineDelegate<void()>              RecycleDispatcher;                                 // 0x0540(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_550[0x18];                                     // 0x0550(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0568(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GameplayCueName;                                   // 0x0574(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAutoAttachToOwner;                                // 0x0580(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOverride;                                        // 0x0581(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUniqueInstancePerInstigator;                      // 0x0582(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bUniqueInstancePerSourceObject;                    // 0x0583(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMultipleOnActiveEvents;                      // 0x0584(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMultipleWhileActiveEvents;                   // 0x0585(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowMultipleOnRemoveEvents;                      // 0x0586(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_587[0x1];                                      // 0x0587(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         NumPreallocatedInstances;                          // 0x0588(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_58C[0x54];                                     // 0x058C(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void K2_EndGameplayCue();
	void K2_HandleGameplayCue(class AActor* MyTarget, EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters);
	bool OnActive(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	bool OnExecute(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	void OnOwnerDestroyed(class AActor* DestroyedActor);
	void OnOwnerEndPlay(class AActor* Actor, EEndPlayReason EndPlayReason);
	bool OnRemove(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);
	bool WhileActive(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayCueNotify_Actor">();
	}
	static class AGameplayCueNotify_Actor* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameplayCueNotify_Actor>();
	}
};

// Class GameplayAbilities.GameplayCueNotify_Static
// 0x0020 (0x0050 - 0x0030)
class UGameplayCueNotify_Static : public UObject
{
public:
	struct FGameplayTag                           GameplayCueTag;                                    // 0x0030(0x000C)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   GameplayCueName;                                   // 0x003C(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, AssetRegistrySearchable, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsOverride;                                        // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bNetCullCheck : 1;                                 // 0x0049(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void K2_HandleGameplayCue(class AActor* MyTarget, EGameplayCueEvent EventType, const struct FGameplayCueParameters& Parameters) const;
	bool OnActive(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters) const;
	bool OnExecute(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters) const;
	bool OnRemove(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters) const;
	bool WhileActive(class AActor* MyTarget, const struct FGameplayCueParameters& Parameters) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayCueNotify_Static">();
	}
	static class UGameplayCueNotify_Static* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayCueNotify_Static>();
	}
};

// Class GameplayAbilities.GameplayCueNotify_Burst
// 0x0340 (0x0390 - 0x0050)
class UGameplayCueNotify_Burst final : public UGameplayCueNotify_Static
{
public:
	struct FGameplayCueNotify_SpawnCondition      DefaultSpawnCondition;                             // 0x0050(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCueNotify_PlacementInfo       DefaultPlacementInfo;                              // 0x0088(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCueNotify_BurstEffects        BurstEffects;                                      // 0x00D0(0x02C0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	void OnBurst(class AActor* Target, const struct FGameplayCueParameters& Parameters, const struct FGameplayCueNotify_SpawnResult& SpawnResults) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayCueNotify_Burst">();
	}
	static class UGameplayCueNotify_Burst* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayCueNotify_Burst>();
	}
};

// Class GameplayAbilities.GameplayCueNotify_BurstLatent
// 0x0398 (0x0978 - 0x05E0)
class AGameplayCueNotify_BurstLatent final : public AGameplayCueNotify_Actor
{
public:
	struct FGameplayCueNotify_SpawnCondition      DefaultSpawnCondition;                             // 0x05E0(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCueNotify_PlacementInfo       DefaultPlacementInfo;                              // 0x0618(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCueNotify_BurstEffects        BurstEffects;                                      // 0x0660(0x02C0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCueNotify_SpawnResult         BurstSpawnResults;                                 // 0x0920(0x0058)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)

public:
	void OnBurst(class AActor* Target, const struct FGameplayCueParameters& Parameters, const struct FGameplayCueNotify_SpawnResult& SpawnResults);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayCueNotify_BurstLatent">();
	}
	static class AGameplayCueNotify_BurstLatent* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameplayCueNotify_BurstLatent>();
	}
};

// Class GameplayAbilities.GameplayCueNotify_HitImpact
// 0x0010 (0x0060 - 0x0050)
class UGameplayCueNotify_HitImpact final : public UGameplayCueNotify_Static
{
public:
	class USoundBase*                             Sound;                                             // 0x0050(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UParticleSystem*                        ParticleSystem;                                    // 0x0058(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayCueNotify_HitImpact">();
	}
	static class UGameplayCueNotify_HitImpact* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayCueNotify_HitImpact>();
	}
};

// Class GameplayAbilities.GameplayCueNotify_Looping
// 0x0C38 (0x1218 - 0x05E0)
class AGameplayCueNotify_Looping final : public AGameplayCueNotify_Actor
{
public:
	struct FGameplayCueNotify_SpawnCondition      DefaultSpawnCondition;                             // 0x05E0(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCueNotify_PlacementInfo       DefaultPlacementInfo;                              // 0x0618(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCueNotify_BurstEffects        ApplicationEffects;                                // 0x0660(0x02C0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCueNotify_SpawnResult         ApplicationSpawnResults;                           // 0x0920(0x0058)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCueNotify_LoopingEffects      LoopingEffects;                                    // 0x0978(0x0210)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCueNotify_SpawnResult         LoopingSpawnResults;                               // 0x0B88(0x0058)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCueNotify_BurstEffects        RecurringEffects;                                  // 0x0BE0(0x02C0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCueNotify_SpawnResult         RecurringSpawnResults;                             // 0x0EA0(0x0058)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCueNotify_BurstEffects        RemovalEffects;                                    // 0x0EF8(0x02C0)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FGameplayCueNotify_SpawnResult         RemovalSpawnResults;                               // 0x11B8(0x0058)(BlueprintVisible, BlueprintReadOnly, ContainsInstancedReference, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_1210[0x8];                                     // 0x1210(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnApplication(class AActor* Target, const struct FGameplayCueParameters& Parameters, const struct FGameplayCueNotify_SpawnResult& SpawnResults);
	void OnLoopingStart(class AActor* Target, const struct FGameplayCueParameters& Parameters, const struct FGameplayCueNotify_SpawnResult& SpawnResults);
	void OnRecurring(class AActor* Target, const struct FGameplayCueParameters& Parameters, const struct FGameplayCueNotify_SpawnResult& SpawnResults);
	void OnRemoval(class AActor* Target, const struct FGameplayCueParameters& Parameters, const struct FGameplayCueNotify_SpawnResult& SpawnResults);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayCueNotify_Looping">();
	}
	static class AGameplayCueNotify_Looping* GetDefaultObj()
	{
		return GetDefaultObjImpl<AGameplayCueNotify_Looping>();
	}
};

// Class GameplayAbilities.GameplayCueSet
// 0x0060 (0x0098 - 0x0038)
class UGameplayCueSet : public UDataAsset
{
public:
	uint8                                         Pad_38[0x50];                                      // 0x0038(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FGameplayCueNotifyData>         GameplayCueData;                                   // 0x0088(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayCueSet">();
	}
	static class UGameplayCueSet* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayCueSet>();
	}
};

// Class GameplayAbilities.GameplayCueTranslator
// 0x0000 (0x0030 - 0x0030)
class UGameplayCueTranslator : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayCueTranslator">();
	}
	static class UGameplayCueTranslator* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayCueTranslator>();
	}
};

// Class GameplayAbilities.GameplayCueTranslator_Test
// 0x0000 (0x0030 - 0x0030)
class UGameplayCueTranslator_Test final : public UGameplayCueTranslator
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayCueTranslator_Test">();
	}
	static class UGameplayCueTranslator_Test* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayCueTranslator_Test>();
	}
};

// Class GameplayAbilities.GameplayEffectCalculation
// 0x0010 (0x0040 - 0x0030)
class UGameplayEffectCalculation : public UObject
{
public:
	TArray<struct FGameplayEffectAttributeCaptureDefinition> RelevantAttributesToCapture;                       // 0x0030(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayEffectCalculation">();
	}
	static class UGameplayEffectCalculation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayEffectCalculation>();
	}
};

// Class GameplayAbilities.GameplayEffectCustomApplicationRequirement
// 0x0000 (0x0030 - 0x0030)
class UGameplayEffectCustomApplicationRequirement : public UObject
{
public:
	bool CanApplyGameplayEffect(const class UGameplayEffect* GameplayEffect, const struct FGameplayEffectSpec& Spec, class UAbilitySystemComponent* ASC) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayEffectCustomApplicationRequirement">();
	}
	static class UGameplayEffectCustomApplicationRequirement* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayEffectCustomApplicationRequirement>();
	}
};

// Class GameplayAbilities.GameplayEffectExecutionCalculation
// 0x0008 (0x0048 - 0x0040)
class UGameplayEffectExecutionCalculation : public UGameplayEffectCalculation
{
public:
	bool                                          bRequiresPassedInTags;                             // 0x0040(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void Execute(const struct FGameplayEffectCustomExecutionParameters& ExecutionParams, struct FGameplayEffectCustomExecutionOutput* OutExecutionOutput) const;
	void PostExecute(const struct FGameplayEffectCustomExecutionParameters& ExecutionParams, struct FGameplayEffectCustomExecutionOutput* OutExecutionOutput) const;
	void PreExecute(const struct FGameplayEffectCustomExecutionParameters& ExecutionParams, struct FGameplayEffectCustomExecutionOutput* OutExecutionOutput) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayEffectExecutionCalculation">();
	}
	static class UGameplayEffectExecutionCalculation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayEffectExecutionCalculation>();
	}
};

// Class GameplayAbilities.GameplayModMagnitudeCalculation
// 0x0008 (0x0048 - 0x0040)
class UGameplayModMagnitudeCalculation : public UGameplayEffectCalculation
{
public:
	bool                                          bAllowNonNetAuthorityDependencyRegistration;       // 0x0040(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, AdvancedDisplay, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_41[0x7];                                       // 0x0041(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float CalculateBaseMagnitude(const struct FGameplayEffectSpec& Spec) const;
	float GetSetByCallerMagnitudeByName(const struct FGameplayEffectSpec& EffectSpec, const class FName& MagnitudeName) const;
	float GetSetByCallerMagnitudeByTag(const struct FGameplayEffectSpec& EffectSpec, const struct FGameplayTag& Tag) const;
	const struct FGameplayTagContainer GetSourceActorTags(const struct FGameplayEffectSpec& EffectSpec) const;
	struct FGameplayTagContainer GetSourceAggregatedTags(const struct FGameplayEffectSpec& EffectSpec) const;
	const struct FGameplayTagContainer GetSourceSpecTags(const struct FGameplayEffectSpec& EffectSpec) const;
	const struct FGameplayTagContainer GetTargetActorTags(const struct FGameplayEffectSpec& EffectSpec) const;
	struct FGameplayTagContainer GetTargetAggregatedTags(const struct FGameplayEffectSpec& EffectSpec) const;
	const struct FGameplayTagContainer GetTargetSpecTags(const struct FGameplayEffectSpec& EffectSpec) const;
	float K2_GetCapturedAttributeMagnitude(const struct FGameplayEffectSpec& EffectSpec, const struct FGameplayAttribute& Attribute, const struct FGameplayTagContainer& SourceTags, const struct FGameplayTagContainer& TargetTags) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayModMagnitudeCalculation">();
	}
	static class UGameplayModMagnitudeCalculation* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayModMagnitudeCalculation>();
	}
};

// Class GameplayAbilities.GameplayModMagnitudeDiffusion
// 0x0000 (0x0030 - 0x0030)
class UGameplayModMagnitudeDiffusion : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayModMagnitudeDiffusion">();
	}
	static class UGameplayModMagnitudeDiffusion* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayModMagnitudeDiffusion>();
	}
};

// Class GameplayAbilities.GameplayTagReponseTable
// 0x0228 (0x0260 - 0x0038)
class UGameplayTagReponseTable final : public UDataAsset
{
public:
	TArray<struct FGameplayTagResponseTableEntry> Entries;                                           // 0x0038(0x0010)(Edit, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_48[0x218];                                     // 0x0048(0x0218)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void TagResponseEvent(const struct FGameplayTag& Tag, int32 NewCount, class UAbilitySystemComponent* ASC, int32 idx);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"GameplayTagReponseTable">();
	}
	static class UGameplayTagReponseTable* GetDefaultObj()
	{
		return GetDefaultObjImpl<UGameplayTagReponseTable>();
	}
};

// Class GameplayAbilities.MovieSceneGameplayCueTriggerSection
// 0x00F8 (0x0208 - 0x0110)
class UMovieSceneGameplayCueTriggerSection final : public UMovieSceneHookSection
{
public:
	struct FMovieSceneGameplayCueChannel          Channel;                                           // 0x0110(0x00F8)(AssetRegistrySearchable, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneGameplayCueTriggerSection">();
	}
	static class UMovieSceneGameplayCueTriggerSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneGameplayCueTriggerSection>();
	}
};

// Class GameplayAbilities.MovieSceneGameplayCueSection
// 0x0098 (0x01A8 - 0x0110)
class UMovieSceneGameplayCueSection final : public UMovieSceneHookSection
{
public:
	struct FMovieSceneGameplayCueKey              Cue;                                               // 0x0110(0x0098)(Edit, NoDestructor, AssetRegistrySearchable, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneGameplayCueSection">();
	}
	static class UMovieSceneGameplayCueSection* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneGameplayCueSection>();
	}
};

// Class GameplayAbilities.MovieSceneGameplayCueTrack
// 0x0010 (0x00B0 - 0x00A0)
class UMovieSceneGameplayCueTrack final : public UMovieSceneNameableTrack
{
public:
	TArray<class UMovieSceneSection*>             Sections;                                          // 0x00A0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)

public:
	static void SetSequencerTrackHandler(TDelegate<void(class AActor* Target, const struct FGameplayTag& GameplayTag, struct FGameplayCueParameters& Parameters, EGameplayCueEvent Event)> InGameplayCueTrackHandler);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"MovieSceneGameplayCueTrack">();
	}
	static class UMovieSceneGameplayCueTrack* GetDefaultObj()
	{
		return GetDefaultObjImpl<UMovieSceneGameplayCueTrack>();
	}
};

// Class GameplayAbilities.TickableAttributeSetInterface
// 0x0000 (0x0030 - 0x0030)
class ITickableAttributeSetInterface final : public IInterface
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TickableAttributeSetInterface">();
	}
	static class ITickableAttributeSetInterface* GetDefaultObj()
	{
		return GetDefaultObjImpl<ITickableAttributeSetInterface>();
	}
};

}

