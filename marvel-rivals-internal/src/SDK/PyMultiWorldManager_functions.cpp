#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: PyMultiWorldManager

#include "Basic.hpp"

#include "PyMultiWorldManager_classes.hpp"
#include "PyMultiWorldManager_parameters.hpp"


namespace SDK
{

// PythonFunction PyMultiWorldManager.PyMultiWorldManager.Init
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UPyMultiWorldManager::Init()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyMultiWorldManager", "Init");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyMultiWorldManager.PyMultiWorldManager.ReceiveOnWorldLoaded
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WorldName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPyMultiWorldManager::ReceiveOnWorldLoaded(class FName WorldName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyMultiWorldManager", "ReceiveOnWorldLoaded");

	Params::PyMultiWorldManager_ReceiveOnWorldLoaded Parms{};

	Parms.WorldName = WorldName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// PythonFunction PyMultiWorldManager.PyMultiWorldManager.OnViewingWorldChanged
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)
// Parameters:
// class FName                             WorldName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UPyMultiWorldManager::OnViewingWorldChanged(class FName WorldName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("PyMultiWorldManager", "OnViewingWorldChanged");

	Params::PyMultiWorldManager_OnViewingWorldChanged Parms{};

	Parms.WorldName = WorldName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}

}

