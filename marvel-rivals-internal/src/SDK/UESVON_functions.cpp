#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: UESVON

#include "Basic.hpp"

#include "UESVON_classes.hpp"
#include "UESVON_parameters.hpp"


namespace SDK
{

// Function UESVON.AITask_SVONMoveTo.SVONAIMoveTo
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class AAIController*                    Controller                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          GoalLocation                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    aUseAsyncPathfinding                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           GoalActor                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   AcceptanceRadius                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EAIOptionFlag                           StopOnOverlap                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bLockAILogic                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseContinuosGoalTracking                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, AdvancedDisplay, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAITask_SVONMoveTo*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UAITask_SVONMoveTo* UAITask_SVONMoveTo::SVONAIMoveTo(class AAIController* Controller, const struct FVector& GoalLocation, bool aUseAsyncPathfinding, class AActor* GoalActor, float AcceptanceRadius, EAIOptionFlag StopOnOverlap, bool bLockAILogic, bool bUseContinuosGoalTracking)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("AITask_SVONMoveTo", "SVONAIMoveTo");

	Params::AITask_SVONMoveTo_SVONAIMoveTo Parms{};

	Parms.Controller = Controller;
	Parms.GoalLocation = std::move(GoalLocation);
	Parms.aUseAsyncPathfinding = aUseAsyncPathfinding;
	Parms.GoalActor = GoalActor;
	Parms.AcceptanceRadius = AcceptanceRadius;
	Parms.StopOnOverlap = StopOnOverlap;
	Parms.bLockAILogic = bLockAILogic;
	Parms.bUseContinuosGoalTracking = bUseContinuosGoalTracking;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UESVON.SvonNavDataRenderingComponent.CleanDataDrawing
// (Final, Native, Public)

void USvonNavDataRenderingComponent::CleanDataDrawing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SvonNavDataRenderingComponent", "CleanDataDrawing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UESVON.SvonNavDataRenderingComponent.UpdateDataDrawing
// (Final, Native, Public)

void USvonNavDataRenderingComponent::UpdateDataDrawing()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SvonNavDataRenderingComponent", "UpdateDataDrawing");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UESVON.SVONNavigationComponent.GetSVOPointsInBox
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          CenterPos                                              (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Half                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaxFindCount                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  OutPoints                                              (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)

void USVONNavigationComponent::GetSVOPointsInBox(const struct FVector& CenterPos, const float Half, const int32 MaxFindCount, TArray<struct FVector>* OutPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SVONNavigationComponent", "GetSVOPointsInBox");

	Params::SVONNavigationComponent_GetSVOPointsInBox Parms{};

	Parms.CenterPos = std::move(CenterPos);
	Parms.Half = Half;
	Parms.MaxFindCount = MaxFindCount;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPoints != nullptr)
		*OutPoints = std::move(Parms.OutPoints);
}


// Function UESVON.SVONNavigationComponent.K2_FindPathImmediate
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          StartPosition                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          TargetPosition                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<struct FVector>                  OutPathPoints                                          (Parm, OutParm, ZeroConstructor, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USVONNavigationComponent::K2_FindPathImmediate(const struct FVector& StartPosition, const struct FVector& TargetPosition, TArray<struct FVector>* OutPathPoints)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SVONNavigationComponent", "K2_FindPathImmediate");

	Params::SVONNavigationComponent_K2_FindPathImmediate Parms{};

	Parms.StartPosition = std::move(StartPosition);
	Parms.TargetPosition = std::move(TargetPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutPathPoints != nullptr)
		*OutPathPoints = std::move(Parms.OutPathPoints);

	return Parms.ReturnValue;
}


// Function UESVON.SVONNavigationComponent.K2_SetFixedIterationTime
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   FixedTimes                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USVONNavigationComponent::K2_SetFixedIterationTime(int32 FixedTimes)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SVONNavigationComponent", "K2_SetFixedIterationTime");

	Params::SVONNavigationComponent_K2_SetFixedIterationTime Parms{};

	Parms.FixedTimes = FixedTimes;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UESVON.SVONNavigationComponent.K2_UpdateVolume
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class ASVONVolume*                      OptVolume                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USVONNavigationComponent::K2_UpdateVolume(class ASVONVolume* OptVolume)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SVONNavigationComponent", "K2_UpdateVolume");

	Params::SVONNavigationComponent_K2_UpdateVolume Parms{};

	Parms.OptVolume = OptVolume;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UESVON.SVONNavigationComponent.OnMoveRequestFailed
// (Final, Native, Public)

void USVONNavigationComponent::OnMoveRequestFailed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SVONNavigationComponent", "OnMoveRequestFailed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UESVON.SVONNavigationComponent.TryCancelCurrentMoveTask
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USVONNavigationComponent::TryCancelCurrentMoveTask()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SVONNavigationComponent", "TryCancelCurrentMoveTask");

	Params::SVONNavigationComponent_TryCancelCurrentMoveTask Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UESVON.SVONNavigationComponent.IsPositionSVOBlocked
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          position                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USVONNavigationComponent::IsPositionSVOBlocked(const struct FVector& position) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SVONNavigationComponent", "IsPositionSVOBlocked");

	Params::SVONNavigationComponent_IsPositionSVOBlocked Parms{};

	Parms.position = std::move(position);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function UESVON.SVONReachableTestPoint.DrawReachPath
// (Final, Native, Public)

void ASVONReachableTestPoint::DrawReachPath()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SVONReachableTestPoint", "DrawReachPath");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UESVON.SVONReachableTestPoint.DrawReachable
// (Final, Native, Public, Const)

void ASVONReachableTestPoint::DrawReachable() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SVONReachableTestPoint", "DrawReachable");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UESVON.SVONVolume.DebugNeighbourInDirection
// (Final, Native, Public, BlueprintCallable)

void ASVONVolume::DebugNeighbourInDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SVONVolume", "DebugNeighbourInDirection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UESVON.SVONVolume.DebugSpecialLink
// (Final, Native, Public, BlueprintCallable)

void ASVONVolume::DebugSpecialLink()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SVONVolume", "DebugSpecialLink");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UESVON.SVONVolume.DebugSubNodesInDirection
// (Final, Native, Public, BlueprintCallable)

void ASVONVolume::DebugSubNodesInDirection()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SVONVolume", "DebugSubNodesInDirection");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UESVON.SVONVolume.FlushDebugDrawLines
// (Final, Native, Public, BlueprintCallable)

void ASVONVolume::FlushDebugDrawLines()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SVONVolume", "FlushDebugDrawLines");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UESVON.SVONVolume.K2_ReDrawDebug
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector                          DebugPosition                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   DebugDistance                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASVONVolume::K2_ReDrawDebug(const struct FVector& DebugPosition, const float DebugDistance)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SVONVolume", "K2_ReDrawDebug");

	Params::SVONVolume_K2_ReDrawDebug Parms{};

	Parms.DebugPosition = std::move(DebugPosition);
	Parms.DebugDistance = DebugDistance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UESVON.SVONVolume.ReDrawDebugLines_VLog
// (Final, Native, Public, BlueprintCallable)

void ASVONVolume::ReDrawDebugLines_VLog()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SVONVolume", "ReDrawDebugLines_VLog");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UESVON.SVONVolume.CleanDebugDraw
// (Final, Native, Public, BlueprintCallable, Const)

void ASVONVolume::CleanDebugDraw() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SVONVolume", "CleanDebugDraw");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UESVON.SVONVolume.DrawNodeForReachableTest
// (Final, Native, Public, BlueprintCallable, Const)
// Parameters:
// bool                                    DrawReachable                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASVONVolume::DrawNodeForReachableTest(bool DrawReachable) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SVONVolume", "DrawNodeForReachableTest");

	Params::SVONVolume_DrawNodeForReachableTest Parms{};

	Parms.DrawReachable = DrawReachable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function UESVON.SVONVolume.DrawReachableNode
// (Final, Native, Public, BlueprintCallable, Const)

void ASVONVolume::DrawReachableNode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SVONVolume", "DrawReachableNode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UESVON.SVONVolume.DrawUnreachableNode
// (Final, Native, Public, BlueprintCallable, Const)

void ASVONVolume::DrawUnreachableNode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SVONVolume", "DrawUnreachableNode");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UESVON.SVONVolume.FlushRendering
// (Final, Native, Public, Const)

void ASVONVolume::FlushRendering() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SVONVolume", "FlushRendering");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function UESVON.SVONVolume.RedoRendering
// (Final, Native, Public, Const)

void ASVONVolume::RedoRendering() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SVONVolume", "RedoRendering");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}

}

