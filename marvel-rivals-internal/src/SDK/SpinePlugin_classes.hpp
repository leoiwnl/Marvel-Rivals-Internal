#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SpinePlugin

#include "Basic.hpp"

#include "ProceduralMeshComponent_classes.hpp"
#include "SpinePlugin_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "UMG_classes.hpp"
#include "Engine_classes.hpp"
#include "SlateCore_structs.hpp"


namespace SDK
{

// Class SpinePlugin.SpineAtlasAsset
// 0x0038 (0x0068 - 0x0030)
class USpineAtlasAsset final : public UObject
{
public:
	TArray<class UTexture2D*>                     atlasPages;                                        // 0x0030(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 rawData;                                           // 0x0048(0x0010)(ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FName                                   atlasFileName;                                     // 0x0058(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineAtlasAsset">();
	}
	static class USpineAtlasAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineAtlasAsset>();
	}
};

// Class SpinePlugin.SpineBoneDriverComponent
// 0x0030 (0x04A0 - 0x0470)
class USpineBoneDriverComponent final : public USceneComponent
{
public:
	class AActor*                                 Target;                                            // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoneName;                                          // 0x0478(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseComponentTransform;                             // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePosition;                                       // 0x0489(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRotation;                                       // 0x048A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseScale;                                          // 0x048B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48C[0x14];                                     // 0x048C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BeforeUpdateWorldTransform(class USpineSkeletonComponent* Skeleton);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineBoneDriverComponent">();
	}
	static class USpineBoneDriverComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineBoneDriverComponent>();
	}
};

// Class SpinePlugin.SpineBoneFollowerComponent
// 0x0020 (0x0490 - 0x0470)
class USpineBoneFollowerComponent final : public USceneComponent
{
public:
	class AActor*                                 Target;                                            // 0x0470(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 BoneName;                                          // 0x0478(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseComponentTransform;                             // 0x0488(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UsePosition;                                       // 0x0489(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseRotation;                                       // 0x048A(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          UseScale;                                          // 0x048B(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_48C[0x4];                                      // 0x048C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineBoneFollowerComponent">();
	}
	static class USpineBoneFollowerComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineBoneFollowerComponent>();
	}
};

// Class SpinePlugin.TrackEntry
// 0x0068 (0x0098 - 0x0030)
class UTrackEntry final : public UObject
{
public:
	TMulticastInlineDelegate<void(class UTrackEntry* Entry)> animationStart;                                    // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* Entry)> AnimationInterrupt;                                // 0x0040(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* Entry, const struct FSpineEvent& evt)> AnimationEvent;                                    // 0x0050(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* Entry)> AnimationComplete;                                 // 0x0060(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* Entry)> animationEnd;                                      // 0x0070(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* Entry)> AnimationDispose;                                  // 0x0080(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_90[0x8];                                       // 0x0090(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float GetAlpha();
	float getAnimationDuration();
	float GetAnimationEnd();
	float GetAnimationLast();
	class FString getAnimationName();
	float GetAnimationStart();
	float GetAttachmentThreshold();
	float GetDelay();
	float GetDrawOrderThreshold();
	float GetEventThreshold();
	bool GetLoop();
	float GetMixDuration();
	float GetMixTime();
	float GetTimeScale();
	float GetTrackEnd();
	int32 GetTrackIndex();
	float GetTrackTime();
	float isValidAnimation();
	void SetAlpha(float Alpha);
	void SetAnimationEnd(float animationEnd_0);
	void SetAnimationLast(float animationLast);
	void SetAnimationStart(float animationStart_0);
	void SetAttachmentThreshold(float attachmentThreshold);
	void SetDelay(float Delay);
	void SetDrawOrderThreshold(float drawOrderThreshold);
	void SetEventThreshold(float eventThreshold);
	void SetLoop(bool Loop);
	void SetMixDuration(float mixDuration);
	void SetMixTime(float mixTime);
	void SetTimeScale(float TimeScale);
	void SetTrackEnd(float trackEnd);
	void SetTrackTime(float trackTime);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"TrackEntry">();
	}
	static class UTrackEntry* GetDefaultObj()
	{
		return GetDefaultObjImpl<UTrackEntry>();
	}
};

// Class SpinePlugin.SpineSkeletonComponent
// 0x0060 (0x0150 - 0x00F0)
class USpineSkeletonComponent : public UActorComponent
{
public:
	class USpineAtlasAsset*                       Atlas;                                             // 0x00F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpineSkeletonDataAsset*                SkeletonData;                                      // 0x00F8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class USpineSkeletonComponent* Skeleton)> BeforeUpdateWorldTransform;                        // 0x0100(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class USpineSkeletonComponent* Skeleton)> AfterUpdateWorldTransform;                         // 0x0110(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_120[0x30];                                     // 0x0120(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	float getAnimationDuration(const class FString& AnimationName);
	void GetAnimations(TArray<class FString>* Animations);
	void GetBones(TArray<class FString>* Bones);
	struct FTransform GetBoneWorldTransform(const class FString& BoneName);
	float GetScaleX();
	float GetScaleY();
	void GetSkins(TArray<class FString>* skins);
	void GetSlots(TArray<class FString>* Slots);
	bool HasAnimation(const class FString& AnimationName);
	bool HasBone(const class FString& BoneName);
	bool HasSkin(const class FString& SkinName);
	bool HasSlot(const class FString& SlotName);
	bool SetAttachment(const class FString& SlotName, const class FString& attachmentName);
	void SetBonesToSetupPose();
	void SetBoneWorldPosition(const class FString& BoneName, const struct FVector& position);
	void SetScaleX(float ScaleX);
	void SetScaleY(float ScaleY);
	bool SetSkin(const class FString& SkinName);
	bool SetSkins(TArray<class FString>& SkinNames);
	void SetSlotColor(const class FString& SlotName, const struct FColor& Color);
	void SetSlotsToSetupPose();
	void SetToSetupPose();
	void UpdateWorldTransform();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineSkeletonComponent">();
	}
	static class USpineSkeletonComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineSkeletonComponent>();
	}
};

// Class SpinePlugin.SpineSkeletonAnimationComponent
// 0x0108 (0x0258 - 0x0150)
class USpineSkeletonAnimationComponent final : public USpineSkeletonComponent
{
public:
	TMulticastInlineDelegate<void(class UTrackEntry* Entry)> animationStart;                                    // 0x0150(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* Entry)> AnimationInterrupt;                                // 0x0160(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* Entry, const struct FSpineEvent& evt)> AnimationEvent;                                    // 0x0170(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* Entry)> AnimationComplete;                                 // 0x0180(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* Entry)> animationEnd;                                      // 0x0190(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* Entry)> AnimationDispose;                                  // 0x01A0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	class FString                                 PreviewAnimation;                                  // 0x01B0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 PreviewSkin;                                       // 0x01C0(0x0010)(Edit, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D0[0x8];                                      // 0x01D0(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UTrackEntry*>                      trackEntries;                                      // 0x01D8(0x0050)(Protected, NativeAccessSpecifierProtected)
	bool                                          bAutoPlaying;                                      // 0x0228(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_229[0x2F];                                     // 0x0229(0x002F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UTrackEntry* AddAnimation(int32 TrackIndex, const class FString& AnimationName, bool Loop, float Delay);
	class UTrackEntry* AddEmptyAnimation(int32 TrackIndex, float mixDuration, float Delay);
	void ClearTrack(int32 TrackIndex);
	void ClearTracks();
	class UTrackEntry* GetCurrent(int32 TrackIndex);
	float GetTimeScale();
	class UTrackEntry* SetAnimation(int32 TrackIndex, const class FString& AnimationName, bool Loop);
	void SetAutoPlay(bool bInAutoPlays);
	class UTrackEntry* SetEmptyAnimation(int32 TrackIndex, float mixDuration);
	void SetPlaybackTime(float InPlaybackTime, bool bCallDelegates);
	void SetTimeScale(float TimeScale);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineSkeletonAnimationComponent">();
	}
	static class USpineSkeletonAnimationComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineSkeletonAnimationComponent>();
	}
};

// Class SpinePlugin.SpineSkeletonDataAsset
// 0x00D8 (0x0108 - 0x0030)
class USpineSkeletonDataAsset final : public UObject
{
public:
	float                                         DefaultMix;                                        // 0x0030(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FSpineAnimationStateMixData>    MixData;                                           // 0x0038(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	TArray<class FString>                         Bones;                                             // 0x0048(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         Slots;                                             // 0x0058(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         skins;                                             // 0x0068(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         Animations;                                        // 0x0078(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<class FString>                         Events;                                            // 0x0088(0x0010)(Edit, ZeroConstructor, Transient, EditConst, NativeAccessSpecifierPublic)
	TArray<uint8>                                 rawData;                                           // 0x0098(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	class FName                                   skeletonDataFileName;                              // 0x00A8(0x000C)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_B4[0x54];                                      // 0x00B4(0x0054)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineSkeletonDataAsset">();
	}
	static class USpineSkeletonDataAsset* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineSkeletonDataAsset>();
	}
};

// Class SpinePlugin.SpineSkeletonRendererComponent
// 0x03C0 (0x0CF0 - 0x0930)
class USpineSkeletonRendererComponent final : public UProceduralMeshComponent
{
public:
	class UMaterialInterface*                     NormalBlendMaterial;                               // 0x0930(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     AdditiveBlendMaterial;                             // 0x0938(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MultiplyBlendMaterial;                             // 0x0940(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ScreenBlendMaterial;                               // 0x0948(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class UMaterialInstanceDynamic*>       atlasNormalBlendMaterials;                         // 0x0950(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_960[0x50];                                     // 0x0960(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       atlasAdditiveBlendMaterials;                       // 0x09B0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_9C0[0x50];                                     // 0x09C0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       atlasMultiplyBlendMaterials;                       // 0x0A10(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A20[0x50];                                     // 0x0A20(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       atlasScreenBlendMaterials;                         // 0x0A70(0x0010)(Edit, BlueprintVisible, ZeroConstructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_A80[0x50];                                     // 0x0A80(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         DepthOffset;                                       // 0x0AD0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextureParameterName;                              // 0x0AD4(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0AE0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCreateCollision;                                  // 0x0AF0(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_AF1[0x1FF];                                    // 0x0AF1(0x01FF)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineSkeletonRendererComponent">();
	}
	static class USpineSkeletonRendererComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineSkeletonRendererComponent>();
	}
};

// Class SpinePlugin.SpineWidget
// 0x05C8 (0x0780 - 0x01B8)
class USpineWidget final : public UWidget
{
public:
	class FString                                 InitialSkin;                                       // 0x01B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpineAtlasAsset*                       Atlas;                                             // 0x01C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USpineSkeletonDataAsset*                SkeletonData;                                      // 0x01D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     NormalBlendMaterial;                               // 0x01D8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     AdditiveBlendMaterial;                             // 0x01E0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     MultiplyBlendMaterial;                             // 0x01E8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UMaterialInterface*                     ScreenBlendMaterial;                               // 0x01F0(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   TextureParameterName;                              // 0x01F8(0x000C)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DepthOffset;                                       // 0x0204(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FLinearColor                           Color;                                             // 0x0208(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_218[0x8];                                      // 0x0218(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateBrush                            Brush;                                             // 0x0220(0x00D0)(Edit, BlueprintVisible, BlueprintReadOnly, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class USpineWidget* Skeleton)> BeforeUpdateWorldTransform;                        // 0x02F0(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class USpineWidget* Skeleton)> AfterUpdateWorldTransform;                         // 0x0300(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* Entry)> animationStart;                                    // 0x0310(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* Entry)> AnimationInterrupt;                                // 0x0320(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* Entry, const struct FSpineEvent& evt)> AnimationEvent;                                    // 0x0330(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* Entry)> AnimationComplete;                                 // 0x0340(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* Entry)> animationEnd;                                      // 0x0350(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	TMulticastInlineDelegate<void(class UTrackEntry* Entry)> AnimationDispose;                                  // 0x0360(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_370[0x40];                                     // 0x0370(0x0040)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       atlasNormalBlendMaterials;                         // 0x03B0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C0[0x50];                                     // 0x03C0(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       atlasAdditiveBlendMaterials;                       // 0x0410(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_420[0x50];                                     // 0x0420(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       atlasMultiplyBlendMaterials;                       // 0x0470(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_480[0x50];                                     // 0x0480(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UMaterialInstanceDynamic*>       atlasScreenBlendMaterials;                         // 0x04D0(0x0010)(ZeroConstructor, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_4E0[0x240];                                    // 0x04E0(0x0240)(Fixing Size After Last Property [ Dumper-7 ])
	TSet<class UTrackEntry*>                      trackEntries;                                      // 0x0720(0x0050)(Protected, NativeAccessSpecifierProtected)
	bool                                          bAutoPlaying;                                      // 0x0770(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_771[0xF];                                      // 0x0771(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	class UTrackEntry* AddAnimation(int32 TrackIndex, const class FString& AnimationName, bool Loop, float Delay);
	class UTrackEntry* AddEmptyAnimation(int32 TrackIndex, float mixDuration, float Delay);
	void CheckState();
	void ClearTrack(int32 TrackIndex);
	void ClearTracks();
	void DisposeState();
	float getAnimationDuration(const class FString& AnimationName);
	void GetAnimations(TArray<class FString>* Animations);
	void GetBones(TArray<class FString>* Bones);
	class UTrackEntry* GetCurrent(int32 TrackIndex);
	float GetScaleX();
	float GetScaleY();
	void GetSkins(TArray<class FString>* skins);
	void GetSlots(TArray<class FString>* Slots);
	float GetTimeScale();
	bool HasAnimation(const class FString& AnimationName);
	bool HasBone(const class FString& BoneName);
	bool HasSkin(const class FString& SkinName);
	bool HasSlot(const class FString& SlotName);
	class UTrackEntry* SetAnimation(int32 TrackIndex, const class FString& AnimationName, bool Loop);
	bool SetAttachment(const class FString& SlotName, const class FString& attachmentName);
	void SetAutoPlay(bool bInAutoPlays);
	void SetBonesToSetupPose();
	class UTrackEntry* SetEmptyAnimation(int32 TrackIndex, float mixDuration);
	void SetPlaybackTime(float InPlaybackTime, bool bCallDelegates);
	void SetScaleX(float ScaleX);
	void SetScaleY(float ScaleY);
	bool SetSkin(const class FString& SkinName);
	bool SetSkins(TArray<class FString>& SkinNames);
	void SetSlotsToSetupPose();
	void SetTimeScale(float TimeScale);
	void SetToSetupPose();
	void Tick(float DeltaTime, bool CallDelegates);
	void UpdateWorldTransform();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SpineWidget">();
	}
	static class USpineWidget* GetDefaultObj()
	{
		return GetDefaultObjImpl<USpineWidget>();
	}
};

}

